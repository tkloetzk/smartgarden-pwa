// src/__tests__/integration/plantDetailPartialWatering.test.tsx
import { render, screen, waitFor } from "@testing-library/react";
import { PlantDetail } from "@/pages/plants/PlantDetail";
import { CareSchedulingService } from "@/services/careSchedulingService";
import { useFirebasePlants } from "@/hooks/useFirebasePlants";
import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
import { createMockPlantWithVariety } from "@/__tests__/utils/testDataFactories";
import { BrowserRouter } from "react-router-dom";
import { subDays } from "date-fns";

// Mock react-router-dom to provide plant ID
jest.mock("react-router-dom", () => ({
  ...jest.requireActual("react-router-dom"),
  useParams: () => ({ plantId: "carrot-plant-1" }),
  useNavigate: () => jest.fn(),
}));

// Mock the hooks and services
jest.mock("@/hooks/useFirebasePlants");
jest.mock("@/hooks/useFirebaseAuth");
jest.mock("@/hooks/useFirebaseCareActivities");
jest.mock("@/services/careSchedulingService");

const mockUseFirebasePlants = useFirebasePlants as jest.MockedFunction<typeof useFirebasePlants>;
const mockUseFirebaseAuth = useFirebaseAuth as jest.MockedFunction<typeof useFirebaseAuth>;
const mockUseFirebaseCareActivities = useFirebaseCareActivities as jest.MockedFunction<typeof useFirebaseCareActivities>;
const mockCareSchedulingService = CareSchedulingService as jest.Mocked<typeof CareSchedulingService>;

describe("Plant Detail Page - Next Activity with Partial Watering", () => {
  const mockUser = { 
    uid: "test-user-123", 
    email: "test@example.com",
    emailVerified: false,
    isAnonymous: false,
    metadata: {} as any,
    providerData: [],
    refreshToken: "",
    tenantId: null,
    delete: jest.fn(),
    getIdToken: jest.fn(),
    getIdTokenResult: jest.fn(),
    reload: jest.fn(),
    toJSON: jest.fn(),
    displayName: null,
    phoneNumber: null,
    photoURL: null,
    providerId: "firebase",
  } as any;
  
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock Firebase Auth
    mockUseFirebaseAuth.mockReturnValue({
      user: mockUser,
      signOut: jest.fn(),
      loading: false,
    });

    // Mock Firebase Care Activities
    mockUseFirebaseCareActivities.mockReturnValue({
      activities: [],
      loading: false,
      logActivity: jest.fn(),
    });
  });

  describe("Little Finger Carrots Partial Watering - Next Activity", () => {
    it("should show next watering task when 7oz was insufficient (61 days old)", async () => {
      // Create a 61-day-old Little Finger Carrots plant
      const plantedDate = subDays(new Date(), 61);
      const littleFingerCarrots = createMockPlantWithVariety("Little Finger Carrots", {
        plantedDate,
        id: "carrot-plant-1",
        varietyName: "Little Finger Carrots",
        name: "My Little Finger Carrots",
      });

      // Mock plants data
      mockUseFirebasePlants.mockReturnValue({
        plants: [littleFingerCarrots],
        loading: false,
        error: null,
        createPlant: jest.fn(),
        updatePlant: jest.fn(),
        deletePlant: jest.fn(),
      });

      // Mock care scheduling service to return water task for this specific plant
      const mockWaterTask = {
        id: "water-carrot-plant-1",
        plantId: "carrot-plant-1", 
        plantName: "My Little Finger Carrots",
        task: "Check water level",
        type: "water" as const,
        dueIn: "due today",
        priority: "urgent" as const,
        plantStage: "rootDevelopment" as const,
        dueDate: new Date(),
        category: "watering" as const,
        canBypass: true,
      };

      mockCareSchedulingService.getNextTaskForPlant.mockResolvedValue(mockWaterTask as any);

      // Render plant detail page
      render(
        <BrowserRouter>
          <PlantDetail />
        </BrowserRouter>
      );

      // Wait for plant data to load
      await waitFor(() => {
        expect(screen.getByText("My Little Finger Carrots")).toBeInTheDocument();
      });

      // Wait for next task to be fetched
      await waitFor(() => {
        expect(mockCareSchedulingService.getNextTaskForPlant).toHaveBeenCalledWith("carrot-plant-1");
      });

      // Check that next activity shows water task
      await waitFor(() => {
        // Should show the water task
        const waterTask = screen.getByText("Check water level");
        expect(waterTask).toBeInTheDocument();
        
        // Should show it's due (urgent priority)
        const dueText = screen.getByText("due today");
        expect(dueText).toBeInTheDocument();
      });

      // Verify it's not showing "No upcoming tasks" or "All caught up"
      expect(screen.queryByText("No upcoming tasks")).not.toBeInTheDocument();
      expect(screen.queryByText("All caught up")).not.toBeInTheDocument();
    });

    it("should show 'No upcoming tasks' when plant is fully watered", async () => {
      const plant = createMockPlantWithVariety("Little Finger Carrots", {
        plantedDate: subDays(new Date(), 61),
        id: "carrot-plant-1",
        varietyName: "Little Finger Carrots",
        name: "My Little Finger Carrots",
      });

      mockUseFirebasePlants.mockReturnValue({
        plants: [plant],
        loading: false,
      });

      // Mock no next task (plant is caught up)
      mockCareSchedulingService.getNextTaskForPlant.mockResolvedValue(null);

      render(
        <BrowserRouter>
          <PlantDetail />
        </BrowserRouter>
      );

      await waitFor(() => {
        expect(screen.getByText("My Little Finger Carrots")).toBeInTheDocument();
      });

      await waitFor(() => {
        expect(mockCareSchedulingService.getNextTaskForPlant).toHaveBeenCalledWith("carrot-plant-1");
      });

      // Should show no upcoming tasks when fully watered
      await waitFor(() => {
        const noTasksText = screen.getByText(/no upcoming tasks|all caught up/i);
        expect(noTasksText).toBeInTheDocument();
      });
    });

    it("should show different priority levels for partial watering", async () => {
      const plant = createMockPlantWithVariety("Little Finger Carrots", {
        plantedDate: subDays(new Date(), 61),
        id: "carrot-plant-1",
        varietyName: "Little Finger Carrots", 
        name: "My Little Finger Carrots",
      });

      mockUseFirebasePlants.mockReturnValue({
        plants: [plant],
        loading: false,
      });

      // Mock overdue water task (very urgent)
      const overdueWaterTask = {
        id: "water-carrot-plant-1",
        plantId: "carrot-plant-1",
        plantName: "My Little Finger Carrots",
        task: "Check water level",
        type: "water" as const,
        dueIn: "2 days overdue",
        priority: "overdue" as const,
        plantStage: "rootDevelopment" as const,
        dueDate: subDays(new Date(), 2),
        category: "watering" as const,
        canBypass: true,
      };

      mockCareSchedulingService.getNextTaskForPlant.mockResolvedValue(overdueWaterTask);

      render(
        <BrowserRouter>
          <PlantDetail />
        </BrowserRouter>
      );

      await waitFor(() => {
        expect(mockCareSchedulingService.getNextTaskForPlant).toHaveBeenCalledWith("carrot-plant-1");
      });

      // Should show overdue status
      await waitFor(() => {
        const overdueText = screen.getByText("2 days overdue");
        expect(overdueText).toBeInTheDocument();
        
        const waterTask = screen.getByText("Check water level");
        expect(waterTask).toBeInTheDocument();
      });
    });

    it("should handle different growth stages correctly", async () => {
      // Test with younger plant (should need less water)
      const youngPlant = createMockPlantWithVariety("Little Finger Carrots", {
        plantedDate: subDays(new Date(), 30), // 30 days = vegetative stage
        id: "carrot-plant-1",
        varietyName: "Little Finger Carrots",
        name: "Young Carrots",
      });

      mockUseFirebasePlants.mockReturnValue({
        plants: [youngPlant],
        loading: false,
      });

      const vegetativeWaterTask = {
        id: "water-carrot-plant-1",
        plantId: "carrot-plant-1",
        plantName: "Young Carrots",
        task: "Check water level",
        type: "water" as const,
        dueIn: "due tomorrow",
        priority: "medium" as const,
        plantStage: "vegetative" as const,
        dueDate: new Date(),
        category: "watering" as const,
        canBypass: true,
      };

      mockCareSchedulingService.getNextTaskForPlant.mockResolvedValue(vegetativeWaterTask);

      render(
        <BrowserRouter>
          <PlantDetail />
        </BrowserRouter>
      );

      await waitFor(() => {
        expect(mockCareSchedulingService.getNextTaskForPlant).toHaveBeenCalledWith("carrot-plant-1");
      });

      // Should show the task for vegetative stage
      await waitFor(() => {
        const waterTask = screen.getByText("Check water level");
        expect(waterTask).toBeInTheDocument();
        
        const dueText = screen.getByText("due tomorrow");
        expect(dueText).toBeInTheDocument();
      });
    });
  });

  describe("Next Activity Edge Cases", () => {
    it("should handle service errors gracefully", async () => {
      const plant = createMockPlantWithVariety("Little Finger Carrots", {
        plantedDate: subDays(new Date(), 61),
        id: "carrot-plant-1",
        varietyName: "Little Finger Carrots",
        name: "My Little Finger Carrots",
      });

      mockUseFirebasePlants.mockReturnValue({
        plants: [plant],
        loading: false,
      });

      // Mock service error
      mockCareSchedulingService.getNextTaskForPlant.mockRejectedValue(
        new Error("Service unavailable")
      );

      render(
        <BrowserRouter>
          <PlantDetail />
        </BrowserRouter>
      );

      await waitFor(() => {
        expect(screen.getByText("My Little Finger Carrots")).toBeInTheDocument();
      });

      // Should show some kind of error state or fallback
      // (The exact implementation may vary, but it shouldn't crash)
      await waitFor(() => {
        expect(mockCareSchedulingService.getNextTaskForPlant).toHaveBeenCalled();
      });
    });

    it("should handle plant not found scenario", async () => {
      // Mock empty plants array (plant not found)
      mockUseFirebasePlants.mockReturnValue({
        plants: [],
        loading: false,
        error: null,
        createPlant: jest.fn(),
        updatePlant: jest.fn(),
        deletePlant: jest.fn(),
      });

      render(
        <BrowserRouter>
          <PlantDetail />
        </BrowserRouter>
      );

      // Should handle missing plant gracefully
      await waitFor(() => {
        // Should show some kind of "plant not found" message or redirect
        // The exact implementation will depend on how the component handles this
        expect(mockCareSchedulingService.getNextTaskForPlant).not.toHaveBeenCalled();
      });
    });
  });
});