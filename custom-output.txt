This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: logs, *.log, npm-debug.log*, yarn-debug.log*, yarn-error.log*, pnpm-debug.log*, lerna-debug.log*, .cache/, .parcel-cache/, node_modules, dist, dist-ssr, *.local, .vscode/*, *.suo, *.ntvs*, *.njsproj, *.sln, *.sw?, ._*, .Spotlight-V100, .Trashes, ehthumbs.db, Thumbs.db, .vscode/, .idea/, .env.local, .env.development.local, .env.test.local, .env.production.local, *.tmp, *.temp
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
public/
  vite.svg
scripts/
  lighthouse-ci.js
src/
  __tests__/
    components/
      CareLogForm.test.tsx
      Dashboard.test.tsx
      LogCare.test.tsx
      PlantRegistrationForm.test.tsx
      PlantReminderSettings.test.tsx
      PlantStageDisplay.test.tsx
      ReminderPreferencesSection.test.tsx
      SoilMixtureSelector.test.tsx
    database/
      integration.test.ts
      plantService.test.ts
      varietyService.test.ts
    integration/
      plantDetailReminderSettings.test.tsx
      smartDefaultsIntegration.test.tsx
      stageCalculationDisplay.test.tsx
    services/
      careSchedulingService.test.ts
      growthStageService.test.ts
      smartDefaultsService.test.ts
    utils/
      growthStage.test.ts
      plantDisplay.test.ts
      varietyGrowthStages.test.ts
  assets/
    react.svg
  components/
    layouts/
      EmptyState.tsx
      Welcome.tsx
    plant/
      CareActivityItem.tsx
      CareHistory.tsx
      CustomVarietyForm.tsx
      NextTaskDisplay.tsx
      PlantRegistrationForm.tsx
      PlantReminderSettings.tsx
      PlantStageDisplay.tsx
      ReminderPreferencesSection.tsx
      SoilMixtureSelector.tsx
    ui/
      Button.tsx
      Card.tsx
      DarkModeToggle.tsx
      LoadingSpinner.tsx
      LocationToggle.tsx
      OfflineIndicator.tsx
      StatusBadge.tsx
      Switch.tsx
    Navigation.tsx
  data/
    seedVarieties.ts
  db/
    schema.ts
    seedData.ts
  hooks/
    useAppInitialization.ts
    useDarkMode.ts
    useDynamicStage.ts
    useFirstTimeUser.ts
    useNextPlantTask.ts
  pages/
    care/
      CareLogForm.tsx
      LogCare.tsx
      PhotoCapture.tsx
      QuickCompletionButtons.tsx
    dashboard/
      index.tsx
      TaskItem.tsx
    plants/
      AddPlant.tsx
      PlantDetail.tsx
      Plants.tsx
  services/
    sync/
      syncService.ts
    careSchedulingService.ts
    growthStageService.ts
    smartDefaultsService.ts
  styles/
    globals.css
  types/
    core.ts
    database.ts
    index.ts
    scheduling.ts
    user.ts
  utils/
    cn.ts
    dateUtils.ts
    growthStage.ts
    plantDisplay.ts
    waterConversion.ts
  App.css
  App.tsx
  index.css
  jest.polyfills.ts
  main.tsx
  setupTests.ts
  vite-env.d.ts
tests/
  e2e/
    pwa-functionality.spec.ts
.gitignore
eslint.config.js
index.html
jest.config.ts
package.json
postcss.config.js
print_structure.py
README.md
repomix.config.json
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
tsconfig.tsbuildinfo
vite.config.ts

================================================================
Files
================================================================

================
File: public/vite.svg
================
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: scripts/lighthouse-ci.js
================
 1: const lighthouse = require("lighthouse");
 2: const chromeLauncher = require("chrome-launcher");
 3: 
 4: async function runLighthouse() {
 5:   const chrome = await chromeLauncher.launch({ chromeFlags: ["--headless"] });
 6: 
 7:   const options = {
 8:     logLevel: "info",
 9:     output: "html",
10:     onlyCategories: ["performance", "pwa", "accessibility"],
11:     port: chrome.port,
12:   };
13: 
14:   const runnerResult = await lighthouse("http://localhost:3000", options);
15: 
16: 
17:   const { performance, pwa, accessibility } = runnerResult.lhr.categories;
18: 
19:   console.log("Lighthouse Scores:");
20:   console.log(`Performance: ${Math.round(performance.score * 100)}`);
21:   console.log(`PWA: ${Math.round(pwa.score * 100)}`);
22:   console.log(`Accessibility: ${Math.round(accessibility.score * 100)}`);
23: 
24: 
25:   if (performance.score < 0.9 || pwa.score < 0.9 || accessibility.score < 0.9) {
26:     process.exit(1);
27:   }
28: 
29:   await chrome.kill();
30: }
31: 
32: runLighthouse().catch(console.error);

================
File: src/__tests__/components/CareLogForm.test.tsx
================
  1: import { describe, it, expect, beforeEach } from "@jest/globals";
  2: import { render, screen, waitFor } from "@testing-library/react";
  3: import userEvent from "@testing-library/user-event";
  4: import { CareLogForm } from "@/pages/care/CareLogForm";
  5: import { initializeDatabase } from "@/db/seedData";
  6: import { plantService } from "@/types/database";
  7: 
  8: describe("CareLogForm Pre-Selection", () => {
  9:   beforeEach(async () => {
 10:     await initializeDatabase();
 11: 
 12:     const { db } = await import("@/types/database");
 13:     await db.plants.clear();
 14:   });
 15: 
 16:   it("pre-selects plant when preselectedPlantId is provided", async () => {
 17: 
 18:     const testPlantId = await plantService.addPlant({
 19:       varietyId: "test-variety-1",
 20:       varietyName: "Test Plant",
 21:       name: "My Test Plant",
 22:       plantedDate: new Date(),
 23:       location: "Test Location",
 24:       container: "Container 1",
 25:       currentStage: "vegetative",
 26:       isActive: true,
 27:     });
 28: 
 29:     const mockOnSuccess = jest.fn();
 30: 
 31:     render(
 32:       <CareLogForm onSuccess={mockOnSuccess} preselectedPlantId={testPlantId} />
 33:     );
 34: 
 35: 
 36:     await waitFor(() => {
 37:       const plantSelect = screen.getByLabelText(/Plant/i);
 38:       expect(plantSelect).toBeInTheDocument();
 39:     });
 40: 
 41: 
 42:     await waitFor(() => {
 43:       const option = screen.getByText("My Test Plant - Test Location");
 44:       expect(option).toBeInTheDocument();
 45:     });
 46: 
 47: 
 48:     await waitFor(() => {
 49:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
 50:       expect(plantSelect.value).toBe(testPlantId);
 51:     });
 52:   });
 53: 
 54:   it("shows normal plant selection when no preselectedPlantId is provided", async () => {
 55:     const mockOnSuccess = jest.fn();
 56: 
 57:     render(<CareLogForm onSuccess={mockOnSuccess} />);
 58: 
 59: 
 60:     await waitFor(() => {
 61:       const defaultOption = screen.getByText("Select a plant...");
 62:       expect(defaultOption).toBeInTheDocument();
 63:     });
 64: 
 65: 
 66:     const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
 67:     expect(plantSelect.value).toBe("");
 68:   });
 69: 
 70:   it("allows user to change pre-selected plant", async () => {
 71: 
 72:     const plant1Id = await plantService.addPlant({
 73:       varietyId: "test-variety-1",
 74:       varietyName: "Plant One",
 75:       name: "Plant One",
 76:       plantedDate: new Date(),
 77:       location: "Location 1",
 78:       container: "Container 1",
 79:       currentStage: "vegetative",
 80:       isActive: true,
 81:     });
 82: 
 83:     const plant2Id = await plantService.addPlant({
 84:       varietyId: "test-variety-2",
 85:       varietyName: "Plant Two",
 86:       name: "Plant Two",
 87:       plantedDate: new Date(),
 88:       location: "Location 2",
 89:       container: "Container 2",
 90:       currentStage: "vegetative",
 91:       isActive: true,
 92:     });
 93: 
 94:     const mockOnSuccess = jest.fn();
 95:     const user = userEvent.setup();
 96: 
 97:     render(
 98:       <CareLogForm onSuccess={mockOnSuccess} preselectedPlantId={plant1Id} />
 99:     );
100: 
101: 
102:     await waitFor(() => {
103:       expect(screen.getByText("Plant One - Location 1")).toBeInTheDocument();
104:       expect(screen.getByText("Plant Two - Location 2")).toBeInTheDocument();
105:     });
106: 
107: 
108:     await waitFor(() => {
109:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
110:       expect(plantSelect.value).toBe(plant1Id);
111:     });
112: 
113: 
114:     const plantSelect = screen.getByLabelText(/Plant/i);
115:     await user.selectOptions(plantSelect, plant2Id);
116: 
117: 
118:     expect((plantSelect as HTMLSelectElement).value).toBe(plant2Id);
119:   });
120: 
121:   it("renders form with basic activity fields", async () => {
122:     const mockOnSuccess = jest.fn();
123: 
124:     render(<CareLogForm onSuccess={mockOnSuccess} />);
125: 
126: 
127:     await waitFor(() => {
128:       expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
129:       expect(screen.getByLabelText(/Plant/i)).toBeInTheDocument();
130:       expect(screen.getByLabelText(/Activity Type/i)).toBeInTheDocument();
131:       expect(screen.getByLabelText(/Date/i)).toBeInTheDocument();
132:     });
133: 
134: 
135:     expect(screen.getByText("💧 Watering")).toBeInTheDocument();
136:     expect(screen.getByText("🌱 Fertilizing")).toBeInTheDocument();
137:     expect(screen.getByText("👁️ Observation")).toBeInTheDocument();
138:   });
139: 
140:   it("shows watering fields when water activity is selected", async () => {
141:     const mockOnSuccess = jest.fn();
142: 
143:     render(<CareLogForm onSuccess={mockOnSuccess} />);
144: 
145: 
146:     await waitFor(() => {
147:       expect(screen.getByText("Water Amount *")).toBeInTheDocument();
148:     });
149: 
150: 
151:     expect(screen.getByPlaceholderText("Amount")).toBeInTheDocument();
152: 
153: 
154:     expect(screen.getByText("oz")).toBeInTheDocument();
155:     expect(screen.getByText("ml")).toBeInTheDocument();
156:     expect(screen.getByText("cups")).toBeInTheDocument();
157:   });
158: 
159:   it("displays proper plant formatting in dropdown options", async () => {
160: 
161:     await plantService.addPlant({
162:       varietyId: "test-variety",
163:       varietyName: "Cherry Tomato",
164:       name: "My Cherry Plant",
165:       plantedDate: new Date(),
166:       location: "Window Sill",
167:       container: "5 gallon pot",
168:       currentStage: "flowering",
169:       isActive: true,
170:     });
171: 
172:     const mockOnSuccess = jest.fn();
173: 
174:     render(<CareLogForm onSuccess={mockOnSuccess} />);
175: 
176: 
177:     await waitFor(() => {
178: 
179:       const expectedText = "My Cherry Plant - Window Sill";
180:       expect(screen.getByText(expectedText)).toBeInTheDocument();
181:     });
182:   });
183: 
184:   it("handles plant without custom name correctly", async () => {
185: 
186:     await plantService.addPlant({
187:       varietyId: "test-variety",
188:       varietyName: "Roma Tomato",
189: 
190:       plantedDate: new Date(),
191:       location: "Greenhouse",
192:       container: "3 gallon pot",
193:       currentStage: "fruiting",
194:       isActive: true,
195:     });
196: 
197:     const mockOnSuccess = jest.fn();
198: 
199:     render(<CareLogForm onSuccess={mockOnSuccess} />);
200: 
201: 
202:     await waitFor(() => {
203: 
204:       const expectedText = "Roma Tomato - Greenhouse";
205:       expect(screen.getByText(expectedText)).toBeInTheDocument();
206:     });
207:   });
208: });

================
File: src/__tests__/components/LogCare.test.tsx
================
 1: import { describe, it, expect, beforeEach } from "@jest/globals";
 2: import { render, screen } from "@testing-library/react";
 3: import { MemoryRouter } from "react-router-dom";
 4: import LogCare from "../../pages/care/LogCare";
 5: import { initializeDatabase } from "@/db/seedData";
 6: 
 7: 
 8: jest.mock("@/pages/care/CareLogForm", () => ({
 9:   CareLogForm: ({ preselectedPlantId }: { preselectedPlantId?: string }) => (
10:     <div data-testid="care-log-form">
11:       {preselectedPlantId && (
12:         <div data-testid="pre-selected-plant-id">{preselectedPlantId}</div>
13:       )}
14:     </div>
15:   ),
16: }));
17: 
18: describe("LogCare", () => {
19:   beforeEach(async () => {
20:     await initializeDatabase();
21:   });
22: 
23:   it("renders without a pre-selected plant", () => {
24:     render(
25:       <MemoryRouter initialEntries={["/log-care"]}>
26:         <LogCare />
27:       </MemoryRouter>
28:     );
29: 
30:     expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
31:     expect(screen.getByTestId("care-log-form")).toBeInTheDocument();
32:     expect(
33:       screen.queryByTestId("pre-selected-plant-id")
34:     ).not.toBeInTheDocument();
35:   });
36: 
37:   it("passes pre-selected plant ID from URL params to CareLogForm", () => {
38:     const testPlantId = "test-plant-123";
39: 
40:     render(
41:       <MemoryRouter initialEntries={[`/log-care?plantId=${testPlantId}`]}>
42:         <LogCare />
43:       </MemoryRouter>
44:     );
45: 
46:     expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
47:     expect(screen.getByTestId("care-log-form")).toBeInTheDocument();
48:     expect(screen.getByTestId("pre-selected-plant-id")).toHaveTextContent(
49:       testPlantId
50:     );
51:   });
52: });

================
File: src/__tests__/components/PlantReminderSettings.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import PlantReminderSettings from "@/components/plant/PlantReminderSettings";
  4: import { plantService } from "@/types/database";
  5: import toast from "react-hot-toast";
  6: 
  7: 
  8: jest.mock("@/types/database", () => ({
  9:   plantService: {
 10:     updatePlant: jest.fn(),
 11:   },
 12: }));
 13: 
 14: jest.mock("react-hot-toast", () => ({
 15:   __esModule: true,
 16:   default: {
 17:     success: jest.fn(),
 18:     error: jest.fn(),
 19:   },
 20: }));
 21: 
 22: jest.mock("@/components/plant/ReminderPreferencesSection", () => ({
 23:   __esModule: true,
 24: 
 25:   default: ({ preferences, onChange }: any) => (
 26:     <div data-testid="reminder-preferences-section">
 27:       <button
 28:         data-testid="toggle-watering"
 29:         onClick={() =>
 30:           onChange({ ...preferences, watering: !preferences.watering })
 31:         }
 32:       >
 33:         Toggle Watering: {preferences.watering ? "ON" : "OFF"}
 34:       </button>
 35:     </div>
 36:   ),
 37: }));
 38: 
 39: const mockPlantService = plantService as jest.Mocked<typeof plantService>;
 40: const mockToast = toast as jest.Mocked<typeof toast>;
 41: 
 42: describe("PlantReminderSettings", () => {
 43:   const mockPlant = {
 44:     id: "test-plant-1",
 45:     varietyId: "tomato-1",
 46:     varietyName: "Roma Tomato",
 47:     name: "My Tomato",
 48:     plantedDate: new Date("2024-01-01"),
 49:     currentStage: "vegetative" as const,
 50:     location: "Indoor",
 51:     container: "5 gallon pot",
 52:     isActive: true,
 53:     notes: [],
 54:     createdAt: new Date(),
 55:     updatedAt: new Date(),
 56:     reminderPreferences: {
 57:       watering: true,
 58:       fertilizing: true,
 59:       observation: false,
 60:       lighting: true,
 61:       pruning: false,
 62:     },
 63:   };
 64: 
 65:   const mockOnUpdate = jest.fn();
 66: 
 67:   beforeEach(() => {
 68:     jest.clearAllMocks();
 69:     mockPlantService.updatePlant.mockResolvedValue(undefined);
 70:   });
 71: 
 72:   it("renders with current plant preferences", () => {
 73:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 74: 
 75:     expect(
 76:       screen.getByTestId("reminder-preferences-section")
 77:     ).toBeInTheDocument();
 78:     expect(screen.getByText("Toggle Watering: ON")).toBeInTheDocument();
 79:   });
 80: 
 81:   it("shows 'No Changes' button when preferences haven't changed", () => {
 82:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 83: 
 84:     const saveButton = screen.getByRole("button", { name: /no changes/i });
 85:     expect(saveButton).toBeDisabled();
 86:   });
 87: 
 88:   it("shows 'Save Changes' button when preferences change", async () => {
 89:     const user = userEvent.setup();
 90: 
 91:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 92: 
 93: 
 94:     const toggleButton = screen.getByTestId("toggle-watering");
 95:     await user.click(toggleButton);
 96: 
 97:     await waitFor(() => {
 98:       const saveButton = screen.getByRole("button", { name: /save changes/i });
 99:       expect(saveButton).not.toBeDisabled();
100:     });
101:   });
102: 
103:   it("saves preferences successfully", async () => {
104:     const user = userEvent.setup();
105: 
106:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
107: 
108: 
109:     const toggleButton = screen.getByTestId("toggle-watering");
110:     await user.click(toggleButton);
111: 
112: 
113:     const saveButton = screen.getByRole("button", { name: /save changes/i });
114:     await user.click(saveButton);
115: 
116:     await waitFor(() => {
117:       expect(mockPlantService.updatePlant).toHaveBeenCalledWith(
118:         "test-plant-1",
119:         {
120:           reminderPreferences: {
121:             watering: false,
122:             fertilizing: true,
123:             observation: false,
124:             lighting: true,
125:             pruning: false,
126:           },
127:           updatedAt: expect.any(Date),
128:         }
129:       );
130:     });
131: 
132:     expect(mockOnUpdate).toHaveBeenCalledWith({
133:       ...mockPlant,
134:       reminderPreferences: {
135:         watering: false,
136:         fertilizing: true,
137:         observation: false,
138:         lighting: true,
139:         pruning: false,
140:       },
141:     });
142: 
143:     expect(mockToast.success).toHaveBeenCalledWith(
144:       "Reminder preferences updated!"
145:     );
146:   });
147: 
148:   it("handles save errors gracefully", async () => {
149:     const user = userEvent.setup();
150:     mockPlantService.updatePlant.mockRejectedValue(new Error("Database error"));
151: 
152:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
153: 
154: 
155:     const toggleButton = screen.getByTestId("toggle-watering");
156:     await user.click(toggleButton);
157: 
158: 
159:     const saveButton = screen.getByRole("button", { name: /save changes/i });
160:     await user.click(saveButton);
161: 
162:     await waitFor(() => {
163:       expect(mockToast.error).toHaveBeenCalledWith(
164:         "Failed to update preferences"
165:       );
166:     });
167: 
168:     expect(mockOnUpdate).not.toHaveBeenCalled();
169:   });
170: 
171:   it("shows loading state during save", async () => {
172:     const user = userEvent.setup();
173: 
174: 
175:     mockPlantService.updatePlant.mockImplementation(
176:       () => new Promise(() => {})
177:     );
178: 
179:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
180: 
181: 
182:     const toggleButton = screen.getByTestId("toggle-watering");
183:     await user.click(toggleButton);
184: 
185: 
186:     const saveButton = screen.getByRole("button", { name: /save changes/i });
187:     await user.click(saveButton);
188: 
189: 
190:     expect(screen.getByText("Saving...")).toBeInTheDocument();
191:     expect(saveButton).toBeDisabled();
192:   });
193: 
194:   it("uses default preferences when plant has none", () => {
195:     const plantWithoutPreferences = {
196:       ...mockPlant,
197:       reminderPreferences: undefined,
198:     };
199: 
200:     render(
201:       <PlantReminderSettings
202:         plant={plantWithoutPreferences}
203:         onUpdate={mockOnUpdate}
204:       />
205:     );
206: 
207: 
208:     expect(screen.getByText("Toggle Watering: ON")).toBeInTheDocument();
209:   });
210: });

================
File: src/__tests__/components/PlantStageDisplay.test.tsx
================
 1: import { render, screen } from "@testing-library/react";
 2: import PlantStageDisplay from "@/components/plant/PlantStageDisplay";
 3: import { PlantRecord } from "@/types/database";
 4: 
 5: 
 6: jest.mock("@/hooks/useDynamicStage", () => ({
 7:   useDynamicStage: jest.fn(),
 8: }));
 9: 
10: import { useDynamicStage } from "@/hooks/useDynamicStage";
11: const mockUseDynamicStage = useDynamicStage as jest.MockedFunction<
12:   typeof useDynamicStage
13: >;
14: 
15: describe("PlantStageDisplay", () => {
16:   const mockPlant: PlantRecord = {
17:     id: "test-plant",
18:     varietyId: "test-variety",
19:     varietyName: "Test Variety",
20:     name: "Test Plant",
21:     plantedDate: new Date(),
22:     currentStage: "vegetative",
23:     location: "Indoor",
24:     container: "5 gallon",
25:     isActive: true,
26:     createdAt: new Date(),
27:     updatedAt: new Date(),
28:   };
29: 
30:   beforeEach(() => {
31:     mockUseDynamicStage.mockReturnValue("flowering");
32:   });
33: 
34:   afterEach(() => {
35:     jest.clearAllMocks();
36:   });
37: 
38:   it("displays plant stage without emoji by default", () => {
39:     render(<PlantStageDisplay plant={mockPlant} />);
40: 
41:     expect(screen.getByText("Stage: flowering")).toBeInTheDocument();
42:     expect(screen.queryByText("🌱")).not.toBeInTheDocument();
43:   });
44: 
45:   it("displays plant stage with emoji when showEmoji is true", () => {
46:     render(<PlantStageDisplay plant={mockPlant} showEmoji={true} />);
47: 
48:     expect(screen.getByText("Stage: flowering")).toBeInTheDocument();
49:     expect(screen.getByText("🌱")).toBeInTheDocument();
50:   });
51: 
52:   it("applies custom className when provided", () => {
53:     render(<PlantStageDisplay plant={mockPlant} className="custom-class" />);
54: 
55:     const stageDisplay = screen.getByText(/Stage:/).closest("div");
56:     expect(stageDisplay).toHaveClass("custom-class");
57:   });
58: 
59:   it("uses calculated stage from useDynamicStage hook", () => {
60:     mockUseDynamicStage.mockReturnValue("harvest");
61: 
62:     render(<PlantStageDisplay plant={mockPlant} />);
63: 
64:     expect(screen.getByText("Stage: harvest")).toBeInTheDocument();
65:     expect(mockUseDynamicStage).toHaveBeenCalledWith(mockPlant);
66:   });
67: });

================
File: src/__tests__/components/ReminderPreferencesSection.test.tsx
================
  1: import { render, screen } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import ReminderPreferencesSection from "@/components/plant/ReminderPreferencesSection";
  4: 
  5: describe("ReminderPreferencesSection", () => {
  6:   const defaultPreferences = {
  7:     watering: true,
  8:     fertilizing: true,
  9:     observation: true,
 10:     lighting: true,
 11:     pruning: true,
 12:   };
 13: 
 14:   const mockOnChange = jest.fn();
 15: 
 16:   beforeEach(() => {
 17:     jest.clearAllMocks();
 18:   });
 19: 
 20:   it("renders all reminder types with correct labels", () => {
 21:     render(
 22:       <ReminderPreferencesSection
 23:         preferences={defaultPreferences}
 24:         onChange={mockOnChange}
 25:       />
 26:     );
 27: 
 28:     expect(screen.getByText("Reminder Preferences")).toBeInTheDocument();
 29:     expect(screen.getByText("Watering")).toBeInTheDocument();
 30:     expect(screen.getByText("Fertilizing")).toBeInTheDocument();
 31:     expect(screen.getByText("Health Checks")).toBeInTheDocument();
 32:     expect(screen.getByText("Lighting")).toBeInTheDocument();
 33:     expect(screen.getByText("Maintenance")).toBeInTheDocument();
 34: 
 35: 
 36:     expect(
 37:       screen.getByText("Get notified when watering is due")
 38:     ).toBeInTheDocument();
 39:     expect(
 40:       screen.getByText("Reminders for feeding schedule")
 41:     ).toBeInTheDocument();
 42:     expect(
 43:       screen.getByText("Regular observation reminders")
 44:     ).toBeInTheDocument();
 45:   });
 46: 
 47:   it("displays current preference states correctly", () => {
 48:     const mixedPreferences = {
 49:       watering: true,
 50:       fertilizing: false,
 51:       observation: true,
 52:       lighting: false,
 53:       pruning: true,
 54:     };
 55: 
 56:     render(
 57:       <ReminderPreferencesSection
 58:         preferences={mixedPreferences}
 59:         onChange={mockOnChange}
 60:       />
 61:     );
 62: 
 63: 
 64:     const switches = screen.getAllByRole("switch");
 65:     expect(switches).toHaveLength(5);
 66: 
 67: 
 68:     expect(switches[0]).toHaveAttribute("aria-checked", "true");
 69: 
 70:     expect(switches[1]).toHaveAttribute("aria-checked", "false");
 71: 
 72:     expect(switches[2]).toHaveAttribute("aria-checked", "true");
 73: 
 74:     expect(switches[3]).toHaveAttribute("aria-checked", "false");
 75: 
 76:     expect(switches[4]).toHaveAttribute("aria-checked", "true");
 77:   });
 78: 
 79:   it("calls onChange when a switch is toggled", async () => {
 80:     const user = userEvent.setup();
 81: 
 82:     render(
 83:       <ReminderPreferencesSection
 84:         preferences={defaultPreferences}
 85:         onChange={mockOnChange}
 86:       />
 87:     );
 88: 
 89: 
 90:     const wateringSwitch = screen.getAllByRole("switch")[0];
 91:     await user.click(wateringSwitch);
 92: 
 93:     expect(mockOnChange).toHaveBeenCalledWith({
 94:       watering: false,
 95:       fertilizing: true,
 96:       observation: true,
 97:       lighting: true,
 98:       pruning: true,
 99:     });
100:   });
101: 
102:   it("toggles multiple preferences correctly", async () => {
103:     const user = userEvent.setup();
104: 
105:     render(
106:       <ReminderPreferencesSection
107:         preferences={defaultPreferences}
108:         onChange={mockOnChange}
109:       />
110:     );
111: 
112: 
113:     const fertilizingSwitch = screen.getAllByRole("switch")[1];
114:     await user.click(fertilizingSwitch);
115: 
116:     expect(mockOnChange).toHaveBeenCalledWith({
117:       watering: true,
118:       fertilizing: false,
119:       observation: true,
120:       lighting: true,
121:       pruning: true,
122:     });
123: 
124: 
125:     const lightingSwitch = screen.getAllByRole("switch")[3];
126:     await user.click(lightingSwitch);
127: 
128:     expect(mockOnChange).toHaveBeenCalledWith({
129:       watering: true,
130:       fertilizing: true,
131:       observation: true,
132:       lighting: false,
133:       pruning: true,
134:     });
135:   });
136: 
137:   it("has proper accessibility attributes", () => {
138:     render(
139:       <ReminderPreferencesSection
140:         preferences={defaultPreferences}
141:         onChange={mockOnChange}
142:       />
143:     );
144: 
145:     const switches = screen.getAllByRole("switch");
146:     switches.forEach((switchElement) => {
147:       expect(switchElement).toHaveAttribute("aria-checked");
148:       expect(switchElement).not.toHaveAttribute("aria-disabled");
149:     });
150:   });
151: });

================
File: src/__tests__/components/SoilMixtureSelector.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { PlantCategory } from "@/types";
  4: import SoilMixtureSelector from "@/components/plant/SoilMixtureSelector";
  5: 
  6: describe("SoilMixtureSelector", () => {
  7:   const user = userEvent.setup();
  8:   const mockOnMixtureChange = jest.fn();
  9: 
 10:   beforeEach(() => {
 11:     jest.clearAllMocks();
 12:   });
 13: 
 14:   const renderSelector = (props = {}) => {
 15:     return render(
 16:       <SoilMixtureSelector onMixtureChange={mockOnMixtureChange} {...props} />
 17:     );
 18:   };
 19: 
 20:   describe("Initial Rendering", () => {
 21:     it("renders with default state", () => {
 22:       renderSelector();
 23: 
 24:       expect(screen.getByText("Soil Mixture")).toBeInTheDocument();
 25:       expect(
 26:         screen.getByText(
 27:           "Choose a preset mixture or create your own custom blend"
 28:         )
 29:       ).toBeInTheDocument();
 30:       expect(screen.getByText("🧪 Create Custom Mixture")).toBeInTheDocument();
 31:     });
 32: 
 33:     it("displays all preset mixtures", () => {
 34:       renderSelector();
 35: 
 36: 
 37:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
 38:       expect(screen.getByText("Root Vegetables Mix")).toBeInTheDocument();
 39:       expect(screen.getByText("Mediterranean Herbs Mix")).toBeInTheDocument();
 40:       expect(screen.getByText("Berry & Fruit Mix")).toBeInTheDocument();
 41:       expect(screen.getByText("Fruiting Plants Mix")).toBeInTheDocument();
 42:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
 43:     });
 44: 
 45:     it("shows mixture descriptions and components", () => {
 46:       renderSelector();
 47: 
 48:       expect(
 49:         screen.getByText(
 50:           "Nutrient-rich blend perfect for arugula, spinach, and lettuce"
 51:         )
 52:       ).toBeInTheDocument();
 53:       expect(
 54:         screen.getByText(
 55:           /40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings/
 56:         )
 57:       ).toBeInTheDocument();
 58:     });
 59:   });
 60: 
 61:   describe("Category-based Recommendations", () => {
 62:     it("shows recommended badge for matching category", () => {
 63:       renderSelector({ plantCategory: "leafy-greens" as PlantCategory });
 64: 
 65: 
 66:       const leafyGreensCard =
 67:         screen.getByText("Leafy Greens Mix").closest("[data-testid]") ||
 68:         screen.getByText("Leafy Greens Mix").closest("div")?.closest("div");
 69:       expect(leafyGreensCard).toHaveTextContent("Recommended");
 70:     });
 71: 
 72:     it("prioritizes category-specific mixtures first", () => {
 73:       renderSelector({ plantCategory: "herbs" as PlantCategory });
 74: 
 75:       const cards = screen.getAllByText(/Mix$/);
 76: 
 77:       expect(cards[0]).toHaveTextContent("Mediterranean Herbs Mix");
 78:     });
 79: 
 80:     it("still shows all mixtures when category provided", () => {
 81:       renderSelector({ plantCategory: "herbs" as PlantCategory });
 82: 
 83: 
 84:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
 85:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
 86:     });
 87:   });
 88: 
 89:   describe("Preset Selection", () => {
 90:     it("calls onMixtureChange when preset is selected", async () => {
 91:       renderSelector();
 92: 
 93: 
 94:       const clickableCards = document.querySelectorAll(".cursor-pointer");
 95: 
 96: 
 97:       let leafyGreensCard: Element | null = null;
 98:       clickableCards.forEach((card) => {
 99:         if (card.textContent?.includes("Leafy Greens Mix")) {
100:           leafyGreensCard = card;
101:         }
102:       });
103: 
104: 
105:       if (!leafyGreensCard) {
106:         const leafyGreensText = screen.getByText("Leafy Greens Mix");
107: 
108:         let current = leafyGreensText.parentElement;
109:         while (current && !current.classList.contains("cursor-pointer")) {
110:           current = current.parentElement;
111:         }
112:         leafyGreensCard = current;
113:       }
114: 
115:       expect(leafyGreensCard).toBeTruthy();
116:       await user.click(leafyGreensCard!);
117: 
118:       expect(mockOnMixtureChange).toHaveBeenCalledWith(
119:         "Leafy Greens Mix: 40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings"
120:       );
121:     });
122: 
123:     it("shows selected state when mixture is selected", () => {
124:       renderSelector({
125:         selectedMixture:
126:           "Leafy Greens Mix: 40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings",
127:       });
128: 
129:       const leafyGreensText = screen.getByText("Leafy Greens Mix");
130:       const leafyGreensCard =
131:         leafyGreensText.closest(".cursor-pointer") ||
132:         leafyGreensText.closest("div")?.closest("div")?.closest("div");
133: 
134: 
135:       expect(leafyGreensCard).toHaveClass("cursor-pointer");
136: 
137:       expect(leafyGreensCard).toHaveClass(
138:         "ring-4",
139:         "ring-green-500",
140:         "bg-green-100"
141:       );
142:     });
143: 
144:     it("displays selected mixture information", () => {
145:       const selectedMixture =
146:         "Root Vegetables Mix: 40% Coco Coir, 30% Perlite, 25% Vermiculite, 5% Worm Castings";
147:       renderSelector({ selectedMixture });
148: 
149:       expect(screen.getByText("Selected Mixture:")).toBeInTheDocument();
150:       expect(screen.getByText(selectedMixture)).toBeInTheDocument();
151:     });
152:   });
153: 
154:   describe("Custom Mixture Functionality", () => {
155:     it("switches to custom mode when button clicked", async () => {
156:       renderSelector();
157: 
158:       const customButton = screen.getByText("🧪 Create Custom Mixture");
159:       await user.click(customButton);
160: 
161:       expect(screen.getByText("Custom Soil Mixture")).toBeInTheDocument();
162:       expect(screen.getByText("Mixture Description")).toBeInTheDocument();
163:       expect(screen.getByPlaceholderText(/40% coco coir/)).toBeInTheDocument();
164:     });
165: 
166:     it("allows typing in custom mixture textarea", async () => {
167:       renderSelector();
168: 
169:       const customButton = screen.getByText("🧪 Create Custom Mixture");
170:       await user.click(customButton);
171: 
172:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
173:       await user.type(textarea, "50% peat moss, 30% perlite, 20% sand");
174: 
175:       expect(textarea).toHaveValue("50% peat moss, 30% perlite, 20% sand");
176:     });
177: 
178:     it("calls onMixtureChange when custom mixture is submitted", async () => {
179:       renderSelector();
180: 
181:       const customButton = screen.getByText("🧪 Create Custom Mixture");
182:       await user.click(customButton);
183: 
184:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
185:       await user.type(textarea, "Custom mix");
186: 
187:       const useButton = screen.getByRole("button", {
188:         name: /use this mixture/i,
189:       });
190:       await user.click(useButton);
191: 
192:       expect(mockOnMixtureChange).toHaveBeenCalledWith("Custom mix");
193:     });
194: 
195:     it("disables submit button when textarea is empty", async () => {
196:       renderSelector();
197: 
198:       const customButton = screen.getByText("🧪 Create Custom Mixture");
199:       await user.click(customButton);
200: 
201:       const useButton = screen.getByRole("button", {
202:         name: /use this mixture/i,
203:       });
204:       expect(useButton).toBeDisabled();
205:     });
206: 
207:     it("returns to presets when back button clicked", async () => {
208:       renderSelector();
209: 
210: 
211:       const customButton = screen.getByText("🧪 Create Custom Mixture");
212:       await user.click(customButton);
213: 
214: 
215:       const backButton = screen.getByRole("button", {
216:         name: /back to presets/i,
217:       });
218:       await user.click(backButton);
219: 
220: 
221:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
222:       expect(screen.queryByText("Custom Soil Mixture")).not.toBeInTheDocument();
223:     });
224: 
225:     it("closes custom mode after successful submission", async () => {
226:       renderSelector();
227: 
228:       const customButton = screen.getByText("🧪 Create Custom Mixture");
229:       await user.click(customButton);
230: 
231:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
232:       await user.type(textarea, "Custom mix");
233: 
234:       const useButton = screen.getByRole("button", {
235:         name: /use this mixture/i,
236:       });
237:       await user.click(useButton);
238: 
239: 
240:       await waitFor(() => {
241:         expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
242:         expect(
243:           screen.queryByText("Custom Soil Mixture")
244:         ).not.toBeInTheDocument();
245:       });
246:     });
247:   });
248: 
249:   describe("Mixture Information Display", () => {
250:     it("shows components for different mixtures", () => {
251:       renderSelector();
252: 
253: 
254:       const leafyGreensComponents = screen.getAllByText(
255:         /40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings/
256:       );
257:       expect(leafyGreensComponents.length).toBeGreaterThan(0);
258: 
259:       const rootVegComponents = screen.getAllByText(
260:         /40% Coco Coir, 30% Perlite, 25% Vermiculite, 5% Worm Castings/
261:       );
262:       expect(rootVegComponents.length).toBeGreaterThan(0);
263:     });
264: 
265:     it("shows amendments when available", () => {
266:       renderSelector();
267: 
268:       expect(
269:         screen.getByText(/Compost \(½–1 cup per cubic foot\)/)
270:       ).toBeInTheDocument();
271:       expect(
272:         screen.getByText(/Bone Meal \(1 tsp per gallon\)/)
273:       ).toBeInTheDocument();
274:     });
275: 
276:     it("shows suitable plants information", () => {
277:       renderSelector();
278: 
279:       expect(
280:         screen.getByText(/Arugula, Spinach, Lettuce, Kale/)
281:       ).toBeInTheDocument();
282:       expect(
283:         screen.getByText(/Carrots, Beets, Onions, Radishes/)
284:       ).toBeInTheDocument();
285:     });
286:   });
287: 
288:   describe("Edge Cases", () => {
289:     it("handles undefined selectedMixture gracefully", () => {
290:       renderSelector({ selectedMixture: undefined });
291: 
292:       expect(screen.getByText("Soil Mixture")).toBeInTheDocument();
293:       expect(screen.queryByText("Selected Mixture:")).not.toBeInTheDocument();
294:     });
295: 
296:     it("handles empty selectedMixture gracefully", () => {
297:       renderSelector({ selectedMixture: "" });
298: 
299:       expect(screen.getByText("Soil Mixture")).toBeInTheDocument();
300:       expect(screen.queryByText("Selected Mixture:")).not.toBeInTheDocument();
301:     });
302: 
303:     it("handles undefined plantCategory gracefully", () => {
304:       renderSelector({ plantCategory: undefined });
305: 
306:       expect(screen.getByText("Soil Mixture")).toBeInTheDocument();
307: 
308: 
309: 
310: 
311:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
312:     });
313: 
314:     it("handles custom mixture with only whitespace", async () => {
315:       renderSelector();
316: 
317:       const customButton = screen.getByText("🧪 Create Custom Mixture");
318:       await user.click(customButton);
319: 
320:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
321:       await user.type(textarea, "   ");
322: 
323:       const useButton = screen.getByRole("button", {
324:         name: /use this mixture/i,
325:       });
326:       expect(useButton).toBeDisabled();
327:     });
328:   });
329: 
330:   describe("Accessibility", () => {
331:     it("has proper labels and structure", () => {
332:       renderSelector();
333: 
334:       expect(screen.getByText("Soil Mixture")).toBeInTheDocument();
335:       expect(
336:         screen.getByText(
337:           "Choose a preset mixture or create your own custom blend"
338:         )
339:       ).toBeInTheDocument();
340:     });
341: 
342:     it("has accessible buttons", () => {
343:       renderSelector();
344: 
345:       const customButton = screen.getByRole("button", {
346:         name: /create custom mixture/i,
347:       });
348:       expect(customButton).toBeInTheDocument();
349:     });
350: 
351:     it("maintains accessibility in custom mode", async () => {
352:       renderSelector();
353: 
354:       const customButton = screen.getByText("🧪 Create Custom Mixture");
355:       await user.click(customButton);
356: 
357: 
358:       expect(screen.getByLabelText("Mixture Description")).toBeInTheDocument();
359:       expect(
360:         screen.getByRole("button", { name: /use this mixture/i })
361:       ).toBeInTheDocument();
362:       expect(
363:         screen.getByRole("button", { name: /back to presets/i })
364:       ).toBeInTheDocument();
365:     });
366:   });
367: });

================
File: src/__tests__/database/plantService.test.ts
================
 1: import { plantService, PlantRecord } from "../../types/database";
 2: 
 3: describe("plantService", () => {
 4:   beforeEach(async () => {
 5: 
 6:     const db = await import("../../types/database").then((m) => m.db);
 7:     await db.plants.clear();
 8:   });
 9: 
10:   it("adds and retrieves a plant", async () => {
11:     const plantData: Omit<PlantRecord, "id" | "createdAt" | "updatedAt"> = {
12:       varietyId: "test-variety",
13:       name: "Test Plant",
14:       varietyName: "Test Variety",
15:       plantedDate: new Date("2024-01-01"),
16:       currentStage: "seedling",
17:       location: "Indoor",
18:       container: "Test Container",
19:       isActive: true,
20:       notes: ["Test note"],
21:     };
22: 
23:     const plantId = await plantService.addPlant(plantData);
24:     expect(plantId).toBeDefined();
25: 
26:     const retrievedPlant = await plantService.getPlant(plantId);
27:     expect(retrievedPlant).toBeDefined();
28:     expect(retrievedPlant?.name).toBe("Test Plant");
29:     expect(retrievedPlant?.varietyId).toBe("test-variety");
30:   });
31: 
32:   it("retrieves only active plants", async () => {
33: 
34:     await plantService.addPlant({
35:       varietyId: "active-variety",
36:       varietyName: "Active Variety",
37:       plantedDate: new Date(),
38:       currentStage: "vegetative",
39:       location: "Location 1",
40:       container: "Container 1",
41:       isActive: true,
42:     });
43: 
44: 
45:     const inactiveId = await plantService.addPlant({
46:       varietyId: "inactive-variety",
47:       varietyName: "Inactive Variety",
48:       plantedDate: new Date(),
49:       currentStage: "vegetative",
50:       location: "Location 2",
51:       container: "Container 2",
52:       isActive: true,
53:     });
54: 
55: 
56:     await plantService.updatePlant(inactiveId, { isActive: false });
57: 
58:     const activePlants = await plantService.getActivePlants();
59:     expect(activePlants).toHaveLength(1);
60:     expect(activePlants[0].varietyId).toBe("active-variety");
61:   });
62: });

================
File: src/__tests__/integration/plantDetailReminderSettings.test.tsx
================
 1: import { render, screen, waitFor } from "@testing-library/react";
 2: import userEvent from "@testing-library/user-event";
 3: import { BrowserRouter } from "react-router-dom";
 4: import PlantDetail from "@/pages/plants/PlantDetail";
 5: import { plantService } from "@/types/database";
 6: 
 7: 
 8: jest.mock("react-router-dom", () => ({
 9:   ...jest.requireActual("react-router-dom"),
10:   useParams: () => ({ plantId: "test-plant-1" }),
11:   useNavigate: () => jest.fn(),
12: }));
13: 
14: describe("PlantDetail Reminder Settings Integration", () => {
15:   it("shows and hides reminder settings when settings button is clicked", async () => {
16:     const user = userEvent.setup();
17: 
18: 
19:     jest.spyOn(plantService, "getPlant").mockResolvedValue({
20:       id: "test-plant-1",
21:       varietyId: "tomato-1",
22:       varietyName: "Roma Tomato",
23:       name: "My Tomato",
24:       plantedDate: new Date(),
25:       currentStage: "vegetative",
26:       location: "Indoor",
27:       container: "5 gallon pot",
28:       isActive: true,
29:       notes: [],
30:       createdAt: new Date(),
31:       updatedAt: new Date(),
32:       reminderPreferences: {
33:         watering: true,
34:         fertilizing: false,
35:         observation: true,
36:         lighting: false,
37:         pruning: true,
38:       },
39:     });
40: 
41:     render(
42:       <BrowserRouter>
43:         <PlantDetail />
44:       </BrowserRouter>
45:     );
46: 
47:     await waitFor(() => {
48:       expect(screen.getByText("My Tomato")).toBeInTheDocument();
49:     });
50: 
51: 
52:     expect(screen.queryByText("Notification Settings")).not.toBeInTheDocument();
53: 
54: 
55:     const settingsButton = screen.getByRole("button", { name: /settings/i });
56:     await user.click(settingsButton);
57: 
58: 
59:     await waitFor(() => {
60:       expect(screen.getByText("Notification Settings")).toBeInTheDocument();
61:     });
62: 
63: 
64:     await user.click(settingsButton);
65: 
66:     await waitFor(() => {
67:       expect(
68:         screen.queryByText("Notification Settings")
69:       ).not.toBeInTheDocument();
70:     });
71:   });
72: 
73:   it.skip("displays active reminder preferences correctly", async () => {
74: 
75: 
76:   });
77: });

================
File: src/__tests__/integration/smartDefaultsIntegration.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { CareLogForm } from "@/pages/care/CareLogForm";
  4: import { initializeDatabase } from "@/db/seedData";
  5: import { plantService, varietyService } from "@/types/database";
  6: 
  7: describe("Smart Defaults Integration", () => {
  8:   beforeEach(async () => {
  9:     await initializeDatabase();
 10:     const { db } = await import("@/types/database");
 11:     await db.plants.clear();
 12:   });
 13: 
 14:   it("should show smart watering suggestions when plant is selected", async () => {
 15:     const varieties = await varietyService.getAllVarieties();
 16:     const testVariety = varieties[0];
 17: 
 18:     const plant = await plantService.addPlant({
 19:       varietyId: testVariety.id,
 20:       varietyName: testVariety.name,
 21:       name: "Smart Defaults Test Plant",
 22:       plantedDate: new Date(),
 23:       currentStage: "vegetative",
 24:       location: "Indoor",
 25:       container: "5 gallon pot",
 26:       isActive: true,
 27:     });
 28: 
 29:     const mockOnSuccess = jest.fn();
 30:     const user = userEvent.setup();
 31: 
 32:     render(<CareLogForm onSuccess={mockOnSuccess} />);
 33: 
 34: 
 35:     await waitFor(() => {
 36:       expect(
 37:         screen.getByText("Smart Defaults Test Plant - Indoor")
 38:       ).toBeInTheDocument();
 39:     });
 40: 
 41: 
 42:     const plantSelect = screen.getByLabelText(/Plant/i);
 43:     await user.selectOptions(plantSelect, plant);
 44: 
 45: 
 46:     await waitFor(() => {
 47:       expect(screen.getByText("💡 Smart Suggestion")).toBeInTheDocument();
 48:     });
 49: 
 50: 
 51:     expect(screen.getByText(/based on/i)).toBeInTheDocument();
 52: 
 53: 
 54:     expect(screen.getByText(/confidence/i)).toBeInTheDocument();
 55: 
 56: 
 57:     const suggestionSection = screen
 58:       .getByText("💡 Smart Suggestion")
 59:       .closest("div");
 60:     expect(suggestionSection).toBeInTheDocument();
 61:   });
 62: 
 63:   it("should auto-fill water amount when using smart suggestions", async () => {
 64:     const varieties = await varietyService.getAllVarieties();
 65:     const testVariety = varieties[0];
 66: 
 67:     const plant = await plantService.addPlant({
 68:       varietyId: testVariety.id,
 69:       varietyName: testVariety.name,
 70:       name: "Auto-fill Test Plant",
 71:       plantedDate: new Date(),
 72:       currentStage: "vegetative",
 73:       location: "Indoor",
 74:       container: "4 inch pot",
 75:       isActive: true,
 76:     });
 77: 
 78:     const mockOnSuccess = jest.fn();
 79:     const user = userEvent.setup();
 80: 
 81:     render(<CareLogForm onSuccess={mockOnSuccess} />);
 82: 
 83: 
 84:     await waitFor(() => {
 85:       expect(
 86:         screen.getByText("Auto-fill Test Plant - Indoor")
 87:       ).toBeInTheDocument();
 88:     });
 89: 
 90:     const plantSelect = screen.getByLabelText(/Plant/i);
 91:     await user.selectOptions(plantSelect, plant);
 92: 
 93: 
 94:     await waitFor(() => {
 95:       expect(screen.getByText("💡 Smart Suggestion")).toBeInTheDocument();
 96:     });
 97: 
 98: 
 99:     const useAmountButton = screen.getByText("Use this amount");
100:     await user.click(useAmountButton);
101: 
102: 
103:     const waterAmountInput = screen.getByPlaceholderText(
104:       "Amount"
105:     ) as HTMLInputElement;
106:     expect(parseFloat(waterAmountInput.value)).toBeGreaterThan(0);
107:   });
108: 
109:   it("should show quick completion buttons", async () => {
110:     const varieties = await varietyService.getAllVarieties();
111:     const testVariety = varieties[0];
112: 
113:     const plant = await plantService.addPlant({
114:       varietyId: testVariety.id,
115:       varietyName: testVariety.name,
116:       name: "Quick Complete Test Plant",
117:       plantedDate: new Date(),
118:       currentStage: "vegetative",
119:       location: "Indoor",
120:       container: "5 gallon pot",
121:       isActive: true,
122:     });
123: 
124:     const mockOnSuccess = jest.fn();
125:     const user = userEvent.setup();
126: 
127:     render(<CareLogForm onSuccess={mockOnSuccess} />);
128: 
129: 
130:     await waitFor(() => {
131:       expect(
132:         screen.getByText("Quick Complete Test Plant - Indoor")
133:       ).toBeInTheDocument();
134:     });
135: 
136:     const plantSelect = screen.getByLabelText(/Plant/i);
137:     await user.selectOptions(plantSelect, plant);
138: 
139: 
140:     await waitFor(() => {
141:       expect(screen.getByText("Quick actions:")).toBeInTheDocument();
142:     });
143: 
144: 
145:     const quickButtons = screen.getAllByText(/Quick:/i);
146:     expect(quickButtons.length).toBeGreaterThan(0);
147: 
148: 
149:     await user.click(quickButtons[0]);
150: 
151:     const waterAmountInput = screen.getByPlaceholderText(
152:       "Amount"
153:     ) as HTMLInputElement;
154:     expect(parseFloat(waterAmountInput.value)).toBeGreaterThan(0);
155:   });
156: 
157:   it("should show fertilizer suggestions when fertilizer activity is selected", async () => {
158:     const varieties = await varietyService.getAllVarieties();
159:     const varietyWithFertilizer = varieties.find(
160:       (v) =>
161:         v.protocols?.fertilization &&
162:         Object.keys(v.protocols.fertilization).length > 0
163:     );
164: 
165:     if (!varietyWithFertilizer) {
166: 
167:       return;
168:     }
169: 
170:     const plant = await plantService.addPlant({
171:       varietyId: varietyWithFertilizer.id,
172:       varietyName: varietyWithFertilizer.name,
173:       name: "Fertilizer Test Plant",
174:       plantedDate: new Date(),
175:       currentStage: "vegetative",
176:       location: "Indoor",
177:       container: "5 gallon pot",
178:       isActive: true,
179:     });
180: 
181:     const mockOnSuccess = jest.fn();
182:     const user = userEvent.setup();
183: 
184:     render(<CareLogForm onSuccess={mockOnSuccess} />);
185: 
186: 
187:     await waitFor(() => {
188:       expect(
189:         screen.getByText("Fertilizer Test Plant - Indoor")
190:       ).toBeInTheDocument();
191:     });
192: 
193:     const plantSelect = screen.getByLabelText(/Plant/i);
194:     await user.selectOptions(plantSelect, plant);
195: 
196: 
197:     const activitySelect = screen.getByLabelText(/Activity Type/i);
198:     await user.selectOptions(activitySelect, "fertilize");
199: 
200: 
201:     await waitFor(() => {
202:       expect(screen.getByText("💡 Smart Suggestion")).toBeInTheDocument();
203:     });
204:   });
205: });

================
File: src/__tests__/services/careSchedulingService.test.ts
================
  1: import { CareSchedulingService } from "@/services/careSchedulingService";
  2: import { plantService, varietyService } from "@/types/database";
  3: import { initializeDatabase } from "@/db/seedData";
  4: import { subDays } from "date-fns";
  5: 
  6: describe("CareSchedulingService", () => {
  7:   beforeEach(async () => {
  8: 
  9:     const { db } = await import("@/types/database");
 10:     await db.plants.clear();
 11:     await db.varieties.clear();
 12:     await db.careActivities.clear();
 13:     await initializeDatabase();
 14:   });
 15: 
 16:   describe("Reminder Filtering", () => {
 17:     it("filters tasks based on reminder preferences", async () => {
 18: 
 19:       const varieties = await varietyService.getAllVarieties();
 20:       const testVariety = varieties[0];
 21: 
 22: 
 23: 
 24:       const plantWithSelectiveReminders = await plantService.addPlant({
 25:         varietyId: testVariety.id,
 26:         varietyName: testVariety.name,
 27:         plantedDate: subDays(new Date(), 10),
 28:         currentStage: "seedling",
 29:         location: "Indoor",
 30:         container: "4 inch pot",
 31:         isActive: true,
 32:         reminderPreferences: {
 33:           watering: false,
 34:           fertilizing: true,
 35:           observation: true,
 36:           lighting: false,
 37:           pruning: true,
 38:         },
 39:       });
 40: 
 41:       const tasks = await CareSchedulingService.getUpcomingTasks();
 42: 
 43: 
 44:       const plantTasks = tasks.filter(
 45:         (task) => task.plantId === plantWithSelectiveReminders
 46:       );
 47: 
 48: 
 49:       const wateringTasks = plantTasks.filter(
 50:         (task) =>
 51:           task.task.toLowerCase().includes("water") ||
 52:           task.task === "Check water level"
 53:       );
 54: 
 55:       expect(wateringTasks).toHaveLength(0);
 56: 
 57: 
 58:       const observationTasks = plantTasks.filter(
 59:         (task) =>
 60:           task.task === "Health check" ||
 61:           task.task.toLowerCase().includes("observe")
 62:       );
 63: 
 64: 
 65:       expect(observationTasks.length).toBeGreaterThan(0);
 66:     });
 67: 
 68:     it("shows all tasks when no reminder preferences are set", async () => {
 69: 
 70:       const varieties = await varietyService.getAllVarieties();
 71:       const testVariety = varieties[0];
 72: 
 73: 
 74:       const plantWithoutPreferences = await plantService.addPlant({
 75:         varietyId: testVariety.id,
 76:         varietyName: testVariety.name,
 77:         plantedDate: subDays(new Date(), 10),
 78:         currentStage: "seedling",
 79:         location: "Indoor",
 80:         container: "4 inch pot",
 81:         isActive: true,
 82: 
 83:       });
 84: 
 85:       const tasks = await CareSchedulingService.getUpcomingTasks();
 86: 
 87: 
 88:       const plantTasks = tasks.filter(
 89:         (task) => task.plantId === plantWithoutPreferences
 90:       );
 91:       expect(plantTasks.length).toBeGreaterThan(0);
 92: 
 93: 
 94:       const hasWateringTask = plantTasks.some(
 95:         (task) =>
 96:           task.task.toLowerCase().includes("water") ||
 97:           task.task === "Check water level"
 98:       );
 99:       const hasObservationTask = plantTasks.some(
100:         (task) =>
101:           task.task === "Health check" ||
102:           task.task.toLowerCase().includes("observe")
103:       );
104: 
105:       expect(hasWateringTask).toBe(true);
106:       expect(hasObservationTask).toBe(true);
107:     });
108: 
109:     it("handles plants with all reminders disabled", async () => {
110: 
111:       const varieties = await varietyService.getAllVarieties();
112:       const testVariety = varieties[0];
113: 
114: 
115:       const plantWithNoReminders = await plantService.addPlant({
116:         varietyId: testVariety.id,
117:         varietyName: testVariety.name,
118:         plantedDate: subDays(new Date(), 10),
119:         currentStage: "seedling",
120:         location: "Indoor",
121:         container: "4 inch pot",
122:         isActive: true,
123:         reminderPreferences: {
124:           watering: false,
125:           fertilizing: false,
126:           observation: false,
127:           lighting: false,
128:           pruning: false,
129:         },
130:       });
131: 
132:       const tasks = await CareSchedulingService.getUpcomingTasks();
133: 
134: 
135:       const plantTasks = tasks.filter(
136:         (task) => task.plantId === plantWithNoReminders
137:       );
138:       expect(plantTasks).toHaveLength(0);
139:     });
140:   });
141: 
142:   describe("Task Creation", () => {
143:     it("creates observation tasks for plants old enough", async () => {
144:       const varieties = await varietyService.getAllVarieties();
145:       const testVariety = varieties[0];
146: 
147: 
148:       const plantId = await plantService.addPlant({
149:         varietyId: testVariety.id,
150:         varietyName: testVariety.name,
151:         plantedDate: subDays(new Date(), 5),
152:         currentStage: "seedling",
153:         location: "Indoor",
154:         container: "4 inch pot",
155:         isActive: true,
156:         reminderPreferences: {
157:           watering: true,
158:           fertilizing: true,
159:           observation: true,
160:           lighting: true,
161:           pruning: true,
162:         },
163:       });
164: 
165:       const tasks = await CareSchedulingService.getUpcomingTasks();
166:       const plantTasks = tasks.filter((task) => task.plantId === plantId);
167: 
168: 
169:       const observationTasks = plantTasks.filter(
170:         (task) => task.task === "Health check"
171:       );
172: 
173:       expect(observationTasks.length).toBeGreaterThan(0);
174: 
175: 
176:       const observationTask = observationTasks[0];
177:       expect(observationTask.dueIn).toContain("overdue");
178:       expect(observationTask.priority).toBe("high");
179:     });
180: 
181:     it("creates watering tasks for plants that need water", async () => {
182:       const varieties = await varietyService.getAllVarieties();
183:       const testVariety = varieties[0];
184: 
185: 
186:       const plantId = await plantService.addPlant({
187:         varietyId: testVariety.id,
188:         varietyName: testVariety.name,
189:         plantedDate: subDays(new Date(), 5),
190:         currentStage: "seedling",
191:         location: "Indoor",
192:         container: "4 inch pot",
193:         isActive: true,
194:         reminderPreferences: {
195:           watering: true,
196:           fertilizing: true,
197:           observation: true,
198:           lighting: true,
199:           pruning: true,
200:         },
201:       });
202: 
203:       const tasks = await CareSchedulingService.getUpcomingTasks();
204:       const plantTasks = tasks.filter((task) => task.plantId === plantId);
205: 
206: 
207:       const wateringTasks = plantTasks.filter(
208:         (task) => task.task === "Check water level"
209:       );
210: 
211:       expect(wateringTasks.length).toBeGreaterThan(0);
212:     });
213:   });
214: });

================
File: src/__tests__/services/growthStageService.test.ts
================
  1: import { GrowthStageService } from "@/services/growthStageService";
  2: import { plantService, varietyService } from "@/types/database";
  3: import { initializeDatabase } from "@/db/seedData";
  4: import { subDays } from "date-fns";
  5: 
  6: describe("GrowthStageService", () => {
  7:   beforeEach(async () => {
  8:     const { db } = await import("@/types/database");
  9:     await db.plants.clear();
 10:     await db.varieties.clear();
 11:     await initializeDatabase();
 12:   });
 13: 
 14:   it("updates plant stages when they are out of sync", async () => {
 15:     const varieties = await varietyService.getAllVarieties();
 16:     const albion = varieties.find((v) => v.name === "Albion Strawberries");
 17: 
 18: 
 19:     const plantedDate = subDays(new Date(), 103);
 20:     const plantId = await plantService.addPlant({
 21:       varietyId: albion!.id,
 22:       varietyName: albion!.name,
 23:       plantedDate,
 24:       currentStage: "germination",
 25:       location: "Indoor",
 26:       container: "5 gallon",
 27:       isActive: true,
 28:     });
 29: 
 30: 
 31:     let plant = await plantService.getPlant(plantId);
 32:     expect(plant?.currentStage).toBe("germination");
 33: 
 34: 
 35:     await GrowthStageService.updatePlantStages();
 36: 
 37: 
 38:     plant = await plantService.getPlant(plantId);
 39:     expect(plant?.currentStage).toBe("ongoing-production");
 40:   });
 41: 
 42:   it("updates multiple plants with different stage corrections", async () => {
 43:     const varieties = await varietyService.getAllVarieties();
 44:     const albion = varieties.find((v) => v.name === "Albion Strawberries");
 45: 
 46: 
 47:     const plants = [
 48:       { daysAgo: 5, expectedStage: "germination" },
 49:       { daysAgo: 20, expectedStage: "seedling" },
 50:       { daysAgo: 103, expectedStage: "ongoing-production" },
 51:     ];
 52: 
 53:     const plantIds = [];
 54:     for (const plantData of plants) {
 55:       const plantId = await plantService.addPlant({
 56:         varietyId: albion!.id,
 57:         varietyName: albion!.name,
 58:         plantedDate: subDays(new Date(), plantData.daysAgo),
 59:         currentStage: "germination",
 60:         location: "Indoor",
 61:         container: "5 gallon",
 62:         isActive: true,
 63:       });
 64:       plantIds.push({ id: plantId, expected: plantData.expectedStage });
 65:     }
 66: 
 67: 
 68:     await GrowthStageService.updatePlantStages();
 69: 
 70: 
 71:     for (const { id, expected } of plantIds) {
 72:       const plant = await plantService.getPlant(id);
 73:       expect(plant?.currentStage).toBe(expected);
 74:     }
 75:   });
 76: 
 77:   it("handles non-everbearing plants correctly", async () => {
 78:     const varieties = await varietyService.getAllVarieties();
 79:     const carrots = varieties.find((v) => v.name === "Little Finger Carrots");
 80: 
 81: 
 82:     const plantedDate = subDays(new Date(), 70);
 83:     const plantId = await plantService.addPlant({
 84:       varietyId: carrots!.id,
 85:       varietyName: carrots!.name,
 86:       plantedDate,
 87:       currentStage: "germination",
 88:       location: "Indoor",
 89:       container: "4 inch pot",
 90:       isActive: true,
 91:     });
 92: 
 93: 
 94:     await GrowthStageService.updatePlantStages();
 95: 
 96: 
 97:     const plant = await plantService.getPlant(plantId);
 98:     expect(plant?.currentStage).toBe("harvest");
 99:   });
100: 
101:   it("handles plants past productive lifespan", async () => {
102:     const varieties = await varietyService.getAllVarieties();
103:     const albion = varieties.find((v) => v.name === "Albion Strawberries");
104: 
105: 
106:     const plantedDate = subDays(new Date(), 800);
107:     const plantId = await plantService.addPlant({
108:       varietyId: albion!.id,
109:       varietyName: albion!.name,
110:       plantedDate,
111:       currentStage: "ongoing-production",
112:       location: "Indoor",
113:       container: "5 gallon",
114:       isActive: true,
115:     });
116: 
117: 
118:     await GrowthStageService.updatePlantStages();
119: 
120: 
121:     const plant = await plantService.getPlant(plantId);
122:     expect(plant?.currentStage).toBe("harvest");
123:   });
124: });

================
File: src/__tests__/services/smartDefaultsService.test.ts
================
  1: import { SmartDefaultsService } from "@/services/smartDefaultsService";
  2: import { varietyService, plantService } from "@/types/database";
  3: import { initializeDatabase } from "@/db/seedData";
  4: 
  5: describe("SmartDefaultsService", () => {
  6:   beforeEach(async () => {
  7:     await initializeDatabase();
  8:   });
  9: 
 10:   describe("getDefaultsForPlant", () => {
 11:     it("should extract watering defaults from variety protocol", async () => {
 12: 
 13:       const varieties = await varietyService.getAllVarieties();
 14:       const varietyWithWatering = varieties.find(
 15:         (v) =>
 16:           v.protocols?.watering && Object.keys(v.protocols.watering).length > 0
 17:       );
 18: 
 19:       if (!varietyWithWatering) {
 20: 
 21:         return;
 22:       }
 23: 
 24:       const plantId = await plantService.addPlant({
 25:         varietyId: varietyWithWatering.id,
 26:         varietyName: varietyWithWatering.name,
 27:         name: "Test Plant",
 28:         plantedDate: new Date(),
 29:         currentStage: "vegetative",
 30:         location: "Indoor",
 31:         container: "5 gallon pot",
 32:         isActive: true,
 33:       });
 34: 
 35: 
 36:       const plant = await plantService.getPlant(plantId);
 37:       if (!plant) throw new Error("Plant not found");
 38: 
 39:       const defaults = await SmartDefaultsService.getDefaultsForPlant(plant);
 40: 
 41:       expect(defaults).toBeTruthy();
 42:       expect(defaults?.watering).toBeTruthy();
 43:       expect(defaults?.watering?.suggestedAmount).toBeGreaterThan(0);
 44:       expect(defaults?.watering?.unit).toBeDefined();
 45:       expect(defaults?.watering?.confidence).toBeDefined();
 46:       expect(defaults?.watering?.source).toBeDefined();
 47:       expect(defaults?.watering?.reasoning).toBeDefined();
 48:     });
 49: 
 50:     it("should use category defaults when variety protocol is incomplete", async () => {
 51: 
 52:       const varieties = await varietyService.getAllVarieties();
 53:       const simpleVariety = varieties.find((v) => !v.protocols?.watering);
 54: 
 55:       if (!simpleVariety) {
 56: 
 57:         return;
 58:       }
 59: 
 60:       const plantId = await plantService.addPlant({
 61:         varietyId: simpleVariety.id,
 62:         varietyName: simpleVariety.name,
 63:         name: "Test Plant",
 64:         plantedDate: new Date(),
 65:         currentStage: "vegetative",
 66:         location: "Indoor",
 67:         container: "5 gallon pot",
 68:         isActive: true,
 69:       });
 70: 
 71:       const plant = await plantService.getPlant(plantId);
 72:       if (!plant) throw new Error("Plant not found");
 73: 
 74:       const defaults = await SmartDefaultsService.getDefaultsForPlant(plant);
 75: 
 76:       expect(defaults).toBeTruthy();
 77:       expect(defaults?.watering).toBeTruthy();
 78:       expect(defaults?.watering?.source).toEqual("category");
 79:     });
 80: 
 81:     it("should extract fertilizer defaults from variety protocol", async () => {
 82:       const varieties = await varietyService.getAllVarieties();
 83:       const varietyWithFertilizer = varieties.find(
 84:         (v) =>
 85:           v.protocols?.fertilization &&
 86:           Object.keys(v.protocols.fertilization).length > 0
 87:       );
 88: 
 89:       if (!varietyWithFertilizer) {
 90: 
 91:         return;
 92:       }
 93: 
 94:       const plantId = await plantService.addPlant({
 95:         varietyId: varietyWithFertilizer.id,
 96:         varietyName: varietyWithFertilizer.name,
 97:         name: "Test Plant",
 98:         plantedDate: new Date(),
 99:         currentStage: "vegetative",
100:         location: "Indoor",
101:         container: "5 gallon pot",
102:         isActive: true,
103:       });
104: 
105:       const plant = await plantService.getPlant(plantId);
106:       if (!plant) throw new Error("Plant not found");
107: 
108:       const defaults = await SmartDefaultsService.getDefaultsForPlant(plant);
109: 
110:       expect(defaults).toBeTruthy();
111:       if (defaults?.fertilizer) {
112:         expect(defaults.fertilizer.products).toBeDefined();
113:         expect(defaults.fertilizer.products.length).toBeGreaterThan(0);
114:         expect(defaults.fertilizer.source).toBeDefined();
115:         expect(defaults.fertilizer.reasoning).toBeDefined();
116:       }
117:     });
118:   });
119: 
120:   describe("getQuickCompletionOptions", () => {
121:     it("should provide quick watering options", async () => {
122:       const varieties = await varietyService.getAllVarieties();
123:       const testVariety = varieties[0];
124: 
125:       const plantId = await plantService.addPlant({
126:         varietyId: testVariety.id,
127:         varietyName: testVariety.name,
128:         name: "Test Plant",
129:         plantedDate: new Date(),
130:         currentStage: "vegetative",
131:         location: "Indoor",
132:         container: "5 gallon pot",
133:         isActive: true,
134:       });
135: 
136:       const plant = await plantService.getPlant(plantId);
137:       if (!plant) throw new Error("Plant not found");
138: 
139:       const options = await SmartDefaultsService.getQuickCompletionOptions(
140:         plant,
141:         "water"
142:       );
143: 
144:       expect(options).toBeTruthy();
145:       if (options) {
146:         expect(options.length).toBeGreaterThan(0);
147:         expect(options.some((opt) => opt.label.includes("Quick:"))).toBe(true);
148:         expect(options[0].values.waterValue).toBeGreaterThan(0);
149:         expect(options[0].values.waterUnit).toBeDefined();
150:       }
151:     });
152: 
153:     it("should provide quick fertilizer options when available", async () => {
154:       const varieties = await varietyService.getAllVarieties();
155:       const varietyWithFertilizer = varieties.find(
156:         (v) =>
157:           v.protocols?.fertilization &&
158:           Object.keys(v.protocols.fertilization).length > 0
159:       );
160: 
161:       if (!varietyWithFertilizer) {
162: 
163:         return;
164:       }
165: 
166:       const plantId = await plantService.addPlant({
167:         varietyId: varietyWithFertilizer.id,
168:         varietyName: varietyWithFertilizer.name,
169:         name: "Test Plant",
170:         plantedDate: new Date(),
171:         currentStage: "vegetative",
172:         location: "Indoor",
173:         container: "5 gallon pot",
174:         isActive: true,
175:       });
176: 
177:       const plant = await plantService.getPlant(plantId);
178:       if (!plant) throw new Error("Plant not found");
179: 
180:       const options = await SmartDefaultsService.getQuickCompletionOptions(
181:         plant,
182:         "fertilize"
183:       );
184: 
185:       if (options) {
186:         expect(options.length).toBeGreaterThan(0);
187:         expect(options[0].label).toContain("Quick:");
188:         expect(options[0].values.product).toBeDefined();
189:         expect(options[0].values.dilution).toBeDefined();
190:         expect(options[0].values.amount).toBeDefined();
191:       }
192:     });
193:   });
194: 
195:   describe("parseWaterAmount", () => {
196: 
197:     it("should handle different water amount formats", async () => {
198:       const varieties = await varietyService.getAllVarieties();
199:       const testVariety = varieties[0];
200: 
201:       const plantId = await plantService.addPlant({
202:         varietyId: testVariety.id,
203:         varietyName: testVariety.name,
204:         name: "Test Plant",
205:         plantedDate: new Date(),
206:         currentStage: "vegetative",
207:         location: "Indoor",
208:         container: "5 gallon pot",
209:         isActive: true,
210:       });
211: 
212:       const plant = await plantService.getPlant(plantId);
213:       if (!plant) throw new Error("Plant not found");
214: 
215:       const defaults = await SmartDefaultsService.getDefaultsForPlant(plant);
216: 
217: 
218:       expect(defaults).toBeTruthy();
219:       if (defaults?.watering) {
220:         expect(defaults.watering.suggestedAmount).toBeGreaterThan(0);
221:         expect(["oz", "ml", "cups", "liters", "gallons"]).toContain(
222:           defaults.watering.unit
223:         );
224:       }
225:     });
226:   });
227: });

================
File: src/__tests__/utils/plantDisplay.test.ts
================
 1: import { getPlantDisplayName } from "@/utils/plantDisplay";
 2: import { PlantRecord } from "@/types/database";
 3: 
 4: describe("getPlantDisplayName", () => {
 5:   const basePlant: PlantRecord = {
 6:     id: "test-id",
 7:     varietyId: "some-uuid-123",
 8:     varietyName: "Roma Tomato",
 9:     plantedDate: new Date(),
10:     currentStage: "vegetative",
11:     location: "Indoor",
12:     container: "5 gallon",
13:     isActive: true,
14:     notes: [],
15:     createdAt: new Date(),
16:     updatedAt: new Date(),
17:   };
18: 
19:   it("returns custom name when provided", () => {
20:     const plant = { ...basePlant, name: "My Special Tomato" };
21:     expect(getPlantDisplayName(plant)).toBe("My Special Tomato");
22:   });
23: 
24:   it("returns variety name when no custom name", () => {
25:     const plant = { ...basePlant, name: undefined };
26:     expect(getPlantDisplayName(plant)).toBe("Roma Tomato");
27:   });
28: 
29:   it("returns fallback when no custom name or variety name", () => {
30:     const plant = { ...basePlant, name: undefined, varietyName: "" };
31:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
32:   });
33: 
34:   it("returns fallback when varietyName is empty", () => {
35:     const plant = { ...basePlant, name: undefined, varietyName: "" };
36:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
37:   });
38: 
39:   it("returns fallback when varietyName is whitespace only", () => {
40:     const plant = { ...basePlant, name: undefined, varietyName: "   " };
41:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
42:   });
43: });

================
File: src/__tests__/utils/varietyGrowthStages.test.ts
================
  1: import {
  2:   calculateCurrentStage,
  3:   getStageProgress,
  4: } from "../../utils/growthStage";
  5: import { restoreDate } from "../../setupTests";
  6: 
  7: describe("Variety-Specific Growth Stage Calculations", () => {
  8:   beforeEach(() => {
  9:     restoreDate();
 10:   });
 11: 
 12:   describe("Fast-Growing Crops (21-45 days)", () => {
 13:     const arugulaTimeline = {
 14:       germination: 5,
 15:       seedling: 14,
 16:       vegetative: 14,
 17:       maturation: 37,
 18:     };
 19: 
 20:     it("calculates arugula stages correctly", () => {
 21:       const plantedDate = new Date("2024-01-01");
 22: 
 23: 
 24:       expect(
 25:         calculateCurrentStage(
 26:           plantedDate,
 27:           arugulaTimeline,
 28:           new Date("2024-01-03")
 29:         )
 30:       ).toBe("germination");
 31: 
 32: 
 33:       expect(
 34:         calculateCurrentStage(
 35:           plantedDate,
 36:           arugulaTimeline,
 37:           new Date("2024-01-10")
 38:         )
 39:       ).toBe("seedling");
 40: 
 41: 
 42:       expect(
 43:         calculateCurrentStage(
 44:           plantedDate,
 45:           arugulaTimeline,
 46:           new Date("2024-01-25")
 47:         )
 48:       ).toBe("vegetative");
 49: 
 50: 
 51:       expect(
 52:         calculateCurrentStage(
 53:           plantedDate,
 54:           arugulaTimeline,
 55:           new Date("2024-02-10")
 56:         )
 57:       ).toBe("harvest");
 58:     });
 59: 
 60:     const spinachTimeline = {
 61:       germination: 7,
 62:       seedling: 14,
 63:       vegetative: 9,
 64:       maturation: 30,
 65:     };
 66: 
 67:     it("calculates spinach stages correctly", () => {
 68:       const plantedDate = new Date("2024-01-01");
 69: 
 70: 
 71: 
 72:       expect(
 73:         calculateCurrentStage(
 74:           plantedDate,
 75:           spinachTimeline,
 76:           new Date("2024-01-31")
 77:         )
 78:       ).toBe("harvest");
 79: 
 80:       expect(
 81:         calculateCurrentStage(
 82:           plantedDate,
 83:           spinachTimeline,
 84:           new Date("2024-01-20")
 85:         )
 86:       ).toBe("seedling");
 87:     });
 88:   });
 89: 
 90:   describe("Medium Crops (45-70 days)", () => {
 91:     const lettuceTimeline = {
 92:       germination: 7,
 93:       seedling: 18,
 94:       vegetative: 21,
 95:       maturation: 55,
 96:     };
 97: 
 98:     it("calculates lettuce stages correctly", () => {
 99:       const plantedDate = new Date("2024-01-01");
100: 
101: 
102:       expect(
103:         calculateCurrentStage(
104:           plantedDate,
105:           lettuceTimeline,
106:           new Date("2024-02-20")
107:         )
108:       ).toBe("flowering");
109:       expect(
110:         calculateCurrentStage(
111:           plantedDate,
112:           lettuceTimeline,
113:           new Date("2024-02-25")
114:         )
115:       ).toBe("harvest");
116:     });
117: 
118:     const beetTimeline = {
119:       germination: 7,
120:       seedling: 14,
121:       vegetative: 21,
122:       maturation: 60,
123:     };
124: 
125:     it("calculates beet stages correctly", () => {
126:       const plantedDate = new Date("2024-01-01");
127: 
128: 
129:       expect(
130:         calculateCurrentStage(plantedDate, beetTimeline, new Date("2024-03-01"))
131:       ).toBe("harvest");
132:     });
133: 
134:     const carrotTimeline = {
135:       germination: 14,
136:       seedling: 14,
137:       vegetative: 14,
138:       maturation: 70,
139:     };
140: 
141:     it("calculates carrot stages correctly with strict photoperiod needs", () => {
142:       const plantedDate = new Date("2024-01-01");
143: 
144: 
145:       expect(
146:         calculateCurrentStage(
147:           plantedDate,
148:           carrotTimeline,
149:           new Date("2024-01-10")
150:         )
151:       ).toBe("germination");
152:       expect(
153:         calculateCurrentStage(
154:           plantedDate,
155:           carrotTimeline,
156:           new Date("2024-01-15")
157:         )
158:       ).toBe("seedling");
159: 
160: 
161:       expect(
162:         calculateCurrentStage(
163:           plantedDate,
164:           carrotTimeline,
165:           new Date("2024-03-11")
166:         )
167:       ).toBe("harvest");
168:     });
169:   });
170: 
171:   describe("Long Crops (90+ days)", () => {
172:     const sweetPotatoTimeline = {
173:       germination: 14,
174:       seedling: 21,
175:       vegetative: 42,
176:       maturation: 100,
177:     };
178: 
179:     it("calculates sweet potato stages correctly", () => {
180:       const plantedDate = new Date("2024-01-01");
181: 
182: 
183:       expect(
184:         calculateCurrentStage(
185:           plantedDate,
186:           sweetPotatoTimeline,
187:           new Date("2024-01-10")
188:         )
189:       ).toBe("germination");
190: 
191: 
192:       expect(
193:         calculateCurrentStage(
194:           plantedDate,
195:           sweetPotatoTimeline,
196:           new Date("2024-01-25")
197:         )
198:       ).toBe("seedling");
199: 
200: 
201:       expect(
202:         calculateCurrentStage(
203:           plantedDate,
204:           sweetPotatoTimeline,
205:           new Date("2024-02-20")
206:         )
207:       ).toBe("vegetative");
208: 
209: 
210:       expect(
211:         calculateCurrentStage(
212:           plantedDate,
213:           sweetPotatoTimeline,
214:           new Date("2024-04-15")
215:         )
216:       ).toBe("harvest");
217:     });
218: 
219:     const broccoliTimeline = {
220:       germination: 7,
221:       seedling: 17,
222:       vegetative: 30,
223:       maturation: 90,
224:     };
225: 
226:     it("calculates broccoli stages correctly", () => {
227:       const plantedDate = new Date("2024-01-01");
228: 
229: 
230:       expect(
231:         calculateCurrentStage(
232:           plantedDate,
233:           broccoliTimeline,
234:           new Date("2024-04-01")
235:         )
236:       ).toBe("harvest");
237:       expect(
238:         calculateCurrentStage(
239:           plantedDate,
240:           broccoliTimeline,
241:           new Date("2024-03-15")
242:         )
243:       ).toBe("flowering");
244:     });
245: 
246:     const onionTimeline = {
247:       germination: 14,
248:       seedling: 28,
249:       vegetative: 42,
250:       maturation: 120,
251:     };
252: 
253:     it("calculates onion bulbing stages correctly", () => {
254:       const plantedDate = new Date("2024-01-01");
255: 
256: 
257:       expect(
258:         calculateCurrentStage(
259:           plantedDate,
260:           onionTimeline,
261:           new Date("2024-03-01")
262:         )
263:       ).toBe("vegetative");
264: 
265: 
266:       expect(
267:         calculateCurrentStage(
268:           plantedDate,
269:           onionTimeline,
270:           new Date("2024-05-01")
271:         )
272:       ).toBe("harvest");
273:     });
274:   });
275: 
276:   describe("Continuous Production Crops", () => {
277:     const strawberryTimeline = {
278:       germination: 21,
279:       seedling: 21,
280:       vegetative: 14,
281:       maturation: 91,
282:     };
283: 
284:     it("calculates strawberry production stages correctly", () => {
285:       const plantedDate = new Date("2024-01-01");
286: 
287: 
288:       expect(
289:         calculateCurrentStage(
290:           plantedDate,
291:           strawberryTimeline,
292:           new Date("2024-04-16")
293:         )
294:       ).toBe("harvest");
295: 
296: 
297:       expect(
298:         calculateCurrentStage(
299:           plantedDate,
300:           strawberryTimeline,
301:           new Date("2024-01-15")
302:         )
303:       ).toBe("germination");
304: 
305: 
306:       expect(
307:         calculateCurrentStage(
308:           plantedDate,
309:           strawberryTimeline,
310:           new Date("2024-02-05")
311:         )
312:       ).toBe("seedling");
313: 
314: 
315:       expect(
316:         calculateCurrentStage(
317:           plantedDate,
318:           strawberryTimeline,
319:           new Date("2024-02-20")
320:         )
321:       ).toBe("vegetative");
322: 
323: 
324:       expect(
325:         calculateCurrentStage(
326:           plantedDate,
327:           strawberryTimeline,
328:           new Date("2024-03-15")
329:         )
330:       ).toBe("flowering");
331: 
332: 
333:       expect(
334:         calculateCurrentStage(
335:           plantedDate,
336:           strawberryTimeline,
337:           new Date("2024-04-01")
338:         )
339:       ).toBe("harvest");
340:     });
341:   });
342: 
343:   describe("Stage Progress Calculations", () => {
344:     it("calculates progress correctly within stages", () => {
345:       const plantedDate = new Date("2024-01-01");
346:       const lettuceTimeline = {
347:         germination: 7,
348:         seedling: 18,
349:         vegetative: 21,
350:         maturation: 55,
351:       };
352: 
353: 
354:       const midSeedlingProgress = getStageProgress(
355:         plantedDate,
356:         lettuceTimeline,
357:         new Date("2024-01-16")
358:       );
359:       expect(midSeedlingProgress).toBeCloseTo(44, 0);
360: 
361: 
362:       const earlyGerminationProgress = getStageProgress(
363:         plantedDate,
364:         lettuceTimeline,
365:         new Date("2024-01-04")
366:       );
367:       expect(earlyGerminationProgress).toBeCloseTo(43, 0);
368: 
369: 
370:       const earlyVegetativeProgress = getStageProgress(
371:         plantedDate,
372:         lettuceTimeline,
373:         new Date("2024-01-30")
374:       );
375:       expect(earlyVegetativeProgress).toBeCloseTo(19, 0);
376:     });
377: 
378:     it("returns 100% for completed crops", () => {
379:       const plantedDate = new Date("2024-01-01");
380:       const arugulaTimeline = {
381:         germination: 5,
382:         seedling: 14,
383:         vegetative: 14,
384:         maturation: 37,
385:       };
386: 
387:       const progress = getStageProgress(
388:         plantedDate,
389:         arugulaTimeline,
390:         new Date("2024-03-01")
391:       );
392:       expect(progress).toBe(100);
393:     });
394:   });
395: 
396:   describe("Edge Cases", () => {
397:     it("handles future planting dates gracefully", () => {
398:       const plantedDate = new Date("2024-12-31");
399:       const currentDate = new Date("2024-01-01");
400:       const arugulaTimeline = {
401:         germination: 5,
402:         seedling: 14,
403:         vegetative: 14,
404:         maturation: 37,
405:       };
406: 
407:       expect(
408:         calculateCurrentStage(plantedDate, arugulaTimeline, currentDate)
409:       ).toBe("germination");
410:     });
411: 
412:     it("handles same-day calculations", () => {
413:       const plantedDate = new Date("2024-01-01");
414:       const currentDate = new Date("2024-01-01");
415:       const spinachTimeline = {
416:         germination: 7,
417:         seedling: 14,
418:         vegetative: 14,
419:         maturation: 30,
420:       };
421: 
422:       expect(
423:         calculateCurrentStage(plantedDate, spinachTimeline, currentDate)
424:       ).toBe("germination");
425:     });
426:   });
427: });

================
File: src/assets/react.svg
================
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/layouts/EmptyState.tsx
================
 1: import React from "react";
 2: import { Card, CardContent } from "@/components/ui/Card";
 3: import { Button } from "@/components/ui/Button";
 4: import { Link } from "react-router-dom";
 5: 
 6: interface EmptyStateProps {
 7:   title: string;
 8:   description: string;
 9:   icon: string;
10:   actionLabel: string;
11:   actionTo: string;
12:   showWelcome?: boolean;
13: }
14: 
15: const EmptyState: React.FC<EmptyStateProps> = ({
16:   title,
17:   description,
18:   icon,
19:   actionLabel,
20:   actionTo,
21:   showWelcome = false,
22: }) => {
23:   return (
24:     <div className="flex items-center justify-center min-h-96">
25:       <Card className="w-full max-w-md mx-4 shadow-sm border border-gray-200">
26:         <CardContent className="text-center py-12 px-6 space-y-6">
27:           {showWelcome && (
28:             <div className="mb-8">
29:               <h1 className="text-3xl font-bold text-gray-900 mb-2">
30:                 🌱 Welcome to SmartGarden
31:               </h1>
32:               <p className="text-gray-600">Your digital gardening companion</p>
33:             </div>
34:           )}
35: 
36:           <div className="text-6xl mb-4" role="img" aria-label={title}>
37:             {icon}
38:           </div>
39: 
40:           <div className="space-y-3">
41:             <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
42:             <p className="text-gray-600 leading-relaxed">{description}</p>
43:           </div>
44: 
45:           <div className="pt-4">
46:             <Link to={actionTo} className="block">
47:               <Button size="lg" className="w-full">
48:                 {actionLabel}
49:               </Button>
50:             </Link>
51:           </div>
52: 
53:           {showWelcome && (
54:             <div className="pt-6 border-t border-gray-100">
55:               <p className="text-sm text-gray-500">
56:                 Need help getting started?{" "}
57:                 <button
58:                   className="text-green-700 underline hover:text-green-800"
59:                   onClick={() => {
60:                     console.log("Show tutorial");
61:                   }}
62:                 >
63:                   View quick tutorial
64:                 </button>
65:               </p>
66:             </div>
67:           )}
68:         </CardContent>
69:       </Card>
70:     </div>
71:   );
72: };
73: 
74: export default EmptyState;

================
File: src/components/plant/CareActivityItem.tsx
================
  1: import React, { useState } from "react";
  2: import {
  3:   CareRecord,
  4:   WateringDetails,
  5:   FertilizingDetails,
  6:   ObservationDetails,
  7:   HarvestDetails,
  8:   TransplantDetails,
  9: } from "@/types/database";
 10: import { formatDateTime } from "@/utils/dateUtils";
 11: 
 12: interface CareActivityItemProps {
 13:   activity: CareRecord;
 14: }
 15: 
 16: const CareActivityItem: React.FC<CareActivityItemProps> = ({ activity }) => {
 17:   const [isExpanded, setIsExpanded] = useState(false);
 18: 
 19:   const getActivityIcon = (type: string): string => {
 20:     switch (type) {
 21:       case "water":
 22:         return "💧";
 23:       case "fertilize":
 24:         return "🌱";
 25:       case "observe":
 26:         return "👁️";
 27:       case "harvest":
 28:         return "🌾";
 29:       case "transplant":
 30:         return "🏺";
 31:       default:
 32:         return "📋";
 33:     }
 34:   };
 35: 
 36:   const getActivityTitle = (activity: CareRecord): string => {
 37:     switch (activity.type) {
 38:       case "water":
 39:         const waterDetails = activity.details as WateringDetails;
 40:         return `Watering (${waterDetails.amount.value} ${waterDetails.amount.unit})`;
 41:       case "fertilize":
 42:         const fertilizeDetails = activity.details as FertilizingDetails;
 43:         return `Fertilized with ${fertilizeDetails.product}`;
 44:       case "observe":
 45:         const observeDetails = activity.details as ObservationDetails;
 46:         return `Health Check (${observeDetails.healthAssessment})`;
 47:       case "harvest":
 48:         const harvestDetails = activity.details as HarvestDetails;
 49:         return `Harvested ${harvestDetails.amount}`;
 50:       case "transplant":
 51:         const transplantDetails = activity.details as TransplantDetails;
 52:         return `Transplanted to ${transplantDetails.toContainer}`;
 53:       default:
 54:         return "Care Activity";
 55:     }
 56:   };
 57: 
 58:   const renderActivityDetails = (activity: CareRecord) => {
 59:     switch (activity.type) {
 60:       case "water":
 61:         const waterDetails = activity.details as WateringDetails;
 62:         return (
 63:           <div className="space-y-2">
 64:             <div className="grid grid-cols-2 gap-4 text-sm">
 65:               <div>
 66:                 <span className="font-medium text-gray-600">Amount:</span>
 67:                 <div>
 68:                   {waterDetails.amount.value} {waterDetails.amount.unit}
 69:                 </div>
 70:               </div>
 71:               {waterDetails.method && (
 72:                 <div>
 73:                   <span className="font-medium text-gray-600">Method:</span>
 74:                   <div>{waterDetails.method.replace("-", " ")}</div>
 75:                 </div>
 76:               )}
 77:             </div>
 78:             {waterDetails.moistureReading && (
 79:               <div>
 80:                 <span className="font-medium text-gray-600">
 81:                   Moisture Reading:
 82:                 </span>
 83:                 <div className="text-sm">
 84:                   Before: {waterDetails.moistureReading.before}/10 → After:{" "}
 85:                   {waterDetails.moistureReading.after}/10
 86:                 </div>
 87:               </div>
 88:             )}
 89:             {waterDetails.runoffObserved !== undefined && (
 90:               <div>
 91:                 <span className="font-medium text-gray-600">Runoff:</span>
 92:                 <div className="text-sm">
 93:                   {waterDetails.runoffObserved ? "Yes" : "No"}
 94:                 </div>
 95:               </div>
 96:             )}
 97:           </div>
 98:         );
 99: 
100:       case "fertilize":
101:         const fertilizeDetails = activity.details as FertilizingDetails;
102:         return (
103:           <div className="space-y-2">
104:             <div className="grid grid-cols-2 gap-4 text-sm">
105:               <div>
106:                 <span className="font-medium text-gray-600">Product:</span>
107:                 <div>{fertilizeDetails.product}</div>
108:               </div>
109:               <div>
110:                 <span className="font-medium text-gray-600">Dilution:</span>
111:                 <div>{fertilizeDetails.dilution}</div>
112:               </div>
113:               <div>
114:                 <span className="font-medium text-gray-600">Amount:</span>
115:                 <div>{fertilizeDetails.amount}</div>
116:               </div>
117:             </div>
118:           </div>
119:         );
120: 
121:       case "observe":
122:         const observeDetails = activity.details as ObservationDetails;
123:         return (
124:           <div className="space-y-2">
125:             <div>
126:               <span className="font-medium text-gray-600">
127:                 Health Assessment:
128:               </span>
129:               <div className="text-sm capitalize">
130:                 {observeDetails.healthAssessment}
131:               </div>
132:             </div>
133:             <div>
134:               <span className="font-medium text-gray-600">Observations:</span>
135:               <div className="text-sm">{observeDetails.observations}</div>
136:             </div>
137:             {observeDetails.photos && observeDetails.photos.length > 0 && (
138:               <div>
139:                 <span className="font-medium text-gray-600">Photos:</span>
140:                 <div className="text-sm">
141:                   {observeDetails.photos.length} photo(s) attached
142:                 </div>
143:               </div>
144:             )}
145:           </div>
146:         );
147: 
148:       case "harvest":
149:         const harvestDetails = activity.details as HarvestDetails;
150:         return (
151:           <div className="space-y-2">
152:             <div className="grid grid-cols-2 gap-4 text-sm">
153:               <div>
154:                 <span className="font-medium text-gray-600">Amount:</span>
155:                 <div>{harvestDetails.amount}</div>
156:               </div>
157:               <div>
158:                 <span className="font-medium text-gray-600">Quality:</span>
159:                 <div className="capitalize">{harvestDetails.quality}</div>
160:               </div>
161:             </div>
162:             {harvestDetails.method && (
163:               <div>
164:                 <span className="font-medium text-gray-600">Method:</span>
165:                 <div className="text-sm">{harvestDetails.method}</div>
166:               </div>
167:             )}
168:           </div>
169:         );
170: 
171:       case "transplant":
172:         const transplantDetails = activity.details as TransplantDetails;
173:         return (
174:           <div className="space-y-2">
175:             <div className="grid grid-cols-2 gap-4 text-sm">
176:               <div>
177:                 <span className="font-medium text-gray-600">From:</span>
178:                 <div>{transplantDetails.fromContainer}</div>
179:               </div>
180:               <div>
181:                 <span className="font-medium text-gray-600">To:</span>
182:                 <div>{transplantDetails.toContainer}</div>
183:               </div>
184:             </div>
185:             <div>
186:               <span className="font-medium text-gray-600">Reason:</span>
187:               <div className="text-sm">{transplantDetails.reason}</div>
188:             </div>
189:           </div>
190:         );
191: 
192:       default:
193:         return null;
194:     }
195:   };
196: 
197:   return (
198:     <div className="border border-gray-200 rounded-lg">
199:       <div
200:         className="p-4 cursor-pointer hover:bg-gray-50 transition-colors"
201:         onClick={() => setIsExpanded(!isExpanded)}
202:       >
203:         <div className="flex items-start gap-3">
204:           <div className="text-xl">{getActivityIcon(activity.type)}</div>
205:           <div className="flex-1 min-w-0">
206:             <div className="flex items-start justify-between">
207:               <div>
208:                 <h4 className="font-medium text-gray-900 text-sm">
209:                   {getActivityTitle(activity)}
210:                 </h4>
211:                 <p className="text-xs text-gray-500 mt-1">
212:                   {formatDateTime(activity.date)}
213:                 </p>
214:               </div>
215:               <svg
216:                 className={`w-4 h-4 text-gray-400 transition-transform ${
217:                   isExpanded ? "rotate-180" : ""
218:                 }`}
219:                 fill="none"
220:                 stroke="currentColor"
221:                 viewBox="0 0 24 24"
222:               >
223:                 <path
224:                   strokeLinecap="round"
225:                   strokeLinejoin="round"
226:                   strokeWidth={2}
227:                   d="M19 9l-7 7-7-7"
228:                 />
229:               </svg>
230:             </div>
231:           </div>
232:         </div>
233:       </div>
234: 
235:       {isExpanded && (
236:         <div className="px-4 pb-4 border-t border-gray-100 bg-gray-50">
237:           <div className="pt-3">
238:             {renderActivityDetails(activity)}
239: 
240:             {activity.details.notes && (
241:               <div className="mt-3 pt-3 border-t border-gray-200">
242:                 <span className="font-medium text-gray-600">Notes:</span>
243:                 <div className="text-sm text-gray-700 mt-1">
244:                   {activity.details.notes}
245:                 </div>
246:               </div>
247:             )}
248:           </div>
249:         </div>
250:       )}
251:     </div>
252:   );
253: };
254: 
255: export default CareActivityItem;

================
File: src/components/plant/PlantStageDisplay.tsx
================
 1: import { PlantRecord } from "@/types/database";
 2: import { useDynamicStage } from "@/hooks/useDynamicStage";
 3: 
 4: interface PlantStageDisplayProps {
 5:   plant: PlantRecord;
 6:   showEmoji?: boolean;
 7:   className?: string;
 8: }
 9: 
10: const PlantStageDisplay = ({
11:   plant,
12:   showEmoji = false,
13:   className = "text-sm font-medium text-muted-foreground capitalize",
14: }: PlantStageDisplayProps) => {
15:   const calculatedStage = useDynamicStage(plant);
16: 
17:   return (
18:     <div className={className}>
19:       {showEmoji && <span className="mr-1">🌱</span>}
20:       Stage: {calculatedStage}
21:     </div>
22:   );
23: };
24: 
25: export default PlantStageDisplay;

================
File: src/components/plant/ReminderPreferencesSection.tsx
================
 1: import { Switch } from "@/components/ui/Switch";
 2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
 3: 
 4: 
 5: interface ReminderPreferences {
 6:   watering: boolean;
 7:   fertilizing: boolean;
 8:   observation: boolean;
 9:   lighting: boolean;
10:   pruning: boolean;
11: }
12: 
13: interface ReminderPreferencesProps {
14:   preferences: ReminderPreferences;
15:   onChange: (preferences: ReminderPreferences) => void;
16: }
17: 
18: const ReminderPreferencesSection = ({
19:   preferences,
20:   onChange,
21: }: ReminderPreferencesProps) => {
22:   const handleToggle = (key: keyof ReminderPreferences) => {
23:     onChange({
24:       ...preferences,
25:       [key]: !preferences[key],
26:     });
27:   };
28: 
29:   const reminderTypes = [
30:     {
31:       key: "watering" as const,
32:       label: "Watering",
33:       icon: "💧",
34:       description: "Get notified when watering is due",
35:     },
36:     {
37:       key: "fertilizing" as const,
38:       label: "Fertilizing",
39:       icon: "🌱",
40:       description: "Reminders for feeding schedule",
41:     },
42:     {
43:       key: "observation" as const,
44:       label: "Health Checks",
45:       icon: "👁️",
46:       description: "Regular observation reminders",
47:     },
48:     {
49:       key: "lighting" as const,
50:       label: "Lighting",
51:       icon: "💡",
52:       description: "Light schedule adjustments",
53:     },
54:     {
55:       key: "pruning" as const,
56:       label: "Maintenance",
57:       icon: "✂️",
58:       description: "Pruning and maintenance tasks",
59:     },
60:   ];
61: 
62:   return (
63:     <Card className="border-emerald-200 bg-emerald-50/30">
64:       <CardHeader className="pb-3">
65:         <CardTitle className="text-lg flex items-center gap-2">
66:           <span>🔔</span>
67:           Reminder Preferences
68:         </CardTitle>
69:         <p className="text-sm text-gray-600">
70:           Choose which types of care reminders you'd like to receive for this
71:           plant
72:         </p>
73:       </CardHeader>
74:       <CardContent className="space-y-3">
75:         {reminderTypes.map(({ key, label, icon, description }) => (
76:           <div
77:             key={key}
78:             className="flex items-center justify-between p-3 rounded-lg border border-emerald-100 bg-white/50 hover:bg-white/80 transition-colors"
79:           >
80:             <div className="flex-1">
81:               <div className="flex items-center gap-2 mb-1">
82:                 <span className="text-lg">{icon}</span>
83:                 <span className="font-medium text-gray-900">{label}</span>
84:               </div>
85:               <p className="text-sm text-gray-600">{description}</p>
86:             </div>
87:             <Switch
88:               checked={preferences[key]}
89:               onCheckedChange={() => handleToggle(key)}
90:               className="ml-4"
91:             />
92:           </div>
93:         ))}
94:       </CardContent>
95:     </Card>
96:   );
97: };
98: 
99: export default ReminderPreferencesSection;

================
File: src/components/ui/Button.tsx
================
  1: import React from "react";
  2: import { cn } from "@/utils/cn";
  3: 
  4: interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  5:   variant?: "primary" | "secondary" | "outline" | "ghost" | "destructive";
  6:   size?: "sm" | "md" | "lg" | "xl";
  7:   children: React.ReactNode;
  8:   loading?: boolean;
  9:   leftIcon?: React.ReactNode;
 10:   rightIcon?: React.ReactNode;
 11: }
 12: 
 13: export const Button: React.FC<ButtonProps> = ({
 14:   variant = "primary",
 15:   size = "md",
 16:   className,
 17:   children,
 18:   loading = false,
 19:   leftIcon,
 20:   rightIcon,
 21:   disabled,
 22:   ...props
 23: }) => {
 24:   const baseClasses = [
 25:     "inline-flex items-center justify-center",
 26:     "font-bold tracking-wide",
 27:     "rounded-2xl",
 28:     "transition-all duration-200 ease-out",
 29:     "focus:outline-none focus:ring-4 focus:ring-offset-0",
 30:     "active:scale-95",
 31:     "disabled:opacity-50 disabled:cursor-not-allowed disabled:active:scale-100",
 32:     "select-none",
 33:     "relative overflow-hidden",
 34:   ].join(" ");
 35: 
 36:   const variantClasses = {
 37:     primary: [
 38:       "bg-gradient-to-r from-emerald-500 to-green-600",
 39:       "text-white",
 40:       "hover:from-emerald-600 hover:to-green-700",
 41:       "active:from-emerald-700 active:to-green-800",
 42:       "focus:ring-emerald-400/50",
 43:       "shadow-lg shadow-emerald-500/25",
 44:       "hover:shadow-xl hover:shadow-emerald-500/30",
 45:       "border-0",
 46:     ].join(" "),
 47: 
 48:     secondary: [
 49:       "bg-gradient-to-r from-amber-400 to-orange-500",
 50:       "text-white",
 51:       "hover:from-amber-500 hover:to-orange-600",
 52:       "focus:ring-amber-400/50",
 53:       "shadow-lg shadow-amber-400/25",
 54:       "border-0",
 55:     ].join(" "),
 56: 
 57:     outline: [
 58:       "bg-card text-primary",
 59:       "hover:bg-muted hover:text-primary",
 60:       "active:bg-muted",
 61:       "focus:ring-ring/50",
 62:       "border-2 border-border",
 63:       "hover:border-ring",
 64:       "shadow-sm hover:shadow-md",
 65:     ].join(" "),
 66: 
 67:     ghost: [
 68:       "bg-transparent text-muted-foreground",
 69:       "hover:bg-muted hover:text-foreground",
 70:       "active:bg-muted",
 71:       "focus:ring-ring/50",
 72:       "border-0",
 73:       "shadow-none",
 74:     ].join(" "),
 75: 
 76:     destructive: [
 77:       "bg-gradient-to-r from-red-500 to-pink-600",
 78:       "text-white",
 79:       "hover:from-red-600 hover:to-pink-700",
 80:       "focus:ring-red-400/50",
 81:       "shadow-lg shadow-red-500/25",
 82:       "border-0",
 83:     ].join(" "),
 84:   };
 85: 
 86:   const sizeClasses = {
 87:     sm: "px-5 py-2.5 text-sm min-h-10 gap-2",
 88:     md: "px-7 py-3.5 text-base min-h-12 gap-2.5",
 89:     lg: "px-9 py-4.5 text-lg min-h-14 gap-3",
 90:     xl: "px-11 py-6 text-xl min-h-16 gap-3",
 91:   };
 92: 
 93:   const LoadingSpinner = () => (
 94:     <div className="w-5 h-5 border-3 border-white/30 border-t-white rounded-full animate-spin" />
 95:   );
 96: 
 97:   return (
 98:     <button
 99:       className={cn(
100:         baseClasses,
101:         variantClasses[variant],
102:         sizeClasses[size],
103:         className
104:       )}
105:       disabled={disabled || loading}
106:       {...props}
107:     >
108:       {loading ? (
109:         <>
110:           <LoadingSpinner />
111:           <span className="ml-2">Loading...</span>
112:         </>
113:       ) : (
114:         <>
115:           {leftIcon && <span className="flex-shrink-0">{leftIcon}</span>}
116:           <span>{children}</span>
117:           {rightIcon && <span className="flex-shrink-0">{rightIcon}</span>}
118:         </>
119:       )}
120:     </button>
121:   );
122: };

================
File: src/components/ui/Card.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface CardProps {
 5:   children: React.ReactNode;
 6:   className?: string;
 7: }
 8: 
 9: interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {
10:   children: React.ReactNode;
11:   className?: string;
12: }
13: export function Card({ children, className }: CardProps) {
14:   return (
15:     <div
16:       className={cn(
17:         "rounded-lg border bg-card text-card-foreground shadow-sm",
18:         className
19:       )}
20:     >
21:       {children}
22:     </div>
23:   );
24: }
25: 
26: export function CardHeader({ children, className }: CardProps) {
27:   return (
28:     <div className={cn("px-6 py-4 border-b border-gray-200", className)}>
29:       {children}
30:     </div>
31:   );
32: }
33: 
34: export function CardContent({
35:   children,
36:   className,
37:   ...props
38: }: CardContentProps) {
39:   return (
40:     <div
41:       className={cn(
42:         "p-6 pt-0 text-card-foreground",
43: 
44:         className
45:       )}
46:       {...props}
47:     >
48:       {children}
49:     </div>
50:   );
51: }
52: 
53: export function CardTitle({ children, className }: CardProps) {
54:   return (
55:     <h3
56:       className={cn(
57:         "text-2xl font-semibold leading-none tracking-tight text-card-foreground",
58: 
59:         className
60:       )}
61:     >
62:       {children}
63:     </h3>
64:   );
65: }

================
File: src/components/ui/DarkModeToggle.tsx
================
 1: import React from "react";
 2: import { useDarkMode } from "@/hooks/useDarkMode";
 3: import { cn } from "@/utils/cn";
 4: 
 5: interface DarkModeToggleProps {
 6:   size?: "sm" | "md" | "lg";
 7:   className?: string;
 8:   showLabels?: boolean;
 9: }
10: 
11: export const DarkModeToggle: React.FC<DarkModeToggleProps> = ({
12:   size = "md",
13:   className,
14:   showLabels = false,
15: }) => {
16:   const { isDarkMode, toggleDarkMode } = useDarkMode();
17: 
18:   const sizeClasses = {
19:     sm: {
20:       button: "w-12 h-6",
21:       circle: "w-4 h-4",
22:       translate: "translate-x-6",
23:       icon: "text-xs",
24:     },
25:     md: {
26:       button: "w-14 h-7",
27:       circle: "w-5 h-5",
28:       translate: "translate-x-7",
29:       icon: "text-sm",
30:     },
31:     lg: {
32:       button: "w-16 h-8",
33:       circle: "w-6 h-6",
34:       translate: "translate-x-8",
35:       icon: "text-base",
36:     },
37:   };
38: 
39:   const sizes = sizeClasses[size];
40: 
41:   return (
42:     <div className={cn("flex items-center gap-2", className)}>
43:       {showLabels && (
44:         <span
45:           className={cn(
46:             "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
47:             sizes.button,
48:             isDarkMode
49:               ? "bg-emerald-600 hover:bg-emerald-700"
50:               : "bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500"
51:           )}
52:         >
53:           ☀️
54:         </span>
55:       )}
56: 
57:       <button
58:         type="button"
59:         onClick={toggleDarkMode}
60:         className={cn(
61:           "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
62:           sizes.button,
63:           isDarkMode
64:             ? "bg-emerald-600 hover:bg-emerald-700"
65:             : "bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500"
66:         )}
67:         aria-label={`Switch to ${isDarkMode ? "light" : "dark"} mode`}
68:       >
69:         <span
70:           className={cn(
71:             "pointer-events-none inline-block rounded-full bg-white shadow transform ring-0 transition duration-200 ease-in-out flex items-center justify-center",
72:             sizes.circle,
73:             isDarkMode ? sizes.translate : "translate-x-0"
74:           )}
75:         >
76:           <span className={cn(sizes.icon)}>{isDarkMode ? "🌙" : "☀️"}</span>
77:         </span>
78:       </button>
79: 
80:       {showLabels && (
81:         <span
82:           className={cn(
83:             "text-sm font-medium transition-colors",
84:             isDarkMode
85:               ? "text-emerald-700 dark:text-emerald-500"
86:               : "text-gray-500 dark:text-gray-400"
87:           )}
88:         >
89:           🌙
90:         </span>
91:       )}
92:     </div>
93:   );
94: };

================
File: src/components/ui/LoadingSpinner.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface LoadingSpinnerProps {
 5:   size?: "sm" | "md" | "lg";
 6:   className?: string;
 7: }
 8: 
 9: export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
10:   size = "md",
11:   className,
12: }) => {
13:   const sizeClasses = {
14:     sm: "w-4 h-4",
15:     md: "w-6 h-6",
16:     lg: "w-8 h-8",
17:   };
18: 
19:   return (
20:     <div className={cn("flex items-center justify-center", className)}>
21:       <div
22:         className={cn(
23:           "animate-spin rounded-full border-2 border-garden-200 border-t-garden-600",
24:           sizeClasses[size]
25:         )}
26:       />
27:     </div>
28:   );
29: };

================
File: src/components/ui/LocationToggle.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface LocationToggleProps {
 5:   isOutdoor: boolean;
 6:   onChange: (isOutdoor: boolean) => void;
 7:   disabled?: boolean;
 8:   className?: string;
 9: }
10: 
11: export const LocationToggle: React.FC<LocationToggleProps> = ({
12:   isOutdoor,
13:   onChange,
14:   disabled = false,
15:   className,
16: }) => {
17:   return (
18:     <div
19:       className={cn(
20:         "relative inline-flex rounded-lg p-1 bg-gray-100",
21:         className
22:       )}
23:     >
24:       <button
25:         type="button"
26:         disabled={disabled}
27:         onClick={() => onChange(false)}
28:         className={cn(
29:           "relative flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
30:           !isOutdoor
31:             ? "bg-white text-emerald-700 shadow-sm"
32:             : "text-gray-600 hover:text-gray-900",
33:           disabled && "opacity-50 cursor-not-allowed"
34:         )}
35:       >
36:         <span className="text-lg">🏠</span>
37:         <span>Indoor</span>
38:       </button>
39: 
40:       <button
41:         type="button"
42:         disabled={disabled}
43:         onClick={() => onChange(true)}
44:         className={cn(
45:           "relative flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
46:           isOutdoor
47:             ? "bg-white text-emerald-700 shadow-sm"
48:             : "text-gray-600 hover:text-gray-900",
49:           disabled && "opacity-50 cursor-not-allowed"
50:         )}
51:       >
52:         <span className="text-lg">🌞</span>
53:         <span>Outdoor</span>
54:       </button>
55:     </div>
56:   );
57: };

================
File: src/components/ui/OfflineIndicator.tsx
================
 1: import React, { useState, useEffect } from "react";
 2: 
 3: export const OfflineIndicator: React.FC = () => {
 4:   const [isOnline, setIsOnline] = useState(navigator.onLine);
 5: 
 6:   useEffect(() => {
 7:     function handleOnline() {
 8:       setIsOnline(true);
 9:     }
10: 
11:     function handleOffline() {
12:       setIsOnline(false);
13:     }
14: 
15:     window.addEventListener("online", handleOnline);
16:     window.addEventListener("offline", handleOffline);
17: 
18:     return () => {
19:       window.removeEventListener("online", handleOnline);
20:       window.removeEventListener("offline", handleOffline);
21:     };
22:   }, []);
23: 
24:   if (isOnline) return null;
25: 
26:   return (
27:     <div className="fixed top-0 left-0 right-0 bg-red-600 text-white px-4 py-2 text-center text-sm font-medium z-50">
28:       📡 You're offline - Data will sync when connection returns
29:     </div>
30:   );
31: };

================
File: src/components/ui/StatusBadge.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface StatusBadgeProps {
 5:   status: "healthy" | "attention" | "critical" | "new";
 6:   size?: "sm" | "md";
 7: }
 8: 
 9: export const StatusBadge: React.FC<StatusBadgeProps> = ({
10:   status,
11:   size = "md",
12: }) => {
13:   const baseClasses = "inline-flex items-center font-medium rounded-full";
14: 
15:   const sizeClasses = {
16:     sm: "px-2 py-0.5 text-xs",
17:     md: "px-2.5 py-1 text-sm",
18:   };
19: 
20:   const statusClasses = {
21:     healthy: "bg-green-100 text-green-800",
22:     attention: "bg-yellow-100 text-yellow-800",
23:     critical: "bg-red-100 text-red-800",
24:     new: "bg-blue-100 text-blue-800",
25:   };
26: 
27:   const statusIcons = {
28:     healthy: "✅",
29:     attention: "⚠️",
30:     critical: "🚨",
31:     new: "🌱",
32:   };
33: 
34:   return (
35:     <span className={cn(baseClasses, sizeClasses[size], statusClasses[status])}>
36:       <span className="mr-1">{statusIcons[status]}</span>
37:       {status}
38:     </span>
39:   );
40: };

================
File: src/components/ui/Switch.tsx
================
  1: import React from "react";
  2: import { cn } from "@/utils/cn";
  3: 
  4: interface SwitchProps {
  5:   checked: boolean;
  6:   onCheckedChange: (checked: boolean) => void;
  7:   disabled?: boolean;
  8:   leftLabel?: string;
  9:   rightLabel?: string;
 10:   leftIcon?: React.ReactNode;
 11:   rightIcon?: React.ReactNode;
 12:   size?: "sm" | "md" | "lg";
 13:   className?: string;
 14:   id?: string;
 15:   "aria-label"?: string;
 16:   "aria-labelledby"?: string;
 17: }
 18: 
 19: export const Switch: React.FC<SwitchProps> = ({
 20:   checked,
 21:   onCheckedChange,
 22:   disabled = false,
 23:   leftLabel,
 24:   rightLabel,
 25:   leftIcon,
 26:   rightIcon,
 27:   size = "md",
 28:   className,
 29:   id,
 30:   "aria-label": ariaLabel,
 31:   "aria-labelledby": ariaLabelledBy,
 32: }) => {
 33:   const sizeClasses = {
 34:     sm: {
 35:       track: "w-10 h-5",
 36:       thumb: "w-4 h-4",
 37:       translate: "translate-x-5",
 38:       text: "text-sm",
 39:       gap: "gap-2",
 40:     },
 41:     md: {
 42:       track: "w-12 h-6",
 43:       thumb: "w-5 h-5",
 44:       translate: "translate-x-6",
 45:       text: "text-base",
 46:       gap: "gap-3",
 47:     },
 48:     lg: {
 49:       track: "w-14 h-7",
 50:       thumb: "w-6 h-6",
 51:       translate: "translate-x-7",
 52:       text: "text-lg",
 53:       gap: "gap-4",
 54:     },
 55:   };
 56: 
 57:   const sizes = sizeClasses[size];
 58: 
 59:   return (
 60:     <div className={cn("flex items-center", sizes.gap, className)}>
 61:       {}
 62:       {(leftLabel || leftIcon) && (
 63:         <div
 64:           className={cn(
 65:             "flex items-center gap-2 transition-colors duration-200",
 66:             sizes.text,
 67:             !checked ? "text-emerald-700 font-semibold" : "text-gray-500",
 68:             disabled && "opacity-50"
 69:           )}
 70:         >
 71:           {leftIcon && <span className="flex-shrink-0">{leftIcon}</span>}
 72:           {leftLabel && <span>{leftLabel}</span>}
 73:         </div>
 74:       )}
 75: 
 76:       {}
 77:       <button
 78:         type="button"
 79:         role="switch"
 80:         aria-checked={checked}
 81:         aria-label={ariaLabel}
 82:         aria-labelledby={ariaLabelledBy}
 83:         id={id}
 84:         disabled={disabled}
 85:         onClick={() => onCheckedChange(!checked)}
 86:         className={cn(
 87:           "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
 88:           sizes.track,
 89:           checked
 90:             ? "bg-emerald-600 hover:bg-emerald-700"
 91:             : "bg-gray-300 hover:bg-gray-400",
 92:           disabled && "cursor-not-allowed opacity-50 hover:bg-gray-300"
 93:         )}
 94:       >
 95:         <span
 96:           className={cn(
 97:             "pointer-events-none inline-block rounded-full bg-white shadow transform ring-0 transition duration-200 ease-in-out",
 98:             sizes.thumb,
 99:             checked ? sizes.translate : "translate-x-0"
100:           )}
101:         />
102:       </button>
103: 
104:       {}
105:       {(rightLabel || rightIcon) && (
106:         <div
107:           className={cn(
108:             "flex items-center gap-2 transition-colors duration-200",
109:             sizes.text,
110:             checked ? "text-emerald-700 font-semibold" : "text-gray-500",
111:             disabled && "opacity-50"
112:           )}
113:         >
114:           {rightIcon && <span className="flex-shrink-0">{rightIcon}</span>}
115:           {rightLabel && <span>{rightLabel}</span>}
116:         </div>
117:       )}
118:     </div>
119:   );
120: };

================
File: src/db/schema.ts
================
 1: import Dexie, { Table } from "dexie";
 2: import {
 3:   PlantInstance,
 4:   PlantVariety,
 5:   CareActivity,
 6:   UserSettings,
 7: } from "../types";
 8: 
 9: export interface Database extends Dexie {
10:   plantVarieties: Table<PlantVariety>;
11:   plantInstances: Table<PlantInstance>;
12:   careActivities: Table<CareActivity>;
13:   userSettings: Table<UserSettings>;
14:   syncQueue: Table<SyncQueueItem>;
15: }
16: 
17: 
18: export type SyncQueueItem =
19:   | {
20:       id?: number;
21:       entity: "plantInstance";
22:       action: "create" | "update" | "delete";
23:       data: Partial<PlantInstance>;
24:       timestamp: Date;
25:       synced: boolean;
26:     }
27:   | {
28:       id?: number;
29:       entity: "careActivity";
30:       action: "create" | "update" | "delete";
31:       data: Partial<CareActivity>;
32:       timestamp: Date;
33:       synced: boolean;
34:     }
35:   | {
36:       id?: number;
37:       entity: "plantVariety";
38:       action: "create" | "update" | "delete";
39:       data: Partial<PlantVariety>;
40:       timestamp: Date;
41:       synced: boolean;
42:     }
43:   | {
44:       id?: number;
45:       entity: "userSettings";
46:       action: "create" | "update" | "delete";
47:       data: Partial<UserSettings>;
48:       timestamp: Date;
49:       synced: boolean;
50:     };
51: 
52: export const db = new Dexie("SmartGardenDB") as Database;
53: 
54: db.version(1).stores({
55:   plantVarieties: "++id, name, category",
56:   plantInstances: "++id, varietyId, plantedDate, currentStage, isActive",
57:   careActivities: "++id, plantId, type, date",
58:   userSettings: "++id",
59:   syncQueue: "++id, entity, synced, timestamp",
60: });
61: 
62: 
63: 
64: export const syncQueueHelpers = {
65: 
66:   async addToSyncQueue<T extends SyncQueueItem>(
67:     item: Omit<T, "id" | "timestamp" | "synced">
68:   ): Promise<number> {
69:     const syncItem: Omit<SyncQueueItem, "id"> = {
70:       ...item,
71:       timestamp: new Date(),
72:       synced: false,
73:     };
74:     return await db.syncQueue.add(syncItem as SyncQueueItem);
75:   },
76: 
77: 
78:   async getUnsyncedItems(
79:     entity?: SyncQueueItem["entity"]
80:   ): Promise<SyncQueueItem[]> {
81:     if (entity) {
82:       return await db.syncQueue
83:         .where("entity")
84:         .equals(entity)
85:         .and((item) => !item.synced)
86:         .toArray();
87:     }
88:     return await db.syncQueue.where("synced").equals(0).toArray();
89:   },
90: 
91: 
92:   async markAsSynced(ids: number[]): Promise<void> {
93:     await db.syncQueue.where("id").anyOf(ids).modify({ synced: true });
94:   },
95: };

================
File: src/hooks/useAppInitialization.ts
================
 1: import { useEffect } from "react";
 2: import { GrowthStageService } from "@/services/growthStageService";
 3: 
 4: export function useAppInitialization() {
 5:   useEffect(() => {
 6:     const initializeApp = async () => {
 7:       try {
 8: 
 9:         await GrowthStageService.updatePlantStages();
10:       } catch (error) {
11:         console.error("Error during app initialization:", error);
12:       }
13:     };
14: 
15:     initializeApp();
16:   }, []);
17: }

================
File: src/hooks/useDarkMode.ts
================
 1: import { useState, useEffect } from "react";
 2: 
 3: export const useDarkMode = () => {
 4:   const [isDarkMode, setIsDarkMode] = useState(() => {
 5: 
 6:     const saved = localStorage.getItem("darkMode");
 7:     if (saved !== null) {
 8:       return JSON.parse(saved);
 9:     }
10: 
11: 
12:     return window.matchMedia("(prefers-color-scheme: dark)").matches;
13:   });
14: 
15:   useEffect(() => {
16: 
17:     if (isDarkMode) {
18:       document.documentElement.classList.add("dark");
19:     } else {
20:       document.documentElement.classList.remove("dark");
21:     }
22: 
23: 
24:     localStorage.setItem("darkMode", JSON.stringify(isDarkMode));
25:   }, [isDarkMode]);
26: 
27: 
28:   useEffect(() => {
29:     const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
30:     const handleChange = (e: MediaQueryListEvent) => {
31: 
32:       const saved = localStorage.getItem("darkMode");
33:       if (saved === null) {
34:         setIsDarkMode(e.matches);
35:       }
36:     };
37: 
38:     mediaQuery.addEventListener("change", handleChange);
39:     return () => mediaQuery.removeEventListener("change", handleChange);
40:   }, []);
41: 
42:   return { isDarkMode, toggleDarkMode: () => setIsDarkMode(!isDarkMode) };
43: };

================
File: src/hooks/useFirstTimeUser.ts
================
 1: import { useState, useEffect } from "react";
 2: import { plantService } from "@/types/database";
 3: 
 4: export const useFirstTimeUser = () => {
 5:   const [isFirstTime, setIsFirstTime] = useState<boolean | null>(null);
 6:   const [isLoading, setIsLoading] = useState(true);
 7: 
 8:   useEffect(() => {
 9:     const checkFirstTimeUser = async () => {
10:       try {
11: 
12:         const plants = await plantService.getActivePlants();
13: 
14: 
15:         const hasCompletedOnboarding = localStorage.getItem(
16:           "smartgarden_onboarding_completed"
17:         );
18: 
19:         setIsFirstTime(plants.length === 0 && !hasCompletedOnboarding);
20:       } catch (error) {
21:         console.error("Error checking first time user:", error);
22:         setIsFirstTime(false);
23:       } finally {
24:         setIsLoading(false);
25:       }
26:     };
27: 
28:     checkFirstTimeUser();
29:   }, []);
30: 
31:   const markOnboardingComplete = () => {
32:     localStorage.setItem("smartgarden_onboarding_completed", "true");
33:     setIsFirstTime(false);
34:   };
35: 
36:   return {
37:     isFirstTime,
38:     isLoading,
39:     markOnboardingComplete,
40:   };
41: };

================
File: src/hooks/useNextPlantTask.ts
================
 1: import { useState, useEffect } from "react";
 2: import { CareSchedulingService } from "@/services/careSchedulingService";
 3: import { UpcomingTask } from "@/types/scheduling";
 4: 
 5: export const useNextPlantTask = (plantId: string) => {
 6:   const [nextTask, setNextTask] = useState<UpcomingTask | null>(null);
 7:   const [isLoading, setIsLoading] = useState(true);
 8: 
 9:   useEffect(() => {
10:     let mounted = true;
11: 
12:     const loadNextTask = async () => {
13:       try {
14:         setIsLoading(true);
15:         const task = await CareSchedulingService.getNextTaskForPlant(plantId);
16:         if (mounted) {
17:           setNextTask(task);
18:         }
19:       } catch (error) {
20:         console.error(`Failed to load next task for plant ${plantId}:`, error);
21:         if (mounted) {
22:           setNextTask(null);
23:         }
24:       } finally {
25:         if (mounted) {
26:           setIsLoading(false);
27:         }
28:       }
29:     };
30: 
31:     loadNextTask();
32: 
33:     return () => {
34:       mounted = false;
35:     };
36:   }, [plantId]);
37: 
38:   return { nextTask, isLoading };
39: };

================
File: src/pages/care/PhotoCapture.tsx
================
  1: import React, { useState, useRef } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: 
  4: interface PhotoCaptureProps {
  5:   photos: string[];
  6:   onPhotosChange: (photos: string[]) => void;
  7:   maxPhotos?: number;
  8: }
  9: 
 10: export function PhotoCapture({
 11:   photos,
 12:   onPhotosChange,
 13:   maxPhotos = 5,
 14: }: PhotoCaptureProps) {
 15:   const [isCapturing, setIsCapturing] = useState(false);
 16:   const [error, setError] = useState<string | null>(null);
 17:   const videoRef = useRef<HTMLVideoElement>(null);
 18:   const canvasRef = useRef<HTMLCanvasElement>(null);
 19:   const streamRef = useRef<MediaStream | null>(null);
 20: 
 21: 
 22:   async function startCamera() {
 23:     setError(null);
 24:     setIsCapturing(true);
 25: 
 26:     try {
 27: 
 28:       const stream = await navigator.mediaDevices.getUserMedia({
 29:         video: {
 30:           facingMode: "environment",
 31:           width: { ideal: 1280 },
 32:           height: { ideal: 720 },
 33:         },
 34:       });
 35: 
 36:       if (videoRef.current) {
 37:         videoRef.current.srcObject = stream;
 38:         streamRef.current = stream;
 39:       }
 40:     } catch (err) {
 41:       console.error("Failed to start camera:", err);
 42:       setError("Unable to access camera. Please check permissions.");
 43:       setIsCapturing(false);
 44:     }
 45:   }
 46: 
 47: 
 48:   function stopCamera() {
 49:     if (streamRef.current) {
 50:       streamRef.current.getTracks().forEach((track) => track.stop());
 51:       streamRef.current = null;
 52:     }
 53:     setIsCapturing(false);
 54:   }
 55: 
 56: 
 57:   function capturePhoto() {
 58:     if (!videoRef.current || !canvasRef.current) return;
 59: 
 60:     const video = videoRef.current;
 61:     const canvas = canvasRef.current;
 62:     const context = canvas.getContext("2d");
 63: 
 64:     if (!context) return;
 65: 
 66: 
 67:     canvas.width = video.videoWidth;
 68:     canvas.height = video.videoHeight;
 69: 
 70: 
 71:     context.drawImage(video, 0, 0, canvas.width, canvas.height);
 72: 
 73: 
 74:     canvas.toBlob(
 75:       (blob) => {
 76:         if (blob) {
 77:           const photoUrl = URL.createObjectURL(blob);
 78:           onPhotosChange([...photos, photoUrl]);
 79:         }
 80:       },
 81:       "image/jpeg",
 82:       0.8
 83:     );
 84: 
 85:     stopCamera();
 86:   }
 87: 
 88: 
 89:   function removePhoto(index: number) {
 90:     const newPhotos = photos.filter((_, i) => i !== index);
 91:     onPhotosChange(newPhotos);
 92:   }
 93: 
 94: 
 95:   function handleFileInput(event: React.ChangeEvent<HTMLInputElement>) {
 96:     const files = event.target.files;
 97:     if (!files) return;
 98: 
 99:     Array.from(files).forEach((file) => {
100:       if (file.type.startsWith("image/")) {
101:         const photoUrl = URL.createObjectURL(file);
102:         onPhotosChange([...photos, photoUrl]);
103:       }
104:     });
105: 
106: 
107:     event.target.value = "";
108:   }
109: 
110:   const canAddMore = photos.length < maxPhotos;
111: 
112:   return (
113:     <div className="space-y-4">
114:       {}
115:       {isCapturing ? (
116:         <div className="space-y-4">
117:           <div className="relative bg-black rounded-lg overflow-hidden">
118:             <video
119:               ref={videoRef}
120:               autoPlay
121:               playsInline
122:               className="w-full h-64 object-cover"
123:             />
124:             <canvas ref={canvasRef} className="hidden" />
125:           </div>
126: 
127:           <div className="flex gap-2">
128:             <Button
129:               type="button"
130:               variant="primary"
131:               onClick={capturePhoto}
132:               className="flex-1"
133:             >
134:               📸 Capture Photo
135:             </Button>
136:             <Button type="button" variant="outline" onClick={stopCamera}>
137:               Cancel
138:             </Button>
139:           </div>
140:         </div>
141:       ) : (
142: 
143:         <div className="space-y-4">
144:           {}
145:           <div className="flex gap-2">
146:             {canAddMore && (
147:               <>
148:                 <Button
149:                   type="button"
150:                   variant="outline"
151:                   onClick={startCamera}
152:                   className="flex-1"
153:                 >
154:                   📷 Take Photo
155:                 </Button>
156: 
157:                 {}
158:                 <label className="flex-1">
159:                   <Button
160:                     type="button"
161:                     variant="outline"
162:                     className="w-full"
163:                     onClick={() => {}}
164:                   >
165:                     📁 Choose File
166:                   </Button>
167:                   <input
168:                     type="file"
169:                     accept="image/*"
170:                     multiple
171:                     onChange={handleFileInput}
172:                     className="hidden"
173:                   />
174:                 </label>
175:               </>
176:             )}
177:           </div>
178: 
179:           {}
180:           {error && (
181:             <div className="p-3 bg-red-50 border border-red-200 rounded-md">
182:               <p className="text-sm text-red-600">{error}</p>
183:             </div>
184:           )}
185: 
186:           {}
187:           {photos.length > 0 && (
188:             <p className="text-sm text-gray-600">
189:               {photos.length} of {maxPhotos} photos added
190:             </p>
191:           )}
192:         </div>
193:       )}
194: 
195:       {}
196:       {photos.length > 0 && (
197:         <div className="grid grid-cols-2 gap-2">
198:           {photos.map((photo, index) => (
199:             <div key={index} className="relative">
200:               <img
201:                 src={photo}
202:                 alt={`Captured photo ${index + 1}`}
203:                 className="w-full h-24 object-cover rounded-md border border-gray-200"
204:               />
205:               <button
206:                 type="button"
207:                 onClick={() => removePhoto(index)}
208:                 className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600"
209:               >
210:                 ×
211:               </button>
212:             </div>
213:           ))}
214:         </div>
215:       )}
216:     </div>
217:   );
218: }

================
File: src/pages/dashboard/TaskItem.tsx
================
  1: import React, { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { Button } from "@/components/ui/Button";
  4: import { UpcomingTask } from "@/types/scheduling";
  5: 
  6: interface TaskItemProps {
  7:   task: UpcomingTask;
  8:   onQuickAction?: (taskId: string, action: string) => void;
  9: }
 10: 
 11: const TaskItem: React.FC<TaskItemProps> = ({ task, onQuickAction }) => {
 12:   const navigate = useNavigate();
 13:   const [isExpanded, setIsExpanded] = useState(false);
 14: 
 15:   const getTaskInfo = (taskDescription: string, dueIn: string) => {
 16:     const taskLower = taskDescription.toLowerCase();
 17: 
 18:     if (taskLower.includes("water")) {
 19:       return {
 20:         icon: "💧",
 21:         action: "Time to water",
 22:         description: "Check if soil feels dry, then water until runoff",
 23:         urgency: getUrgencyFromDueIn(dueIn),
 24:         urgencyColor: getUrgencyColor(dueIn),
 25:         quickActions: ["Water Now", "Not Needed", "Check Later"],
 26:       };
 27:     }
 28: 
 29:     if (taskLower.includes("health") || taskLower.includes("observe")) {
 30:       return {
 31:         icon: "👀",
 32:         action: "Health check time",
 33:         description: "Look for pests, diseased leaves, or growth issues",
 34:         urgency: getUrgencyFromDueIn(dueIn),
 35:         urgencyColor: getUrgencyColor(dueIn),
 36:         quickActions: ["Looks Good", "Take Photo", "Found Issues"],
 37:       };
 38:     }
 39: 
 40:     if (taskLower.includes("fertiliz")) {
 41:       return {
 42:         icon: "🌱",
 43:         action: "Feeding time",
 44:         description: "Apply nutrients to support healthy growth",
 45:         urgency: getUrgencyFromDueIn(dueIn),
 46:         urgencyColor: getUrgencyColor(dueIn),
 47:         quickActions: ["Fed Plant", "Skip This Week", "Check Growth"],
 48:       };
 49:     }
 50: 
 51: 
 52:     return {
 53:       icon: "📋",
 54:       action: taskDescription,
 55:       description: "Complete this care task for your plant",
 56:       urgency: getUrgencyFromDueIn(dueIn),
 57:       urgencyColor: getUrgencyColor(dueIn),
 58:       quickActions: ["Done", "Skip", "View Plant"],
 59:     };
 60:   };
 61: 
 62:   const getUrgencyFromDueIn = (dueIn: string): string => {
 63:     if (dueIn.includes("overdue")) {
 64:       const days = dueIn.match(/\d+/)?.[0];
 65:       return `${days} days overdue`;
 66:     }
 67:     if (dueIn.includes("today")) {
 68:       return "Today";
 69:     }
 70:     if (dueIn.includes("tomorrow")) {
 71:       return "Tomorrow";
 72:     }
 73:     return dueIn;
 74:   };
 75: 
 76:   const getUrgencyColor = (dueIn: string): string => {
 77:     if (dueIn.includes("overdue"))
 78:       return "text-red-600 bg-red-50 border-red-200";
 79:     if (dueIn.includes("today"))
 80:       return "text-orange-600 bg-orange-50 border-orange-200";
 81:     return "text-blue-600 bg-blue-50 border-blue-200";
 82:   };
 83: 
 84:   const handleQuickAction = (action: string) => {
 85:     if (onQuickAction) {
 86:       onQuickAction(task.id, action);
 87:     }
 88:   };
 89: 
 90:   const taskInfo = getTaskInfo(task.task, task.dueIn);
 91: 
 92:   return (
 93:     <div className={`rounded-xl border-2 ${taskInfo.urgencyColor} bg-white`}>
 94:       <div className="p-4">
 95:         {}
 96:         <div className="flex items-start justify-between mb-3">
 97:           <div className="flex-1">
 98:             <div className="flex items-center gap-2 mb-1">
 99:               <span className="text-xl">{taskInfo.icon}</span>
100:               <h3 className="font-bold text-gray-900">{task.name}</h3>
101:             </div>
102: 
103:             <div className="font-semibold text-gray-800 mb-1">
104:               {taskInfo.action}
105:             </div>
106: 
107:             <div className="text-sm text-gray-600">{taskInfo.description}</div>
108:           </div>
109: 
110:           {}
111:           <div
112:             className={`px-3 py-1 rounded-full text-xs font-medium border ${taskInfo.urgencyColor}`}
113:           >
114:             {taskInfo.urgency}
115:           </div>
116:         </div>
117: 
118:         {}
119:         <div className="flex flex-wrap gap-2 mb-2">
120:           {taskInfo.quickActions.slice(0, 2).map((action) => (
121:             <Button
122:               key={action}
123:               variant={
124:                 action.includes("Not") || action.includes("Skip")
125:                   ? "outline"
126:                   : "primary"
127:               }
128:               size="sm"
129:               className="text-sm h-8"
130:               onClick={() => handleQuickAction(action)}
131:             >
132:               {action}
133:             </Button>
134:           ))}
135: 
136:           {taskInfo.quickActions.length > 2 && (
137:             <Button
138:               variant="ghost"
139:               size="sm"
140:               className="text-sm h-8"
141:               onClick={() => setIsExpanded(!isExpanded)}
142:             >
143:               {isExpanded ? "Less" : "More"}
144:               <svg
145:                 className={`w-3 h-3 ml-1 transition-transform ${
146:                   isExpanded ? "rotate-180" : ""
147:                 }`}
148:                 fill="none"
149:                 stroke="currentColor"
150:                 viewBox="0 0 24 24"
151:               >
152:                 <path
153:                   strokeLinecap="round"
154:                   strokeLinejoin="round"
155:                   strokeWidth={2}
156:                   d="M19 9l-7 7-7-7"
157:                 />
158:               </svg>
159:             </Button>
160:           )}
161:         </div>
162: 
163:         {}
164:         {isExpanded && (
165:           <div className="flex flex-wrap gap-2 pt-2 border-t border-gray-200">
166:             {taskInfo.quickActions.slice(2).map((action) => (
167:               <Button
168:                 key={action}
169:                 variant="primary"
170:                 size="sm"
171:                 className="text-sm h-8"
172:                 onClick={() => handleQuickAction(action)}
173:               >
174:                 {action}
175:               </Button>
176:             ))}
177: 
178:             <Button
179:               variant="ghost"
180:               size="sm"
181:               className="text-sm h-8 text-blue-600"
182:               onClick={() => navigate(`/plants/${task.plantId}`)}
183:             >
184:               View Plant Details →
185:             </Button>
186:           </div>
187:         )}
188:       </div>
189:     </div>
190:   );
191: };
192: 
193: export default TaskItem;

================
File: src/pages/plants/AddPlant.tsx
================
 1: import React from "react";
 2: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
 3: import { useNavigate } from "react-router-dom";
 4: 
 5: const AddPlant: React.FC = () => {
 6:   const navigate = useNavigate();
 7: 
 8:   const handleSuccess = () => {
 9:     navigate("/plants");
10:   };
11: 
12:   const handleCancel = () => {
13:     navigate("/plants");
14:   };
15: 
16:   return (
17:     <div className="p-4">
18:       <h1 className="text-2xl font-bold text-gray-900 mb-6 text-center">
19:         Add New Plant
20:       </h1>
21:       <PlantRegistrationForm
22:         onSuccess={handleSuccess}
23:         onCancel={handleCancel}
24:       />
25:     </div>
26:   );
27: };
28: 
29: export default AddPlant;

================
File: src/services/sync/syncService.ts
================
  1: import { db, SyncQueueRecord } from "@/types/database";
  2: 
  3: interface SyncConfig {
  4:   apiBaseUrl: string;
  5:   timeout: number;
  6:   maxRetries: number;
  7: }
  8: 
  9: export class SyncService {
 10:   private static config: SyncConfig = {
 11:     apiBaseUrl: process.env.NEXT_PUBLIC_API_URL || "/api",
 12:     timeout: 10000,
 13:     maxRetries: 3,
 14:   };
 15: 
 16:   static async syncWhenOnline(): Promise<void> {
 17:     if (!navigator.onLine) {
 18:       console.log("Offline - skipping sync");
 19:       return;
 20:     }
 21: 
 22:     try {
 23:       const unsyncedItems = await db.syncQueue
 24:         .filter((item) => !item.synced)
 25:         .toArray();
 26: 
 27:       if (unsyncedItems.length === 0) {
 28:         console.log("No items to sync");
 29:         return;
 30:       }
 31: 
 32:       console.log(`Syncing ${unsyncedItems.length} items...`);
 33: 
 34:       for (const item of unsyncedItems) {
 35:         try {
 36:           await this.syncItem(item);
 37:           await db.syncQueue.update(item.id, { synced: true });
 38:           console.log(
 39:             `Synced ${item.table} ${item.operation} for ${item.recordId}`
 40:           );
 41:         } catch (error) {
 42:           console.warn(`Sync failed for item ${item.id}:`, error);
 43: 
 44: 
 45:           const retryCount = (item.retryCount || 0) + 1;
 46: 
 47:           if (retryCount >= this.config.maxRetries) {
 48:             console.error(`Max retries exceeded for item ${item.id}`);
 49: 
 50:             await db.syncQueue.update(item.id, {
 51:               retryCount,
 52: 
 53:             });
 54:           } else {
 55:             await db.syncQueue.update(item.id, { retryCount });
 56:           }
 57:         }
 58:       }
 59:     } catch (error) {
 60:       console.error("Sync process failed:", error);
 61:     }
 62:   }
 63: 
 64:   private static async syncItem(item: SyncQueueRecord): Promise<void> {
 65:     const { table, operation, recordId, data } = item;
 66: 
 67:     let endpoint = `${this.config.apiBaseUrl}/${table}`;
 68:     let method = "GET";
 69:     let body: string | undefined;
 70: 
 71: 
 72:     switch (operation) {
 73:       case "create":
 74:         method = "POST";
 75:         body = data;
 76:         break;
 77: 
 78:       case "update":
 79:         method = "PUT";
 80:         endpoint = `${endpoint}/${recordId}`;
 81:         body = data;
 82:         break;
 83: 
 84:       case "delete":
 85:         method = "DELETE";
 86:         endpoint = `${endpoint}/${recordId}`;
 87:         break;
 88: 
 89:       default:
 90:         throw new Error(`Unknown operation: ${operation}`);
 91:     }
 92: 
 93: 
 94:     const response = await fetch(endpoint, {
 95:       method,
 96:       headers: {
 97:         "Content-Type": "application/json",
 98: 
 99: 
100:       },
101:       body,
102:       signal: AbortSignal.timeout(this.config.timeout),
103:     });
104: 
105:     if (!response.ok) {
106:       const errorText = await response.text();
107:       throw new Error(
108:         `HTTP ${response.status}: ${errorText || response.statusText}`
109:       );
110:     }
111: 
112: 
113:     if (operation === "create" && response.ok) {
114:       const responseData = await response.json();
115: 
116:       console.log("Create response:", responseData);
117:     }
118:   }
119: 
120: 
121:   static async forcSync(): Promise<boolean> {
122:     try {
123:       await this.syncWhenOnline();
124:       return true;
125:     } catch (error) {
126:       console.error("Force sync failed:", error);
127:       return false;
128:     }
129:   }
130: 
131: 
132:   static async getSyncStatus(): Promise<{
133:     pendingCount: number;
134:     failedCount: number;
135:     lastSyncAttempt?: Date;
136:   }> {
137:     const allItems = await db.syncQueue.toArray();
138:     const pending = allItems.filter((item) => !item.synced);
139:     const failed = allItems.filter(
140:       (item) => (item.retryCount || 0) >= this.config.maxRetries
141:     );
142: 
143:     return {
144:       pendingCount: pending.length,
145:       failedCount: failed.length,
146:       lastSyncAttempt:
147:         pending.length > 0
148:           ? new Date(
149:               Math.max(...pending.map((item) => item.timestamp.getTime()))
150:             )
151:           : undefined,
152:     };
153:   }
154: 
155: 
156:   static async cleanupSyncQueue(): Promise<void> {
157:     const cutoffDate = new Date();
158:     cutoffDate.setDate(cutoffDate.getDate() - 7);
159: 
160:     await db.syncQueue
161:       .filter((item) => item.synced)
162:       .and((item) => item.timestamp < cutoffDate)
163:       .delete();
164:   }
165: 
166: 
167:   static async retryFailedItems(): Promise<void> {
168: 
169:     const failedItems = await db.syncQueue
170:       .filter((item) => (item.retryCount || 0) >= this.config.maxRetries)
171:       .toArray();
172: 
173:     for (const item of failedItems) {
174:       await db.syncQueue.update(item.id, { retryCount: 0 });
175:     }
176: 
177:     await this.syncWhenOnline();
178:   }
179: 
180: 
181:   static configure(config: Partial<SyncConfig>): void {
182:     this.config = { ...this.config, ...config };
183:   }
184: 
185: 
186:   static setupSyncListeners(): void {
187: 
188:     window.addEventListener("online", () => {
189:       console.log("Device back online - starting sync");
190:       this.syncWhenOnline();
191:     });
192: 
193: 
194:     setInterval(() => {
195:       if (navigator.onLine) {
196:         this.syncWhenOnline();
197:       }
198:     }, 5 * 60 * 1000);
199:   }
200: 
201: 
202:   static initialize(config?: Partial<SyncConfig>): void {
203:     if (config) {
204:       this.configure(config);
205:     }
206: 
207:     this.setupSyncListeners();
208: 
209: 
210:     if (navigator.onLine) {
211:       this.syncWhenOnline();
212:     }
213:   }
214: }
215: 
216: 
217: export const initializeSync = (config?: Partial<SyncConfig>) => {
218:   SyncService.initialize(config);
219: };

================
File: src/services/smartDefaultsService.ts
================
  1: import { varietyService, PlantRecord, VarietyRecord } from "@/types/database";
  2: import { calculateCurrentStage } from "@/utils/growthStage";
  3: import { GrowthStage, PlantCategory } from "@/types/core";
  4: 
  5: export interface WateringDefaults {
  6:   suggestedAmount: number;
  7:   unit: "oz" | "ml" | "cups" | "liters" | "gallons";
  8:   confidence: "high" | "medium" | "low";
  9:   source: "protocol" | "category" | "universal";
 10:   reasoning: string;
 11: }
 12: 
 13: export interface FertilizerDefaults {
 14:   products: {
 15:     name: string;
 16:     dilution: string;
 17:     amount: string;
 18:     method?: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
 19:     confidence: "high" | "medium" | "low";
 20:   }[];
 21:   source: "protocol" | "category" | "universal";
 22:   reasoning: string;
 23: }
 24: 
 25: export interface SmartDefaults {
 26:   watering?: WateringDefaults;
 27:   fertilizer?: FertilizerDefaults;
 28:   plantName: string;
 29:   currentStage: GrowthStage;
 30:   daysSincePlanting: number;
 31: }
 32: 
 33: export interface QuickCompletionValues {
 34:   waterValue?: number;
 35:   waterUnit?: string;
 36:   product?: string;
 37:   dilution?: string;
 38:   amount?: string;
 39: }
 40: 
 41: interface VolumeAmount {
 42:   amount: number;
 43:   unit: "oz" | "ml" | "cups" | "liters" | "gallons";
 44: }
 45: 
 46: export class SmartDefaultsService {
 47: 
 48: 
 49: 
 50:   static async getDefaultsForPlant(
 51:     plant: PlantRecord
 52:   ): Promise<SmartDefaults | null> {
 53:     try {
 54:       const variety = await varietyService.getVariety(plant.varietyId);
 55:       if (!variety) return null;
 56: 
 57:       const currentStage = calculateCurrentStage(
 58:         plant.plantedDate,
 59:         variety.growthTimeline
 60:       );
 61:       const daysSincePlanting = Math.floor(
 62:         (Date.now() - plant.plantedDate.getTime()) / (1000 * 60 * 60 * 24)
 63:       );
 64: 
 65:       const wateringDefaults = this.getWateringDefaults(variety, currentStage);
 66:       const fertilizerDefaults = this.getFertilizerDefaults(
 67:         variety,
 68:         currentStage
 69:       );
 70: 
 71:       return {
 72:         watering: wateringDefaults,
 73:         fertilizer: fertilizerDefaults,
 74:         plantName: plant.name || plant.varietyName,
 75:         currentStage,
 76:         daysSincePlanting,
 77:       };
 78:     } catch (error) {
 79:       console.error("Error getting smart defaults:", error);
 80:       return null;
 81:     }
 82:   }
 83: 
 84: 
 85: 
 86: 
 87:   private static getWateringDefaults(
 88:     variety: VarietyRecord,
 89:     currentStage: GrowthStage
 90:   ): WateringDefaults | undefined {
 91: 
 92:     const stageProtocol = variety.protocols?.watering?.[currentStage] as {
 93:       volume?: { amount?: number | string; unit?: string };
 94:     };
 95: 
 96:     if (stageProtocol?.volume?.amount) {
 97:       const parsed = this.parseWaterAmount(stageProtocol.volume.amount);
 98:       if (parsed && stageProtocol.volume.unit) {
 99:         return {
100:           suggestedAmount: parsed.amount,
101:           unit: stageProtocol.volume.unit as
102:             | "oz"
103:             | "ml"
104:             | "cups"
105:             | "liters"
106:             | "gallons",
107:           confidence: "high",
108:           source: "protocol",
109:           reasoning: `Based on ${variety.name} protocol for ${currentStage} stage`,
110:         };
111:       }
112:     }
113: 
114: 
115:     const categoryDefaults = this.getCategoryWateringDefaults(
116:       variety.category,
117:       currentStage
118:     );
119:     if (categoryDefaults) {
120:       return {
121:         suggestedAmount: categoryDefaults.amount,
122:         unit: categoryDefaults.unit,
123:         confidence: "medium",
124:         source: "category",
125:         reasoning: `Based on ${variety.category} category guidelines for ${currentStage} stage`,
126:       };
127:     }
128: 
129: 
130:     return {
131:       suggestedAmount: 16,
132:       unit: "oz",
133:       confidence: "low",
134:       source: "universal",
135:       reasoning: "Using universal default amount",
136:     };
137:   }
138: 
139: 
140: 
141: 
142:   private static getFertilizerDefaults(
143:     variety: VarietyRecord,
144:     currentStage: GrowthStage
145:   ): FertilizerDefaults | undefined {
146:     const stageProtocol = variety.protocols?.fertilization?.[currentStage] as {
147:       fertilizer?: { product?: string };
148:       application?: { dilution?: string; amount?: string; method?: string };
149:     };
150: 
151:     if (stageProtocol?.fertilizer?.product && stageProtocol?.application) {
152:       return {
153:         products: [
154:           {
155:             name: stageProtocol.fertilizer.product,
156:             dilution: stageProtocol.application.dilution || "As directed",
157:             amount: stageProtocol.application.amount || "Apply to runoff",
158:             method: (stageProtocol.application.method as any) || "soil-drench",
159:             confidence: "high",
160:           },
161:         ],
162:         source: "protocol",
163:         reasoning: `Based on ${variety.name} fertilization protocol for ${currentStage} stage`,
164:       };
165:     }
166: 
167: 
168:     const categoryDefaults = this.getCategoryFertilizerDefaults(
169:       variety.category,
170:       currentStage
171:     );
172:     if (categoryDefaults) {
173:       return categoryDefaults;
174:     }
175: 
176:     return undefined;
177:   }
178: 
179: 
180: 
181: 
182:   private static getCategoryWateringDefaults(
183:     category: PlantCategory,
184:     stage: GrowthStage
185:   ): VolumeAmount | undefined {
186:     const categoryWateringGuides: Record<
187:       PlantCategory,
188:       Record<GrowthStage, VolumeAmount>
189:     > = {
190:       "leafy-greens": {
191:         germination: { amount: 8, unit: "oz" },
192:         seedling: { amount: 12, unit: "oz" },
193:         vegetative: { amount: 16, unit: "oz" },
194:         flowering: { amount: 16, unit: "oz" },
195:         fruiting: { amount: 16, unit: "oz" },
196:         maturation: { amount: 16, unit: "oz" },
197:         harvest: { amount: 16, unit: "oz" },
198:         "ongoing-production": { amount: 16, unit: "oz" },
199:       },
200:       "fruiting-plants": {
201:         germination: { amount: 12, unit: "oz" },
202:         seedling: { amount: 16, unit: "oz" },
203:         vegetative: { amount: 24, unit: "oz" },
204:         flowering: { amount: 28, unit: "oz" },
205:         fruiting: { amount: 32, unit: "oz" },
206:         maturation: { amount: 32, unit: "oz" },
207:         harvest: { amount: 32, unit: "oz" },
208:         "ongoing-production": { amount: 32, unit: "oz" },
209:       },
210:       "root-vegetables": {
211:         germination: { amount: 8, unit: "oz" },
212:         seedling: { amount: 12, unit: "oz" },
213:         vegetative: { amount: 20, unit: "oz" },
214:         flowering: { amount: 20, unit: "oz" },
215:         fruiting: { amount: 24, unit: "oz" },
216:         maturation: { amount: 24, unit: "oz" },
217:         harvest: { amount: 24, unit: "oz" },
218:         "ongoing-production": { amount: 24, unit: "oz" },
219:       },
220:       herbs: {
221:         germination: { amount: 6, unit: "oz" },
222:         seedling: { amount: 10, unit: "oz" },
223:         vegetative: { amount: 14, unit: "oz" },
224:         flowering: { amount: 14, unit: "oz" },
225:         fruiting: { amount: 14, unit: "oz" },
226:         maturation: { amount: 14, unit: "oz" },
227:         harvest: { amount: 14, unit: "oz" },
228:         "ongoing-production": { amount: 14, unit: "oz" },
229:       },
230:       berries: {
231:         germination: { amount: 10, unit: "oz" },
232:         seedling: { amount: 14, unit: "oz" },
233:         vegetative: { amount: 20, unit: "oz" },
234:         flowering: { amount: 24, unit: "oz" },
235:         fruiting: { amount: 28, unit: "oz" },
236:         maturation: { amount: 28, unit: "oz" },
237:         harvest: { amount: 28, unit: "oz" },
238:         "ongoing-production": { amount: 28, unit: "oz" },
239:       },
240:     };
241: 
242:     return categoryWateringGuides[category]?.[stage];
243:   }
244: 
245: 
246: 
247: 
248:   private static getCategoryFertilizerDefaults(
249:     category: PlantCategory,
250:     stage: GrowthStage
251:   ): FertilizerDefaults | undefined {
252:     const categoryFertilizerGuides: Record<
253:       PlantCategory,
254:       Record<string, { product: string; dilution: string; amount: string }>
255:     > = {
256:       "leafy-greens": {
257:         general: {
258:           product: "Balanced liquid fertilizer",
259:           dilution: "Half strength",
260:           amount: "Apply every 2 weeks",
261:         },
262:       },
263:       "fruiting-plants": {
264:         vegetative: {
265:           product: "High nitrogen fertilizer",
266:           dilution: "Full strength",
267:           amount: "Apply weekly",
268:         },
269:         flowering: {
270:           product: "Bloom booster",
271:           dilution: "Full strength",
272:           amount: "Apply bi-weekly",
273:         },
274:         fruiting: {
275:           product: "Potassium-rich fertilizer",
276:           dilution: "Full strength",
277:           amount: "Apply weekly",
278:         },
279:       },
280:       "root-vegetables": {
281:         general: {
282:           product: "Root vegetable fertilizer",
283:           dilution: "Half strength",
284:           amount: "Apply monthly",
285:         },
286:       },
287:       herbs: {
288:         general: {
289:           product: "Light liquid fertilizer",
290:           dilution: "Quarter strength",
291:           amount: "Apply monthly",
292:         },
293:       },
294:       berries: {
295:         general: {
296:           product: "Berry fertilizer",
297:           dilution: "Full strength",
298:           amount: "Apply bi-weekly",
299:         },
300:       },
301:     };
302: 
303:     const stageKey = ["flowering", "fruiting"].includes(stage)
304:       ? stage
305:       : "general";
306:     const defaults = categoryFertilizerGuides[category]?.[stageKey];
307: 
308:     if (defaults) {
309:       return {
310:         products: [
311:           {
312:             name: defaults.product,
313:             dilution: defaults.dilution,
314:             amount: defaults.amount,
315:             confidence: "medium",
316:           },
317:         ],
318:         source: "category",
319:         reasoning: `General ${category} fertilization guidelines`,
320:       };
321:     }
322: 
323:     return undefined;
324:   }
325: 
326: 
327: 
328: 
329:   private static parseWaterAmount(
330:     amount: string | number
331:   ): { amount: number } | null {
332:     if (typeof amount === "number") {
333:       return { amount };
334:     }
335: 
336:     if (typeof amount === "string") {
337: 
338:       const rangeMatch = amount.match(/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)/);
339:       if (rangeMatch) {
340:         const min = parseFloat(rangeMatch[1]);
341:         const max = parseFloat(rangeMatch[2]);
342:         return { amount: Math.round((min + max) / 2) };
343:       }
344: 
345: 
346:       const singleMatch = amount.match(/(\d+(?:\.\d+)?)/);
347:       if (singleMatch) {
348:         return { amount: parseFloat(singleMatch[1]) };
349:       }
350:     }
351: 
352:     return null;
353:   }
354: 
355: 
356: 
357: 
358:   static async getQuickCompletionOptions(
359:     plant: PlantRecord,
360:     activityType: "water" | "fertilize"
361:   ): Promise<Array<{ label: string; values: QuickCompletionValues }> | null> {
362:     const defaults = await this.getDefaultsForPlant(plant);
363:     if (!defaults) return null;
364: 
365:     if (activityType === "water" && defaults.watering) {
366:       const { suggestedAmount, unit } = defaults.watering;
367: 
368: 
369:       const baseAmount = suggestedAmount;
370:       const options = [
371:         {
372:           label: `Quick: ${baseAmount}${unit}`,
373:           values: {
374:             waterValue: baseAmount,
375:             waterUnit: unit,
376:           },
377:         },
378:       ];
379: 
380: 
381:       if (defaults.watering.confidence === "high") {
382:         const lightAmount = Math.round(baseAmount * 0.75);
383:         const heavyAmount = Math.round(baseAmount * 1.25);
384: 
385:         options.unshift({
386:           label: `Light: ${lightAmount}${unit}`,
387:           values: {
388:             waterValue: lightAmount,
389:             waterUnit: unit,
390:           },
391:         });
392: 
393:         options.push({
394:           label: `Heavy: ${heavyAmount}${unit}`,
395:           values: {
396:             waterValue: heavyAmount,
397:             waterUnit: unit,
398:           },
399:         });
400:       }
401: 
402:       return options;
403:     }
404: 
405:     if (
406:       activityType === "fertilize" &&
407:       defaults.fertilizer?.products &&
408:       defaults.fertilizer.products.length > 0
409:     ) {
410:       return defaults.fertilizer.products.slice(0, 3).map((product) => ({
411:         label: `Quick: ${product.name}`,
412:         values: {
413:           product: product.name,
414:           dilution: product.dilution,
415:           amount: product.amount,
416:         },
417:       }));
418:     }
419: 
420:     return null;
421:   }
422: }

================
File: src/styles/globals.css
================
 1: @tailwind base;
 2: @tailwind components;
 3: @tailwind utilities;
 4: 
 5: @layer base {
 6:   :root {
 7: 
 8:     --background: 249 250 251;
 9:     --foreground: 17 24 39;
10:     --card: 255 255 255;
11:     --card-foreground: 17 24 39;
12:     --primary: 52 211 153;
13:     --primary-foreground: 17 24 39;
14:     --secondary: 156 163 175;
15:     --secondary-foreground: 17 24 39;
16:     --muted: 243 244 246;
17:     --muted-foreground: 107 114 128;
18:     --accent: 52 211 153;
19:     --accent-foreground: 17 24 39;
20:     --border: 229 231 235;
21:     --ring: 52 211 153;
22:   }
23: 
24:   .dark {
25: 
26:     --background: 17 24 39;
27:     --foreground: 243 244 246;
28:     --card: 31 41 55;
29:     --card-foreground: 243 244 246;
30:     --primary: 34 197 94;
31:     --primary-foreground: 243 244 246;
32:     --secondary: 75 85 99;
33:     --secondary-foreground: 243 244 246;
34:     --muted: 55 65 81;
35:     --muted-foreground: 156 163 175;
36:     --accent: 34 197 94;
37:     --accent-foreground: 243 244 246;
38:     --border: 75 85 99;
39:     --ring: 34 197 94;
40:   }
41: }
42: 
43: 
44: * {
45:   -webkit-tap-highlight-color: transparent;
46: }
47: 
48: html {
49:   scroll-behavior: smooth;
50: }
51: 
52: body {
53:   background-color: rgb(var(--background));
54:   color: rgb(var(--foreground));
55:   font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
56:     "Helvetica Neue", Arial, sans-serif;
57:   -webkit-font-smoothing: antialiased;
58:   -moz-osx-font-smoothing: grayscale;
59: }
60: 
61: #root {
62:   background-color: rgb(var(--background));
63:   min-height: 100vh;
64: }
65: 
66: 
67: button {
68:   -webkit-appearance: none;
69:   appearance: none;
70: }
71: 
72: 
73: button:focus-visible {
74:   outline: 2px solid #3b82f6;
75:   outline-offset: 2px;
76: }

================
File: src/types/core.ts
================
  1: export type GrowthStage =
  2:   | "germination"
  3:   | "seedling"
  4:   | "vegetative"
  5:   | "flowering"
  6:   | "fruiting"
  7:   | "maturation"
  8:   | "harvest"
  9:   | "ongoing-production";
 10: 
 11: export type PlantCategory =
 12:   | "root-vegetables"
 13:   | "leafy-greens"
 14:   | "herbs"
 15:   | "berries"
 16:   | "fruiting-plants";
 17: 
 18: export type CareActivityType =
 19:   | "water"
 20:   | "fertilize"
 21:   | "observe"
 22:   | "harvest"
 23:   | "transplant";
 24: 
 25: export type QualityRating =
 26:   | "excellent"
 27:   | "good"
 28:   | "fair"
 29:   | "poor"
 30:   | "unsaleable";
 31: 
 32: export type HealthAssessment =
 33:   | "excellent"
 34:   | "good"
 35:   | "fair"
 36:   | "concerning"
 37:   | "critical";
 38: 
 39: export type VolumeUnit = "oz" | "ml" | "gal" | "L";
 40: export type WeightUnit = "oz" | "lbs" | "g" | "kg";
 41: export type LengthUnit = "inches" | "cm" | "ft" | "m";
 42: export type TemperatureUnit = "F" | "C";
 43: 
 44: export type ApplicationMethod =
 45:   | "soil-drench"
 46:   | "foliar-spray"
 47:   | "top-dress"
 48:   | "mix-in-soil";
 49: 
 50: export type WateringMethod =
 51:   | "top-watering"
 52:   | "bottom-watering"
 53:   | "drip"
 54:   | "misting";
 55: 
 56: 
 57: export interface BaseRecord {
 58:   id: string;
 59:   createdAt: Date;
 60:   updatedAt: Date;
 61: }
 62: 
 63: export interface TimestampedRecord {
 64:   id: string;
 65:   createdAt: Date;
 66: }
 67: 
 68: export interface MoistureReading {
 69:   before: number;
 70:   after: number;
 71:   scale: "1-10" | "visual";
 72: }
 73: 
 74: export interface Volume {
 75:   amount: number;
 76:   unit: VolumeUnit;
 77: }
 78: 
 79: export interface Weight {
 80:   amount: number;
 81:   unit: WeightUnit;
 82: }
 83: 
 84: export interface GrowthTimeline {
 85:   germination: number;
 86:   seedling: number;
 87:   vegetative: number;
 88:   maturation: number;
 89: }
 90: export interface CategoryMoistureDefaults {
 91:   trigger: [number, number];
 92:   target: [number, number];
 93: }
 94: 
 95: export interface MoistureProtocolInfo {
 96:   trigger: [number, number];
 97:   target: [number, number];
 98:   varietyName: string;
 99:   currentStage: GrowthStage;
100:   isDefault: boolean;
101:   source: "custom" | "category" | "universal";
102: }

================
File: src/types/scheduling.ts
================
 1: export interface UpcomingTask {
 2:   id: string;
 3:   plantId: string;
 4:   name: string;
 5:   task: string;
 6:   dueIn: string;
 7:   priority: "low" | "medium" | "high";
 8:   plantStage: string;
 9:   dueDate: Date;
10: }
11: 
12: export interface TaskRecommendation {
13:   task: UpcomingTask;
14:   protocol: {
15:     expectedMoisture?: [number, number];
16:     lastReading?: number;
17:     daysSinceLastCare?: number;
18:   };
19: }

================
File: src/types/user.ts
================
 1: export interface UserSettings {
 2:   id: string;
 3: 
 4:   units: {
 5:     temperature: "fahrenheit" | "celsius";
 6:     volume: "ounces" | "liters";
 7:   };
 8: 
 9:   notifications: {
10:     careReminders: boolean;
11:     harvestAlerts: boolean;
12:   };
13: 
14:   location: {
15:     timezone: string;
16:     zipCode?: string;
17:   };
18: }

================
File: src/utils/cn.ts
================
1: import { type ClassValue, clsx } from "clsx";
2: import { twMerge } from "tailwind-merge";
3: 
4: export function cn(...inputs: ClassValue[]) {
5:   return twMerge(clsx(inputs));
6: }

================
File: src/utils/dateUtils.ts
================
 1: export function formatDate(date: Date): string {
 2:   return new Intl.DateTimeFormat("en-US", {
 3:     month: "short",
 4:     day: "numeric",
 5:     year: "numeric",
 6:   }).format(date);
 7: }
 8: 
 9: export function getDaysSincePlanting(plantedDate: Date): number {
10:   const now = new Date();
11:   const diffTime = Math.abs(now.getTime() - plantedDate.getTime());
12:   return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
13: }
14: 
15: export function formatDateTime(date: Date): string {
16:   return new Intl.DateTimeFormat("en-US", {
17:     month: "short",
18:     day: "numeric",
19:     hour: "numeric",
20:     minute: "2-digit",
21:   }).format(date);
22: }
23: 
24: export function formatTime(date: Date): string {
25:   return new Intl.DateTimeFormat("en-US", {
26:     hour: "numeric",
27:     minute: "2-digit",
28:   }).format(date);
29: }

================
File: src/utils/plantDisplay.ts
================
 1: import { PlantRecord } from "@/types/database";
 2: 
 3: 
 4: 
 5: 
 6: 
 7: export function getPlantDisplayName(plant: PlantRecord): string {
 8: 
 9:   if (plant.name?.trim()) {
10:     return plant.name.trim();
11:   }
12: 
13: 
14:   if (plant.varietyName?.trim()) {
15:     return plant.varietyName.trim();
16:   }
17: 
18:   return "Unknown Plant";
19: }

================
File: src/utils/waterConversion.ts
================
 1: import { WaterAmount } from "../types/database";
 2: export function convertToMl(amount: WaterAmount): number {
 3:   const conversions = {
 4:     ml: 1,
 5:     oz: 29.5735,
 6:     cups: 236.588,
 7:     liters: 1000,
 8:     gallons: 3785.41,
 9:   };
10:   return amount.value * conversions[amount.unit];
11: }
12: 
13: export function formatWaterAmount(amount: WaterAmount): string {
14:   return `${amount.value} ${amount.unit}`;
15: }

================
File: src/App.css
================
 1: #root {
 2:   max-width: 1280px;
 3:   margin: 0 auto;
 4:   padding: 2rem;
 5:   text-align: center;
 6:   @apply bg-gray-50 dark:bg-gray-900;
 7: }
 8: 
 9: .logo {
10:   height: 6em;
11:   padding: 1.5em;
12:   will-change: filter;
13:   transition: filter 300ms;
14: }
15: .logo:hover {
16:   filter: drop-shadow(0 0 2em #646cffaa);
17: }
18: .logo.react:hover {
19:   filter: drop-shadow(0 0 2em #61dafbaa);
20: }
21: 
22: @keyframes logo-spin {
23:   from {
24:     transform: rotate(0deg);
25:   }
26:   to {
27:     transform: rotate(360deg);
28:   }
29: }
30: 
31: @media (prefers-reduced-motion: no-preference) {
32:   a:nth-of-type(2) .logo {
33:     animation: logo-spin infinite 20s linear;
34:   }
35: }
36: 
37: .card {
38:   padding: 2em;
39: }
40: 
41: .read-the-docs {
42:   color: #888;
43: }

================
File: src/index.css
================
 1: :root {
 2:   font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
 3:   line-height: 1.5;
 4:   font-weight: 400;
 5: 
 6:   color-scheme: light dark;
 7:   color: rgba(255, 255, 255, 0.87);
 8:   background-color: #242424;
 9: 
10:   font-synthesis: none;
11:   text-rendering: optimizeLegibility;
12:   -webkit-font-smoothing: antialiased;
13:   -moz-osx-font-smoothing: grayscale;
14: }
15: 
16: a {
17:   font-weight: 500;
18:   color: #646cff;
19:   text-decoration: inherit;
20: }
21: a:hover {
22:   color: #535bf2;
23: }
24: 
25: body {
26:   margin: 0;
27:   display: flex;
28:   place-items: center;
29:   min-width: 320px;
30:   min-height: 100vh;
31: }
32: 
33: h1 {
34:   font-size: 3.2em;
35:   line-height: 1.1;
36: }
37: 
38: button {
39:   border-radius: 8px;
40:   border: 1px solid transparent;
41:   padding: 0.6em 1.2em;
42:   font-size: 1em;
43:   font-weight: 500;
44:   font-family: inherit;
45:   background-color: #1a1a1a;
46:   cursor: pointer;
47:   transition: border-color 0.25s;
48: }
49: button:hover {
50:   border-color: #646cff;
51: }
52: button:focus,
53: button:focus-visible {
54:   outline: 4px auto -webkit-focus-ring-color;
55: }
56: 
57: @media (prefers-color-scheme: light) {
58:   :root {
59:     color: #213547;
60:     background-color: #ffffff;
61:   }
62:   a:hover {
63:     color: #747bff;
64:   }
65:   button {
66:     background-color: #f9f9f9;
67:   }
68: }

================
File: src/jest.polyfills.ts
================
1: import { TextDecoder, TextEncoder } from "util";
2: 
3: Object.assign(global, { TextDecoder, TextEncoder });

================
File: src/main.tsx
================
 1: import React from "react";
 2: import ReactDOM from "react-dom/client";
 3: import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 4: import { BrowserRouter } from "react-router-dom";
 5: import App from "./App.tsx";
 6: import "./styles/globals.css";
 7: 
 8: 
 9: const queryClient = new QueryClient({
10:   defaultOptions: {
11:     queries: {
12: 
13:       staleTime: 5 * 60 * 1000,
14: 
15:       gcTime: 24 * 60 * 60 * 1000,
16: 
17:       retry: (failureCount) => {
18: 
19:         if (!navigator.onLine) return false;
20:         return failureCount < 3;
21:       },
22:     },
23:   },
24: });
25: 
26: ReactDOM.createRoot(document.getElementById("root")!).render(
27:   <React.StrictMode>
28:     <QueryClientProvider client={queryClient}>
29:       <BrowserRouter>
30:         <App />
31:       </BrowserRouter>
32:     </QueryClientProvider>
33:   </React.StrictMode>
34: );

================
File: src/vite-env.d.ts
================
1: 

================
File: tests/e2e/pwa-functionality.spec.ts
================
 1: import { test, expect } from "@playwright/test";
 2: 
 3: test.describe("PWA Functionality", () => {
 4:   test.beforeEach(async ({ page }) => {
 5: 
 6:     await page.context().clearCookies();
 7:     await page.evaluate(() => {
 8:       localStorage.clear();
 9:       sessionStorage.clear();
10:     });
11:   });
12: 
13:   test("app loads and displays correctly", async ({ page }) => {
14:     await page.goto("/");
15: 
16:     await expect(page.getByText("🌱 SmartGarden")).toBeVisible();
17:     await expect(page.getByText("Active Plants")).toBeVisible();
18:     await expect(page.getByText("Tasks Due")).toBeVisible();
19:   });
20: 
21:   test("offline functionality works", async ({ page, context }) => {
22: 
23:     await page.goto("/");
24:     await expect(page.getByText("SmartGarden")).toBeVisible();
25: 
26: 
27:     await context.setOffline(true);
28: 
29: 
30:     await page.reload();
31: 
32: 
33:     await expect(page.getByText("SmartGarden")).toBeVisible();
34: 
35: 
36:     await expect(page.getByText(/offline/i)).toBeVisible();
37:   });
38: 
39:   test("plant registration flow", async ({ page }) => {
40:     await page.goto("/");
41: 
42: 
43:     await page.getByText("Add Your First Plant").click();
44: 
45: 
46:     await page.selectOption('[name="varietyId"]', { index: 1 });
47:     await page.fill('[name="name"]', "My Test Plant");
48:     await page.fill('[name="location"]', "Test Location");
49:     await page.fill('[name="container"]', "Test Container");
50: 
51: 
52:     await page.getByText("Register Plant").click();
53: 
54: 
55:     await expect(page.getByText("My Test Plant")).toBeVisible();
56:   });
57: 
58:   test("data persists across page reloads", async ({ page }) => {
59:     await page.goto("/add-plant");
60: 
61: 
62:     await page.selectOption('[name="varietyId"]', { index: 1 });
63:     await page.fill('[name="name"]', "Persistent Plant");
64:     await page.fill('[name="location"]', "Kitchen");
65:     await page.fill('[name="container"]', "4 inch pot");
66:     await page.getByText("Register Plant").click();
67: 
68: 
69:     await page.reload();
70: 
71: 
72:     await expect(page.getByText("Persistent Plant")).toBeVisible();
73:     await expect(page.getByText("1")).toBeVisible();
74:   });
75: 
76:   test("responsive design on mobile viewport", async ({ page }) => {
77: 
78:     await page.setViewportSize({ width: 375, height: 667 });
79:     await page.goto("/");
80: 
81: 
82:     const navItems = page.locator("nav a");
83:     await expect(navItems.first()).toBeVisible();
84: 
85: 
86:     const buttonSize = await page.getByText("Add Plant").boundingBox();
87:     expect(buttonSize?.height).toBeGreaterThanOrEqual(44);
88:   });
89: });

================
File: eslint.config.js
================
 1: import js from '@eslint/js'
 2: import globals from 'globals'
 3: import reactHooks from 'eslint-plugin-react-hooks'
 4: import reactRefresh from 'eslint-plugin-react-refresh'
 5: import tseslint from 'typescript-eslint'
 6: 
 7: export default tseslint.config(
 8:   { ignores: ['dist'] },
 9:   {
10:     extends: [js.configs.recommended, ...tseslint.configs.recommended],
11:     files: ['**/*.{ts,tsx}'],
12:     languageOptions: {
13:       ecmaVersion: 2020,
14:       globals: globals.browser,
15:     },
16:     plugins: {
17:       'react-hooks': reactHooks,
18:       'react-refresh': reactRefresh,
19:     },
20:     rules: {
21:       ...reactHooks.configs.recommended.rules,
22:       'react-refresh/only-export-components': [
23:         'warn',
24:         { allowConstantExport: true },
25:       ],
26:     },
27:   },
28: )

================
File: index.html
================
 1: <!DOCTYPE html>
 2: <html lang="en">
 3:   <head>
 4:     <meta charset="UTF-8" />
 5:     <meta name="darkreader-lock" />
 6:     <link rel="icon" type="image/svg+xml" href="/vite.svg" />
 7:     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 8:     <title>Vite + React + TS</title>
 9:   </head>
10:   <body>
11:     <div id="root"></div>
12:     <script type="module" src="/src/main.tsx"></script>
13:   </body>
14: </html>

================
File: postcss.config.js
================
1: export default {
2:   plugins: {
3:     tailwindcss: {},
4:     autoprefixer: {},
5:   },
6: }

================
File: repomix.config.json
================
 1: {
 2:   "output": {
 3:     "style": "plain",
 4:     "filePath": "custom-output.txt",
 5:     "removeComments": true,
 6:     "showLineNumbers": true,
 7:     "topFilesLength": 10
 8:   },
 9:   "ignore": {
10:     "customPatterns": [
11:       "logs",
12:       "*.log",
13:       "npm-debug.log*",
14:       "yarn-debug.log*",
15:       "yarn-error.log*",
16:       "pnpm-debug.log*",
17:       "lerna-debug.log*",
18:       ".cache/",
19:       ".parcel-cache/",
20:       "node_modules",
21:       "dist",
22:       "dist-ssr",
23:       "*.local",
24:       ".vscode/*",
25:       "*.suo",
26:       "*.ntvs*",
27:       "*.njsproj",
28:       "*.sln",
29:       "*.sw?",
30:       "._*",
31:       ".Spotlight-V100",
32:       ".Trashes",
33:       "ehthumbs.db",
34:       "Thumbs.db",
35:       ".vscode/",
36:       ".idea/",
37:       ".env.local",
38:       ".env.development.local",
39:       ".env.test.local",
40:       ".env.production.local",
41:       "*.tmp",
42:       "*.temp"
43:     ]
44:   }
45: }

================
File: tailwind.config.js
================
 1: module.exports = {
 2:   content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
 3:   theme: {
 4:     extend: {
 5:       colors: {
 6: 
 7:         background: "rgb(var(--background) / <alpha-value>)",
 8:         foreground: "rgb(var(--foreground) / <alpha-value>)",
 9:         card: {
10:           DEFAULT: "rgb(var(--card) / <alpha-value>)",
11:           foreground: "rgb(var(--card-foreground) / <alpha-value>)",
12:         },
13:         primary: {
14:           DEFAULT: "rgb(var(--primary) / <alpha-value>)",
15:           foreground: "rgb(var(--primary-foreground) / <alpha-value>)",
16:         },
17:         secondary: {
18:           DEFAULT: "rgb(var(--secondary) / <alpha-value>)",
19:           foreground: "rgb(var(--secondary-foreground) / <alpha-value>)",
20:         },
21:         muted: {
22:           DEFAULT: "rgb(var(--muted) / <alpha-value>)",
23:           foreground: "rgb(var(--muted-foreground) / <alpha-value>)",
24:         },
25:         accent: {
26:           DEFAULT: "rgb(var(--accent) / <alpha-value>)",
27:           foreground: "rgb(var(--accent-foreground) / <alpha-value>)",
28:         },
29:         border: "rgb(var(--border) / <alpha-value>)",
30:         ring: "rgb(var(--ring) / <alpha-value>)",
31: 
32: 
33:         garden: {
34:           50: "#f0f9f4",
35:           100: "#dcf2e4",
36:           200: "#bce5cd",
37:           300: "#8dd0aa",
38:           400: "#57b380",
39:           500: "#349960",
40:           600: "#2F6F4E",
41:           700: "#1e5a3a",
42:           800: "#1a4a31",
43:           900: "#163d29",
44:         },
45: 
46: 
47:         success: "#38A169",
48:         warning: "#DD6B20",
49:         error: "#E53E3E",
50:       },
51:       boxShadow: {
52:         sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
53:         md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
54:         lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
55:       },
56:     },
57:   },
58:   darkMode: "class",
59:   plugins: [],
60: };

================
File: tsconfig.app.json
================
 1: {
 2:   "compilerOptions": {
 3:     "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
 4:     "target": "ES2020",
 5:     "useDefineForClassFields": true,
 6:     "lib": ["ES2020", "DOM", "DOM.Iterable"],
 7:     "module": "ESNext",
 8:     "skipLibCheck": true,
 9: 
10:     /* Bundler mode */
11:     "moduleResolution": "bundler",
12:     "allowImportingTsExtensions": true,
13:     "verbatimModuleSyntax": true,
14:     "moduleDetection": "force",
15:     "noEmit": true,
16:     "jsx": "react-jsx",
17: 
18:     /* Linting */
19:     "strict": true,
20:     "noUnusedLocals": true,
21:     "noUnusedParameters": true,
22:     "erasableSyntaxOnly": true,
23:     "noFallthroughCasesInSwitch": true,
24:     "noUncheckedSideEffectImports": true
25:   },
26:   "include": ["src"]
27: }

================
File: tsconfig.node.json
================
 1: {
 2:   "compilerOptions": {
 3:     "composite": true,
 4:     "skipLibCheck": true,
 5:     "module": "ESNext",
 6:     "moduleResolution": "bundler",
 7:     "allowSyntheticDefaultImports": true,
 8:     "strict": true,
 9:     "noEmit": true
10:   },
11:   "include": ["vite.config.ts"]
12: }

================
File: tsconfig.tsbuildinfo
================
1: {"root":["./src/app.tsx","./src/jest.polyfills.ts","./src/main.tsx","./src/setuptests.ts","./src/vite-env.d.ts","./src/__tests__/components/dashboard.test.tsx","./src/__tests__/components/plantregistrationform.test.tsx","./src/__tests__/components/soilmixtureselector.test.tsx","./src/__tests__/database/integration.test.ts","./src/__tests__/database/plantservice.test.ts","./src/__tests__/database/varietyservice.test.ts","./src/__tests__/integration/stagecalculationdisplay.test.tsx","./src/__tests__/services/growthstageservice.test.ts","./src/__tests__/utils/growthstage.test.ts","./src/__tests__/utils/varietygrowthstages.test.ts","./src/components/navigation.tsx","./src/components/layouts/emptystate.tsx","./src/components/layouts/welcome.tsx","./src/components/plant/customvarietyform.tsx","./src/components/plant/plantregistrationform.tsx","./src/components/plant/soilmixtureselector.tsx","./src/components/ui/button.tsx","./src/components/ui/card.tsx","./src/components/ui/loadingspinner.tsx","./src/components/ui/locationtoggle.tsx","./src/components/ui/offlineindicator.tsx","./src/components/ui/statusbadge.tsx","./src/components/ui/switch.tsx","./src/data/seedvarieties.ts","./src/db/schema.ts","./src/db/seeddata.ts","./src/hooks/useappinitialization.ts","./src/hooks/usedynamicstage.ts","./src/hooks/usefirsttimeuser.ts","./src/pages/analytics/index.tsx","./src/pages/care/carelogform.tsx","./src/pages/care/logcare.tsx","./src/pages/care/photocapture.tsx","./src/pages/care/index.tsx","./src/pages/dashboard/index.tsx","./src/pages/plants/addplant.tsx","./src/pages/plants/plants.tsx","./src/pages/settings/index.tsx","./src/services/careschedulingservice.ts","./src/services/growthstageservice.ts","./src/services/sync/syncservice.ts","./src/types/core.ts","./src/types/database.ts","./src/types/index.ts","./src/types/scheduling.ts","./src/types/user.ts","./src/utils/cn.ts","./src/utils/growthstage.ts","./vite.config.ts"],"version":"5.8.3"}

================
File: vite.config.ts
================
  1: import { defineConfig } from "vite";
  2: import react from "@vitejs/plugin-react";
  3: import { VitePWA } from "vite-plugin-pwa";
  4: import path from "path";
  5: 
  6: export default defineConfig({
  7:   plugins: [
  8:     react(),
  9:     VitePWA({
 10:       registerType: "autoUpdate",
 11:       workbox: {
 12: 
 13:         globPatterns: ["**/*.{js,css,html,ico,png,svg,jpg,jpeg}"],
 14:         runtimeCaching: [
 15:           {
 16: 
 17:             urlPattern: /^https:\/\/.*\.(png|jpg|jpeg|svg|webp)$/,
 18:             handler: "CacheFirst",
 19:             options: {
 20:               cacheName: "plant-images",
 21:               expiration: {
 22:                 maxEntries: 500,
 23:                 maxAgeSeconds: 60 * 60 * 24 * 30,
 24:               },
 25:             },
 26:           },
 27:         ],
 28:       },
 29:       manifest: {
 30:         name: "SmartGarden - Intelligent Plant Care",
 31:         short_name: "SmartGarden",
 32:         description:
 33:           "Your AI-powered gardening assistant for optimal plant care",
 34:         theme_color: "#22c55e",
 35:         background_color: "#ffffff",
 36:         display: "standalone",
 37:         orientation: "portrait",
 38:         scope: "/",
 39:         start_url: "/",
 40:         icons: [
 41:           {
 42:             src: "/icons/icon-72x72.png",
 43:             sizes: "72x72",
 44:             type: "image/png",
 45:             purpose: "maskable any",
 46:           },
 47:           {
 48:             src: "/icons/icon-96x96.png",
 49:             sizes: "96x96",
 50:             type: "image/png",
 51:             purpose: "maskable any",
 52:           },
 53:           {
 54:             src: "/icons/icon-128x128.png",
 55:             sizes: "128x128",
 56:             type: "image/png",
 57:             purpose: "maskable any",
 58:           },
 59:           {
 60:             src: "/icons/icon-144x144.png",
 61:             sizes: "144x144",
 62:             type: "image/png",
 63:             purpose: "maskable any",
 64:           },
 65:           {
 66:             src: "/icons/icon-152x152.png",
 67:             sizes: "152x152",
 68:             type: "image/png",
 69:             purpose: "maskable any",
 70:           },
 71:           {
 72:             src: "/icons/icon-192x192.png",
 73:             sizes: "192x192",
 74:             type: "image/png",
 75:             purpose: "maskable any",
 76:           },
 77:           {
 78:             src: "/icons/icon-384x384.png",
 79:             sizes: "384x384",
 80:             type: "image/png",
 81:             purpose: "maskable any",
 82:           },
 83:           {
 84:             src: "/icons/icon-512x512.png",
 85:             sizes: "512x512",
 86:             type: "image/png",
 87:             purpose: "maskable any",
 88:           },
 89:         ],
 90:       },
 91:     }),
 92:   ],
 93:   resolve: {
 94:     alias: {
 95: 
 96:       "@": path.resolve(__dirname, "./src"),
 97:       "@/components": path.resolve(__dirname, "./src/components"),
 98:       "@/pages": path.resolve(__dirname, "./src/pages"),
 99:       "@/hooks": path.resolve(__dirname, "./src/hooks"),
100:       "@/services": path.resolve(__dirname, "./src/services"),
101:       "@/types": path.resolve(__dirname, "./src/types"),
102:       "@/utils": path.resolve(__dirname, "./src/utils"),
103:     },
104:   },
105:   server: {
106: 
107:     host: true,
108:     port: 3000,
109:   },
110: });

================
File: src/__tests__/components/Dashboard.test.tsx
================
  1: import { render, screen, waitFor, within } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { BrowserRouter } from "react-router-dom";
  4: import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
  5: import Dashboard from "../../pages/dashboard";
  6: import { plantService } from "../../types/database";
  7: import { CareSchedulingService } from "@/services/careSchedulingService";
  8: 
  9: 
 10: jest.mock("../../hooks/useFirstTimeUser", () => ({
 11:   useFirstTimeUser: () => ({
 12:     isFirstTime: false,
 13:     isLoading: false,
 14:     markOnboardingComplete: jest.fn(),
 15:   }),
 16: }));
 17: 
 18: 
 19: jest.mock("../../types/database", () => ({
 20:   plantService: {
 21:     getActivePlants: jest.fn(),
 22:     addPlant: jest.fn(),
 23:     getPlant: jest.fn(),
 24:     updatePlant: jest.fn(),
 25:     deletePlant: jest.fn(),
 26:   },
 27: }));
 28: 
 29: 
 30: jest.mock("@/services/careSchedulingService", () => ({
 31:   CareSchedulingService: {
 32:     getUpcomingTasks: jest.fn(),
 33:   },
 34: }));
 35: 
 36: const mockPlantService = plantService as jest.Mocked<typeof plantService>;
 37: 
 38: 
 39: const mockCareSchedulingService = CareSchedulingService as jest.Mocked<
 40:   typeof CareSchedulingService
 41: >;
 42: 
 43: function renderDashboard() {
 44:   const queryClient = new QueryClient({
 45:     defaultOptions: {
 46:       queries: {
 47:         retry: false,
 48:       },
 49:       mutations: { retry: false },
 50:     },
 51:   });
 52: 
 53:   return render(
 54:     <QueryClientProvider client={queryClient}>
 55:       <BrowserRouter>
 56:         <Dashboard />
 57:       </BrowserRouter>
 58:     </QueryClientProvider>
 59:   );
 60: }
 61: 
 62: describe("Dashboard", () => {
 63:   beforeEach(() => {
 64:     jest.clearAllMocks();
 65:   });
 66: 
 67:   it("shows loading state initially", () => {
 68:     mockPlantService.getActivePlants.mockImplementation(
 69:       () => new Promise(() => {})
 70:     );
 71: 
 72:     renderDashboard();
 73: 
 74:     expect(screen.getByText("Loading your garden...")).toBeInTheDocument();
 75:   });
 76: 
 77:   it("displays empty state when no plants exist", async () => {
 78:     mockPlantService.getActivePlants.mockResolvedValue([]);
 79:     mockCareSchedulingService.getUpcomingTasks.mockResolvedValue([]);
 80: 
 81:     renderDashboard();
 82: 
 83:     await waitFor(() => {
 84: 
 85:       expect(screen.getByText("Start Your Digital Garden")).toBeInTheDocument();
 86:       expect(
 87:         screen.getByText(
 88:           "Add your first plant to begin tracking its growth, scheduling care tasks, and building healthy growing habits."
 89:         )
 90:       ).toBeInTheDocument();
 91:     });
 92:   });
 93: 
 94:   it("displays plants and tasks when data exists", async () => {
 95:     const mockPlants = [
 96:       {
 97:         id: "1",
 98:         varietyId: "astro-arugula",
 99:         varietyName: "Astro Arugula",
100:         name: "My Arugula",
101:         plantedDate: new Date("2024-01-01"),
102:         currentStage: "vegetative" as const,
103:         location: "Kitchen Window",
104:         container: "4 inch pot",
105:         isActive: true,
106:         notes: [],
107:         createdAt: new Date(),
108:         updatedAt: new Date(),
109:       },
110:     ];
111: 
112:     const mockTasks = [
113:       {
114:         id: "water-1",
115:         plantId: "1",
116:         name: "My Arugula",
117:         task: "Check water level",
118:         dueIn: "2 days",
119:         priority: "medium" as const,
120:         plantStage: "vegetative",
121:         dueDate: new Date(),
122:       },
123:     ];
124: 
125:     mockPlantService.getActivePlants.mockResolvedValue(mockPlants);
126:     mockCareSchedulingService.getUpcomingTasks.mockResolvedValue(mockTasks);
127: 
128:     renderDashboard();
129: 
130:     await waitFor(() => {
131: 
132:       expect(screen.getByTestId("active-plants-count")).toHaveTextContent("1");
133:       expect(screen.getByTestId("tasks-due-count")).toHaveTextContent("1");
134: 
135: 
136:       expect(screen.getByText("Recent Plants")).toBeInTheDocument();
137:       const recentPlantsContent = screen.getByTestId("recent-plants-content");
138:       expect(recentPlantsContent).toBeInTheDocument();
139: 
140: 
141:       expect(
142:         within(recentPlantsContent).getByText("My Arugula")
143:       ).toBeInTheDocument();
144:       expect(
145:         within(recentPlantsContent).getByText("Stage: vegetative")
146:       ).toBeInTheDocument();
147: 
148: 
149:       expect(screen.getByText("Today's Tasks")).toBeInTheDocument();
150:       expect(screen.getByText("Check water level")).toBeInTheDocument();
151:     });
152:   });
153: 
154:   it("displays plants with no tasks", async () => {
155:     const mockPlants = [
156:       {
157:         id: "1",
158:         varietyId: "astro-arugula",
159:         varietyName: "Astro Arugula",
160:         name: "My Arugula",
161:         plantedDate: new Date("2024-01-01"),
162:         currentStage: "vegetative" as const,
163:         location: "Kitchen Window",
164:         container: "4 inch pot",
165:         isActive: true,
166:         notes: [],
167:         createdAt: new Date(),
168:         updatedAt: new Date(),
169:       },
170:     ];
171: 
172:     mockPlantService.getActivePlants.mockResolvedValue(mockPlants);
173:     mockCareSchedulingService.getUpcomingTasks.mockResolvedValue([]);
174: 
175:     renderDashboard();
176: 
177:     await waitFor(() => {
178: 
179:       expect(screen.getByTestId("active-plants-count")).toHaveTextContent("1");
180:       expect(screen.getByTestId("tasks-due-count")).toHaveTextContent("0");
181: 
182: 
183:       expect(screen.getByText("All caught up!")).toBeInTheDocument();
184:       expect(screen.getByText("No tasks due today")).toBeInTheDocument();
185:     });
186:   });
187: 
188:   it("handles refresh functionality", async () => {
189:     const mockPlants = [
190:       {
191:         id: "1",
192:         varietyId: "astro-arugula",
193:         varietyName: "Astro Arugula",
194:         name: "My Arugula",
195:         plantedDate: new Date("2024-01-01"),
196:         currentStage: "vegetative" as const,
197:         location: "Kitchen Window",
198:         container: "4 inch pot",
199:         isActive: true,
200:         notes: [],
201:         createdAt: new Date(),
202:         updatedAt: new Date(),
203:       },
204:     ];
205: 
206:     mockPlantService.getActivePlants.mockResolvedValue(mockPlants);
207:     mockCareSchedulingService.getUpcomingTasks.mockResolvedValue([]);
208: 
209:     renderDashboard();
210: 
211: 
212:     await waitFor(() => {
213:       expect(screen.getByText("All caught up!")).toBeInTheDocument();
214:     });
215: 
216: 
217: 
218: 
219: 
220:     expect(mockPlantService.getActivePlants).toHaveBeenCalledTimes(1);
221:   });
222: 
223:   it("displays error state when service fails", async () => {
224:     mockPlantService.getActivePlants.mockRejectedValue(
225:       new Error("Database error")
226:     );
227: 
228:     renderDashboard();
229: 
230:     await waitFor(() => {
231:       expect(screen.getByText("Failed to load plants")).toBeInTheDocument();
232:       expect(screen.getByText("Try Again")).toBeInTheDocument();
233:     });
234:   });
235: 
236:   it("retries when error state try again button is clicked", async () => {
237:     mockPlantService.getActivePlants
238:       .mockRejectedValueOnce(new Error("Database error"))
239:       .mockResolvedValueOnce([
240:         {
241:           id: "1",
242:           varietyId: "astro-arugula",
243:           varietyName: "Astro Arugula",
244:           name: "My Arugula",
245:           plantedDate: new Date("2024-01-01"),
246:           currentStage: "vegetative" as const,
247:           location: "Kitchen Window",
248:           container: "4 inch pot",
249:           isActive: true,
250:           notes: [],
251:           createdAt: new Date(),
252:           updatedAt: new Date(),
253:         },
254:       ]);
255:     mockCareSchedulingService.getUpcomingTasks.mockResolvedValue([]);
256: 
257:     renderDashboard();
258: 
259: 
260:     await waitFor(() => {
261:       expect(screen.getByText("Failed to load plants")).toBeInTheDocument();
262:     });
263: 
264: 
265:     const tryAgainButton = screen.getByText("Try Again");
266:     await userEvent.click(tryAgainButton);
267: 
268: 
269:     await waitFor(() => {
270:       expect(screen.getByTestId("active-plants-count")).toHaveTextContent("1");
271:     });
272: 
273:     expect(mockPlantService.getActivePlants).toHaveBeenCalledTimes(2);
274:   });
275: 
276:   it("shows multiple plants in recent plants section", async () => {
277:     const mockPlants = [
278:       {
279:         id: "1",
280:         varietyId: "astro-arugula",
281:         varietyName: "Astro Arugula",
282:         name: "My Arugula",
283:         plantedDate: new Date("2024-01-01"),
284:         currentStage: "vegetative" as const,
285:         location: "Kitchen Window",
286:         container: "4 inch pot",
287:         isActive: true,
288:         notes: [],
289:         createdAt: new Date(),
290:         updatedAt: new Date(),
291:       },
292:       {
293:         id: "2",
294:         varietyId: "baby-spinach",
295:         varietyName: "Baby Spinach",
296:         name: "Spinach Plant",
297:         plantedDate: new Date("2024-01-05"),
298:         currentStage: "seedling" as const,
299:         location: "Main Bed",
300:         container: "5 gallon bag",
301:         isActive: true,
302:         notes: [],
303:         createdAt: new Date(),
304:         updatedAt: new Date(),
305:       },
306:     ];
307: 
308:     const mockTasks = [
309:       {
310:         id: "water-1",
311:         plantId: "1",
312:         name: "My Arugula",
313:         task: "Check water level",
314:         dueIn: "2 days",
315:         priority: "medium" as const,
316:         plantStage: "vegetative",
317:         dueDate: new Date(),
318:       },
319:       {
320:         id: "water-2",
321:         plantId: "2",
322:         name: "Spinach Plant",
323:         task: "Check water level",
324:         dueIn: "1 day",
325:         priority: "medium" as const,
326:         plantStage: "seedling",
327:         dueDate: new Date(),
328:       },
329:     ];
330: 
331:     mockPlantService.getActivePlants.mockResolvedValue(mockPlants);
332:     mockCareSchedulingService.getUpcomingTasks.mockResolvedValue(mockTasks);
333: 
334:     renderDashboard();
335: 
336:     await waitFor(() => {
337:       expect(screen.getByTestId("active-plants-count")).toHaveTextContent("2");
338:       expect(screen.getByTestId("tasks-due-count")).toHaveTextContent("2");
339: 
340:       const recentPlantsContent = screen.getByTestId("recent-plants-content");
341:       expect(
342:         within(recentPlantsContent).getByText("My Arugula")
343:       ).toBeInTheDocument();
344:       expect(
345:         within(recentPlantsContent).getByText("Spinach Plant")
346:       ).toBeInTheDocument();
347:     });
348:   });
349: });

================
File: src/__tests__/components/PlantRegistrationForm.test.tsx
================
  1: import { render, screen, waitFor, cleanup } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
  4: import { plantService, varietyService } from "@/types/database";
  5: import type { VarietyRecord } from "@/types/database";
  6: import toast from "react-hot-toast";
  7: 
  8: jest.mock("@/components/plant/SoilMixtureSelector", () => ({
  9:   __esModule: true,
 10:   default: ({
 11:     selectedMixture,
 12:     onMixtureChange,
 13:   }: {
 14:     selectedMixture?: string;
 15:     onMixtureChange: (mixture: string) => void;
 16:   }) => (
 17:     <div>
 18:       <label htmlFor="soilMix">Soil Mixture</label>
 19:       <textarea
 20:         data-testid="soil-mixture-selector"
 21:         id="soilMix"
 22:         value={selectedMixture || ""}
 23:         onChange={(e) => onMixtureChange(e.target.value)}
 24:         placeholder="e.g., 40% coco coir, 30% perlite, 25% vermiculite, 5% compost"
 25:       />
 26:     </div>
 27:   ),
 28: }));
 29: 
 30: jest.mock("@/components/plant/CustomVarietyForm", () => ({
 31:   CustomVarietyForm: ({
 32:     onSuccess,
 33:     onCancel,
 34:   }: {
 35:     onSuccess?: (varietyId: string) => void;
 36:     onCancel?: () => void;
 37:   }) => (
 38:     <div data-testid="custom-variety-form">
 39:       <button onClick={() => onSuccess?.("new-variety-id")}>
 40:         Save Variety
 41:       </button>
 42:       <button onClick={onCancel}>Cancel</button>
 43:     </div>
 44:   ),
 45: }));
 46: 
 47: jest.mock("@/types/database", () => ({
 48:   plantService: {
 49:     addPlant: jest.fn(),
 50:   },
 51:   varietyService: {
 52:     getAllVarieties: jest.fn(),
 53:   },
 54: }));
 55: 
 56: jest.mock("react-hot-toast", () => ({
 57:   __esModule: true,
 58:   default: {
 59:     success: jest.fn(),
 60:     error: jest.fn(),
 61:   },
 62: }));
 63: 
 64: const mockPlantService = plantService as jest.Mocked<typeof plantService>;
 65: const mockVarietyService = varietyService as jest.Mocked<typeof varietyService>;
 66: const mockToast = toast as jest.Mocked<typeof toast>;
 67: 
 68: const mockVarieties: VarietyRecord[] = [
 69:   {
 70:     id: "variety-1",
 71:     name: "Test Variety",
 72:     category: "herbs",
 73:     isCustom: false,
 74:     growthTimeline: {
 75:       germination: 7,
 76:       seedling: 14,
 77:       vegetative: 30,
 78:       maturation: 102,
 79:     },
 80:     protocols: {
 81:       watering: {
 82:         germination: {
 83:           trigger: { moistureLevel: "3-4" },
 84:           target: { moistureLevel: "6-7" },
 85:           volume: { amount: "16-24 oz", frequency: "every 2-3 days" },
 86:         },
 87:       },
 88:     },
 89:     createdAt: new Date(),
 90:   },
 91:   {
 92:     id: "tomato-1",
 93:     name: "Roma Tomato",
 94:     category: "fruiting-plants",
 95:     isCustom: false,
 96:     growthTimeline: {
 97:       germination: 7,
 98:       seedling: 14,
 99:       vegetative: 30,
100:       maturation: 85,
101:     },
102:     protocols: {
103:       lighting: {
104:         germination: {
105:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
106:           photoperiod: { hours: 16 },
107:           dli: { min: 5, max: 10, unit: "mol/m²/day" },
108:         },
109:       },
110:     },
111:     createdAt: new Date(),
112:   },
113:   {
114:     id: "basil-1",
115:     name: "Sweet Basil",
116:     category: "herbs",
117:     isCustom: false,
118:     growthTimeline: {
119:       germination: 5,
120:       seedling: 10,
121:       vegetative: 45,
122:       maturation: 75,
123:     },
124:     protocols: {
125:       environment: {
126:         temperature: { min: 65, max: 75, optimal: 70, unit: "F" },
127:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
128:       },
129:     },
130:     createdAt: new Date(),
131:   },
132:   {
133:     id: "custom-1",
134:     name: "My Custom Plant",
135:     category: "leafy-greens",
136:     isCustom: true,
137:     growthTimeline: {
138:       germination: 7,
139:       seedling: 14,
140:       vegetative: 30,
141:       maturation: 60,
142:     },
143:     protocols: {
144:       fertilization: {
145:         vegetative: {
146:           products: [
147:             {
148:               name: "General Hydroponics FloraNova Grow",
149:               dilution: "1 tsp/gal",
150:               amount: "16 oz",
151:               frequency: "weekly",
152:             },
153:           ],
154:         },
155:       },
156:     },
157:     createdAt: new Date(),
158:   },
159: ];
160: 
161: const mockOnSuccess = jest.fn();
162: const mockOnCancel = jest.fn();
163: 
164: 
165: const toggleLocationToOutdoor = async (
166:   user: ReturnType<typeof userEvent.setup>
167: ) => {
168: 
169:   const locationSwitch = screen.getByLabelText(/location/i);
170: 
171:   if (locationSwitch.getAttribute("aria-checked") === "false") {
172:     await user.click(locationSwitch);
173:   }
174: };
175: 
176: 
177: const fillRequiredFields = async (user: ReturnType<typeof userEvent.setup>) => {
178: 
179:   await waitFor(() => {
180:     expect(
181:       screen.getByRole("option", { name: /roma tomato/i })
182:     ).toBeInTheDocument();
183:   });
184: 
185: 
186:   const varietySelect = screen.getByLabelText(/plant variety/i);
187:   await user.selectOptions(varietySelect, "tomato-1");
188: 
189: 
190:   await toggleLocationToOutdoor(user);
191: 
192: 
193:   const growBagRadio = screen.getByDisplayValue("grow-bag");
194:   await user.click(growBagRadio);
195: 
196:   await waitFor(() => {
197:     expect(screen.getByText("1 Gallon")).toBeInTheDocument();
198:   });
199: 
200: 
201:   const oneGallonRadio = screen.getByDisplayValue("1-gallon");
202:   await user.click(oneGallonRadio);
203: 
204: 
205:   const soilMixTextarea = screen.getByTestId("soil-mixture-selector");
206:   await user.type(soilMixTextarea, "Test soil mix");
207: };
208: describe("PlantRegistrationForm", () => {
209:   let user: ReturnType<typeof userEvent.setup>;
210: 
211:   const renderForm = (props = {}) => {
212:     return render(
213:       <PlantRegistrationForm
214:         onSuccess={mockOnSuccess}
215:         onCancel={mockOnCancel}
216:         {...props}
217:       />
218:     );
219:   };
220: 
221:   beforeEach(() => {
222:     user = userEvent.setup();
223:     jest.clearAllMocks();
224:     mockVarietyService.getAllVarieties.mockResolvedValue(mockVarieties);
225:   });
226: 
227:   afterEach(() => {
228:     cleanup();
229: 
230:     document.body.innerHTML = "";
231:   });
232: 
233:   describe("Form Rendering", () => {
234:     it("renders all form fields correctly", async () => {
235:       renderForm();
236: 
237:       await waitFor(() => {
238:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
239:       });
240: 
241: 
242:       expect(screen.getByText("Register New Plant")).toBeInTheDocument();
243:       expect(screen.getByLabelText(/plant variety/i)).toBeInTheDocument();
244:       expect(screen.getByLabelText(/plant name/i)).toBeInTheDocument();
245:       expect(screen.getByLabelText(/planting date/i)).toBeInTheDocument();
246:       expect(screen.getByLabelText(/location/i)).toBeInTheDocument();
247:       expect(screen.getByText("Container Type *")).toBeInTheDocument();
248:       expect(screen.getByTestId("soil-mixture-selector")).toBeInTheDocument();
249:       expect(screen.getByLabelText(/notes/i)).toBeInTheDocument();
250: 
251: 
252:       expect(screen.getByText("Complete Required Fields")).toBeInTheDocument();
253:       expect(screen.getByText("Cancel")).toBeInTheDocument();
254:     });
255: 
256:     it("loads and displays varieties correctly", async () => {
257:       renderForm();
258: 
259:       await waitFor(() => {
260:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
261:       });
262: 
263: 
264:       expect(
265:         screen.getByText("Roma Tomato (fruiting-plants)")
266:       ).toBeInTheDocument();
267:       expect(screen.getByText("Sweet Basil (herbs)")).toBeInTheDocument();
268: 
269: 
270:       expect(
271:         screen.getByText("🌱 My Custom Plant (leafy-greens)")
272:       ).toBeInTheDocument();
273:     });
274: 
275:     it("shows custom variety form when button is clicked", async () => {
276:       renderForm();
277: 
278:       await waitFor(() => {
279:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
280:       });
281: 
282:       const customVarietyButton = screen.getByText("➕ Create Custom Variety");
283:       await user.click(customVarietyButton);
284: 
285:       expect(screen.getByTestId("custom-variety-form")).toBeInTheDocument();
286:     });
287:   });
288: 
289:   describe("Container Type Selection", () => {
290:     beforeEach(async () => {
291:       renderForm();
292:       await waitFor(() => {
293:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
294:       });
295:     });
296: 
297:     it("shows container size options when grow bag is selected", async () => {
298:       const growBagRadio = screen.getByDisplayValue("grow-bag");
299:       await user.click(growBagRadio);
300: 
301:       await waitFor(() => {
302:         expect(screen.getByText("1 Gallon")).toBeInTheDocument();
303:         expect(screen.getByText("3 Gallon")).toBeInTheDocument();
304:         expect(screen.getByText("5 Gallon")).toBeInTheDocument();
305:         expect(screen.getByText("Custom Size")).toBeInTheDocument();
306:       });
307:     });
308: 
309:     it("shows container size options when pot is selected", async () => {
310:       const potRadio = screen.getByDisplayValue("pot");
311:       await user.click(potRadio);
312: 
313:       await waitFor(() => {
314:         expect(screen.getByText("4 inch")).toBeInTheDocument();
315:         expect(screen.getByText("5 inch")).toBeInTheDocument();
316:         expect(screen.getByText("6 inch")).toBeInTheDocument();
317:       });
318:     });
319: 
320:     it("shows raised bed options when raised bed is selected", async () => {
321:       const raisedBedRadio = screen.getByDisplayValue("raised-bed");
322:       await user.click(raisedBedRadio);
323: 
324:       await waitFor(() => {
325:         expect(screen.getByText("Custom Dimensions")).toBeInTheDocument();
326:       });
327:     });
328:   });
329: 
330:   describe("Custom Grow Bag Configuration", () => {
331:     beforeEach(async () => {
332:       renderForm();
333:       await waitFor(() => {
334:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
335:       });
336: 
337: 
338:       const growBagRadio = screen.getByDisplayValue("grow-bag");
339:       await user.click(growBagRadio);
340: 
341:       await waitFor(() => {
342:         expect(screen.getByText("Custom Size")).toBeInTheDocument();
343:       });
344: 
345:       const customSizeRadio = screen.getByDisplayValue("custom");
346:       await user.click(customSizeRadio);
347:     });
348: 
349:     it("shows shape selection for custom grow bag", async () => {
350:       await waitFor(() => {
351:         expect(screen.getByText("Grow Bag Shape *")).toBeInTheDocument();
352:         expect(screen.getByDisplayValue("circular")).toBeInTheDocument();
353:         expect(screen.getByDisplayValue("rectangular")).toBeInTheDocument();
354:       });
355:     });
356: 
357:     it("shows circular dimensions when circular shape is selected", async () => {
358:       const circularRadio = screen.getByDisplayValue("circular");
359:       await user.click(circularRadio);
360: 
361:       await waitFor(() => {
362:         expect(
363:           screen.getByText("Circular Grow Bag Dimensions (inches) *")
364:         ).toBeInTheDocument();
365:         expect(screen.getByLabelText("Diameter")).toBeInTheDocument();
366:         expect(screen.getByLabelText("Height")).toBeInTheDocument();
367:       });
368: 
369:       const diameterInput = screen.getByLabelText("Diameter");
370:       const heightInput = screen.getByLabelText("Height");
371: 
372:       expect(diameterInput).toHaveAttribute("placeholder", "24");
373:       expect(heightInput).toHaveAttribute("placeholder", "18");
374:     });
375: 
376:     it("shows rectangular dimensions when rectangular shape is selected", async () => {
377:       const rectangularRadio = screen.getByDisplayValue("rectangular");
378:       await user.click(rectangularRadio);
379: 
380:       await waitFor(() => {
381:         expect(
382:           screen.getByText("Rectangular Grow Bag Dimensions (inches) *")
383:         ).toBeInTheDocument();
384:         expect(screen.getByLabelText("Width")).toBeInTheDocument();
385:         expect(screen.getByLabelText("Length")).toBeInTheDocument();
386:         expect(screen.getByLabelText("Height")).toBeInTheDocument();
387:       });
388:     });
389:   });
390: 
391:   describe("Custom Raised Bed Configuration", () => {
392:     beforeEach(async () => {
393:       renderForm();
394:       await waitFor(() => {
395:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
396:       });
397: 
398: 
399:       const raisedBedRadio = screen.getByDisplayValue("raised-bed");
400:       await user.click(raisedBedRadio);
401: 
402:       await waitFor(() => {
403:         expect(screen.getByText("Custom Dimensions")).toBeInTheDocument();
404:       });
405: 
406:       const customDimensionsRadio =
407:         screen.getByDisplayValue("custom-dimensions");
408:       await user.click(customDimensionsRadio);
409:     });
410: 
411:     it("shows raised bed dimension inputs", async () => {
412:       await waitFor(() => {
413:         expect(
414:           screen.getByText("Raised Bed Dimensions (inches) *")
415:         ).toBeInTheDocument();
416:         expect(screen.getByLabelText("Width")).toBeInTheDocument();
417:         expect(screen.getByLabelText("Length")).toBeInTheDocument();
418:         expect(screen.getByLabelText("Soil Depth")).toBeInTheDocument();
419:       });
420:     });
421:   });
422: 
423:   describe("Form Validation & Button States", () => {
424:     beforeEach(async () => {
425:       renderForm();
426:       await waitFor(() => {
427:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
428:       });
429:     });
430: 
431:     it("shows 'Complete Required Fields' when form is invalid", async () => {
432:       expect(screen.getByText("Complete Required Fields")).toBeInTheDocument();
433:       expect(screen.queryByText("Register Plant")).not.toBeInTheDocument();
434: 
435:       const submitButton = screen.getByRole("button", {
436:         name: /complete required fields/i,
437:       });
438:       expect(submitButton).toBeDisabled();
439:     });
440: 
441:     it("shows 'Register Plant' when form is valid", async () => {
442:       await fillRequiredFields(user);
443: 
444:       await waitFor(() => {
445:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
446:       });
447: 
448:       expect(
449:         screen.queryByText("Complete Required Fields")
450:       ).not.toBeInTheDocument();
451: 
452:       const submitButton = screen.getByText("Register Plant");
453:       expect(submitButton).not.toBeDisabled();
454:     });
455: 
456: 
457:   });
458: 
459:   describe("Form Submission", () => {
460:     it("successfully submits form with standard container", async () => {
461:       mockPlantService.addPlant.mockResolvedValue("new-plant-id");
462: 
463:       renderForm();
464:       await waitFor(() => {
465:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
466:       });
467: 
468: 
469:       await fillRequiredFields(user);
470: 
471:       const nameInput = screen.getByLabelText(/plant name/i);
472:       await user.type(nameInput, "My Tomato Plant");
473: 
474: 
475:       await waitFor(() => {
476:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
477:       });
478: 
479:       const submitButton = screen.getByText("Register Plant");
480:       await user.click(submitButton);
481: 
482:       await waitFor(() => {
483:         expect(mockPlantService.addPlant).toHaveBeenCalledWith({
484:           varietyId: "tomato-1",
485:           varietyName: "Roma Tomato",
486:           name: "My Tomato Plant",
487:           plantedDate: expect.any(Date),
488:           currentStage: "germination",
489:           location: "Outdoor",
490:           container: "Grow Bag - 1 Gallon",
491:           soilMix: "Test soil mix",
492:           isActive: true,
493:           notes: [],
494:           reminderPreferences: {
495:             watering: true,
496:             fertilizing: true,
497:             observation: true,
498:             lighting: true,
499:             pruning: true,
500:           },
501:         });
502:       });
503: 
504:       expect(mockOnSuccess).toHaveBeenCalled();
505:     });
506: 
507:     it("successfully submits form with custom grow bag", async () => {
508:       mockPlantService.addPlant.mockResolvedValue("new-plant-id");
509: 
510:       renderForm();
511:       await waitFor(() => {
512:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
513:       });
514: 
515: 
516:       await waitFor(() => {
517:         expect(
518:           screen.getByRole("option", { name: /roma tomato/i })
519:         ).toBeInTheDocument();
520:       });
521: 
522: 
523:       const varietySelect = screen.getByLabelText(/plant variety/i);
524:       await user.selectOptions(varietySelect, "tomato-1");
525: 
526: 
527:       await toggleLocationToOutdoor(user);
528: 
529: 
530:       const growBagRadio = screen.getByDisplayValue("grow-bag");
531:       await user.click(growBagRadio);
532: 
533:       await waitFor(() => {
534:         expect(screen.getByText("Custom Size")).toBeInTheDocument();
535:       });
536: 
537:       const customSizeRadio = screen.getByDisplayValue("custom");
538:       await user.click(customSizeRadio);
539: 
540: 
541:       await waitFor(() => {
542:         expect(screen.getByDisplayValue("rectangular")).toBeInTheDocument();
543:       });
544: 
545:       const rectangularRadio = screen.getByDisplayValue("rectangular");
546:       await user.click(rectangularRadio);
547: 
548: 
549:       await waitFor(() => {
550:         expect(screen.getByLabelText("Width")).toBeInTheDocument();
551:       });
552: 
553:       const widthInput = screen.getByLabelText("Width");
554:       await user.type(widthInput, "24");
555: 
556:       const lengthInput = screen.getByLabelText("Length");
557:       await user.type(lengthInput, "48");
558: 
559:       const heightInput = screen.getByLabelText("Height");
560:       await user.type(heightInput, "18");
561: 
562: 
563:       const soilMixTextarea = screen.getByTestId("soil-mixture-selector");
564:       await user.type(soilMixTextarea, "Test soil mix");
565: 
566:       await waitFor(() => {
567:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
568:       });
569: 
570:       const submitButton = screen.getByText("Register Plant");
571:       await user.click(submitButton);
572: 
573:       await waitFor(() => {
574:         expect(mockPlantService.addPlant).toHaveBeenCalledWith({
575:           varietyId: "tomato-1",
576:           varietyName: "Roma Tomato",
577:           name: undefined,
578:           plantedDate: expect.any(Date),
579:           currentStage: "germination",
580:           location: "Outdoor",
581:           container: 'Grow Bag - 24"W x 48"L x 18"H (Rectangular)',
582:           soilMix: "Test soil mix",
583:           isActive: true,
584:           notes: [],
585:           reminderPreferences: {
586:             watering: true,
587:             fertilizing: true,
588:             observation: true,
589:             lighting: true,
590:             pruning: true,
591:           },
592:         });
593:       });
594: 
595:       expect(mockOnSuccess).toHaveBeenCalled();
596:     });
597: 
598:     it("successfully submits form with custom raised bed", async () => {
599:       mockPlantService.addPlant.mockResolvedValue("new-plant-id");
600: 
601:       renderForm();
602:       await waitFor(() => {
603:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
604:       });
605: 
606: 
607:       await waitFor(() => {
608:         expect(
609:           screen.getByRole("option", { name: /roma tomato/i })
610:         ).toBeInTheDocument();
611:       });
612: 
613:       const varietySelect = screen.getByLabelText(/plant variety/i);
614:       await user.selectOptions(varietySelect, "tomato-1");
615: 
616:       await toggleLocationToOutdoor(user);
617: 
618:       const raisedBedRadio = screen.getByDisplayValue("raised-bed");
619:       await user.click(raisedBedRadio);
620: 
621:       await waitFor(() => {
622:         expect(screen.getByText("Custom Dimensions")).toBeInTheDocument();
623:       });
624: 
625:       const customDimensionsRadio =
626:         screen.getByDisplayValue("custom-dimensions");
627:       await user.click(customDimensionsRadio);
628: 
629:       await waitFor(() => {
630:         expect(screen.getByLabelText("Width")).toBeInTheDocument();
631:       });
632: 
633:       const widthInput = screen.getByLabelText("Width");
634:       await user.type(widthInput, "48");
635: 
636:       const lengthInput = screen.getByLabelText("Length");
637:       await user.type(lengthInput, "96");
638: 
639:       const depthInput = screen.getByLabelText("Soil Depth");
640:       await user.type(depthInput, "12");
641: 
642: 
643:       const soilMixTextarea = screen.getByTestId("soil-mixture-selector");
644:       await user.type(soilMixTextarea, "Test soil mix");
645: 
646:       await waitFor(() => {
647:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
648:       });
649: 
650:       const submitButton = screen.getByText("Register Plant");
651:       await user.click(submitButton);
652: 
653:       await waitFor(() => {
654:         expect(mockPlantService.addPlant).toHaveBeenCalledWith({
655:           varietyId: "tomato-1",
656:           varietyName: "Roma Tomato",
657:           name: undefined,
658:           plantedDate: expect.any(Date),
659:           currentStage: "germination",
660:           location: "Outdoor",
661:           container: 'Raised Bed - 48"W x 96"L x 12"D',
662:           soilMix: "Test soil mix",
663:           isActive: true,
664:           notes: [],
665:           reminderPreferences: {
666:             watering: true,
667:             fertilizing: true,
668:             observation: true,
669:             lighting: true,
670:             pruning: true,
671:           },
672:         });
673:       });
674: 
675:       expect(mockOnSuccess).toHaveBeenCalled();
676:     });
677: 
678:     it("submits form with valid data", async () => {
679:       mockPlantService.addPlant.mockResolvedValue("new-plant-id");
680: 
681:       renderForm();
682:       await waitFor(() => {
683:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
684:       });
685: 
686:       await fillRequiredFields(user);
687: 
688:       const dateInput = screen.getByLabelText(/planting date/i);
689:       await user.clear(dateInput);
690:       await user.type(dateInput, "2024-01-15");
691: 
692:       await waitFor(() => {
693:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
694:       });
695: 
696:       const submitButton = screen.getByText("Register Plant");
697:       await user.click(submitButton);
698: 
699:       await waitFor(() => {
700:         expect(mockPlantService.addPlant).toHaveBeenCalledWith(
701:           expect.objectContaining({
702:             varietyId: "tomato-1",
703:             location: "Outdoor",
704:             plantedDate: expect.any(Date),
705:             soilMix: "Test soil mix",
706:             reminderPreferences: {
707:               watering: true,
708:               fertilizing: true,
709:               observation: true,
710:               lighting: true,
711:               pruning: true,
712:             },
713:           })
714:         );
715:       });
716:     });
717: 
718:     it("handles submission errors gracefully", async () => {
719:       const consoleError = jest.spyOn(console, "error").mockImplementation();
720:       mockPlantService.addPlant.mockRejectedValue(new Error("Database error"));
721: 
722:       renderForm();
723:       await waitFor(() => {
724:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
725:       });
726: 
727: 
728:       await fillRequiredFields(user);
729: 
730:       await waitFor(() => {
731:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
732:       });
733: 
734:       const submitButton = screen.getByText("Register Plant");
735:       await user.click(submitButton);
736: 
737:       await waitFor(() => {
738:         expect(
739:           screen.getByText(/failed to register plant/i)
740:         ).toBeInTheDocument();
741:       });
742: 
743:       expect(mockOnSuccess).not.toHaveBeenCalled();
744:       consoleError.mockRestore();
745:     });
746: 
747:     it("shows loading state during submission", async () => {
748:       mockPlantService.addPlant.mockImplementation(
749:         () =>
750:           new Promise((resolve) =>
751:             setTimeout(() => resolve("new-plant-id"), 100)
752:           )
753:       );
754: 
755:       renderForm();
756:       await waitFor(() => {
757:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
758:       });
759: 
760: 
761:       await fillRequiredFields(user);
762: 
763:       await waitFor(() => {
764:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
765:       });
766: 
767:       const submitButton = screen.getByText("Register Plant");
768:       await user.click(submitButton);
769: 
770: 
771:       expect(screen.getByText("Registering...")).toBeInTheDocument();
772: 
773:       await waitFor(() => {
774:         expect(mockOnSuccess).toHaveBeenCalled();
775:       });
776:     });
777:   });
778: 
779:   describe("Custom Variety Integration", () => {
780:     it("refreshes varieties after creating custom variety", async () => {
781:       renderForm();
782: 
783:       await waitFor(() => {
784:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
785:       });
786: 
787: 
788:       mockVarietyService.getAllVarieties.mockClear();
789: 
790:       const customVarietyButton = screen.getByText("➕ Create Custom Variety");
791:       await user.click(customVarietyButton);
792: 
793:       const saveButton = screen.getByText("Save Variety");
794:       await user.click(saveButton);
795: 
796: 
797:       await waitFor(() => {
798:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
799:       });
800:     });
801:   });
802: 
803:   describe("Initial State", () => {
804:     it("has empty form initially", async () => {
805:       renderForm();
806: 
807:       await waitFor(() => {
808:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
809:       });
810: 
811:       const varietySelect = screen.getByLabelText(
812:         /plant variety/i
813:       ) as HTMLSelectElement;
814:       expect(varietySelect.value).toBe("");
815:     });
816:   });
817: 
818:   describe("Cancel Functionality", () => {
819:     it("calls onCancel when cancel button is clicked", async () => {
820:       renderForm();
821: 
822:       await waitFor(() => {
823:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
824:       });
825: 
826:       const cancelButton = screen.getByText("Cancel");
827:       await user.click(cancelButton);
828: 
829:       expect(mockOnCancel).toHaveBeenCalled();
830:     });
831: 
832:     it("does not render cancel button when onCancel is not provided", () => {
833:       render(<PlantRegistrationForm />);
834: 
835:       expect(screen.queryByText("Cancel")).not.toBeInTheDocument();
836:     });
837:   });
838: 
839:   describe("Accessibility", () => {
840:     it("has proper form labels and structure", async () => {
841:       renderForm();
842: 
843:       await waitFor(() => {
844:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
845:       });
846: 
847: 
848:       expect(screen.getByLabelText(/plant variety/i)).toBeInTheDocument();
849:       expect(screen.getByLabelText(/plant name/i)).toBeInTheDocument();
850:       expect(screen.getByLabelText(/planting date/i)).toBeInTheDocument();
851: 
852: 
853:       expect(screen.getByLabelText(/location/i)).toBeInTheDocument();
854:       expect(screen.getByText("Location *")).toBeInTheDocument();
855: 
856:       expect(screen.getByLabelText(/soil mix/i)).toBeInTheDocument();
857:       expect(screen.getByLabelText(/notes/i)).toBeInTheDocument();
858: 
859: 
860:       expect(screen.getByText("Plant Variety *")).toBeInTheDocument();
861:       expect(screen.getByText("Planting Date *")).toBeInTheDocument();
862:       expect(screen.getByText("Location *")).toBeInTheDocument();
863:     });
864: 
865:     it("shows appropriate button text and states based on form validity", async () => {
866:       renderForm();
867: 
868:       await waitFor(() => {
869:         expect(mockVarietyService.getAllVarieties).toHaveBeenCalled();
870:       });
871: 
872: 
873:       expect(screen.getByText("Complete Required Fields")).toBeInTheDocument();
874:       expect(screen.queryByText("Register Plant")).not.toBeInTheDocument();
875: 
876:       const invalidSubmitButton = screen.getByRole("button", {
877:         name: /complete required fields/i,
878:       });
879:       expect(invalidSubmitButton).toBeDisabled();
880: 
881: 
882:       await fillRequiredFields(user);
883: 
884: 
885:       await waitFor(() => {
886:         expect(screen.getByText("Register Plant")).toBeInTheDocument();
887:       });
888: 
889:       expect(
890:         screen.queryByText("Complete Required Fields")
891:       ).not.toBeInTheDocument();
892: 
893:       const validSubmitButton = screen.getByText("Register Plant");
894:       expect(validSubmitButton).not.toBeDisabled();
895:     });
896:   });
897: 
898:   describe("Success Notifications", () => {
899:     it("should show success notification when custom variety is created", async () => {
900: 
901: 
902:       expect(typeof mockToast.success).toBe("function");
903:     });
904:   });
905: });

================
File: src/__tests__/database/integration.test.ts
================
  1: import {
  2:   plantService,
  3:   varietyService,
  4:   careService,
  5: } from "../../types/database";
  6: import { initializeDatabase } from "../../db/seedData";
  7: 
  8: describe("Database Integration", () => {
  9:   beforeEach(async () => {
 10: 
 11:     const { db } = await import("../../types/database");
 12:     await db.plants.clear();
 13:     await db.varieties.clear();
 14:     await db.careActivities.clear();
 15:     await db.syncQueue.clear();
 16:   });
 17: 
 18:   describe("Database initialization", () => {
 19:     it("seeds varieties correctly", async () => {
 20:       await initializeDatabase();
 21: 
 22:       const varieties = await varietyService.getAllVarieties();
 23:       expect(varieties.length).toBeGreaterThan(0);
 24:       expect(varieties.some((v) => v.name === "Little Finger Carrots")).toBe(
 25:         true
 26:       );
 27:       expect(varieties.some((v) => v.name === "Astro Arugula")).toBe(true);
 28:     });
 29: 
 30:     it("does not duplicate varieties on re-initialization", async () => {
 31:       await initializeDatabase();
 32:       const firstCount = (await varietyService.getAllVarieties()).length;
 33: 
 34:       await initializeDatabase();
 35:       const secondCount = (await varietyService.getAllVarieties()).length;
 36: 
 37:       expect(firstCount).toBe(secondCount);
 38:     });
 39:   });
 40: 
 41:   describe("Plant lifecycle", () => {
 42:     beforeEach(async () => {
 43:       await initializeDatabase();
 44:     });
 45: 
 46:     it("creates plant with care activities", async () => {
 47:       const varieties = await varietyService.getAllVarieties();
 48:       const arugula = varieties.find((v) => v.name.includes("Arugula"));
 49: 
 50:       expect(arugula).toBeDefined();
 51: 
 52:       const plantId = await plantService.addPlant({
 53:         varietyId: arugula!.id,
 54:         varietyName: arugula!.name,
 55:         name: "Test Arugula",
 56:         plantedDate: new Date("2024-01-01"),
 57:         currentStage: "seedling",
 58:         location: "Test Location",
 59:         container: "Test Container",
 60:         isActive: true,
 61:       });
 62: 
 63: 
 64:       const careId = await careService.addCareActivity({
 65:         plantId,
 66:         type: "water",
 67:         date: new Date("2024-01-02"),
 68:         details: {
 69:           type: "water",
 70:           amount: "200ml",
 71:           moistureReading: {
 72: 
 73:             before: 3,
 74:             after: 7,
 75:             scale: "1-10" as const,
 76:           },
 77:         },
 78:       });
 79: 
 80: 
 81:       const plant = await plantService.getPlant(plantId);
 82:       const careHistory = await careService.getPlantCareHistory(plantId);
 83: 
 84:       expect(plant).toBeDefined();
 85:       expect(plant?.name).toBe("Test Arugula");
 86:       expect(careHistory).toHaveLength(1);
 87:       expect(careHistory[0].id).toBe(careId);
 88:     });
 89: 
 90:     it("handles storage quota exceeded gracefully", async () => {
 91: 
 92:       const originalAdd = plantService.addPlant;
 93:       plantService.addPlant = jest
 94:         .fn()
 95:         .mockRejectedValue(new Error("QuotaExceededError"));
 96: 
 97:       await expect(
 98:         plantService.addPlant({
 99:           varietyId: "test",
100:           varietyName: "Test Variety",
101:           plantedDate: new Date(),
102:           currentStage: "seedling",
103:           location: "test",
104:           container: "test",
105:           isActive: true,
106:         })
107:       ).rejects.toThrow("QuotaExceededError");
108: 
109: 
110:       plantService.addPlant = originalAdd;
111:     });
112:   });
113: 
114:   describe("Sync queue behavior", () => {
115:     it("queues operations correctly", async () => {
116:       const plantId = await plantService.addPlant({
117:         varietyId: "test-variety",
118:         varietyName: "Test Variety Name",
119:         plantedDate: new Date(),
120:         currentStage: "germination",
121:         location: "test",
122:         container: "test",
123:         isActive: true,
124:       });
125: 
126: 
127:       const { db } = await import("../../types/database");
128:       const queueItems = await db.syncQueue.toArray();
129: 
130:       expect(queueItems.length).toBeGreaterThan(0);
131:       expect(
132:         queueItems.some(
133:           (item) =>
134:             item.table === "plants" &&
135:             item.operation === "create" &&
136:             item.recordId === plantId
137:         )
138:       ).toBe(true);
139:     });
140: 
141:     it("queues care activity operations", async () => {
142: 
143:       const plantId = await plantService.addPlant({
144:         varietyId: "test-variety",
145:         varietyName: "Test Variety Name",
146:         plantedDate: new Date(),
147:         currentStage: "germination",
148:         location: "test",
149:         container: "test",
150:         isActive: true,
151:       });
152: 
153: 
154:       const careId = await careService.addCareActivity({
155:         plantId,
156:         type: "harvest",
157:         date: new Date(),
158:         details: {
159:           type: "harvest",
160:           amount: "200g",
161:           quality: "good",
162:         },
163:       });
164: 
165: 
166:       const { db } = await import("../../types/database");
167:       const queueItems = await db.syncQueue.toArray();
168: 
169:       expect(queueItems.length).toBe(2);
170:       expect(
171:         queueItems.some(
172:           (item) =>
173:             item.table === "careActivities" &&
174:             item.operation === "create" &&
175:             item.recordId === careId
176:         )
177:       ).toBe(true);
178:     });
179:   });
180: });

================
File: src/__tests__/database/varietyService.test.ts
================
  1: import { varietyService } from "../../types/database";
  2: import { initializeDatabase } from "../../db/seedData";
  3: import { seedVarieties } from "../../data/seedVarieties";
  4: 
  5: describe("varietyService", () => {
  6:   beforeEach(async () => {
  7: 
  8:     const db = await import("../../types/database").then((m) => m.db);
  9:     await db.varieties.clear();
 10:   });
 11: 
 12:   describe("seedVarieties data integrity", () => {
 13:     it("should have valid growth timelines for all varieties", () => {
 14:       seedVarieties.forEach((variety) => {
 15:         expect(variety.growthTimeline.germination).toBeGreaterThanOrEqual(0);
 16:         expect(variety.growthTimeline.seedling).toBeGreaterThan(0);
 17:         expect(variety.growthTimeline.vegetative).toBeGreaterThan(0);
 18:         expect(variety.growthTimeline.maturation).toBeGreaterThan(0);
 19: 
 20: 
 21: 
 22:         expect(variety.growthTimeline.maturation).toBeLessThan(2000);
 23: 
 24: 
 25:         expect(variety.growthTimeline.germination).toBeLessThanOrEqual(
 26:           variety.growthTimeline.seedling
 27:         );
 28:       });
 29:     });
 30: 
 31:     it("should have valid categories for all varieties", () => {
 32:       const validCategories = [
 33:         "root-vegetables",
 34:         "leafy-greens",
 35:         "herbs",
 36:         "berries",
 37:         "fruiting-plants",
 38:       ];
 39: 
 40:       seedVarieties.forEach((variety) => {
 41:         expect(validCategories).toContain(variety.category);
 42:       });
 43:     });
 44: 
 45:     it("should have productive lifespan for everbearing varieties", () => {
 46:       const everbearingVarieties = seedVarieties.filter((v) => v.isEverbearing);
 47: 
 48:       everbearingVarieties.forEach((variety) => {
 49:         expect(variety.productiveLifespan).toBeDefined();
 50:         expect(variety.productiveLifespan).toBeGreaterThan(0);
 51:       });
 52:     });
 53:   });
 54: 
 55:   describe("comprehensive variety coverage", () => {
 56:     beforeEach(async () => {
 57:       await initializeDatabase();
 58:     });
 59: 
 60:     it("should include all expected varieties from the comprehensive plan", async () => {
 61:       const varieties = await varietyService.getAllVarieties();
 62:       const varietyNames = varieties.map((v) => v.name);
 63: 
 64: 
 65:       expect(varietyNames).toContain("Little Finger Carrots");
 66:       expect(varietyNames).toContain("Detroit Dark Red Beets");
 67:       expect(varietyNames).toContain("Beauregard Sweet Potatoes");
 68: 
 69: 
 70:       expect(varietyNames).toContain("Astro Arugula");
 71:       expect(varietyNames).toContain("Baby's Leaf Spinach");
 72: 
 73: 
 74:       expect(varietyNames).toContain("Greek Oregano");
 75:       expect(varietyNames).toContain("English Thyme");
 76:       expect(varietyNames).toContain("Rosemary");
 77:       expect(varietyNames).toContain("Italian Flat Leaf Parsley");
 78:       expect(varietyNames).toContain("Greek Dwarf Basil");
 79: 
 80: 
 81:       expect(varietyNames).toContain("Albion Strawberries");
 82:       expect(varietyNames).toContain("Caroline Raspberries");
 83: 
 84: 
 85:       expect(varietyNames).toContain("Boston Pickling Cucumber");
 86:       expect(varietyNames).toContain("Sugar Snap Peas");
 87:     });
 88: 
 89:     it("should include lettuce varieties", async () => {
 90:       const varieties = await varietyService.getAllVarieties();
 91:       const varietyNames = varieties.map((v) => v.name);
 92: 
 93: 
 94:       const lettuceVarieties = varietyNames.filter(
 95:         (name) =>
 96:           name.toLowerCase().includes("lettuce") ||
 97:           name.toLowerCase().includes("may queen") ||
 98:           name.toLowerCase().includes("butter")
 99:       );
100: 
101: 
102: 
103: 
104:       expect(lettuceVarieties.length).toBeGreaterThan(0);
105:     });
106: 
107:     it("should have comprehensive protocols for complex varieties", async () => {
108:       const varieties = await varietyService.getAllVarieties();
109: 
110: 
111:       const strawberries = varieties.find(
112:         (v) => v.name === "Albion Strawberries"
113:       );
114:       expect(strawberries?.protocols?.lighting).toBeDefined();
115:       expect(strawberries?.protocols?.watering).toBeDefined();
116:       expect(strawberries?.protocols?.fertilization).toBeDefined();
117:       expect(strawberries?.protocols?.environment).toBeDefined();
118:       expect(strawberries?.protocols?.soilMixture).toBeDefined();
119:       expect(strawberries?.protocols?.specialRequirements).toBeDefined();
120: 
121: 
122:       const cucumber = varieties.find(
123:         (v) => v.name === "Boston Pickling Cucumber"
124:       );
125:       expect(cucumber?.protocols?.lighting?.seedling?.ppfd).toBeDefined();
126:       expect(cucumber?.protocols?.lighting?.flowering?.notes).toBeDefined();
127:       expect(cucumber?.protocols?.watering?.seedling?.trigger).toBeDefined();
128:     });
129: 
130:     it("should correctly categorize varieties", async () => {
131:       const varieties = await varietyService.getAllVarieties();
132: 
133:       const rootVegetables = varieties.filter(
134:         (v) => v.category === "root-vegetables"
135:       );
136:       const leafyGreens = varieties.filter(
137:         (v) => v.category === "leafy-greens"
138:       );
139:       const herbs = varieties.filter((v) => v.category === "herbs");
140:       const berries = varieties.filter((v) => v.category === "berries");
141:       const fruitingPlants = varieties.filter(
142:         (v) => v.category === "fruiting-plants"
143:       );
144: 
145:       expect(rootVegetables.length).toBeGreaterThan(0);
146:       expect(leafyGreens.length).toBeGreaterThan(0);
147:       expect(herbs.length).toBeGreaterThan(0);
148:       expect(berries.length).toBeGreaterThan(0);
149:       expect(fruitingPlants.length).toBeGreaterThan(0);
150: 
151: 
152:       expect(
153:         rootVegetables.some((v) => v.name === "Little Finger Carrots")
154:       ).toBe(true);
155:       expect(leafyGreens.some((v) => v.name === "Astro Arugula")).toBe(true);
156:       expect(herbs.some((v) => v.name === "English Thyme")).toBe(true);
157:       expect(berries.some((v) => v.name === "Albion Strawberries")).toBe(true);
158:       expect(
159:         fruitingPlants.some((v) => v.name === "Boston Pickling Cucumber")
160:       ).toBe(true);
161:     });
162: 
163:     it("should list all available varieties for debugging", async () => {
164:       const varieties = await varietyService.getAllVarieties();
165: 
166: 
167: 
168: 
169: 
170:       expect(varieties.length).toBeGreaterThan(0);
171:     });
172:   });
173: 
174:   describe("protocol structure validation", () => {
175:     beforeEach(async () => {
176:       await initializeDatabase();
177:     });
178: 
179:     it("should have valid lighting protocols where present", async () => {
180:       const varieties = await varietyService.getAllVarieties();
181: 
182:       varieties.forEach((variety) => {
183:         if (variety.protocols?.lighting) {
184:           Object.entries(variety.protocols.lighting).forEach(([, protocol]) => {
185:             expect(protocol.ppfd?.min).toBeGreaterThan(0);
186:             expect(protocol.ppfd?.max).toBeGreaterThanOrEqual(
187:               protocol.ppfd.min
188:             );
189:             expect(protocol.ppfd?.unit).toBe("µmol/m²/s");
190:             expect(protocol.photoperiod?.hours).toBeGreaterThan(0);
191:             expect(protocol.photoperiod?.hours).toBeLessThanOrEqual(24);
192:             expect(protocol.dli?.min).toBeGreaterThan(0);
193:             expect(protocol.dli?.max).toBeGreaterThanOrEqual(protocol.dli.min);
194:             expect(protocol.dli?.unit).toBe("mol/m²/day");
195: 
196: 
197: 
198: 
199:           });
200:         }
201:       });
202:     });
203: 
204:     it("should have valid watering protocols where present", async () => {
205:       const varieties = await varietyService.getAllVarieties();
206: 
207:       varieties.forEach((variety) => {
208:         if (variety.protocols?.watering) {
209:           Object.entries(variety.protocols.watering).forEach(([, protocol]) => {
210:             expect(protocol.trigger?.moistureLevel).toBeDefined();
211:             expect(protocol.target?.moistureLevel).toBeDefined();
212:             expect(protocol.volume?.amount).toBeDefined();
213:             expect(protocol.volume?.frequency).toBeDefined();
214: 
215: 
216: 
217: 
218:           });
219:         }
220:       });
221:     });
222: 
223:     it("should have valid soil mixture percentages where present", async () => {
224:       const varieties = await varietyService.getAllVarieties();
225: 
226:       varieties.forEach((variety) => {
227:         if (variety.protocols?.soilMixture?.components) {
228:           const percentages = Object.values(
229:             variety.protocols.soilMixture.components
230:           );
231:           const total = percentages.reduce((sum, pct) => sum + pct, 0);
232: 
233: 
234:           expect(total).toBeCloseTo(100, 1);
235: 
236:           percentages.forEach((pct) => {
237:             expect(pct).toBeGreaterThan(0);
238:             expect(pct).toBeLessThanOrEqual(100);
239:           });
240:         }
241:       });
242:     });
243: 
244:     it("should have valid pH ranges where present", async () => {
245:       const varieties = await varietyService.getAllVarieties();
246: 
247:       varieties.forEach((variety) => {
248:         if (variety.protocols?.environment?.pH) {
249:           const { min, max, optimal } = variety.protocols.environment.pH;
250:           expect(min).toBeGreaterThan(0);
251:           expect(min).toBeLessThan(14);
252:           expect(max).toBeGreaterThan(min);
253:           expect(max).toBeLessThan(14);
254: 
255:           if (optimal) {
256:             expect(optimal).toBeGreaterThanOrEqual(min);
257:             expect(optimal).toBeLessThanOrEqual(max);
258:           }
259:         }
260:       });
261:     });
262:   });
263: 
264:   describe("perennial herb maturation times", () => {
265:     it("should handle long maturation times for perennial herbs", () => {
266: 
267:       const rosemary = seedVarieties.find((v) => v.name === "Rosemary");
268:       expect(rosemary?.growthTimeline.maturation).toBe(730);
269: 
270: 
271:       const thyme = seedVarieties.find((v) => v.name === "English Thyme");
272:       expect(thyme?.growthTimeline.maturation).toBe(365);
273: 
274: 
275:       const oregano = seedVarieties.find((v) => v.name === "Greek Oregano");
276:       expect(oregano?.growthTimeline.maturation).toBeLessThan(120);
277:     });
278:   });
279: 
280:   describe("duplicate detection", () => {
281:     it("should not have duplicate varieties after initialization", async () => {
282:       await initializeDatabase();
283: 
284:       const varieties = await varietyService.getAllVarieties();
285:       const varietyNames = varieties.map((v) => v.name);
286:       const uniqueNames = new Set(varietyNames);
287: 
288:       if (varietyNames.length !== uniqueNames.size) {
289:         console.error("Duplicate varieties found:");
290:         const duplicates = varietyNames.filter(
291:           (name, index) => varietyNames.indexOf(name) !== index
292:         );
293:         console.error("Duplicates:", [...new Set(duplicates)]);
294:         console.error("All varieties:", varietyNames);
295:       }
296: 
297:       expect(varietyNames.length).toBe(uniqueNames.size);
298:     });
299: 
300:     it("should not create duplicates when initialization is called multiple times", async () => {
301:       await initializeDatabase();
302:       await initializeDatabase();
303:       await initializeDatabase();
304: 
305:       const varieties = await varietyService.getAllVarieties();
306:       const varietyNames = varieties.map((v) => v.name);
307:       const uniqueNames = new Set(varietyNames);
308: 
309:       if (varietyNames.length !== uniqueNames.size) {
310:         console.error(
311:           "Duplicate varieties found after multiple initializations:"
312:         );
313:         const duplicates = varietyNames.filter(
314:           (name, index) => varietyNames.indexOf(name) !== index
315:         );
316:         console.error("Duplicates:", [...new Set(duplicates)]);
317:       }
318: 
319:       expect(varietyNames.length).toBe(uniqueNames.size);
320:     });
321: 
322:     it("should handle existing database state correctly", async () => {
323: 
324:       await varietyService.addVariety({
325:         name: "Test Variety",
326:         category: "herbs",
327:         growthTimeline: {
328:           germination: 7,
329:           seedling: 14,
330:           vegetative: 21,
331:           maturation: 60,
332:         },
333:       });
334: 
335:       const beforeCount = (await varietyService.getAllVarieties()).length;
336: 
337: 
338:       await initializeDatabase();
339: 
340:       const afterCount = (await varietyService.getAllVarieties()).length;
341:       const varieties = await varietyService.getAllVarieties();
342: 
343: 
344:       expect(afterCount).toBe(beforeCount + seedVarieties.length);
345:       expect(varieties.some((v) => v.name === "Test Variety")).toBe(true);
346:     });
347:   });
348: 
349:   describe("everbearing varieties", () => {
350:     beforeEach(async () => {
351:       await initializeDatabase();
352:     });
353: 
354:     it("should correctly identify everbearing varieties", async () => {
355:       const varieties = await varietyService.getAllVarieties();
356: 
357:       const everbearingVarieties = varieties.filter(
358:         (v) => seedVarieties.find((sv) => sv.name === v.name)?.isEverbearing
359:       );
360: 
361: 
362:       const everbearingNames = everbearingVarieties.map((v) => v.name);
363:       expect(everbearingNames).toContain("Albion Strawberries");
364:       expect(everbearingNames).toContain("Caroline Raspberries");
365:       expect(everbearingNames).toContain("Astro Arugula");
366:     });
367: 
368:     it("should have succession protocols for appropriate varieties", async () => {
369:       const varieties = await varietyService.getAllVarieties();
370: 
371:       const arugula = varieties.find((v) => v.name === "Astro Arugula");
372:       const carrotProtocols = seedVarieties.find(
373:         (v) => v.name === "Little Finger Carrots"
374:       )?.protocols;
375: 
376: 
377:       expect(arugula).toBeDefined();
378: 
379: 
380:       expect(carrotProtocols?.succession).toBeDefined();
381:       expect(carrotProtocols?.succession?.interval).toBeGreaterThan(0);
382:     });
383:   });
384: 
385:   describe("comprehensive protocol features", () => {
386:     beforeEach(async () => {
387:       await initializeDatabase();
388:     });
389: 
390:     it("should have stage-specific fertilization protocols", async () => {
391:       const varieties = await varietyService.getAllVarieties();
392:       const strawberries = varieties.find(
393:         (v) => v.name === "Albion Strawberries"
394:       );
395: 
396:       if (strawberries?.protocols?.fertilization) {
397:         Object.entries(strawberries.protocols.fertilization).forEach(
398:           ([, protocol]) => {
399:             if (protocol.products && protocol.products.length > 0) {
400:               protocol.products.forEach((product) => {
401:                 expect(product.name).toBeDefined();
402:                 expect(product.dilution).toBeDefined();
403:                 expect(product.frequency).toBeDefined();
404:               });
405:             }
406:           }
407:         );
408:       }
409:     });
410: 
411:     it("should have container requirements for varieties", async () => {
412:       const varieties = await varietyService.getAllVarieties();
413:       const cucumber = varieties.find(
414:         (v) => v.name === "Boston Pickling Cucumber"
415:       );
416: 
417:       expect(cucumber?.protocols?.container?.depth).toBeDefined();
418:       expect(cucumber?.protocols?.specialRequirements).toBeDefined();
419:       expect(cucumber?.protocols?.specialRequirements?.length).toBeGreaterThan(
420:         0
421:       );
422:     });
423: 
424:     it("should have environmental constraints for sensitive varieties", async () => {
425:       const varieties = await varietyService.getAllVarieties();
426:       const carrots = varieties.find((v) => v.name === "Little Finger Carrots");
427: 
428:       if (carrots?.protocols?.environment?.constraints) {
429:         carrots.protocols.environment.constraints.forEach((constraint) => {
430:           expect(constraint.description).toBeDefined();
431:           expect(constraint.parameter).toBeDefined();
432:           expect(constraint.consequence).toBeDefined();
433:         });
434:       }
435:     });
436:   });
437: });

================
File: src/__tests__/integration/stageCalculationDisplay.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import { BrowserRouter } from "react-router-dom";
  3: import Dashboard from "@/pages/dashboard";
  4: import Plants from "../../pages/plants/Plants";
  5: import { plantService, varietyService } from "@/types/database";
  6: import { initializeDatabase } from "@/db/seedData";
  7: import { subDays } from "date-fns";
  8: 
  9: describe("Stage Calculation Integration", () => {
 10:   beforeEach(async () => {
 11:     const { db } = await import("@/types/database");
 12:     await db.plants.clear();
 13:     await db.varieties.clear();
 14:     await initializeDatabase();
 15:   });
 16: 
 17:   const renderWithRouter = (component: React.ReactElement) => {
 18:     return render(<BrowserRouter>{component}</BrowserRouter>);
 19:   };
 20: 
 21:   describe("Stage calculation for mature plants", () => {
 22:     it("displays correct stage for 103-day-old Albion strawberry", async () => {
 23: 
 24:       const varieties = await varietyService.getAllVarieties();
 25:       const albion = varieties.find((v) => v.name === "Albion Strawberries");
 26:       expect(albion).toBeDefined();
 27: 
 28: 
 29:       const plantedDate = subDays(new Date(), 103);
 30:       await plantService.addPlant({
 31:         varietyId: albion!.id,
 32:         varietyName: albion!.name,
 33:         name: "Test Strawberry",
 34:         plantedDate,
 35:         currentStage: "germination",
 36:         location: "Indoor",
 37:         container: "5 gallon",
 38:         isActive: true,
 39:       });
 40: 
 41: 
 42:       renderWithRouter(<Dashboard />);
 43: 
 44:       await waitFor(() => {
 45: 
 46:         expect(
 47:           screen.getByText(/Stage: ongoing-production/i)
 48:         ).toBeInTheDocument();
 49:         expect(
 50:           screen.queryByText(/Stage: germination/i)
 51:         ).not.toBeInTheDocument();
 52:       });
 53:     });
 54: 
 55:     it("displays correct stage for 103-day-old plant in Plants page", async () => {
 56:       const varieties = await varietyService.getAllVarieties();
 57:       const albion = varieties.find((v) => v.name === "Albion Strawberries");
 58: 
 59:       const plantedDate = subDays(new Date(), 103);
 60:       await plantService.addPlant({
 61:         varietyId: albion!.id,
 62:         varietyName: albion!.name,
 63:         name: "Test Strawberry",
 64:         plantedDate,
 65:         currentStage: "germination",
 66:         location: "Indoor",
 67:         container: "5 gallon",
 68:         isActive: true,
 69:       });
 70: 
 71:       renderWithRouter(<Plants />);
 72: 
 73:       await waitFor(() => {
 74:         expect(screen.getByText("Test Strawberry")).toBeInTheDocument();
 75: 
 76:         expect(screen.getByText(/ongoing-production/i)).toBeInTheDocument();
 77:       });
 78:     });
 79: 
 80:     it("handles various growth stages correctly for different plant ages", async () => {
 81:       const varieties = await varietyService.getAllVarieties();
 82:       const albion = varieties.find((v) => v.name === "Albion Strawberries");
 83: 
 84:       const testCases = [
 85:         { daysAgo: 5, expectedStage: "germination" },
 86:         { daysAgo: 20, expectedStage: "seedling" },
 87:         { daysAgo: 50, expectedStage: "vegetative" },
 88:         { daysAgo: 87, expectedStage: "flowering" },
 89:         { daysAgo: 103, expectedStage: "ongoing-production" },
 90:       ];
 91: 
 92:       for (const testCase of testCases) {
 93:         const plantedDate = subDays(new Date(), testCase.daysAgo);
 94:         await plantService.addPlant({
 95:           varietyId: albion!.id,
 96:           varietyName: albion!.name,
 97:           name: `Plant ${testCase.daysAgo} days`,
 98:           plantedDate,
 99:           currentStage: "germination",
100:           location: "Indoor",
101:           container: "5 gallon",
102:           isActive: true,
103:         });
104:       }
105: 
106:       renderWithRouter(<Plants />);
107: 
108:       await waitFor(() => {
109:         for (const testCase of testCases) {
110:           expect(
111:             screen.getByText(`Plant ${testCase.daysAgo} days`)
112:           ).toBeInTheDocument();
113: 
114:           expect(
115:             screen.getByText(new RegExp(testCase.expectedStage, "i"))
116:           ).toBeInTheDocument();
117:         }
118:       });
119:     });
120: 
121:     it("handles non-everbearing plants correctly", async () => {
122:       const varieties = await varietyService.getAllVarieties();
123:       const carrots = varieties.find((v) => v.name === "Little Finger Carrots");
124:       expect(carrots).toBeDefined();
125: 
126: 
127:       const plantedDate = subDays(new Date(), 70);
128:       await plantService.addPlant({
129:         varietyId: carrots!.id,
130:         varietyName: carrots!.name,
131:         name: "Test Carrots",
132:         plantedDate,
133:         currentStage: "germination",
134:         location: "Indoor",
135:         container: "4 inch pot",
136:         isActive: true,
137:       });
138: 
139:       renderWithRouter(<Plants />);
140: 
141:       await waitFor(() => {
142:         expect(screen.getByText("Test Carrots")).toBeInTheDocument();
143: 
144:         expect(screen.getByText(/harvest/i)).toBeInTheDocument();
145:       });
146:     });
147: 
148:     it("handles plants past productive lifespan", async () => {
149:       const varieties = await varietyService.getAllVarieties();
150:       const albion = varieties.find((v) => v.name === "Albion Strawberries");
151: 
152: 
153:       const plantedDate = subDays(new Date(), 800);
154:       await plantService.addPlant({
155:         varietyId: albion!.id,
156:         varietyName: albion!.name,
157:         name: "Old Strawberry",
158:         plantedDate,
159:         currentStage: "ongoing-production",
160:         location: "Indoor",
161:         container: "5 gallon",
162:         isActive: true,
163:       });
164: 
165:       renderWithRouter(<Plants />);
166: 
167:       await waitFor(() => {
168:         expect(screen.getByText("Old Strawberry")).toBeInTheDocument();
169: 
170:         expect(screen.getByText(/harvest/i)).toBeInTheDocument();
171:       });
172:     });
173:   });
174: });

================
File: src/__tests__/utils/growthStage.test.ts
================
  1: import {
  2:   calculateCurrentStage,
  3:   calculateCurrentStageWithVariety,
  4:   getStageProgress,
  5:   estimateStageTransition,
  6:   getNextStage,
  7: } from "../../utils/growthStage";
  8: import { restoreDate } from "../../setupTests";
  9: import { VarietyRecord } from "../../types/database";
 10: import { GrowthStage } from "@/types";
 11: 
 12: describe("Growth Stage Utilities", () => {
 13:   const mockTimeline = {
 14:     germination: 7,
 15:     seedling: 14,
 16:     vegetative: 21,
 17:     maturation: 60,
 18:   };
 19: 
 20: 
 21:   const mockEverbearingVariety: VarietyRecord = {
 22:     id: "albion-strawberry",
 23:     name: "Albion Strawberries",
 24:     category: "berries",
 25:     growthTimeline: {
 26:       germination: 14,
 27:       seedling: 28,
 28:       vegetative: 42,
 29:       maturation: 90,
 30:     },
 31:     isEverbearing: true,
 32:     productiveLifespan: 730,
 33:     createdAt: new Date(),
 34:   };
 35: 
 36:   const mockNonEverbearingVariety: VarietyRecord = {
 37:     id: "little-finger-carrots",
 38:     name: "Little Finger Carrots",
 39:     category: "root-vegetables",
 40:     growthTimeline: {
 41:       germination: 10,
 42:       seedling: 14,
 43:       vegetative: 21,
 44:       maturation: 65,
 45:     },
 46:     isEverbearing: false,
 47:     createdAt: new Date(),
 48:   };
 49: 
 50:   beforeEach(() => {
 51:     restoreDate();
 52:   });
 53: 
 54:   describe("calculateCurrentStage (basic function)", () => {
 55:     it("returns germination for early days", () => {
 56:       const plantedDate = new Date("2024-01-01");
 57:       const currentDate = new Date("2024-01-05");
 58: 
 59:       const stage = calculateCurrentStage(
 60:         plantedDate,
 61:         mockTimeline,
 62:         currentDate
 63:       );
 64:       expect(stage).toBe("germination");
 65:     });
 66: 
 67:     it("transitions to seedling correctly", () => {
 68:       const plantedDate = new Date("2024-01-01");
 69:       const currentDate = new Date("2024-01-08");
 70: 
 71:       const stage = calculateCurrentStage(
 72:         plantedDate,
 73:         mockTimeline,
 74:         currentDate
 75:       );
 76:       expect(stage).toBe("seedling");
 77:     });
 78: 
 79:     it("transitions to vegetative correctly", () => {
 80:       const plantedDate = new Date("2024-01-01");
 81:       const currentDate = new Date("2024-01-22");
 82: 
 83:       const stage = calculateCurrentStage(
 84:         plantedDate,
 85:         mockTimeline,
 86:         currentDate
 87:       );
 88:       expect(stage).toBe("vegetative");
 89:     });
 90: 
 91:     it("transitions to flowering correctly", () => {
 92:       const plantedDate = new Date("2024-01-01");
 93:       const currentDate = new Date("2024-02-12");
 94: 
 95:       const stage = calculateCurrentStage(
 96:         plantedDate,
 97:         mockTimeline,
 98:         currentDate
 99:       );
100:       expect(stage).toBe("flowering");
101:     });
102: 
103:     it("returns harvest for plants past maturation date", () => {
104: 
105:       const plantedDate = new Date("2024-01-01");
106:       const currentDate = new Date("2024-03-05");
107: 
108:       const stage = calculateCurrentStage(
109:         plantedDate,
110:         mockTimeline,
111:         currentDate
112:       );
113:       expect(stage).toBe("harvest");
114:     });
115: 
116:     it("handles future planting dates gracefully", () => {
117:       const plantedDate = new Date("2024-12-31");
118:       const currentDate = new Date("2024-01-01");
119: 
120:       const stage = calculateCurrentStage(
121:         plantedDate,
122:         mockTimeline,
123:         currentDate
124:       );
125:       expect(stage).toBe("germination");
126:     });
127: 
128:     it("handles leap year edge cases", () => {
129:       const plantedDate = new Date("2024-02-28");
130:       const currentDate = new Date("2024-03-01");
131: 
132:       const stage = calculateCurrentStage(
133:         plantedDate,
134:         mockTimeline,
135:         currentDate
136:       );
137:       expect(stage).toBe("germination");
138:     });
139: 
140:     it("handles timezone DST transitions", () => {
141: 
142:       const plantedDate = new Date("2024-03-09T12:00:00");
143:       const currentDate = new Date("2024-03-11T12:00:00");
144: 
145:       const stage = calculateCurrentStage(
146:         plantedDate,
147:         mockTimeline,
148:         currentDate
149:       );
150:       expect(stage).toBe("germination");
151:     });
152:   });
153: 
154:   describe("calculateCurrentStageWithVariety (enhanced function)", () => {
155:     describe("everbearing plants", () => {
156:       it("returns ongoing-production for everbearing plants after maturation", () => {
157:         const plantedDate = new Date("2024-01-01");
158:         const currentDate = new Date("2024-04-05");
159: 
160:         const stage = calculateCurrentStageWithVariety(
161:           plantedDate,
162:           mockEverbearingVariety,
163:           currentDate
164:         );
165:         expect(stage).toBe("ongoing-production");
166:       });
167: 
168:       it("handles the exact strawberry scenario (103 days)", () => {
169:         const plantedDate = new Date("2024-01-01");
170:         const currentDate = new Date("2024-04-14");
171: 
172:         const stage = calculateCurrentStageWithVariety(
173:           plantedDate,
174:           mockEverbearingVariety,
175:           currentDate
176:         );
177:         expect(stage).toBe("ongoing-production");
178:       });
179: 
180:       it("returns harvest when past productive lifespan", () => {
181:         const plantedDate = new Date("2022-01-01");
182:         const currentDate = new Date("2024-02-01");
183: 
184:         const stage = calculateCurrentStageWithVariety(
185:           plantedDate,
186:           mockEverbearingVariety,
187:           currentDate
188:         );
189:         expect(stage).toBe("harvest");
190:       });
191: 
192:       it("follows normal growth stages before maturation", () => {
193:         const testCases = [
194:           { days: 5, expected: "germination" },
195:           { days: 20, expected: "seedling" },
196:           { days: 50, expected: "vegetative" },
197:           { days: 87, expected: "flowering" },
198:         ];
199: 
200:         testCases.forEach(({ days, expected }) => {
201:           const plantedDate = new Date("2024-01-01");
202:           const currentDate = new Date(plantedDate);
203:           currentDate.setDate(currentDate.getDate() + days);
204: 
205:           const stage = calculateCurrentStageWithVariety(
206:             plantedDate,
207:             mockEverbearingVariety,
208:             currentDate
209:           );
210:           expect(stage).toBe(expected);
211:         });
212:       });
213:     });
214: 
215:     describe("non-everbearing plants", () => {
216:       it("returns harvest for non-everbearing plants after maturation", () => {
217:         const plantedDate = new Date("2024-01-01");
218:         const currentDate = new Date("2024-03-10");
219: 
220:         const stage = calculateCurrentStageWithVariety(
221:           plantedDate,
222:           mockNonEverbearingVariety,
223:           currentDate
224:         );
225:         expect(stage).toBe("harvest");
226:       });
227: 
228:       it("follows normal growth stages before maturation", () => {
229:         const testCases = [
230:           { days: 5, expected: "germination" },
231:           { days: 15, expected: "seedling" },
232:           { days: 30, expected: "vegetative" },
233:           { days: 60, expected: "flowering" },
234:         ];
235: 
236:         testCases.forEach(({ days, expected }) => {
237:           const plantedDate = new Date("2024-01-01");
238:           const currentDate = new Date(plantedDate);
239:           currentDate.setDate(currentDate.getDate() + days);
240: 
241:           const stage = calculateCurrentStageWithVariety(
242:             plantedDate,
243:             mockNonEverbearingVariety,
244:             currentDate
245:           );
246:           expect(stage).toBe(expected);
247:         });
248:       });
249:     });
250: 
251:     describe("edge cases", () => {
252:       it("handles everbearing plants without productiveLifespan", () => {
253:         const varietyWithoutLifespan: VarietyRecord = {
254:           ...mockEverbearingVariety,
255:           productiveLifespan: undefined,
256:         };
257: 
258:         const plantedDate = new Date("2022-01-01");
259:         const currentDate = new Date("2024-01-01");
260: 
261:         const stage = calculateCurrentStageWithVariety(
262:           plantedDate,
263:           varietyWithoutLifespan,
264:           currentDate
265:         );
266:         expect(stage).toBe("harvest");
267:       });
268: 
269:       it("handles future planting dates gracefully", () => {
270:         const plantedDate = new Date("2024-12-31");
271:         const currentDate = new Date("2024-01-01");
272: 
273:         const stage = calculateCurrentStageWithVariety(
274:           plantedDate,
275:           mockEverbearingVariety,
276:           currentDate
277:         );
278:         expect(stage).toBe("germination");
279:       });
280:     });
281:   });
282: 
283:   describe("getStageProgress", () => {
284:     it("calculates progress correctly mid-stage", () => {
285:       const plantedDate = new Date("2024-01-01");
286:       const currentDate = new Date("2024-01-11");
287: 
288:       const progress = getStageProgress(plantedDate, mockTimeline, currentDate);
289: 
290:       expect(progress).toBeCloseTo(21, 0);
291:     });
292: 
293:     it("returns 100% for completed stages", () => {
294:       const plantedDate = new Date("2024-01-01");
295:       const currentDate = new Date("2024-03-01");
296: 
297:       const progress = getStageProgress(plantedDate, mockTimeline, currentDate);
298:       expect(progress).toBe(100);
299:     });
300: 
301:     it("handles all new stage types", () => {
302:       const plantedDate = new Date("2024-01-01");
303:       const currentDate = new Date("2024-03-01");
304: 
305: 
306:       const timeline = { ...mockTimeline };
307:       const progress = getStageProgress(plantedDate, timeline, currentDate);
308:       expect(progress).toBe(100);
309:     });
310:   });
311: 
312:   describe("getNextStage", () => {
313:     it("returns correct next stages for basic progression", () => {
314:       expect(getNextStage("germination")).toBe("seedling");
315:       expect(getNextStage("seedling")).toBe("vegetative");
316:       expect(getNextStage("vegetative")).toBe("flowering");
317:       expect(getNextStage("flowering")).toBe("maturation");
318:       expect(getNextStage("maturation")).toBe("ongoing-production");
319:       expect(getNextStage("ongoing-production")).toBe("harvest");
320:     });
321: 
322:     it("returns null for the final stage", () => {
323:       expect(getNextStage("harvest")).toBe(null);
324:     });
325: 
326:     it("handles invalid stages gracefully", () => {
327: 
328:       expect(getNextStage(undefined as unknown as GrowthStage)).toBe(null);
329: 
330: 
331:       const invalidStage = "not-a-real-stage" as unknown as GrowthStage;
332:       expect(getNextStage(invalidStage)).toBe(null);
333:     });
334:   });
335: 
336:   describe("estimateStageTransition", () => {
337:     it("estimates correct transition dates", () => {
338:       const plantedDate = new Date("2024-01-01");
339: 
340:       const floweringDate = estimateStageTransition(
341:         plantedDate,
342:         mockTimeline,
343:         "flowering"
344:       );
345:       expect(floweringDate).toEqual(new Date("2024-02-12"));
346:     });
347: 
348:     it("handles new stage types", () => {
349:       const plantedDate = new Date("2024-01-01");
350: 
351:       const ongoingProductionDate = estimateStageTransition(
352:         plantedDate,
353:         mockTimeline,
354:         "ongoing-production"
355:       );
356:       expect(ongoingProductionDate).toEqual(new Date("2024-03-01"));
357: 
358:       const harvestDate = estimateStageTransition(
359:         plantedDate,
360:         mockTimeline,
361:         "harvest"
362:       );
363:       expect(harvestDate).toEqual(new Date("2024-03-01"));
364:     });
365:   });
366: 
367:   describe("integration tests with real variety data", () => {
368:     it("correctly handles Albion strawberry timeline", () => {
369:       const plantedDate = new Date("2024-01-01");
370: 
371: 
372:       const testCases = [
373:         { days: 10, expected: "germination" },
374:         { days: 20, expected: "seedling" },
375:         { days: 50, expected: "vegetative" },
376:         { days: 87, expected: "flowering" },
377:         { days: 103, expected: "ongoing-production" },
378:         { days: 365, expected: "ongoing-production" },
379:         { days: 731, expected: "harvest" },
380:       ];
381: 
382:       testCases.forEach(({ days, expected }) => {
383:         const currentDate = new Date(plantedDate);
384:         currentDate.setDate(currentDate.getDate() + days);
385: 
386:         const stage = calculateCurrentStageWithVariety(
387:           plantedDate,
388:           mockEverbearingVariety,
389:           currentDate
390:         );
391: 
392:         expect(stage).toBe(expected);
393:       });
394:     });
395: 
396:     it("correctly handles Caroline raspberry timeline", () => {
397:       const raspberryVariety: VarietyRecord = {
398:         id: "caroline-raspberry",
399:         name: "Caroline Raspberries",
400:         category: "berries",
401:         growthTimeline: {
402:           germination: 0,
403:           seedling: 21,
404:           vegetative: 42,
405:           maturation: 120,
406:         },
407:         isEverbearing: true,
408:         productiveLifespan: 1095,
409:         createdAt: new Date(),
410:       };
411: 
412:       const plantedDate = new Date("2024-01-01");
413:       const testCases = [
414:         { days: 10, expected: "seedling" },
415:         { days: 30, expected: "vegetative" },
416:         { days: 60, expected: "vegetative" },
417:         { days: 110, expected: "flowering" },
418:         { days: 130, expected: "ongoing-production" },
419:         { days: 1000, expected: "ongoing-production" },
420:         { days: 1100, expected: "harvest" },
421:       ];
422: 
423:       testCases.forEach(({ days, expected }) => {
424:         const currentDate = new Date(plantedDate);
425:         currentDate.setDate(currentDate.getDate() + days);
426: 
427:         const stage = calculateCurrentStageWithVariety(
428:           plantedDate,
429:           raspberryVariety,
430:           currentDate
431:         );
432: 
433:         expect(stage).toBe(expected);
434:       });
435:     });
436:   });
437: });

================
File: src/components/layouts/Welcome.tsx
================
  1: import React, { useState } from "react";
  2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { Link } from "react-router-dom";
  5: 
  6: const Welcome: React.FC = () => {
  7:   const [currentStep, setCurrentStep] = useState(0);
  8: 
  9:   const onboardingSteps = [
 10:     {
 11:       title: "Welcome to SmartGarden",
 12:       content: (
 13:         <div className="text-center space-y-6">
 14:           <div className="text-7xl mb-6 animate-bounce">🌿</div>
 15:           <div className="space-y-4">
 16:             <h2 className="text-3xl font-black text-gray-900 leading-tight">
 17:               Your digital gardening companion
 18:             </h2>
 19:             <p className="text-gray-600 leading-relaxed text-lg">
 20:               Track your plants, schedule care tasks, and grow healthier gardens
 21:               with science-backed protocols.
 22:             </p>
 23:           </div>
 24:         </div>
 25:       ),
 26:     },
 27:     {
 28:       title: "Smart Care Scheduling",
 29:       content: (
 30:         <div className="text-center space-y-6">
 31:           <div className="text-7xl mb-6 animate-pulse">📅</div>
 32:           <div className="space-y-4">
 33:             <h2 className="text-3xl font-black text-gray-900 leading-tight">
 34:               Never miss a watering
 35:             </h2>
 36:             <p className="text-gray-600 leading-relaxed text-lg">
 37:               Get personalized care reminders based on your plants' growth
 38:               stages and your logging history.
 39:             </p>
 40:           </div>
 41:         </div>
 42:       ),
 43:     },
 44:     {
 45:       title: "Photo & Progress Tracking",
 46:       content: (
 47:         <div className="text-center space-y-6">
 48:           <div className="text-7xl mb-6">📸</div>
 49:           <div className="space-y-4">
 50:             <h2 className="text-3xl font-black text-gray-900 leading-tight">
 51:               Document your garden's journey
 52:             </h2>
 53:             <p className="text-gray-600 leading-relaxed text-lg">
 54:               Capture photos, log activities, and watch your plants thrive with
 55:               detailed growth tracking.
 56:             </p>
 57:           </div>
 58:         </div>
 59:       ),
 60:     },
 61:     {
 62:       title: "Ready to Start?",
 63:       content: (
 64:         <div className="text-center space-y-6">
 65:           <div className="text-7xl mb-6">🚀</div>
 66:           <div className="space-y-4">
 67:             <h2 className="text-3xl font-black text-gray-900 leading-tight">
 68:               Let's add your first plant
 69:             </h2>
 70:             <p className="text-gray-600 leading-relaxed text-lg">
 71:               Start your digital garden by registering your first plant. We'll
 72:               guide you through the process.
 73:             </p>
 74:           </div>
 75:         </div>
 76:       ),
 77:     },
 78:   ];
 79: 
 80:   const nextStep = () => {
 81:     if (currentStep < onboardingSteps.length - 1) {
 82:       setCurrentStep(currentStep + 1);
 83:     }
 84:   };
 85: 
 86:   const previousStep = () => {
 87:     if (currentStep > 0) {
 88:       setCurrentStep(currentStep - 1);
 89:     }
 90:   };
 91: 
 92:   const currentStepData = onboardingSteps[currentStep];
 93:   const isLastStep = currentStep === onboardingSteps.length - 1;
 94:   const isFirstStep = currentStep === 0;
 95: 
 96:   return (
 97:     <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-blue-50 flex items-center justify-center p-4">
 98:       <div className="w-full max-w-sm">
 99:         <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-lg rounded-3xl overflow-hidden">
100:           <CardHeader className="text-center pb-6 bg-gradient-to-r from-emerald-500/5 to-green-500/5">
101:             <CardTitle className="text-xs font-bold text-gray-500 uppercase tracking-widest">
102:               {currentStepData.title}
103:             </CardTitle>
104: 
105:             {}
106:             <div className="flex justify-center mt-8 space-x-2">
107:               {onboardingSteps.map((_, index) => (
108:                 <div
109:                   key={index}
110:                   className={`h-3 rounded-full transition-all duration-500 ease-out ${
111:                     index === currentStep
112:                       ? "w-8 bg-gradient-to-r from-emerald-500 to-green-600 shadow-lg shadow-emerald-500/40"
113:                       : index < currentStep
114:                       ? "w-3 bg-emerald-400"
115:                       : "w-3 bg-gray-200"
116:                   }`}
117:                 />
118:               ))}
119:             </div>
120:           </CardHeader>
121: 
122:           <CardContent className="pb-8 px-6">
123:             {}
124:             <div className="min-h-80 flex items-center justify-center mb-8">
125:               {currentStepData.content}
126:             </div>
127: 
128:             {}
129:             <div className="space-y-4">
130:               {}
131:               <div className="w-full">
132:                 {isLastStep ? (
133:                   <Link to="/add-plant" className="block">
134:                     <Button
135:                       size="lg"
136:                       className="w-full group"
137:                       rightIcon={
138:                         <span className="text-2xl group-hover:scale-110 transition-transform duration-200">
139:                           🌱
140:                         </span>
141:                       }
142:                     >
143:                       Add My First Plant
144:                     </Button>
145:                   </Link>
146:                 ) : (
147:                   <Button
148:                     onClick={nextStep}
149:                     size="lg"
150:                     className="w-full group"
151:                     rightIcon={
152:                       <svg
153:                         className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-200"
154:                         fill="none"
155:                         stroke="currentColor"
156:                         viewBox="0 0 24 24"
157:                       >
158:                         <path
159:                           strokeLinecap="round"
160:                           strokeLinejoin="round"
161:                           strokeWidth={3}
162:                           d="M9 5l7 7-7 7"
163:                         />
164:                       </svg>
165:                     }
166:                   >
167:                     Continue
168:                   </Button>
169:                 )}
170:               </div>
171: 
172:               {}
173:               <div className="flex gap-3">
174:                 <div className="flex-1">
175:                   {!isFirstStep && (
176:                     <Button
177:                       variant="ghost"
178:                       onClick={previousStep}
179:                       className="w-full"
180:                       leftIcon={
181:                         <svg
182:                           className="w-4 h-4"
183:                           fill="none"
184:                           stroke="currentColor"
185:                           viewBox="0 0 24 24"
186:                         >
187:                           <path
188:                             strokeLinecap="round"
189:                             strokeLinejoin="round"
190:                             strokeWidth={2}
191:                             d="M15 19l-7-7 7-7"
192:                           />
193:                         </svg>
194:                       }
195:                     >
196:                       Back
197:                     </Button>
198:                   )}
199:                 </div>
200:                 <div className="flex-1">
201:                   {!isLastStep && (
202:                     <Link to="/add-plant" className="block">
203:                       <Button
204:                         variant="ghost"
205:                         className="w-full"
206:                         rightIcon={
207:                           <svg
208:                             className="w-4 h-4"
209:                             fill="none"
210:                             stroke="currentColor"
211:                             viewBox="0 0 24 24"
212:                           >
213:                             <path
214:                               strokeLinecap="round"
215:                               strokeLinejoin="round"
216:                               strokeWidth={2}
217:                               d="M9 5l7 7-7 7"
218:                             />
219:                           </svg>
220:                         }
221:                       >
222:                         Skip
223:                       </Button>
224:                     </Link>
225:                   )}
226:                 </div>
227:               </div>
228:             </div>
229:           </CardContent>
230:         </Card>
231:       </div>
232:     </div>
233:   );
234: };
235: 
236: export default Welcome;

================
File: src/components/plant/CustomVarietyForm.tsx
================
  1: import { useState } from "react";
  2: import { useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { Button } from "@/components/ui/Button";
  6: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  7: import { varietyService } from "@/types/database";
  8: import toast from "react-hot-toast";
  9: 
 10: const customVarietySchema = z.object({
 11:   name: z.string().min(1, "Variety name is required"),
 12:   category: z.enum([
 13:     "root-vegetables",
 14:     "leafy-greens",
 15:     "herbs",
 16:     "berries",
 17:     "fruiting-plants",
 18:   ]),
 19:   growthTimeline: z.object({
 20:     germination: z.number().min(1).max(90),
 21:     seedling: z.number().min(1).max(90),
 22:     vegetative: z.number().min(1).max(180),
 23:     maturation: z.number().min(1).max(365),
 24:   }),
 25:   customMoistureRanges: z.boolean().optional(),
 26:   triggerMin: z.number().min(1).max(10).optional(),
 27:   triggerMax: z.number().min(1).max(10).optional(),
 28:   targetMin: z.number().min(1).max(10).optional(),
 29:   targetMax: z.number().min(1).max(10).optional(),
 30: });
 31: 
 32: type CustomVarietyData = z.infer<typeof customVarietySchema>;
 33: 
 34: interface CustomVarietyFormProps {
 35:   onSuccess?: (varietyId: string) => void;
 36:   onCancel?: () => void;
 37: }
 38: 
 39: export function CustomVarietyForm({
 40:   onSuccess,
 41:   onCancel,
 42: }: CustomVarietyFormProps) {
 43:   const [isLoading, setIsLoading] = useState(false);
 44:   const [showMoistureCustomization, setShowMoistureCustomization] =
 45:     useState(false);
 46: 
 47:   const {
 48:     register,
 49:     handleSubmit,
 50:     formState: { errors },
 51:     reset,
 52:   } = useForm<CustomVarietyData>({
 53:     resolver: zodResolver(customVarietySchema),
 54:     defaultValues: {
 55:       triggerMin: 3,
 56:       triggerMax: 4,
 57:       targetMin: 6,
 58:       targetMax: 7,
 59:     },
 60:   });
 61: 
 62:   async function onSubmit(data: CustomVarietyData) {
 63:     setIsLoading(true);
 64:     try {
 65: 
 66:       let moistureProtocols = undefined;
 67:       if (
 68:         data.customMoistureRanges &&
 69:         data.triggerMin &&
 70:         data.triggerMax &&
 71:         data.targetMin &&
 72:         data.targetMax
 73:       ) {
 74:         const ranges = {
 75:           trigger: { min: data.triggerMin, max: data.triggerMax },
 76:           target: { min: data.targetMin, max: data.targetMax },
 77:         };
 78: 
 79: 
 80:         moistureProtocols = {
 81:           germination: ranges,
 82:           seedling: ranges,
 83:           vegetative: ranges,
 84:           flowering: ranges,
 85:           fruiting: ranges,
 86:           maturation: ranges,
 87:           harvest: ranges,
 88:         };
 89:       }
 90: 
 91:       const varietyId = await varietyService.addVariety({
 92:         name: data.name,
 93:         category: data.category,
 94:         growthTimeline: data.growthTimeline,
 95:         moistureProtocols,
 96:         isCustom: true,
 97:       });
 98: 
 99:       toast.success(`Created custom variety: ${data.name}!`);
100:       reset();
101:       onSuccess?.(varietyId);
102:     } catch (error) {
103:       console.error("Failed to create variety:", error);
104:       toast.error("Failed to create variety. Please try again.");
105:     } finally {
106:       setIsLoading(false);
107:     }
108:   }
109: 
110:   return (
111:     <Card className="max-w-2xl mx-auto">
112:       <CardHeader>
113:         <CardTitle>Create Custom Plant Variety</CardTitle>
114:         <p className="text-sm text-gray-600 mt-1">
115:           Add your own plant varieties like pumpkins, exotic herbs, or local
116:           cultivars
117:         </p>
118:       </CardHeader>
119:       <CardContent>
120:         <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
121:           <div>
122:             <label className="block text-sm font-medium text-gray-700 mb-2">
123:               Variety Name *
124:             </label>
125:             <input
126:               {...register("name")}
127:               placeholder="e.g., Jack-o'-lantern Pumpkins, Cherokee Purple Tomatoes"
128:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
129:             />
130:             {errors.name && (
131:               <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
132:             )}
133:           </div>
134: 
135:           <div>
136:             <label className="block text-sm font-medium text-gray-700 mb-2">
137:               Category *
138:             </label>
139:             <select
140:               {...register("category")}
141:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
142:             >
143:               <option value="fruiting-plants">
144:                 🎃 Fruiting Plants (pumpkins, squash, melons, etc.)
145:               </option>
146:               <option value="leafy-greens">
147:                 🥬 Leafy Greens (lettuce, spinach, kale, etc.)
148:               </option>
149:               <option value="root-vegetables">
150:                 🥕 Root Vegetables (carrots, beets, radishes, etc.)
151:               </option>
152:               <option value="herbs">
153:                 🌿 Herbs (basil, cilantro, sage, etc.)
154:               </option>
155:               <option value="berries">
156:                 🫐 Berries (strawberries, raspberries, etc.)
157:               </option>
158:             </select>
159:             <p className="mt-1 text-xs text-gray-500">
160:               This determines default care guidelines and protocols
161:             </p>
162:           </div>
163: 
164:           {}
165:           <div>
166:             <h3 className="text-lg font-medium text-gray-900 mb-4">
167:               Growth Timeline (days)
168:             </h3>
169:             <p className="text-sm text-gray-600 mb-4">
170:               How long does each growth stage typically last? These help predict
171:               care needs.
172:             </p>
173:             <div className="grid grid-cols-2 gap-4">
174:               <div>
175:                 <label className="block text-sm font-medium text-gray-700 mb-2">
176:                   Germination Days
177:                 </label>
178:                 <input
179:                   type="number"
180:                   {...register("growthTimeline.germination", {
181:                     valueAsNumber: true,
182:                   })}
183:                   placeholder="7"
184:                   className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
185:                 />
186:                 <p className="text-xs text-gray-500 mt-1">Days to sprout</p>
187:               </div>
188:               <div>
189:                 <label className="block text-sm font-medium text-gray-700 mb-2">
190:                   Seedling Stage Days
191:                 </label>
192:                 <input
193:                   type="number"
194:                   {...register("growthTimeline.seedling", {
195:                     valueAsNumber: true,
196:                   })}
197:                   placeholder="14"
198:                   className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
199:                 />
200:                 <p className="text-xs text-gray-500 mt-1">
201:                   Early growth period
202:                 </p>
203:               </div>
204:               <div>
205:                 <label className="block text-sm font-medium text-gray-700 mb-2">
206:                   Vegetative Growth Days
207:                 </label>
208:                 <input
209:                   type="number"
210:                   {...register("growthTimeline.vegetative", {
211:                     valueAsNumber: true,
212:                   })}
213:                   placeholder="30"
214:                   className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
215:                 />
216:                 <p className="text-xs text-gray-500 mt-1">
217:                   Leaf and stem development
218:                 </p>
219:               </div>
220:               <div>
221:                 <label className="block text-sm font-medium text-gray-700 mb-2">
222:                   Total Days to Maturity
223:                 </label>
224:                 <input
225:                   type="number"
226:                   {...register("growthTimeline.maturation", {
227:                     valueAsNumber: true,
228:                   })}
229:                   placeholder="120"
230:                   className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
231:                 />
232:                 <p className="text-xs text-gray-500 mt-1">
233:                   From seed to harvest
234:                 </p>
235:               </div>
236:             </div>
237:           </div>
238: 
239:           {}
240:           <div className="border-t pt-6">
241:             <div className="flex items-center justify-between mb-4">
242:               <div>
243:                 <h3 className="text-lg font-medium text-gray-900">
244:                   Custom Moisture Protocol
245:                 </h3>
246:                 <p className="text-sm text-gray-600">
247:                   Set specific watering ranges, or use category defaults
248:                 </p>
249:               </div>
250:               <button
251:                 type="button"
252:                 onClick={() =>
253:                   setShowMoistureCustomization(!showMoistureCustomization)
254:                 }
255:                 className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
256:                   showMoistureCustomization ? "bg-garden-600" : "bg-gray-300"
257:                 }`}
258:               >
259:                 <span
260:                   className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
261:                     showMoistureCustomization
262:                       ? "translate-x-6"
263:                       : "translate-x-1"
264:                   }`}
265:                 />
266:               </button>
267:             </div>
268: 
269:             {showMoistureCustomization && (
270:               <div className="space-y-4 bg-blue-50 p-4 rounded-lg">
271:                 <input
272:                   type="hidden"
273:                   {...register("customMoistureRanges")}
274:                   checked={showMoistureCustomization}
275:                 />
276: 
277:                 <div className="text-sm text-blue-800 mb-3">
278:                   💡 <strong>Moisture Meter Guide:</strong> Most plants prefer
279:                   watering when moisture drops to 3-4, then watered until
280:                   reaching 6-8. Adjust based on your specific variety's needs.
281:                 </div>
282: 
283:                 <div className="grid grid-cols-2 gap-4">
284:                   <div>
285:                     <label className="block text-sm font-medium text-gray-700 mb-2">
286:                       Water When (Min Level)
287:                     </label>
288:                     <input
289:                       type="number"
290:                       min="1"
291:                       max="10"
292:                       step="0.5"
293:                       {...register("triggerMin", { valueAsNumber: true })}
294:                       className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
295:                     />
296:                     <p className="text-xs text-gray-500 mt-1">
297:                       Lowest moisture before watering
298:                     </p>
299:                   </div>
300:                   <div>
301:                     <label className="block text-sm font-medium text-gray-700 mb-2">
302:                       Water When (Max Level)
303:                     </label>
304:                     <input
305:                       type="number"
306:                       min="1"
307:                       max="10"
308:                       step="0.5"
309:                       {...register("triggerMax", { valueAsNumber: true })}
310:                       className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
311:                     />
312:                     <p className="text-xs text-gray-500 mt-1">
313:                       Highest moisture before watering
314:                     </p>
315:                   </div>
316:                   <div>
317:                     <label className="block text-sm font-medium text-gray-700 mb-2">
318:                       Target After (Min Level)
319:                     </label>
320:                     <input
321:                       type="number"
322:                       min="1"
323:                       max="10"
324:                       step="0.5"
325:                       {...register("targetMin", { valueAsNumber: true })}
326:                       className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
327:                     />
328:                     <p className="text-xs text-gray-500 mt-1">
329:                       Minimum moisture after watering
330:                     </p>
331:                   </div>
332:                   <div>
333:                     <label className="block text-sm font-medium text-gray-700 mb-2">
334:                       Target After (Max Level)
335:                     </label>
336:                     <input
337:                       type="number"
338:                       min="1"
339:                       max="10"
340:                       step="0.5"
341:                       {...register("targetMax", { valueAsNumber: true })}
342:                       className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
343:                     />
344:                     <p className="text-xs text-gray-500 mt-1">
345:                       Maximum moisture after watering
346:                     </p>
347:                   </div>
348:                 </div>
349:                 <p className="text-xs text-blue-700">
350:                   💡 These ranges will apply to all growth stages initially. You
351:                   can refine them later as you learn your plant's specific needs
352:                   through the care logging system.
353:                 </p>
354:               </div>
355:             )}
356:           </div>
357: 
358:           <div className="flex gap-4 pt-4">
359:             <Button
360:               type="submit"
361:               variant="primary"
362:               disabled={isLoading}
363:               className="flex-1"
364:             >
365:               {isLoading ? "Creating..." : "Create Variety"}
366:             </Button>
367:             {onCancel && (
368:               <Button type="button" variant="outline" onClick={onCancel}>
369:                 Cancel
370:               </Button>
371:             )}
372:           </div>
373:         </form>
374:       </CardContent>
375:     </Card>
376:   );
377: }

================
File: src/components/plant/NextTaskDisplay.tsx
================
 1: import React from "react";
 2: import { useNextPlantTask } from "@/hooks/useNextPlantTask";
 3: 
 4: interface NextTaskDisplayProps {
 5:   plantId: string;
 6:   className?: string;
 7:   onClick?: (taskType: string) => void;
 8: }
 9: 
10: const NextTaskDisplay: React.FC<NextTaskDisplayProps> = ({
11:   plantId,
12:   className = "",
13:   onClick,
14: }) => {
15:   const { nextTask, isLoading } = useNextPlantTask(plantId);
16: 
17:   if (isLoading) {
18:     return (
19:       <div className={`text-xs text-gray-400 ${className}`}>
20:         Loading next task...
21:       </div>
22:     );
23:   }
24: 
25:   if (!nextTask) {
26:     return (
27:       <div className={`text-xs text-gray-500 ${className}`}>
28:         📅 No tasks scheduled
29:       </div>
30:     );
31:   }
32: 
33:   // Map task descriptions to activity types for the form
34:   const getActivityType = (taskDescription: string): string => {
35:     const task = taskDescription.toLowerCase();
36:     if (task.includes("water") || task.includes("watering")) return "water";
37:     if (task.includes("fertiliz")) return "fertilize";
38:     if (task.includes("health check") || task.includes("observe"))
39:       return "observe";
40:     if (task.includes("harvest")) return "harvest";
41:     if (task.includes("transplant")) return "transplant";
42:     return "water";
43:   };
44: 
45: 
46:   const getTaskIcon = (task: string): string => {
47:     if (task.toLowerCase().includes("water")) return "💧";
48:     if (task.toLowerCase().includes("fertiliz")) return "🌱";
49:     if (
50:       task.toLowerCase().includes("observe") ||
51:       task.toLowerCase().includes("check")
52:     )
53:       return "👁️";
54:     if (task.toLowerCase().includes("harvest")) return "🌾";
55:     return "📋";
56:   };
57: 
58: 
59:   const getPriorityColor = (priority: "low" | "medium" | "high"): string => {
60:     switch (priority) {
61:       case "high":
62:         return "text-red-600";
63:       case "medium":
64:         return "text-orange-600";
65:       case "low":
66:         return "text-green-600";
67:       default:
68:         return "text-gray-600";
69:     }
70:   };
71: 
72:   const handleClick = () => {
73:     if (onClick) {
74:       const activityType = getActivityType(nextTask.task);
75:       onClick(activityType);
76:     }
77:   };
78: 
79:   return (
80:     <div
81:       className={`text-xs ${getPriorityColor(nextTask.priority)} ${className} ${
82:         onClick ? "cursor-pointer hover:underline hover:text-blue-600" : ""
83:       }`}
84:       onClick={handleClick}
85:     >
86:       <span className="mr-1">{getTaskIcon(nextTask.task)}</span>
87:       {nextTask.task} - {nextTask.dueIn}
88:       {onClick && (
89:         <span className="text-xs text-gray-400 ml-2">→ Click to log</span>
90:       )}
91:     </div>
92:   );
93: };
94: 
95: export default NextTaskDisplay;

================
File: src/components/plant/SoilMixtureSelector.tsx
================
  1: import { useState } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { PlantCategory } from "@/types";
  5: 
  6: interface SoilComponent {
  7:   name: string;
  8:   percentage: number;
  9:   description?: string;
 10: }
 11: 
 12: interface SoilMixture {
 13:   id: string;
 14:   name: string;
 15:   description: string;
 16:   category?: PlantCategory;
 17:   components: SoilComponent[];
 18:   amendments?: { name: string; amount: string }[];
 19:   suitable: string[];
 20:   notes?: string[];
 21: }
 22: 
 23: interface SoilMixtureSelectorProps {
 24:   selectedMixture?: string;
 25:   onMixtureChange: (mixture: string) => void;
 26:   plantCategory?: PlantCategory;
 27: }
 28: 
 29: const PRESET_MIXTURES: SoilMixture[] = [
 30:   {
 31:     id: "leafy-greens-standard",
 32:     name: "Leafy Greens Mix",
 33:     description:
 34:       "Nutrient-rich blend perfect for arugula, spinach, and lettuce",
 35:     category: "leafy-greens",
 36:     components: [
 37:       { name: "Coco Coir", percentage: 40 },
 38:       { name: "Perlite", percentage: 25 },
 39:       { name: "Vermiculite", percentage: 25 },
 40:       { name: "Worm Castings", percentage: 10 },
 41:     ],
 42:     amendments: [{ name: "Compost", amount: "½–1 cup per cubic foot" }],
 43:     suitable: ["Arugula", "Spinach", "Lettuce", "Kale"],
 44:     notes: ["Retains moisture well", "High in organic matter"],
 45:   },
 46:   {
 47:     id: "root-vegetables-standard",
 48:     name: "Root Vegetables Mix",
 49:     description: "Well-draining mix for carrots, beets, and onions",
 50:     category: "root-vegetables",
 51:     components: [
 52:       { name: "Coco Coir", percentage: 40 },
 53:       { name: "Perlite", percentage: 30 },
 54:       { name: "Vermiculite", percentage: 25 },
 55:       { name: "Worm Castings", percentage: 5 },
 56:     ],
 57:     amendments: [
 58:       { name: "Compost", amount: "2 tbsp per gallon" },
 59:       { name: "Bone Meal", amount: "1 tsp per gallon" },
 60:     ],
 61:     suitable: ["Carrots", "Beets", "Onions", "Radishes"],
 62:     notes: ["Excellent drainage", "Prevents root rot"],
 63:   },
 64:   {
 65:     id: "herbs-standard",
 66:     name: "Mediterranean Herbs Mix",
 67:     description: "Well-draining, lean mix for oregano, thyme, and rosemary",
 68:     category: "herbs",
 69:     components: [
 70:       { name: "Coco Coir", percentage: 40 },
 71:       { name: "Perlite", percentage: 30 },
 72:       { name: "Coarse Sand", percentage: 20 },
 73:       { name: "Vermiculite", percentage: 10 },
 74:     ],
 75:     amendments: [
 76:       { name: "Compost", amount: "0.5 tbsp per container" },
 77:       { name: "Crushed Oyster Shell", amount: "0.5 tsp per container" },
 78:     ],
 79:     suitable: ["Oregano", "Thyme", "Rosemary", "Basil"],
 80:     notes: ["Lean conditions concentrate flavors", "Excellent drainage"],
 81:   },
 82:   {
 83:     id: "berries-standard",
 84:     name: "Berry & Fruit Mix",
 85:     description: "Acid-loving plants blend with excellent drainage",
 86:     category: "berries",
 87:     components: [
 88:       { name: "Coco Coir", percentage: 35 },
 89:       { name: "Perlite", percentage: 25 },
 90:       { name: "Compost", percentage: 20 },
 91:       { name: "Worm Castings", percentage: 15 },
 92:       { name: "Vermiculite", percentage: 5 },
 93:     ],
 94:     amendments: [
 95:       { name: "Bone Meal", amount: "1 tbsp per gallon" },
 96:       { name: "Rock Dust", amount: "¼ cup per 5-gal bag" },
 97:     ],
 98:     suitable: ["Strawberries", "Blueberries", "Raspberries"],
 99:     notes: ["Slightly acidic pH", "Rich in organic matter"],
100:   },
101:   {
102:     id: "fruiting-plants-standard",
103:     name: "Fruiting Plants Mix",
104:     description:
105:       "Nutrient-dense mix for tomatoes, peppers, and climbing plants",
106:     category: "fruiting-plants",
107:     components: [
108:       { name: "Coco Coir", percentage: 35 },
109:       { name: "Perlite", percentage: 20 },
110:       { name: "Vermiculite", percentage: 20 },
111:       { name: "Compost", percentage: 15 },
112:       { name: "Worm Castings", percentage: 5 },
113:       { name: "Biochar", percentage: 5 },
114:     ],
115:     amendments: [
116:       { name: "Gypsum", amount: "½ cup per 15-gal bag" },
117:       { name: "Bone Meal", amount: "2-3 tbsp per container" },
118:       { name: "Kelp Meal", amount: "2 tbsp per container" },
119:     ],
120:     suitable: ["Tomatoes", "Peppers", "Peas", "Beans"],
121:     notes: ["Heavy feeder support", "Calcium-rich for fruit development"],
122:   },
123:   {
124:     id: "universal-standard",
125:     name: "Universal Garden Mix",
126:     description: "Balanced all-purpose mix suitable for most plants",
127:     components: [
128:       { name: "Coco Coir", percentage: 40 },
129:       { name: "Perlite", percentage: 25 },
130:       { name: "Vermiculite", percentage: 20 },
131:       { name: "Compost", percentage: 10 },
132:       { name: "Worm Castings", percentage: 5 },
133:     ],
134:     amendments: [{ name: "Bone Meal", amount: "1 tbsp per gallon" }],
135:     suitable: ["Most vegetables", "Herbs", "Annual flowers"],
136:     notes: ["Good drainage", "Balanced nutrition", "Easy to work with"],
137:   },
138: ];
139: 
140: export const SoilMixtureSelector = ({
141:   selectedMixture,
142:   onMixtureChange,
143:   plantCategory,
144: }: SoilMixtureSelectorProps) => {
145:   const [showCustom, setShowCustom] = useState(false);
146:   const [customMixture, setCustomMixture] = useState("");
147: 
148:   // In SoilMixtureSelector.tsx - fix the getRelevantMixtures function
149:   const getRelevantMixtures = () => {
150:     if (!plantCategory) {
151:       // When no category is provided, return all mixtures without duplicates
152:       return PRESET_MIXTURES;
153:     }
154: 
155:     const categoryMixtures = PRESET_MIXTURES.filter(
156:       (mix) => mix.category === plantCategory
157:     );
158:     const otherMixtures = PRESET_MIXTURES.filter(
159:       (mix) => mix.category !== plantCategory
160:     );
161: 
162:     return [...categoryMixtures, ...otherMixtures];
163:   };
164: 
165:   const formatComponents = (components: SoilComponent[]) => {
166:     return components
167:       .map((comp) => `${comp.percentage}% ${comp.name}`)
168:       .join(", ");
169:   };
170: 
171:   const handlePresetSelect = (mixtureId: string) => {
172:     const mixture = PRESET_MIXTURES.find((m) => m.id === mixtureId);
173:     if (mixture) {
174:       const mixtureText = `${mixture.name}: ${formatComponents(
175:         mixture.components
176:       )}`;
177:       onMixtureChange(mixtureText);
178:       setShowCustom(false);
179:     }
180:   };
181: 
182:   const handleCustomSubmit = () => {
183:     if (customMixture.trim()) {
184:       onMixtureChange(customMixture);
185:       setShowCustom(false);
186:     }
187:   };
188: 
189:   return (
190:     <div className="space-y-4">
191:       <div>
192:         <label className="block text-sm font-medium text-gray-700 mb-2">
193:           Soil Mixture
194:         </label>
195:         <p className="text-xs text-gray-500 mb-3">
196:           Choose a preset mixture or create your own custom blend
197:         </p>
198:       </div>
199: 
200:       {!showCustom ? (
201:         <>
202:           {}
203:           <div className="grid gap-3">
204:             {getRelevantMixtures().map((mixture) => (
205:               <div
206:                 key={mixture.id}
207:                 data-testid={`mixture-card-${mixture.id}`}
208:                 className={`cursor-pointer transition-all border rounded-lg shadow-sm ${
209:                   selectedMixture?.includes(mixture.name)
210:                     ? "ring-4 ring-green-500 bg-green-100 border-green-300 shadow-lg"
211:                     : "bg-white border-gray-200 hover:bg-gray-50 hover:shadow-md"
212:                 }`}
213:                 onClick={() => handlePresetSelect(mixture.id)}
214:               >
215:                 <div className="p-4">
216:                   <div className="flex items-start justify-between">
217:                     <div className="flex-1">
218:                       <div className="font-medium text-gray-900 mb-1 flex items-center">
219:                         {selectedMixture?.includes(mixture.name) && (
220:                           <span className="mr-2 text-green-600 text-lg">✓</span>
221:                         )}
222:                         {mixture.name}
223:                         {mixture.category === plantCategory && (
224:                           <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
225:                             Recommended
226:                           </span>
227:                         )}
228:                       </div>
229:                       <p className="text-sm text-gray-600 mb-2">
230:                         {mixture.description}
231:                       </p>
232:                       <div className="text-xs text-gray-500 space-y-1">
233:                         <div>
234:                           <strong>Components:</strong>{" "}
235:                           {formatComponents(mixture.components)}
236:                         </div>
237:                         {mixture.amendments && (
238:                           <div>
239:                             <strong>Amendments:</strong>{" "}
240:                             {mixture.amendments
241:                               .map((a) => `${a.name} (${a.amount})`)
242:                               .join(", ")}
243:                           </div>
244:                         )}
245:                         <div>
246:                           <strong>Best for:</strong>{" "}
247:                           {mixture.suitable.join(", ")}
248:                         </div>
249:                       </div>
250:                     </div>
251:                   </div>
252:                 </div>
253:               </div>
254:             ))}
255:           </div>
256: 
257:           {}
258:           <Button
259:             type="button"
260:             variant="primary"
261:             onClick={() => setShowCustom(true)}
262:             className="w-full"
263:           >
264:             🧪 Create Custom Mixture
265:           </Button>
266:         </>
267:       ) : (
268: 
269:         <Card>
270:           <CardHeader>
271:             <CardTitle className="text-lg">Custom Soil Mixture</CardTitle>
272:             <p className="text-sm text-gray-600">
273:               Describe your custom soil mixture with components and percentages
274:             </p>
275:           </CardHeader>
276:           <CardContent className="space-y-4">
277:             <div>
278:               <label
279:                 htmlFor="mixtureDescription"
280:                 className="block text-sm font-medium text-gray-700 mb-2"
281:               >
282:                 Mixture Description
283:               </label>
284:               <textarea
285:                 id="mixtureDescription"
286:                 value={customMixture}
287:                 onChange={(e) => setCustomMixture(e.target.value)}
288:                 placeholder="e.g., 40% coco coir, 30% perlite, 25% vermiculite, 5% compost"
289:                 className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
290:                 rows={3}
291:               />
292:             </div>
293:             <div className="flex gap-2">
294:               <Button
295:                 type="button"
296:                 onClick={handleCustomSubmit}
297:                 disabled={!customMixture.trim()}
298:                 className="flex-1"
299:               >
300:                 Use This Mixture
301:               </Button>
302:               <Button
303:                 type="button"
304:                 variant="outline"
305:                 onClick={() => setShowCustom(false)}
306:               >
307:                 Back to Presets
308:               </Button>
309:             </div>
310:           </CardContent>
311:         </Card>
312:       )}
313: 
314:       {}
315:       {selectedMixture && (
316:         <div className="p-3 bg-green-50 border border-green-200 rounded-md">
317:           <div className="text-sm font-medium text-green-800 mb-1">
318:             Selected Mixture:
319:           </div>
320:           <div className="text-sm text-green-700">{selectedMixture}</div>
321:         </div>
322:       )}
323:     </div>
324:   );
325: };
326: 
327: export default SoilMixtureSelector;

================
File: src/components/Navigation.tsx
================
 1: import React from "react";
 2: import { Link, useLocation } from "react-router-dom";
 3: import { cn } from "@/utils/cn";
 4: import { DarkModeToggle } from "@/components/ui/DarkModeToggle";
 5: 
 6: const Navigation: React.FC = () => {
 7:   const location = useLocation();
 8: 
 9:   const navItems = [
10:     { path: "/", label: "Dashboard", icon: "🏠" },
11:     { path: "/plants", label: "Plants", icon: "🌱" },
12:     { path: "/add-plant", label: "Add Plant", icon: "➕" },
13:   ];
14: 
15:   return (
16:     <nav className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-border z-50">
17:       <div className="flex justify-around items-center h-16 px-4">
18:         {navItems.map((item) => (
19:           <Link
20:             key={item.path}
21:             to={item.path}
22:             className={cn(
23:               "flex flex-col items-center justify-center min-w-touch h-full px-2",
24:               "text-xs font-medium transition-colors",
25:               location.pathname === item.path
26:                 ? "text-garden-600 dark:text-emerald-500 bg-garden-50 dark:bg-gray-800"
27:                 : "text-gray-500 dark:text-gray-400 hover:text-garden-500 dark:hover:text-emerald-500"
28:             )}
29:           >
30:             <span className="text-xl mb-1">{item.icon}</span>
31:             <span className="text-xs">{item.label}</span>
32:           </Link>
33:         ))}
34: 
35:         {}
36:         <div className="flex flex-col items-center justify-center h-full px-2">
37:           <DarkModeToggle size="sm" />
38:           <span className="text-xs text-gray-500 dark:text-gray-400 mt-1">
39:             Theme
40:           </span>
41:         </div>
42:       </div>
43:     </nav>
44:   );
45: };
46: 
47: export default Navigation;

================
File: src/data/seedVarieties.ts
================
   1: import { PlantCategory } from "@/types";
   2: 
   3: interface StageSpecificWateringProtocol {
   4:   [stageName: string]: {
   5:     trigger: {
   6:       moistureLevel: string | number;
   7:       description?: string;
   8:     };
   9:     target: {
  10:       moistureLevel: string | number;
  11:       description?: string;
  12:     };
  13:     volume: {
  14:       amount: string;
  15:       frequency: string;
  16:       perPlant?: boolean;
  17:     };
  18:     notes?: string[];
  19:   };
  20: }
  21: 
  22: interface StageSpecificLightingProtocol {
  23:   [stageName: string]: {
  24:     ppfd: {
  25:       min: number;
  26:       max: number;
  27:       optimal?: number;
  28:       unit: "µmol/m²/s";
  29:     };
  30:     photoperiod: {
  31:       hours: number;
  32:       maxHours?: number;
  33:       minHours?: number;
  34:       constraint?: string;
  35:     };
  36:     dli: {
  37:       min: number;
  38:       max: number;
  39:       unit: "mol/m²/day";
  40:     };
  41:     notes?: string[];
  42:   };
  43: }
  44: 
  45: interface StageSpecificFertilizationProtocol {
  46:   [stageName: string]: {
  47:     products?: {
  48:       name: string;
  49:       dilution: string;
  50:       amount: string;
  51:       frequency: string;
  52:       method?: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
  53:     }[];
  54:     timing?: string;
  55:     specialInstructions?: string[];
  56:     notes?: string[];
  57:   };
  58: }
  59: 
  60: 
  61: interface EnvironmentalProtocol {
  62:   temperature?: {
  63:     min?: number;
  64:     max?: number;
  65:     optimal?: number;
  66:     unit: "F" | "C";
  67:     criticalMax?: number;
  68:     criticalMin?: number;
  69:     stage?: string;
  70:   };
  71:   humidity?: {
  72:     min?: number;
  73:     max?: number;
  74:     optimal?: number;
  75:     criticalForStage?: string;
  76:   };
  77:   pH: {
  78:     min: number;
  79:     max: number;
  80:     optimal: number;
  81:   };
  82:   specialConditions?: string[];
  83:   constraints?: {
  84:     description: string;
  85:     parameter: "temperature" | "humidity" | "light" | "other";
  86:     threshold: number;
  87:     consequence: string;
  88:   }[];
  89: }
  90: 
  91: interface SoilMixture {
  92:   components: {
  93:     [component: string]: number;
  94:   };
  95:   amendments?: {
  96:     [amendment: string]: string;
  97:   };
  98: }
  99: 
 100: interface ContainerRequirements {
 101:   minSize?: string;
 102:   depth: string;
 103:   drainage?: string;
 104:   staging?: {
 105:     seedling?: string;
 106:     intermediate?: string;
 107:     final: string;
 108:   };
 109: }
 110: 
 111: interface SuccessionProtocol {
 112:   interval: number;
 113:   method: "continuous" | "zoned" | "single";
 114:   harvestMethod: "cut-and-come-again" | "single-harvest" | "selective";
 115:   productiveWeeks?: number;
 116:   notes?: string[];
 117: }
 118: 
 119: interface ComprehensivePlantProtocols {
 120:   lighting?: StageSpecificLightingProtocol;
 121:   watering?: StageSpecificWateringProtocol;
 122:   fertilization?: StageSpecificFertilizationProtocol;
 123:   environment?: EnvironmentalProtocol;
 124:   soilMixture?: SoilMixture;
 125:   container?: ContainerRequirements;
 126:   succession?: SuccessionProtocol;
 127:   specialRequirements?: string[];
 128: }
 129: 
 130: export interface SeedVariety {
 131:   name: string;
 132:   category: PlantCategory;
 133:   growthTimeline: {
 134:     germination: number;
 135:     seedling: number;
 136:     vegetative: number;
 137:     maturation: number;
 138:   };
 139:   protocols?: ComprehensivePlantProtocols;
 140:   isEverbearing?: boolean;
 141:   productiveLifespan?: number;
 142: }
 143: 
 144: 
 145: 
 146: 
 147: 
 148: 
 149: 
 150: 
 151: export const seedVarieties: SeedVariety[] = [
 152:   {
 153:     name: "Boston Pickling Cucumber",
 154:     category: "fruiting-plants",
 155:     isEverbearing: false,
 156:     productiveLifespan: 70,
 157:     growthTimeline: {
 158:       germination: 7,
 159:       seedling: 14,
 160:       vegetative: 21,
 161:       maturation: 50,
 162:     },
 163:     protocols: {
 164:       lighting: {
 165:         seedling: {
 166:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
 167:           photoperiod: { hours: 12, maxHours: 16 },
 168:           dli: { min: 8.6, max: 23.0, unit: "mol/m²/day" },
 169:           notes: [
 170:             "Start feeding 2-3 weeks post-germination with balanced liquid fertilizer",
 171:             "Half strength during establishment to avoid nutrient burn",
 172:           ],
 173:         },
 174:         vegetativeGrowth: {
 175:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
 176:           photoperiod: { hours: 14, maxHours: 16 },
 177:           dli: { min: 20.2, max: 34.6, unit: "mol/m²/day" },
 178:           notes: [
 179:             "Vigorous vine growth requires high light intensity",
 180:             "Higher nitrogen during this phase supports leaf and vine development",
 181:           ],
 182:         },
 183:         flowering: {
 184:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 185:           photoperiod: { hours: 14, maxHours: 16 },
 186:           dli: { min: 28.8, max: 40.3, unit: "mol/m²/day" },
 187:           notes: [
 188:             "Critical phase - flower production determines fruit yield",
 189:             "Hand pollination required daily during flowering period",
 190:           ],
 191:         },
 192:         fruitingHarvesting: {
 193:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 194:           photoperiod: { hours: 14, maxHours: 16 },
 195:           dli: { min: 28.8, max: 40.3, unit: "mol/m²/day" },
 196:           notes: [
 197:             "Harvest 8-10 days after fruit set",
 198:             "Regular picking encourages continued production",
 199:           ],
 200:         },
 201:       },
 202:       watering: {
 203:         seedling: {
 204:           trigger: { moistureLevel: "consistent moisture" },
 205:           target: { moistureLevel: "adequate but not waterlogged" },
 206:           volume: {
 207:             amount: "as needed for establishment",
 208:             frequency: "daily monitoring",
 209:           },
 210:           notes: ["Heavy feeders require consistent moisture from start"],
 211:         },
 212:         vegetativeGrowth: {
 213:           trigger: { moistureLevel: "when top inch dry" },
 214:           target: { moistureLevel: "thoroughly moist" },
 215:           volume: { amount: "heavy watering", frequency: "as soil indicates" },
 216:           notes: [
 217:             "Consistent moisture critical - never allow drought stress",
 218:             "Container growing requires more frequent attention than ground cultivation",
 219:           ],
 220:         },
 221:         flowering: {
 222:           trigger: { moistureLevel: "when top inch dry" },
 223:           target: { moistureLevel: "thoroughly moist" },
 224:           volume: {
 225:             amount: "heavy watering",
 226:             frequency: "consistent schedule",
 227:           },
 228:           notes: [
 229:             "Water stress during flowering dramatically reduces fruit set",
 230:             "Morning watering preferred to allow leaves to dry before evening",
 231:           ],
 232:         },
 233:         fruitingHarvesting: {
 234:           trigger: { moistureLevel: "when top inch dry" },
 235:           target: { moistureLevel: "thoroughly moist" },
 236:           volume: {
 237:             amount: "heavy watering",
 238:             frequency: "daily during peak production",
 239:           },
 240:           notes: [
 241:             "Fruit development requires enormous water uptake",
 242:             "Inconsistent watering causes bitter or malformed fruit",
 243:           ],
 244:         },
 245:       },
 246:       fertilization: {
 247:         seedling: {
 248:           products: [
 249:             {
 250:               name: "Balanced liquid fertilizer",
 251:               dilution: "half strength",
 252:               amount: "light application",
 253:               frequency: "start 2-3 weeks post-germination",
 254:             },
 255:           ],
 256:           timing: "Weeks 2-4",
 257:           notes: ["Gentle introduction to feeding - young roots are sensitive"],
 258:         },
 259:         vegetativeGrowth: {
 260:           products: [
 261:             {
 262:               name: "Balanced liquid fertilizer",
 263:               dilution: "full strength",
 264:               amount: "regular application",
 265:               frequency: "every 1-2 weeks",
 266:             },
 267:           ],
 268:           timing: "Weeks 4-8",
 269:           notes: ["Higher nitrogen during vine development phase"],
 270:         },
 271:         flowering: {
 272:           products: [
 273:             {
 274:               name: "Higher P-K fertilizer (tomato/bloom booster)",
 275:               dilution: "as directed",
 276:               amount: "regular application",
 277:               frequency: "every 1-2 weeks",
 278:             },
 279:           ],
 280:           timing: "When first flowers appear",
 281:           notes: [
 282:             "Switch from nitrogen-heavy to phosphorus-potassium emphasis",
 283:             "Supports flower production and fruit development",
 284:           ],
 285:         },
 286:         fruitingHarvesting: {
 287:           products: [
 288:             {
 289:               name: "Higher P-K fertilizer",
 290:               dilution: "as directed",
 291:               amount: "consistent application",
 292:               frequency: "every 1-2 weeks",
 293:             },
 294:           ],
 295:           timing: "Throughout harvest period",
 296:           notes: ["Continuous fruiting demands consistent nutrition"],
 297:         },
 298:       },
 299:       environment: {
 300:         pH: { min: 5.8, max: 6.5, optimal: 6.2 },
 301:       },
 302:       soilMixture: {
 303:         components: {
 304:           "coco coir": 30,
 305:           perlite: 25,
 306:           vermiculite: 25,
 307:           compost: 20,
 308:         },
 309:         amendments: {
 310:           "well-rotted manure": "3 tbsp per gallon",
 311:           "bone meal": "1 tbsp per gallon",
 312:         },
 313:       },
 314:       container: {
 315:         minSize: "≥2-3 gallons",
 316:         depth: "18-24 inches minimum",
 317:         staging: {
 318:           seedling: "4 inch pot or cell tray with deeper cells",
 319:           final: "Large container or main bed section",
 320:         },
 321:       },
 322:       succession: {
 323:         interval: 21,
 324:         method: "continuous",
 325:         harvestMethod: "selective",
 326:         productiveWeeks: 8,
 327:         notes: [
 328:           "Succession every 3-4 weeks for overlapping production",
 329:           "Each plant produces for 6-8 weeks once fruiting begins",
 330:         ],
 331:       },
 332:       specialRequirements: [
 333:         "A-frame trellis essential for vine support and light exposure",
 334:         "Hand pollination critical - transfer pollen from male to female flowers daily",
 335:         "Female flowers identifiable by tiny cucumber at base",
 336:         "Harvest regularly to encourage continued production",
 337:         "Heavy feeders requiring rich, well-draining soil",
 338:       ],
 339:     },
 340:   },
 341: 
 342:   {
 343:     name: "Sugar Snap Peas",
 344:     category: "fruiting-plants",
 345:     isEverbearing: true,
 346:     productiveLifespan: 56,
 347:     growthTimeline: {
 348:       germination: 10,
 349:       seedling: 14,
 350:       vegetative: 21,
 351:       maturation: 60,
 352:     },
 353:     protocols: {
 354:       lighting: {
 355:         germinationEmergence: {
 356:           ppfd: { min: 100, max: 250, unit: "µmol/m²/s" },
 357:           photoperiod: { hours: 14, maxHours: 16 },
 358:           dli: { min: 5.0, max: 14.4, unit: "mol/m²/day" },
 359:           notes: ["Keep soil consistently moist during germination period"],
 360:         },
 361:         seedling: {
 362:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
 363:           photoperiod: { hours: 14, maxHours: 16 },
 364:           dli: { min: 11.5, max: 23.0, unit: "mol/m²/day" },
 365:           notes: [
 366:             "First true leaves and tendrils developing - watch for climbing behavior",
 367:           ],
 368:         },
 369:         vegetativeVining: {
 370:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
 371:           photoperiod: { hours: 14, maxHours: 16 },
 372:           dli: { min: 23.0, max: 34.6, unit: "mol/m²/day" },
 373:           notes: ["Rapid vine growth - ensure trellis support is adequate"],
 374:         },
 375:         flowerBudFormation: {
 376:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 377:           photoperiod: { hours: 12, maxHours: 14 },
 378:           dli: { min: 21.6, max: 35.3, unit: "mol/m²/day" },
 379:           notes: [
 380:             "Slight photoperiod reduction can encourage flowering",
 381:             "Monitor for first flower buds around days 40-50",
 382:           ],
 383:         },
 384:         podSetMaturation: {
 385:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 386:           photoperiod: { hours: 12 },
 387:           dli: { min: 21.6, max: 30.2, unit: "mol/m²/day" },
 388:           notes: [
 389:             "Harvest pods when plump but before peas become starchy",
 390:             "Regular harvesting encourages continued pod production",
 391:           ],
 392:         },
 393:       },
 394:       watering: {
 395:         germinationEmergence: {
 396:           trigger: { moistureLevel: "3-4" },
 397:           target: { moistureLevel: "7-8" },
 398:           volume: { amount: "16-24 oz (470-710 mL)", frequency: "3x/week" },
 399:           notes: [
 400:             "Keep consistently moist but not waterlogged during germination",
 401:           ],
 402:         },
 403:         seedling: {
 404:           trigger: { moistureLevel: "3-4" },
 405:           target: { moistureLevel: "7-8" },
 406:           volume: { amount: "20-32 oz (590-945 mL)", frequency: "3x/week" },
 407:           notes: ["Establishing root system requires consistent moisture"],
 408:         },
 409:         vegetativeVining: {
 410:           trigger: { moistureLevel: "3-4" },
 411:           target: { moistureLevel: "7-8" },
 412:           volume: { amount: "32-42 oz (945-1240 mL)", frequency: "3-4x/week" },
 413:           notes: ["Rapid vine growth increases water demands significantly"],
 414:         },
 415:         flowerBudFormation: {
 416:           trigger: { moistureLevel: "3-4" },
 417:           target: { moistureLevel: "7-8" },
 418:           volume: { amount: "40-48 oz (1180-1419 mL)", frequency: "4x/week" },
 419:           notes: [
 420:             "Critical period - water stress reduces flower and pod formation",
 421:           ],
 422:         },
 423:         podSetMaturation: {
 424:           trigger: { moistureLevel: "3-4" },
 425:           target: { moistureLevel: "7-8" },
 426:           volume: { amount: "40-54 oz (1180-1600 mL)", frequency: "3-4x/week" },
 427:           notes: ["Pod filling requires substantial water uptake"],
 428:         },
 429:       },
 430:       fertilization: {
 431:         germinationEmergence: {
 432:           products: [
 433:             {
 434:               name: "Rhizobium leguminosarum inoculant",
 435:               dilution: "as directed",
 436:               amount: "apply to seed or planting hole",
 437:               frequency: "at sowing",
 438:               method: "soil-drench",
 439:             },
 440:           ],
 441:           timing: "At sowing",
 442:           notes: [
 443:             "Inoculant enables nitrogen fixation - critical for pea nutrition",
 444:             "Soil pre-amended with gypsum, bone meal, and kelp meal",
 445:           ],
 446:         },
 447:         seedling: {
 448:           products: [
 449:             {
 450:               name: "5-10-10 fertilizer (light dose)",
 451:               dilution: "as directed for containers",
 452:               amount: "light application",
 453:               frequency: "early in containers if needed",
 454:             },
 455:           ],
 456:           timing: "Days 14-20",
 457:           notes: ["Minimal nitrogen needed - peas fix their own nitrogen"],
 458:         },
 459:         vegetativeVining: {
 460:           products: [
 461:             {
 462:               name: "Fish emulsion/fish+kelp (optional)",
 463:               dilution: "as directed",
 464:               amount: "light application",
 465:               frequency: "weekly/biweekly if desired",
 466:             },
 467:             {
 468:               name: "Worm casting top-dress",
 469:               dilution: "N/A",
 470:               amount: "light sprinkle around base",
 471:               frequency: "monthly",
 472:               method: "top-dress",
 473:             },
 474:           ],
 475:           timing: "Weeks 3-6",
 476:           notes: [
 477:             "Light feeding only - excessive nitrogen reduces pod production",
 478:           ],
 479:         },
 480:         flowerBudFormation: {
 481:           products: [
 482:             {
 483:               name: "Bone meal side-dress",
 484:               dilution: "N/A",
 485:               amount: "light application around base",
 486:               frequency: "one-time",
 487:               method: "top-dress",
 488:             },
 489:             {
 490:               name: "Kelp/sea-mineral (if continuing liquid feed)",
 491:               dilution: "as directed",
 492:               amount: "dilute application",
 493:               frequency: "if needed",
 494:             },
 495:           ],
 496:           timing: "Weeks 6-8",
 497:           notes: [
 498:             "Reduce nitrogen completely",
 499:             "Boost phosphorus and potassium for flower and pod development",
 500:           ],
 501:         },
 502:         podSetMaturation: {
 503:           products: [
 504:             {
 505:               name: "Light feeding only if needed",
 506:               dilution: "very dilute",
 507:               amount: "minimal",
 508:               frequency: "rarely",
 509:             },
 510:           ],
 511:           timing: "Days 60-70+",
 512:           notes: [
 513:             "Minimal feeding during harvest - focus on consistent watering",
 514:           ],
 515:         },
 516:       },
 517:       environment: {
 518:         pH: { min: 6.2, max: 6.8, optimal: 6.5 },
 519:       },
 520:       soilMixture: {
 521:         components: {
 522:           "coco coir": 35,
 523:           perlite: 20,
 524:           vermiculite: 20,
 525:           compost: 15,
 526:           "worm castings": 5,
 527:           biochar: 5,
 528:         },
 529:         amendments: {
 530:           gypsum: "½ cup per 15-gal bag",
 531:           "bone meal": "2-3 Tbsp forked into top 4-6 inches",
 532:           "kelp meal": "2 Tbsp into top 4-6 inches",
 533:           "basalt rock dust (optional)": "¼ cup for additional micronutrients",
 534:         },
 535:       },
 536:       container: {
 537:         minSize: "≥2-3 gallons (15-gallon preferred)",
 538:         depth: "12 inches minimum",
 539:       },
 540:       succession: {
 541:         interval: 14,
 542:         method: "continuous",
 543:         harvestMethod: "selective",
 544:         productiveWeeks: 6,
 545:         notes: [
 546:           "Succession every 2-3 weeks for continuous harvest",
 547:           "Each planting productive for 6-8 weeks once podding begins",
 548:         ],
 549:       },
 550:       specialRequirements: [
 551:         "Rhizobium inoculant essential for nitrogen fixation",
 552:         "A-frame trellis or netting required for climbing support",
 553:         "Self-pollinating but benefits from gentle daily shaking of flowers",
 554:         "Harvest pods when full but before peas become starchy",
 555:         "Cool-season crop - performs best in moderate temperatures",
 556:         "Succession planting every 2-3 weeks extends harvest window",
 557:       ],
 558:     },
 559:   },
 560:   {
 561:     name: "Greek Dwarf Basil",
 562:     category: "herbs",
 563:     isEverbearing: true,
 564:     productiveLifespan: 84,
 565:     growthTimeline: {
 566:       germination: 7,
 567:       seedling: 21,
 568:       vegetative: 28,
 569:       maturation: 56,
 570:     },
 571:     protocols: {
 572:       lighting: {
 573:         seedling: {
 574:           ppfd: { min: 100, max: 400, unit: "µmol/m²/s" },
 575:           photoperiod: { hours: 12, maxHours: 16 },
 576:           dli: { min: 4.3, max: 23.0, unit: "mol/m²/day" },
 577:           notes: [
 578:             "Basil loves warmth - keep soil consistently warm during germination",
 579:             "Small plants emerge with initial characteristic basil leaves",
 580:           ],
 581:         },
 582:         vegetative: {
 583:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
 584:           photoperiod: { hours: 14, maxHours: 16 },
 585:           dli: { min: 23.0, max: 34.6, unit: "mol/m²/day" },
 586:           notes: [
 587:             "Pinching off growing tips encourages bushier growth",
 588:             "Higher light intensity produces more essential oils and stronger flavor",
 589:           ],
 590:         },
 591:         flowering: {
 592:           ppfd: { min: 600, max: 1000, unit: "µmol/m²/s" },
 593:           photoperiod: { hours: 14, maxHours: 16 },
 594:           dli: { min: 34.6, max: 57.6, unit: "mol/m²/day" },
 595:           notes: [
 596:             "Flowering usually occurs around 6-8 weeks after planting",
 597:             "Pinch flower buds immediately to extend leaf harvest period",
 598:           ],
 599:         },
 600:       },
 601:       watering: {
 602:         seedling: {
 603:           trigger: { moistureLevel: "when surface begins to dry" },
 604:           target: { moistureLevel: "evenly moist but not waterlogged" },
 605:           volume: {
 606:             amount: "light applications",
 607:             frequency: "daily monitoring",
 608:           },
 609:           notes: [
 610:             "Consistent moisture during establishment phase",
 611:             "Avoid overwatering which can cause damping-off disease",
 612:           ],
 613:         },
 614:         vegetative: {
 615:           trigger: { moistureLevel: "when top inch becomes dry" },
 616:           target: { moistureLevel: "thoroughly moist" },
 617:           volume: {
 618:             amount: "moderate watering",
 619:             frequency: "every 2-3 days typically",
 620:           },
 621:           notes: [
 622:             "Allow slight drying between waterings once established",
 623:             "Deep, less frequent watering encourages strong root development",
 624:           ],
 625:         },
 626:         flowering: {
 627:           trigger: { moistureLevel: "when top inch becomes dry" },
 628:           target: { moistureLevel: "adequately moist" },
 629:           volume: {
 630:             amount: "consistent applications",
 631:             frequency: "as soil indicates",
 632:           },
 633:           notes: [
 634:             "Maintain consistent moisture during active harvest period",
 635:             "Avoid getting water on leaves to prevent fungal issues",
 636:           ],
 637:         },
 638:       },
 639:       fertilization: {
 640:         seedling: {
 641:           products: [
 642:             {
 643:               name: "Bio-Tone starter fertilizer",
 644:               dilution: "0.5 teaspoon per container",
 645:               amount: "light application at transplanting",
 646:               frequency: "one-time at transplant",
 647:               method: "mix-in-soil",
 648:             },
 649:           ],
 650:           timing: "At transplant to larger container",
 651:           notes: [
 652:             "Gentle introduction to feeding - basil responds well to organic fertilizers",
 653:           ],
 654:         },
 655:         vegetative: {
 656:           products: [
 657:             {
 658:               name: "Balanced organic fertilizer or compost tea",
 659:               dilution: "half strength initially",
 660:               amount: "light but regular feeding",
 661:               frequency: "every 2-3 weeks",
 662:             },
 663:           ],
 664:           timing: "Active growth phase",
 665:           notes: [
 666:             "Avoid excessive nitrogen which reduces essential oil concentration",
 667:             "Organic fertilizers produce better flavor than synthetic",
 668:           ],
 669:         },
 670:         flowering: {
 671:           products: [
 672:             {
 673:               name: "Reduced feeding if flowers are pinched",
 674:               dilution: "very light",
 675:               amount: "minimal applications",
 676:               frequency: "monthly if needed",
 677:             },
 678:           ],
 679:           timing: "If flowering occurs",
 680:           notes: [
 681:             "Reduce feeding to maintain leaf quality",
 682:             "Focus on preventing flowering rather than supporting it",
 683:           ],
 684:         },
 685:       },
 686:       environment: {
 687:         temperature: { min: 65, max: 80, optimal: 75, unit: "F" },
 688:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
 689:       },
 690:       soilMixture: {
 691:         components: {
 692:           "coco coir": 40,
 693:           perlite: 30,
 694:           vermiculite: 20,
 695:           compost: 10,
 696:         },
 697:         amendments: {
 698:           "worm castings": "1 tbsp per gallon",
 699:           "Bio-Tone": "0.5 teaspoon per container",
 700:         },
 701:       },
 702:       container: {
 703:         minSize: "2-gallon container (8 inch diameter)",
 704:         depth: "6-8 inches adequate for compact variety",
 705:       },
 706:       succession: {
 707:         interval: 14,
 708:         method: "continuous",
 709:         harvestMethod: "cut-and-come-again",
 710:         productiveWeeks: 8,
 711:         notes: [
 712:           "Succession every 2-3 weeks ensures continuous fresh leaves",
 713:           "Pinch flowers immediately to extend productive harvest period",
 714:         ],
 715:       },
 716:       specialRequirements: [
 717:         "Warmth-loving plant - keep soil temperature above 65°F",
 718:         "Pinch growing tips regularly to encourage bushy growth",
 719:         "Remove flower buds immediately to maintain leaf production",
 720:         "Harvest frequently to encourage new growth",
 721:         "Prefers well-draining soil - avoid waterlogged conditions",
 722:       ],
 723:     },
 724:   },
 725: 
 726:   {
 727:     name: "English Thyme",
 728:     category: "herbs",
 729:     isEverbearing: true,
 730:     productiveLifespan: 1095,
 731:     growthTimeline: {
 732:       germination: 14,
 733:       seedling: 21,
 734:       vegetative: 84,
 735:       maturation: 365,
 736:     },
 737:     protocols: {
 738:       lighting: {
 739:         seedling: {
 740:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
 741:           photoperiod: { hours: 10, maxHours: 14 },
 742:           dli: { min: 3.6, max: 15.1, unit: "mol/m²/day" },
 743:           notes: [
 744:             "Tiny seedlings emerge slowly - patience required",
 745:             "Soil temperature between 68-77°F critical for germination",
 746:           ],
 747:         },
 748:         vegetative: {
 749:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
 750:           photoperiod: { hours: 12, maxHours: 16 },
 751:           dli: { min: 13.0, max: 34.6, unit: "mol/m²/day" },
 752:           notes: [
 753:             "Leaves grow to about 1 inch long, becoming dark green and aromatic",
 754:             "Plant develops characteristic low, spreading growth habit",
 755:           ],
 756:         },
 757:         flowering: {
 758:           ppfd: { min: 600, max: 900, unit: "µmol/m²/s" },
 759:           photoperiod: { hours: 14, maxHours: 16 },
 760:           dli: { min: 30.2, max: 51.8, unit: "mol/m²/day" },
 761:           notes: [
 762:             "Small flowers appear in late spring to early summer",
 763:             "Flowers can be pink, lavender, or white depending on variety",
 764:           ],
 765:         },
 766:       },
 767:       watering: {
 768:         seedling: {
 769:           trigger: { moistureLevel: "when surface begins to dry" },
 770:           target: { moistureLevel: "barely moist" },
 771:           volume: {
 772:             amount: "very light applications",
 773:             frequency: "careful monitoring",
 774:           },
 775:           notes: [
 776:             "Critical period - overwatering kills more thyme seedlings than drought",
 777:             "Use spray bottle for gentle moisture application",
 778:           ],
 779:         },
 780:         vegetative: {
 781:           trigger: { moistureLevel: "when soil is dry 1-2 inches down" },
 782:           target: { moistureLevel: "lightly moist throughout" },
 783:           volume: {
 784:             amount: "moderate watering",
 785:             frequency: "infrequent but thorough",
 786:           },
 787:           notes: [
 788:             "Allow significant drying between waterings",
 789:             "Thyme tolerates drought better than excess moisture",
 790:           ],
 791:         },
 792:         flowering: {
 793:           trigger: { moistureLevel: "when soil is quite dry" },
 794:           target: { moistureLevel: "lightly moist" },
 795:           volume: {
 796:             amount: "minimal watering",
 797:             frequency: "only when necessary",
 798:           },
 799:           notes: [
 800:             "Established thyme is extremely drought tolerant",
 801:             "Excess water dilutes essential oils and reduces flavor intensity",
 802:           ],
 803:         },
 804:       },
 805:       fertilization: {
 806:         seedling: {
 807:           products: [
 808:             {
 809:               name: "Crushed oyster shell",
 810:               dilution: "0.5 teaspoon per container",
 811:               amount: "mixed into soil at planting",
 812:               frequency: "one-time soil amendment",
 813:               method: "mix-in-soil",
 814:             },
 815:           ],
 816:           timing: "At transplanting",
 817:           notes: [
 818:             "Provides slow-release calcium and helps with drainage",
 819:             "Mediterranean herbs prefer slightly alkaline conditions",
 820:           ],
 821:         },
 822:         vegetative: {
 823:           products: [
 824:             {
 825:               name: "Very dilute compost tea (optional)",
 826:               dilution: "quarter strength or less",
 827:               amount: "minimal application",
 828:               frequency: "monthly if at all",
 829:             },
 830:           ],
 831:           timing: "Growing season only",
 832:           notes: [
 833:             "Thyme actually performs better in lean soils",
 834:             "Too much fertility produces weak, less flavorful growth",
 835:           ],
 836:         },
 837:         flowering: {
 838:           notes: [
 839:             "No fertilization needed during flowering period",
 840:             "Plant has adapted to survive on minimal nutrients",
 841:           ],
 842:         },
 843:       },
 844:       environment: {
 845:         temperature: { min: 60, max: 80, optimal: 70, unit: "F" },
 846:         humidity: { min: 30, max: 50, optimal: 40 },
 847:         pH: { min: 6.0, max: 8.0, optimal: 6.5 },
 848:       },
 849:       soilMixture: {
 850:         components: {
 851:           "coco coir": 40,
 852:           perlite: 30,
 853:           "coarse sand": 20,
 854:           vermiculite: 10,
 855:         },
 856:         amendments: {
 857:           compost: "0.5 tablespoon per container (minimal)",
 858:           "crushed oyster shell": "0.5 teaspoon per container",
 859:         },
 860:       },
 861:       container: {
 862:         minSize: "2-gallon pot (8 inch diameter)",
 863:         depth: "6-8 inches adequate",
 864:         drainage: "Excellent drainage absolutely essential",
 865:       },
 866:       specialRequirements: [
 867:         "Excellent drainage absolutely critical - will not tolerate wet feet",
 868:         "Prefers lean, mineral soils over rich organic matter",
 869:         "Drought tolerant once established - err on side of underwatering",
 870:         "Benefits from good air circulation to prevent fungal issues",
 871:         "Harvest by cutting stems above woody growth to encourage branching",
 872:         "Extremely long-lived perennial if drainage requirements are met",
 873:       ],
 874:     },
 875:   },
 876: 
 877:   {
 878:     name: "Greek Oregano",
 879:     category: "herbs",
 880:     isEverbearing: true,
 881:     productiveLifespan: 730,
 882:     growthTimeline: {
 883:       germination: 14,
 884:       seedling: 28,
 885:       vegetative: 56,
 886:       maturation: 90,
 887:     },
 888:     protocols: {
 889:       lighting: {
 890:         seedling: {
 891:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
 892:           photoperiod: { hours: 10, maxHours: 14 },
 893:           dli: { min: 3.6, max: 15.1, unit: "mol/m²/day" },
 894:           notes: [
 895:             "Seeds germinate at 65-70°F soil temperature",
 896:             "Transplant when seedlings have four true leaves",
 897:           ],
 898:         },
 899:         vegetative: {
 900:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
 901:           photoperiod: { hours: 12, maxHours: 16 },
 902:           dli: { min: 13.0, max: 34.6, unit: "mol/m²/day" },
 903:           notes: [
 904:             "Plant develops more leaves and branches during this phase",
 905:             "Pinching and pruning encourage bushy growth habit",
 906:           ],
 907:         },
 908:         flowering: {
 909:           ppfd: { min: 500, max: 750, unit: "µmol/m²/s" },
 910:           photoperiod: { hours: 14, maxHours: 16 },
 911:           dli: { min: 25.2, max: 43.2, unit: "mol/m²/day" },
 912:           notes: [
 913:             "Small white flowers appear as plant reaches maturity",
 914:             "Harvest often best when plant is beginning to flower",
 915:           ],
 916:         },
 917:       },
 918:       watering: {
 919:         seedling: {
 920:           trigger: { moistureLevel: "when surface starts to dry" },
 921:           target: { moistureLevel: "evenly moist but not saturated" },
 922:           volume: {
 923:             amount: "light, frequent applications",
 924:             frequency: "daily monitoring",
 925:           },
 926:           notes: [
 927:             "Keep soil consistently moist during establishment",
 928:             "Avoid waterlogging which can cause root rot",
 929:           ],
 930:         },
 931:         vegetative: {
 932:           trigger: { moistureLevel: "when top inch is dry" },
 933:           target: { moistureLevel: "moderately moist throughout" },
 934:           volume: {
 935:             amount: "thorough but infrequent watering",
 936:             frequency: "every 2-4 days",
 937:           },
 938:           notes: [
 939:             "Allow some drying between waterings to encourage strong roots",
 940:             "Deep watering less frequently better than frequent shallow watering",
 941:           ],
 942:         },
 943:         flowering: {
 944:           trigger: { moistureLevel: "when soil is quite dry" },
 945:           target: { moistureLevel: "lightly moist" },
 946:           volume: { amount: "minimal watering", frequency: "only as needed" },
 947:           notes: [
 948:             "Mature oregano is quite drought tolerant",
 949:             "Reduce watering to concentrate essential oils for better flavor",
 950:           ],
 951:         },
 952:       },
 953:       fertilization: {
 954:         seedling: {
 955:           products: [
 956:             {
 957:               name: "Light compost incorporation",
 958:               dilution: "0.5 tablespoon per container",
 959:               amount: "mixed into soil at planting",
 960:               frequency: "one-time soil preparation",
 961:               method: "mix-in-soil",
 962:             },
 963:           ],
 964:           timing: "At container preparation",
 965:           notes: [
 966:             "Light organic matter supports establishment without overfeeding",
 967:           ],
 968:         },
 969:         vegetative: {
 970:           products: [
 971:             {
 972:               name: "Dilute compost tea or fish emulsion",
 973:               dilution: "quarter to half strength",
 974:               amount: "light application",
 975:               frequency: "monthly during active growth",
 976:             },
 977:           ],
 978:           timing: "Growing season",
 979:           notes: [
 980:             "Light feeding only - oregano prefers lean conditions",
 981:             "Overfertilization reduces essential oil concentration",
 982:           ],
 983:         },
 984:         flowering: {
 985:           notes: [
 986:             "Cease fertilization when flowering begins",
 987:             "Lean conditions during flowering concentrate flavor compounds",
 988:           ],
 989:         },
 990:       },
 991:       environment: {
 992:         temperature: { min: 65, max: 85, optimal: 75, unit: "F" },
 993:         humidity: { min: 30, max: 60, optimal: 45 },
 994:         pH: { min: 6.0, max: 8.0, optimal: 6.8 },
 995:       },
 996:       soilMixture: {
 997:         components: {
 998:           "coco coir": 40,
 999:           perlite: 30,
1000:           "coarse sand": 20,
1001:           vermiculite: 10,
1002:         },
1003:         amendments: {
1004:           compost: "0.5 tablespoon per container",
1005:           "crushed oyster shell": "0.5 teaspoon per container",
1006:         },
1007:       },
1008:       container: {
1009:         minSize: "12 inch diameter pot",
1010:         depth: "6-8 inches adequate for root system",
1011:       },
1012:       succession: {
1013:         interval: 0,
1014:         method: "single",
1015:         harvestMethod: "cut-and-come-again",
1016:         notes: [
1017:           "Harvest by cutting top third of stems above a node",
1018:           "Regular harvesting encourages new branching and continued production",
1019:         ],
1020:       },
1021:       specialRequirements: [
1022:         "Requires excellent drainage - will not tolerate waterlogged soil",
1023:         "Benefits from slightly alkaline soil conditions",
1024:         "Regular harvesting by cutting stems encourages bushier growth",
1025:         "Can be somewhat invasive if allowed to spread naturally",
1026:         "Winter protection may be needed in very cold climates",
1027:       ],
1028:     },
1029:   },
1030: 
1031:   {
1032:     name: "Albion Strawberries",
1033:     category: "berries",
1034:     isEverbearing: true,
1035:     productiveLifespan: 730,
1036:     growthTimeline: {
1037:       germination: 14,
1038:       seedling: 28,
1039:       vegetative: 42,
1040:       maturation: 90,
1041:     },
1042:     protocols: {
1043:       lighting: {
1044:         establishment: {
1045:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1046:           photoperiod: {
1047:             hours: 14,
1048:             maxHours: 16,
1049:             constraint: "day-neutral varieties require consistent photoperiod",
1050:           },
1051:           dli: { min: 10.1, max: 11.5, unit: "mol/m²/day" },
1052:           notes: [
1053:             "Remove flowers for the first 4-6 weeks to encourage strong plant establishment",
1054:             "Focus energy on root and crown development",
1055:           ],
1056:         },
1057:         vegetative: {
1058:           ppfd: { min: 300, max: 400, unit: "µmol/m²/s" },
1059:           photoperiod: {
1060:             hours: 16,
1061:             constraint:
1062:               "consistent 16h photoperiod is critical for continuous production",
1063:           },
1064:           dli: { min: 17.3, max: 23.0, unit: "mol/m²/day" },
1065:           notes: [
1066:             "Remove ALL runners as soon as they are spotted - check weekly",
1067:             "Energy must go to fruit production, not vegetative reproduction",
1068:           ],
1069:         },
1070:         flowering: {
1071:           ppfd: { min: 350, max: 400, unit: "µmol/m²/s" },
1072:           photoperiod: {
1073:             hours: 16,
1074:             constraint:
1075:               "critical for continuous flowering in day-neutral types",
1076:           },
1077:           dli: { min: 20.2, max: 23.0, unit: "mol/m²/day" },
1078:           notes: [
1079:             "Hand pollination is critical indoors",
1080:             "Use a small brush to transfer pollen every 1-2 days",
1081:           ],
1082:         },
1083:         fruiting: {
1084:           ppfd: { min: 450, max: 500, unit: "µmol/m²/s" },
1085:           photoperiod: { hours: 16 },
1086:           dli: { min: 25.9, max: 28.8, unit: "mol/m²/day" },
1087:           notes: [
1088:             "Higher light intensity supports fruit development and sugar accumulation",
1089:           ],
1090:         },
1091:         ongoingProduction: {
1092:           ppfd: { min: 350, max: 400, unit: "µmol/m²/s" },
1093:           photoperiod: { hours: 16 },
1094:           dli: { min: 20.2, max: 23.0, unit: "mol/m²/day" },
1095:           notes: [
1096:             "Monthly flush with pH-adjusted plain water until 20-30% runoff",
1097:             "Prevents salt buildup from intensive feeding",
1098:           ],
1099:         },
1100:       },
1101:       watering: {
1102:         establishment: {
1103:           trigger: { moistureLevel: "3-4" },
1104:           target: { moistureLevel: "6-7" },
1105:           volume: {
1106:             amount:
1107:               "5-gal: 20-30 oz (590-890 mL), 2-gal hanging: 8-10 oz (235-300 mL)",
1108:             frequency: "3-4x/week",
1109:             perPlant: true,
1110:           },
1111:           notes: [
1112:             "Remove flowers for first 4-6 weeks to encourage establishment",
1113:           ],
1114:         },
1115:         vegetative: {
1116:           trigger: { moistureLevel: "3-4" },
1117:           target: { moistureLevel: "6-7" },
1118:           volume: {
1119:             amount:
1120:               "5-gal: 25-35 oz (740-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1121:             frequency: "3-5x/week",
1122:             perPlant: true,
1123:           },
1124:           notes: [
1125:             "Remove ALL runners as soon as spotted - weekly checks essential",
1126:           ],
1127:         },
1128:         flowering: {
1129:           trigger: { moistureLevel: "3-4" },
1130:           target: { moistureLevel: "6-7" },
1131:           volume: {
1132:             amount:
1133:               "5-gal: 30-35 oz (890-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1134:             frequency: "4-5x/week",
1135:             perPlant: true,
1136:           },
1137:           notes: [
1138:             "Consistent moisture critical during flower and early fruit development",
1139:           ],
1140:         },
1141:         fruiting: {
1142:           trigger: { moistureLevel: "3-4" },
1143:           target: { moistureLevel: "6-7" },
1144:           volume: {
1145:             amount:
1146:               "5-gal: 30-35 oz (890-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1147:             frequency: "4-5x/week",
1148:             perPlant: true,
1149:           },
1150:         },
1151:         ongoingProduction: {
1152:           trigger: { moistureLevel: "3-4" },
1153:           target: { moistureLevel: "6-7" },
1154:           volume: {
1155:             amount:
1156:               "5-gal: 25-35 oz (740-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1157:             frequency: "3-5x/week",
1158:             perPlant: true,
1159:           },
1160:           notes: [
1161:             "Monthly flush: irrigate with pH-adjusted plain water until 20-30% runoff",
1162:           ],
1163:         },
1164:       },
1165:       fertilization: {
1166:         establishment: {
1167:           products: [
1168:             {
1169:               name: "Neptune's Harvest Fish + Seaweed",
1170:               dilution: "½ strength, 0.5 Tbsp/gal",
1171:               amount: "Week 2 application",
1172:               frequency: "one-time during establishment",
1173:             },
1174:             {
1175:               name: "Bone meal",
1176:               dilution: "1 Tbsp/5gal",
1177:               amount: "mixed at planting",
1178:               frequency: "at planting",
1179:               method: "mix-in-soil",
1180:             },
1181:           ],
1182:           timing: "Weeks 0-3",
1183:           notes: ["Remove flowers for first 4-6 weeks"],
1184:         },
1185:         vegetative: {
1186:           products: [
1187:             {
1188:               name: "Neptune's Harvest",
1189:               dilution: "½ strength",
1190:               amount: "Week 4, 6 applications",
1191:               frequency: "bi-weekly",
1192:             },
1193:             {
1194:               name: "Neptune's Harvest",
1195:               dilution: "full strength, 1 Tbsp/gal",
1196:               amount: "Week 5, 7 applications",
1197:               frequency: "bi-weekly",
1198:             },
1199:           ],
1200:           timing: "Weeks 4-6",
1201:           notes: [
1202:             "Remove flowers for first 4-6 weeks",
1203:             "Remove ALL runners weekly",
1204:           ],
1205:         },
1206:         flowering: {
1207:           products: [
1208:             {
1209:               name: "Espoma Berry-Tone",
1210:               dilution: "2 Tbsp/bag",
1211:               amount: "Week 8 application",
1212:               frequency: "one-time",
1213:               method: "top-dress",
1214:             },
1215:             {
1216:               name: "Kelp/sea-mineral",
1217:               dilution: "1 Tbsp/gal",
1218:               amount: "Week 9, 11 applications",
1219:               frequency: "bi-weekly",
1220:             },
1221:             {
1222:               name: "Bone meal",
1223:               dilution: "½ Tbsp/bag",
1224:               amount: "Week 10 application",
1225:               frequency: "one-time",
1226:               method: "top-dress",
1227:             },
1228:           ],
1229:           timing: "Weeks 7-8",
1230:           notes: ["Hand pollinate every 1-2 days during flowering"],
1231:         },
1232:         fruiting: {
1233:           products: [
1234:             {
1235:               name: "Kelp/sea-mineral",
1236:               dilution: "1 Tbsp/gal",
1237:               amount: "Week 13, 15 applications",
1238:               frequency: "bi-weekly",
1239:             },
1240:             {
1241:               name: "Fish & Seaweed + high-K supplement",
1242:               dilution: "as directed",
1243:               amount: "bi-weekly applications",
1244:               frequency: "every 2 weeks",
1245:             },
1246:           ],
1247:           timing: "Weeks 9-13",
1248:           notes: ["Harvest begins 4-5 weeks after flowering"],
1249:         },
1250:         ongoingProduction: {
1251:           products: [
1252:             {
1253:               name: "Kelp",
1254:               dilution: "1 Tbsp/gal",
1255:               amount: "Week 1 of cycle",
1256:               frequency: "alternating 2-week cycle",
1257:             },
1258:             {
1259:               name: "Berry-Tone",
1260:               dilution: "1 Tbsp/bag",
1261:               amount: "Week 3 of cycle",
1262:               frequency: "alternating 2-week cycle",
1263:               method: "top-dress",
1264:             },
1265:           ],
1266:           timing: "Week 14+",
1267:           notes: [
1268:             "Monthly flush with pH-adjusted water to prevent salt buildup",
1269:           ],
1270:         },
1271:       },
1272:       environment: {
1273:         pH: { min: 5.8, max: 6.5, optimal: 6.2 },
1274:       },
1275:       soilMixture: {
1276:         components: {
1277:           "coco coir": 35,
1278:           perlite: 25,
1279:           compost: 20,
1280:           "worm castings": 15,
1281:           vermiculite: 5,
1282:         },
1283:         amendments: {
1284:           "bone meal": "1 Tbsp per gallon of mix at planting",
1285:           "rock dust": "¼ cup per 5-gal bag",
1286:         },
1287:       },
1288:       specialRequirements: [
1289:         "Day-neutral varieties require consistent 16-hour photoperiod for continuous production",
1290:         "Hand pollination essential indoors - use small brush every 1-2 days during flowering",
1291:         "Remove ALL runners immediately to focus energy on fruit production",
1292:         "Remove flowers for first 4-6 weeks to establish strong root system",
1293:         "Monthly salt flush prevents nutrient lockout from intensive feeding",
1294:         "Replace plants every 2 years when productivity declines",
1295:       ],
1296:     },
1297:   },
1298: 
1299:   {
1300:     name: "Caroline Raspberries",
1301:     category: "berries",
1302:     isEverbearing: true,
1303:     productiveLifespan: 1095,
1304:     growthTimeline: {
1305:       germination: 0,
1306:       seedling: 21,
1307:       vegetative: 42,
1308:       maturation: 120,
1309:     },
1310:     protocols: {
1311:       lighting: {
1312:         caneEstablishment: {
1313:           ppfd: { min: 200, max: 300, unit: "µmol/m²/s" },
1314:           photoperiod: { hours: 16, maxHours: 18 },
1315:           dli: { min: 11.5, max: 19.4, unit: "mol/m²/day" },
1316:           notes: [
1317:             "Focus on establishing strong root system and cane structure",
1318:           ],
1319:         },
1320:         vegetative: {
1321:           ppfd: { min: 300, max: 400, unit: "µmol/m²/s" },
1322:           photoperiod: { hours: 16 },
1323:           dli: { min: 17.3, max: 23.0, unit: "mol/m²/day" },
1324:         },
1325:         floweringFruiting: {
1326:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
1327:           photoperiod: { hours: 14, maxHours: 16 },
1328:           dli: { min: 22.7, max: 34.6, unit: "mol/m²/day" },
1329:           notes: [
1330:             "Higher light intensity supports fruit development and sugar content",
1331:           ],
1332:         },
1333:         ongoing: {
1334:           ppfd: { min: 350, max: 500, unit: "µmol/m²/s" },
1335:           photoperiod: { hours: 16 },
1336:           dli: { min: 20.2, max: 28.8, unit: "mol/m²/day" },
1337:         },
1338:       },
1339:       watering: {
1340:         caneEstablishment: {
1341:           trigger: { moistureLevel: "3-4" },
1342:           target: { moistureLevel: "6-7" },
1343:           volume: {
1344:             amount: "monitor with soil moisture meter",
1345:             frequency: "as needed",
1346:           },
1347:           notes: ["Always water until slight drainage occurs"],
1348:         },
1349:         vegetative: {
1350:           trigger: { moistureLevel: "3-4" },
1351:           target: { moistureLevel: "6-7" },
1352:           volume: {
1353:             amount: "monitor with soil moisture meter",
1354:             frequency: "as needed",
1355:           },
1356:         },
1357:         floweringFruiting: {
1358:           trigger: { moistureLevel: "3-4" },
1359:           target: { moistureLevel: "7-8" },
1360:           volume: {
1361:             amount: "monitor with soil moisture meter",
1362:             frequency: "as needed",
1363:           },
1364:           notes: ["Higher moisture during fruit development"],
1365:         },
1366:         ongoing: {
1367:           trigger: { moistureLevel: "3-4" },
1368:           target: { moistureLevel: "6-7" },
1369:           volume: {
1370:             amount: "monitor with soil moisture meter",
1371:             frequency: "as needed",
1372:           },
1373:         },
1374:       },
1375:       fertilization: {
1376:         caneEstablishment: {
1377:           products: [
1378:             {
1379:               name: "Compost top-dress",
1380:               dilution: "1-2 inches",
1381:               amount: "at planting",
1382:               frequency: "at planting",
1383:               method: "top-dress",
1384:             },
1385:           ],
1386:         },
1387:         vegetative: {
1388:           products: [
1389:             {
1390:               name: "Fish Emulsion",
1391:               dilution: "1-2 tbsp/gallon",
1392:               amount: "as needed",
1393:               frequency: "every 2-4 weeks",
1394:             },
1395:           ],
1396:         },
1397:         floweringFruiting: {
1398:           products: [
1399:             {
1400:               name: "Liquid Kelp + balanced organic fertilizer",
1401:               dilution: "as directed",
1402:               amount: "as needed",
1403:               frequency: "every 2-3 weeks",
1404:             },
1405:             {
1406:               name: "Kelp Extract + K-rich formula",
1407:               dilution: "as directed",
1408:               amount: "as needed",
1409:               frequency: "every 1-2 weeks",
1410:             },
1411:           ],
1412:           notes: ["Higher potassium supports fruit development and flavor"],
1413:         },
1414:         ongoing: {
1415:           products: [
1416:             {
1417:               name: "Aerobically brewed compost tea",
1418:               dilution: "as brewed",
1419:               amount: "monthly applications",
1420:               frequency: "monthly",
1421:             },
1422:           ],
1423:         },
1424:       },
1425:       environment: {
1426:         pH: { min: 5.8, max: 6.5, optimal: 6.0 },
1427:       },
1428:       soilMixture: {
1429:         components: {
1430:           "compost (equal parts worm castings and composted manure)": 50,
1431:           "peat moss": 20,
1432:           perlite: 20,
1433:           "pine bark fines": 10,
1434:         },
1435:         amendments: {
1436:           "bone meal": "2.7 tbsp per 10-gallon container",
1437:           "dried blood meal": "1.3 tbsp per 10-gallon container",
1438:         },
1439:       },
1440:       container: {
1441:         minSize: "2 × 10-gallon containers per plant",
1442:         depth: "12 inches minimum",
1443:       },
1444:       specialRequirements: [
1445:         "Primocane-fruiting variety produces on current year's canes",
1446:         "Requires strong trellis system for support",
1447:         "Prune spent canes after harvest to encourage new growth",
1448:         "Benefits from good air circulation to prevent fungal issues",
1449:         "Hand pollination by gently shaking plants during flowering",
1450:       ],
1451:     },
1452:   },
1453:   {
1454:     name: "Little Finger Carrots",
1455:     category: "root-vegetables",
1456:     isEverbearing: false,
1457:     growthTimeline: {
1458:       germination: 14,
1459:       seedling: 14,
1460:       vegetative: 28,
1461:       maturation: 70,
1462:     },
1463:     protocols: {
1464:       lighting: {
1465:         germination: {
1466:           ppfd: { min: 100, max: 150, unit: "µmol/m²/s" },
1467:           photoperiod: {
1468:             hours: 12,
1469:             maxHours: 12,
1470:             constraint: "strict maximum to prevent bolting",
1471:           },
1472:           dli: { min: 4.3, max: 6.5, unit: "mol/m²/day" },
1473:           notes: [
1474:             "Maintain consistent moisture",
1475:             "Critical photoperiod control",
1476:           ],
1477:         },
1478:         seedling: {
1479:           ppfd: { min: 150, max: 300, unit: "µmol/m²/s" },
1480:           photoperiod: {
1481:             hours: 12,
1482:             maxHours: 12,
1483:             constraint: "photoperiods >12h may trigger premature bolting",
1484:           },
1485:           dli: { min: 6.5, max: 13.0, unit: "mol/m²/day" },
1486:           notes: ["Critical photoperiod - max 12 hours"],
1487:         },
1488:         vegetative: {
1489:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1490:           photoperiod: {
1491:             hours: 12,
1492:             maxHours: 12,
1493:             constraint:
1494:               "photoperiods >12h may trigger premature bolting, especially if warm",
1495:           },
1496:           dli: { min: 8.6, max: 8.6, unit: "mol/m²/day" },
1497:           notes: ["Strict 12-hour maximum", "Especially critical if warm"],
1498:         },
1499:         rootDevelopment: {
1500:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
1501:           photoperiod: {
1502:             hours: 12,
1503:             maxHours: 12,
1504:             constraint: "maintain strict limit",
1505:           },
1506:           dli: { min: 13.0, max: 25.9, unit: "mol/m²/day" },
1507:           notes: [
1508:             "Consistent moisture prevents splitting",
1509:             "21-day succession",
1510:           ],
1511:         },
1512:       },
1513:       watering: {
1514:         germination: {
1515:           trigger: {
1516:             moistureLevel: "surface dry",
1517:             description: "Keep surface moist",
1518:           },
1519:           target: { moistureLevel: "6-7", description: "top inch" },
1520:           volume: { amount: "8-12 oz", frequency: "daily" },
1521:           notes: ["Maintain consistent moisture"],
1522:         },
1523:         seedling: {
1524:           trigger: { moistureLevel: "4-5" },
1525:           target: { moistureLevel: "6-7" },
1526:           volume: { amount: "16-24 oz", frequency: "every 2-3 days" },
1527:         },
1528:         vegetative: {
1529:           trigger: { moistureLevel: "3-4" },
1530:           target: { moistureLevel: "6-7" },
1531:           volume: { amount: "24-32 oz", frequency: "every 2-4 days" },
1532:           notes: [
1533:             "Photoperiods >12h may trigger premature bolting, especially if warm",
1534:           ],
1535:         },
1536:         rootDevelopment: {
1537:           trigger: { moistureLevel: "3-4" },
1538:           target: { moistureLevel: "6-7" },
1539:           volume: { amount: "32-40 oz", frequency: "every 3-4 days" },
1540:           notes: [
1541:             "Consistent moisture prevents splitting",
1542:             "21-day succession",
1543:           ],
1544:         },
1545:       },
1546:       fertilization: {
1547:         germination: {
1548:           notes: ["None until true leaves appear"],
1549:         },
1550:         seedling: {
1551:           products: [
1552:             {
1553:               name: "Worm Casting Tea",
1554:               dilution: "1 part castings:10 parts water, steep 12-24h",
1555:               amount: "apply as needed",
1556:               frequency: "every 1-2 weeks",
1557:             },
1558:             {
1559:               name: "Fish Emulsion (alternative)",
1560:               dilution: "0.5-1 Tbsp/gal",
1561:               amount: "apply as needed",
1562:               frequency: "every 2-3 weeks",
1563:             },
1564:           ],
1565:           timing: "Weeks 3-5",
1566:         },
1567:         vegetative: {
1568:           products: [
1569:             {
1570:               name: "Lower-N Fish Emulsion",
1571:               dilution: "1 Tbsp/gal",
1572:               amount: "apply as needed",
1573:               frequency: "every 2-3 weeks",
1574:             },
1575:             {
1576:               name: "Worm Casting Tea",
1577:               dilution: "1 part castings:10 parts water",
1578:               amount: "apply as needed",
1579:               frequency: "every 1-2 weeks",
1580:             },
1581:             {
1582:               name: "Liquid Kelp/Seaweed Extract",
1583:               dilution: "1-2 Tbsp/gal",
1584:               amount: "apply as needed",
1585:               frequency: "every 2-3 weeks",
1586:             },
1587:           ],
1588:           timing: "Weeks 5/6 to Harvest",
1589:         },
1590:         rootDevelopment: {
1591:           products: [
1592:             {
1593:               name: "Continue same as vegetative",
1594:               dilution: "as above",
1595:               amount: "as above",
1596:               frequency: "as above",
1597:             },
1598:           ],
1599:         },
1600:       },
1601:       environment: {
1602:         pH: { min: 6.0, max: 6.8, optimal: 6.5 },
1603:       },
1604:       soilMixture: {
1605:         components: {
1606:           "coco coir": 40,
1607:           perlite: 30,
1608:           vermiculite: 25,
1609:           "coarse sand (2-4mm)": 5,
1610:         },
1611:       },
1612:       container: {
1613:         depth: "12 inches minimum",
1614:         staging: {
1615:           final:
1616:             "Direct sow only - avoid transplanting to prevent root deformities",
1617:         },
1618:       },
1619:       succession: {
1620:         interval: 21,
1621:         method: "zoned",
1622:         harvestMethod: "single-harvest",
1623:         notes: ["Divide bed into zones", "Sow new zone every 3 weeks"],
1624:       },
1625:       specialRequirements: [
1626:         "Strict 12-hour photoperiod maximum",
1627:         "Direct sow only - no transplanting",
1628:         "Stone-free soil essential for straight roots",
1629:         "Fresh manure causes forking - avoid",
1630:       ],
1631:     },
1632:   },
1633: 
1634:   {
1635:     name: "Astro Arugula",
1636:     category: "leafy-greens",
1637:     isEverbearing: true,
1638:     productiveLifespan: 56,
1639:     growthTimeline: {
1640:       germination: 5,
1641:       seedling: 14,
1642:       vegetative: 14,
1643:       maturation: 37,
1644:     },
1645:     protocols: {
1646:       lighting: {
1647:         germination: {
1648:           ppfd: { min: 70, max: 150, unit: "µmol/m²/s" },
1649:           photoperiod: { hours: 12, maxHours: 12 },
1650:           dli: { min: 3.0, max: 6.5, unit: "mol/m²/day" },
1651:           notes: ["Keep soil warm 60-70°F", "Even moisture"],
1652:         },
1653:         seedling: {
1654:           ppfd: { min: 150, max: 250, unit: "µmol/m²/s" },
1655:           photoperiod: { hours: 10, maxHours: 12 },
1656:           dli: { min: 5.4, max: 10.8, unit: "mol/m²/day" },
1657:           notes: ["Keep soil warm 60-70°F", "Even moisture"],
1658:         },
1659:         vegetative: {
1660:           ppfd: { min: 200, max: 250, unit: "µmol/m²/s" },
1661:           photoperiod: { hours: 10, maxHours: 12 },
1662:           dli: { min: 7.2, max: 10.8, unit: "mol/m²/day" },
1663:         },
1664:         postHarvestRegrowth: {
1665:           ppfd: { min: 200, max: 250, unit: "µmol/m²/s" },
1666:           photoperiod: { hours: 10, maxHours: 12 },
1667:           dli: { min: 7.2, max: 10.8, unit: "mol/m²/day" },
1668:           notes: ["14-day succession interval", "Cut-and-come-again"],
1669:         },
1670:       },
1671:       watering: {
1672:         germination: {
1673:           trigger: { moistureLevel: "3-4" },
1674:           target: { moistureLevel: "6-7" },
1675:           volume: { amount: "2-4 fl oz (60-120 mL)", frequency: "2-3x/week" },
1676:           notes: ["Keep soil warm (60-70°F)", "Even moisture"],
1677:         },
1678:         seedling: {
1679:           trigger: { moistureLevel: "3-4" },
1680:           target: { moistureLevel: "6-7" },
1681:           volume: { amount: "2-4 fl oz (60-120 mL)", frequency: "2-3x/week" },
1682:           notes: ["Keep soil warm (60-70°F)", "Even moisture"],
1683:         },
1684:         vegetative: {
1685:           trigger: { moistureLevel: "3-4" },
1686:           target: { moistureLevel: "6-7" },
1687:           volume: { amount: "8-12 fl oz (240-350 mL)", frequency: "2-3x/week" },
1688:         },
1689:         postHarvestRegrowth: {
1690:           trigger: { moistureLevel: "3-4" },
1691:           target: { moistureLevel: "6-7" },
1692:           volume: {
1693:             amount: "12-16 fl oz (350-470 mL)",
1694:             frequency: "2-3x/week",
1695:           },
1696:           notes: ["14-day succession interval"],
1697:         },
1698:       },
1699:       fertilization: {
1700:         germination: {
1701:           notes: ["None until true leaves appear"],
1702:         },
1703:         seedling: {
1704:           products: [
1705:             {
1706:               name: "Fish Emulsion",
1707:               dilution: "1-2 Tbsp/gal",
1708:               amount: "apply as needed",
1709:               frequency: "every 2 weeks",
1710:             },
1711:           ],
1712:         },
1713:         vegetative: {
1714:           products: [
1715:             {
1716:               name: "Fish Emulsion",
1717:               dilution: "1-2 Tbsp/gal",
1718:               amount: "apply as needed",
1719:               frequency: "every 2 weeks",
1720:             },
1721:           ],
1722:         },
1723:         postHarvestRegrowth: {
1724:           products: [
1725:             {
1726:               name: "Fish Emulsion",
1727:               dilution: "1-2 Tbsp/gal",
1728:               amount: "apply as needed",
1729:               frequency: "every 2 weeks",
1730:             },
1731:           ],
1732:         },
1733:       },
1734:       environment: {
1735:         temperature: { min: 60, max: 70, optimal: 65, unit: "F" },
1736:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
1737:       },
1738:       soilMixture: {
1739:         components: {
1740:           "coco coir": 40,
1741:           perlite: 25,
1742:           vermiculite: 25,
1743:           "worm castings": 10,
1744:         },
1745:         amendments: {
1746:           "additional compost or organic 4-4-4 granular fertilizer":
1747:             "½–1 cup per cubic foot",
1748:         },
1749:       },
1750:       container: {
1751:         depth: "4-6 inches",
1752:         staging: {
1753:           seedling: "Cell tray",
1754:           intermediate: "4 inch pot",
1755:           final: "4-6 inch pot or bed section",
1756:         },
1757:       },
1758:       succession: {
1759:         interval: 14,
1760:         method: "continuous",
1761:         harvestMethod: "cut-and-come-again",
1762:         productiveWeeks: 8,
1763:         notes: [
1764:           "Baby leaves ~21 days",
1765:           "Full flavor ~37-40 days",
1766:           "6-8 weeks productive per plant",
1767:         ],
1768:       },
1769:       specialRequirements: [
1770:         "Strict photoperiod control prevents bolting",
1771:         "Cut outer leaves only, leave center intact",
1772:         "Temperature control critical in warm conditions",
1773:       ],
1774:     },
1775:   },
1776:   {
1777:     name: "Detroit Dark Red Beets",
1778:     category: "root-vegetables",
1779:     isEverbearing: false,
1780:     growthTimeline: {
1781:       germination: 7,
1782:       seedling: 14,
1783:       vegetative: 21,
1784:       maturation: 60,
1785:     },
1786:     protocols: {
1787:       lighting: {
1788:         germination: {
1789:           ppfd: { min: 100, max: 200, unit: "µmol/m²/s" },
1790:           photoperiod: { hours: 12, maxHours: 14 },
1791:           dli: { min: 4.3, max: 10.1, unit: "mol/m²/day" },
1792:           notes: ["Ideal temp: 70-85°F for germination"],
1793:         },
1794:         vegetative: {
1795:           ppfd: { min: 250, max: 400, unit: "µmol/m²/s" },
1796:           photoperiod: { hours: 12, maxHours: 14 },
1797:           dli: { min: 10.8, max: 20.2, unit: "mol/m²/day" },
1798:           notes: ["Temperatures >75°F can cause bolting"],
1799:         },
1800:         rootDevelopment: {
1801:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
1802:           photoperiod: { hours: 12, maxHours: 14 },
1803:           dli: { min: 17.3, max: 30.2, unit: "mol/m²/day" },
1804:           notes: ["Maintain consistent moisture"],
1805:         },
1806:         maturation: {
1807:           ppfd: { min: 300, max: 450, unit: "µmol/m²/s" },
1808:           photoperiod: { hours: 12, maxHours: 14 },
1809:           dli: { min: 13.0, max: 22.7, unit: "mol/m²/day" },
1810:           notes: ["21-day succession"],
1811:         },
1812:       },
1813:       watering: {
1814:         germination: {
1815:           trigger: { moistureLevel: "surface dry" },
1816:           target: { moistureLevel: "7-8" },
1817:           volume: { amount: "8-12 oz per session", frequency: "daily misting" },
1818:           notes: ["Ideal temp: 70-85°F (21-29°C) for germination"],
1819:         },
1820:         vegetative: {
1821:           trigger: { moistureLevel: "4-5 (weeks 1-3), 3-4 (weeks 3-6)" },
1822:           target: { moistureLevel: "7-8 (weeks 1-3), 6-7 (weeks 3-6)" },
1823:           volume: {
1824:             amount: "16-20 oz (weeks 1-3), 20-24 oz (weeks 3-6)",
1825:             frequency: "every 2-3 days (weeks 1-3), every 3-4 days (weeks 3-6)",
1826:           },
1827:           notes: ["Temperatures >75°F (24°C) can cause bolting"],
1828:         },
1829:         rootDevelopment: {
1830:           trigger: { moistureLevel: "3-4" },
1831:           target: { moistureLevel: "6-7" },
1832:           volume: { amount: "24-28 oz", frequency: "every 3-4 days" },
1833:           notes: ["Maintain consistent moisture"],
1834:         },
1835:         maturation: {
1836:           trigger: { moistureLevel: "2-3" },
1837:           target: { moistureLevel: "5-6" },
1838:           volume: { amount: "20-24 oz", frequency: "every 4-5 days" },
1839:           notes: ["21-day succession"],
1840:         },
1841:       },
1842:       fertilization: {
1843:         germination: {
1844:           notes: ["None during germination"],
1845:         },
1846:         vegetative: {
1847:           products: [
1848:             {
1849:               name: "Diluted fish/kelp tea",
1850:               dilution: "¼ strength",
1851:               amount: "apply after 2nd true leaf",
1852:               frequency: "weeks 1-3",
1853:             },
1854:             {
1855:               name: "Worm castings + bone meal",
1856:               dilution: "1 tbsp worm castings + 1 tbsp bone meal per container",
1857:               amount: "at transplant",
1858:               frequency: "weeks 3-6",
1859:             },
1860:           ],
1861:         },
1862:         rootDevelopment: {
1863:           products: [
1864:             {
1865:               name: "Liquid kelp or fish + seaweed",
1866:               dilution: "1 tbsp/gal",
1867:               amount: "apply as needed",
1868:               frequency: "every 2 weeks",
1869:             },
1870:             {
1871:               name: "Kelp meal for boron",
1872:               dilution: "as directed",
1873:               amount: "supplement",
1874:               frequency: "as needed",
1875:             },
1876:           ],
1877:         },
1878:         maturation: {
1879:           notes: ["Stop feeding 10–14 days before harvest"],
1880:         },
1881:       },
1882:       environment: {
1883:         temperature: { min: 65, max: 75, optimal: 70, unit: "F" },
1884:         pH: { min: 6.5, max: 7.0, optimal: 6.8 },
1885:       },
1886:       soilMixture: {
1887:         components: {
1888:           "coco coir": 40,
1889:           perlite: 30,
1890:           vermiculite: 25,
1891:           "compost (or worm castings)": 5,
1892:         },
1893:         amendments: {
1894:           "compost or worm castings": "2 tbsp per gallon",
1895:           "Epsom salts": "1 tsp per gallon",
1896:           "bone meal": "1 tbsp per gallon",
1897:         },
1898:       },
1899:       container: {
1900:         depth: "10 inches minimum",
1901:       },
1902:       succession: {
1903:         interval: 21,
1904:         method: "zoned",
1905:         harvestMethod: "selective",
1906:         notes: ["Can harvest greens at 30-40 days", "Roots ready 50-70 days"],
1907:       },
1908:       specialRequirements: [
1909:         "Sensitive to boron deficiency",
1910:         "Avoid high nitrogen after seedling stage",
1911:         "Can be direct sown or carefully transplanted",
1912:       ],
1913:     },
1914:   },
1915: 
1916:   {
1917:     name: "Beauregard Sweet Potatoes",
1918:     category: "root-vegetables",
1919:     isEverbearing: false,
1920:     growthTimeline: {
1921:       germination: 14,
1922:       seedling: 21,
1923:       vegetative: 42,
1924:       maturation: 100,
1925:     },
1926:     protocols: {
1927:       lighting: {
1928:         slipProduction: {
1929:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1930:           photoperiod: { hours: 14, maxHours: 16 },
1931:           dli: { min: 10.1, max: 11.5, unit: "mol/m²/day" },
1932:           notes: ["High humidity 85-90%", "Temp: 75-80°F"],
1933:         },
1934:         vegetativeGrowth: {
1935:           ppfd: { min: 350, max: 600, unit: "µmol/m²/s" },
1936:           photoperiod: { hours: 14, maxHours: 16 },
1937:           dli: { min: 17.6, max: 34.6, unit: "mol/m²/day" },
1938:           notes: ["Vigorous vine growth phase"],
1939:         },
1940:         tuberDevelopment: {
1941:           ppfd: { min: 600, max: 800, unit: "µmol/m²/s" },
1942:           photoperiod: {
1943:             hours: 10,
1944:             maxHours: 12,
1945:             constraint: "reduce photoperiod to trigger tuber formation",
1946:           },
1947:           dli: { min: 21.6, max: 34.6, unit: "mol/m²/day" },
1948:           notes: ["Critical photoperiod reduction for tuberization"],
1949:         },
1950:         maturation: {
1951:           ppfd: { min: 500, max: 600, unit: "µmol/m²/s" },
1952:           photoperiod: { hours: 8, maxHours: 10 },
1953:           dli: { min: 14.4, max: 21.6, unit: "mol/m²/day" },
1954:           notes: ["Further photoperiod reduction"],
1955:         },
1956:       },
1957:       watering: {
1958:         slipProduction: {
1959:           trigger: { moistureLevel: "top 1 inch dry (~4-5)" },
1960:           target: { moistureLevel: "adequate moisture" },
1961:           volume: {
1962:             amount: "16-20 oz (470-590 mL)/plant",
1963:             frequency: "daily for first week, then every 1-2 days",
1964:           },
1965:           notes: ["High humidity (85-90%)", "Temp: 75-80°F (24-27°C)"],
1966:         },
1967:         vegetativeGrowth: {
1968:           trigger: { moistureLevel: "top 1-2 inches dry (~4)" },
1969:           target: { moistureLevel: "adequate moisture" },
1970:           volume: {
1971:             amount: "30-40 oz (890-1200 mL)/plant",
1972:             frequency: "2x per week",
1973:           },
1974:           notes: ["Vigorous vine growth phase"],
1975:         },
1976:         tuberDevelopment: {
1977:           trigger: { moistureLevel: "top 2 inches dry (~3-4)" },
1978:           target: { moistureLevel: "adequate moisture" },
1979:           volume: { amount: "40-48 oz (1200-1400 mL)", frequency: "2x/week" },
1980:           notes: ["Reduce photoperiod to trigger tuber formation"],
1981:         },
1982:         maturation: {
1983:           trigger: { moistureLevel: "top 2-3 inches dry (~3)" },
1984:           target: { moistureLevel: "minimal" },
1985:           volume: {
1986:             amount: "12-20 oz (350-590 mL)/plant",
1987:             frequency: "1x/week then stop completely 3-7 days pre-harvest",
1988:           },
1989:           notes: ["Final phase preparation"],
1990:         },
1991:       },
1992:       fertilization: {
1993:         slipProduction: {
1994:           products: [
1995:             {
1996:               name: "Beauregard: Soil amendments at planting",
1997:               dilution: "N/A",
1998:               amount: "soil prep",
1999:               frequency: "at planting",
2000:             },
2001:             {
2002:               name: "Jewel: Neptune's Harvest (likely ½ strength)",
2003:               dilution: "½ strength",
2004:               amount: "Wk 1 & 2",
2005:               frequency: "weekly",
2006:             },
2007:             {
2008:               name: "Tomato & Veg Formula (2-4-2)",
2009:               dilution: "as directed",
2010:               amount: "for establishment",
2011:               frequency: "Wk 1 & 2",
2012:             },
2013:           ],
2014:         },
2015:         vegetativeGrowth: {
2016:           products: [
2017:             {
2018:               name: "Beauregard: Blood Meal",
2019:               dilution: "0.5c bed / 5 Tbsp bag",
2020:               amount: "at Wk 4-5",
2021:               frequency: "once",
2022:             },
2023:             {
2024:               name: "Jewel: Blood Meal + Fish & Seaweed Blend",
2025:               dilution: "as directed",
2026:               amount: "Wk 4-5",
2027:               frequency: "as directed",
2028:             },
2029:           ],
2030:         },
2031:         tuberDevelopment: {
2032:           products: [
2033:             {
2034:               name: "Beauregard: Kelp Meal",
2035:               dilution: "0.75c bed / 7.5 Tbsp bag",
2036:               amount: "Wk 8-9",
2037:               frequency: "once",
2038:             },
2039:             {
2040:               name: "Foliar K₂SO₄",
2041:               dilution: "1-2 Tbsp/gal",
2042:               amount: "foliar spray",
2043:               frequency: "Wk 10-11",
2044:               method: "foliar-spray",
2045:             },
2046:             {
2047:               name: "2nd Kelp Meal",
2048:               dilution: "as above",
2049:               amount: "Wk 12-13",
2050:               frequency: "once",
2051:             },
2052:           ],
2053:         },
2054:         maturation: {
2055:           products: [
2056:             {
2057:               name: "Final K₂SO₄/KNO₃",
2058:               dilution: "as directed",
2059:               amount: "for skin set",
2060:               frequency: "2-3 wks pre-harvest",
2061:             },
2062:           ],
2063:           notes: ["Cease all feeding 3-4 wks pre-harvest"],
2064:         },
2065:       },
2066:       environment: {
2067:         temperature: {
2068:           min: 75,
2069:           max: 85,
2070:           optimal: 80,
2071:           unit: "F",
2072:           stage: "tuber development",
2073:         },
2074:         humidity: { min: 85, max: 90, optimal: 87 },
2075:         pH: { min: 5.8, max: 6.2, optimal: 6.0 },
2076:       },
2077:       soilMixture: {
2078:         components: {
2079:           "coco coir": 40,
2080:           perlite: 30,
2081:           vermiculite: 25,
2082:           "sandy loam": 5,
2083:         },
2084:         amendments: {
2085:           "well-rotted manure": "3 tbsp per gallon",
2086:         },
2087:       },
2088:       container: {
2089:         depth: "18-24 inches",
2090:         staging: {
2091:           final: "Large containers for extensive root system",
2092:         },
2093:       },
2094:       succession: {
2095:         interval: 0,
2096:         method: "single",
2097:         harvestMethod: "single-harvest",
2098:         notes: ["Long cycle (90-120 days) best for single large harvest"],
2099:       },
2100:       specialRequirements: [
2101:         "Post-harvest curing at 80-85°F with high humidity for 5-10 days",
2102:         "Critical photoperiod reduction for tuberization",
2103:         "Soil temperature 75-85°F optimal for tuber development",
2104:       ],
2105:     },
2106:   },
2107: 
2108:   {
2109:     name: "Baby's Leaf Spinach",
2110:     category: "leafy-greens",
2111:     isEverbearing: true,
2112:     productiveLifespan: 42,
2113:     growthTimeline: {
2114:       germination: 7,
2115:       seedling: 14,
2116:       vegetative: 14,
2117:       maturation: 45,
2118:     },
2119:     protocols: {
2120:       lighting: {
2121:         germination: {
2122:           ppfd: { min: 100, max: 150, unit: "µmol/m²/s" },
2123:           photoperiod: { hours: 12, maxHours: 14 },
2124:           dli: { min: 4.3, max: 7.6, unit: "mol/m²/day" },
2125:           notes: ["Keep consistent temperature"],
2126:         },
2127:         seedling: {
2128:           ppfd: { min: 150, max: 200, unit: "µmol/m²/s" },
2129:           photoperiod: { hours: 12, maxHours: 14 },
2130:           dli: { min: 6.5, max: 10.1, unit: "mol/m²/day" },
2131:         },
2132:         transplant: {
2133:           ppfd: { min: 200, max: 250, unit: "µmol/m²/s" },
2134:           photoperiod: { hours: 12, maxHours: 14 },
2135:           dli: { min: 8.6, max: 12.6, unit: "mol/m²/day" },
2136:         },
2137:         vegetativeHarvest: {
2138:           ppfd: { min: 250, max: 250, optimal: 250, unit: "µmol/m²/s" },
2139:           photoperiod: { hours: 12, maxHours: 14 },
2140:           dli: { min: 10.8, max: 12.6, unit: "mol/m²/day" },
2141:           notes: ["14-day succession interval"],
2142:         },
2143:       },
2144:       watering: {
2145:         germination: {
2146:           trigger: { moistureLevel: "less than 4" },
2147:           target: { moistureLevel: 6 },
2148:           volume: { amount: "mist as needed", frequency: "daily" },
2149:         },
2150:         seedling: {
2151:           trigger: { moistureLevel: "less than 4" },
2152:           target: { moistureLevel: 6 },
2153:           volume: { amount: "mist as needed", frequency: "as needed" },
2154:         },
2155:         transplant: {
2156:           trigger: { moistureLevel: "less than 4" },
2157:           target: { moistureLevel: 6 },
2158:           volume: {
2159:             amount: "water thoroughly to settle then as needed",
2160:             frequency: "as needed",
2161:           },
2162:         },
2163:         vegetativeHarvest: {
2164:           trigger: { moistureLevel: "less than 4" },
2165:           target: { moistureLevel: 6 },
2166:           volume: { amount: "~1 gal/week for bed", frequency: "as needed" },
2167:           notes: ["14-day succession interval"],
2168:         },
2169:       },
2170:       fertilization: {
2171:         germination: {
2172:           notes: ["None during germination"],
2173:         },
2174:         seedling: {
2175:           products: [
2176:             {
2177:               name: "Fish emulsion",
2178:               dilution: "2 Tbsp/gal",
2179:               amount: "around Wk 2 (1-2 true leaves)",
2180:               frequency: "every 2 weeks",
2181:             },
2182:           ],
2183:         },
2184:         transplant: {
2185:           products: [
2186:             {
2187:               name: "Fish emulsion",
2188:               dilution: "2 Tbsp/gal",
2189:               amount: "continue regimen",
2190:               frequency: "every 2 weeks",
2191:             },
2192:           ],
2193:         },
2194:         vegetativeHarvest: {
2195:           products: [
2196:             {
2197:               name: "Fish emulsion",
2198:               dilution: "2 Tbsp/gal",
2199:               amount: "continue regimen",
2200:               frequency: "every 2 weeks",
2201:             },
2202:           ],
2203:           notes: ["14-day succession interval"],
2204:         },
2205:       },
2206:       environment: {
2207:         pH: { min: 6.0, max: 7.5, optimal: 6.7 },
2208:       },
2209:       soilMixture: {
2210:         components: {
2211:           "coco coir": 35,
2212:           perlite: 25,
2213:           vermiculite: 15,
2214:           compost: 25,
2215:         },
2216:         amendments: {
2217:           "worm castings": "1 tbsp per gallon",
2218:         },
2219:       },
2220:       succession: {
2221:         interval: 14,
2222:         method: "continuous",
2223:         harvestMethod: "cut-and-come-again",
2224:         notes: ["Baby leaves ready 30-45 days", "Multiple harvests per plant"],
2225:       },
2226:       specialRequirements: [
2227:         "Highly sensitive to bolting - strict photoperiod control",
2228:         "Cool season crop - avoid temperatures above 75°F",
2229:         "Cut outer leaves only for continuous harvest",
2230:       ],
2231:     },
2232:   },
2233:   {
2234:     name: "Rosemary",
2235:     category: "herbs",
2236:     isEverbearing: true,
2237:     productiveLifespan: 1095,
2238:     growthTimeline: {
2239:       germination: 21,
2240:       seedling: 84,
2241:       vegetative: 365,
2242:       maturation: 730,
2243:     },
2244:     protocols: {
2245:       lighting: {
2246:         seedling: {
2247:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
2248:           photoperiod: { hours: 12, maxHours: 16 },
2249:           dli: { min: 4.3, max: 17.3, unit: "mol/m²/day" },
2250:           notes: [
2251:             "Starting from seed extremely challenging - low germination rates",
2252:             "Growth initially very slow - patience absolutely essential",
2253:             "Consider starting from cuttings for more reliable establishment",
2254:           ],
2255:         },
2256:         vegetative: {
2257:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
2258:           photoperiod: { hours: 14, maxHours: 16 },
2259:           dli: { min: 17.3, max: 34.6, unit: "mol/m²/day" },
2260:           notes: [
2261:             "Plant slowly develops into bush with woody stems and needle-like leaves",
2262:             "Growth accelerates significantly in second year",
2263:           ],
2264:         },
2265:         flowering: {
2266:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
2267:           photoperiod: { hours: 12, maxHours: 16 },
2268:           dli: { min: 8.6, max: 23.0, unit: "mol/m²/day" },
2269:           notes: [
2270:             "Small blue flowers appear along stems when mature",
2271:             "Pruning after flowering helps maintain compact shape",
2272:           ],
2273:         },
2274:       },
2275:       watering: {
2276:         seedling: {
2277:           trigger: { moistureLevel: "when surface becomes dry" },
2278:           target: { moistureLevel: "barely moist" },
2279:           volume: {
2280:             amount: "minimal applications",
2281:             frequency: "infrequent but careful",
2282:           },
2283:           notes: [
2284:             "Most critical phase - overwatering kills more rosemary than drought",
2285:             "Use spray bottle or very gentle watering to avoid disturbing tiny roots",
2286:           ],
2287:         },
2288:         vegetative: {
2289:           trigger: { moistureLevel: "when soil is dry 2-3 inches down" },
2290:           target: { moistureLevel: "lightly moist in root zone only" },
2291:           volume: {
2292:             amount: "deep but infrequent watering",
2293:             frequency: "weekly or less",
2294:           },
2295:           notes: [
2296:             "Allow substantial drying between waterings",
2297:             "Established rosemary can survive weeks without water",
2298:           ],
2299:         },
2300:         flowering: {
2301:           trigger: { moistureLevel: "when soil is quite dry throughout" },
2302:           target: { moistureLevel: "minimal moisture" },
2303:           volume: {
2304:             amount: "very light watering",
2305:             frequency: "only when absolutely necessary",
2306:           },
2307:           notes: [
2308:             "Mature rosemary is extremely drought tolerant",
2309:             "Excess water during flowering reduces essential oil concentration",
2310:           ],
2311:         },
2312:       },
2313:       fertilization: {
2314:         seedling: {
2315:           products: [
2316:             {
2317:               name: "Limestone",
2318:               dilution: "0.5 tbsp per gallon of soil mix",
2319:               amount: "incorporated during soil preparation",
2320:               frequency: "one-time soil amendment",
2321:               method: "mix-in-soil",
2322:             },
2323:           ],
2324:           timing: "Soil preparation",
2325:           notes: [
2326:             "Limestone provides calcium and raises pH to preferred alkaline range",
2327:             "No other fertilization needed during establishment",
2328:           ],
2329:         },
2330:         vegetative: {
2331:           products: [
2332:             {
2333:               name: "Very dilute compost tea (optional)",
2334:               dilution: "quarter strength maximum",
2335:               amount: "minimal application",
2336:               frequency: "2-3 times per growing season maximum",
2337:             },
2338:           ],
2339:           timing: "Spring growing season only",
2340:           notes: [
2341:             "Rosemary actually performs better with minimal nutrition",
2342:             "Rich soil produces weak growth susceptible to fungal problems",
2343:           ],
2344:         },
2345:         flowering: {
2346:           notes: [
2347:             "No fertilization during flowering or dormant periods",
2348:             "Plant has evolved to thrive in nutrient-poor Mediterranean soils",
2349:           ],
2350:         },
2351:       },
2352:       environment: {
2353:         temperature: { min: 55, max: 80, optimal: 68, unit: "F" },
2354:         humidity: { min: 20, max: 50, optimal: 35 },
2355:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2356:       },
2357:       soilMixture: {
2358:         components: {
2359:           "coco coir": 40,
2360:           perlite: 30,
2361:           "coarse sand": 25,
2362:           compost: 5,
2363:         },
2364:         amendments: {
2365:           limestone: "0.5 tbsp per gallon of mix",
2366:         },
2367:       },
2368:       container: {
2369:         minSize: "2-gallon pot minimum (12 inch diameter preferred)",
2370:         depth: "8-10 inches minimum for mature root system",
2371:         drainage: "Exceptional drainage absolutely critical",
2372:       },
2373:       specialRequirements: [
2374:         "Requires exceptional drainage - will die in waterlogged soil",
2375:         "Extremely sensitive to overwatering at all growth stages",
2376:         "Benefits from good air circulation to prevent fungal issues",
2377:         "Harvest by cutting stems, never pull or damage woody structure",
2378:         "May require winter protection or reduced watering in cold periods",
2379:         "Can live for many years if drainage and watering requirements are met",
2380:         "Consider propagation from cuttings rather than seed for better success",
2381:       ],
2382:     },
2383:   },
2384: 
2385:   {
2386:     name: "Italian Flat Leaf Parsley",
2387:     category: "herbs",
2388:     isEverbearing: true,
2389:     productiveLifespan: 365,
2390:     growthTimeline: {
2391:       germination: 21,
2392:       seedling: 42,
2393:       vegetative: 63,
2394:       maturation: 90,
2395:     },
2396:     protocols: {
2397:       lighting: {
2398:         seedling: {
2399:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
2400:           photoperiod: { hours: 12, maxHours: 16 },
2401:           dli: { min: 4.3, max: 17.3, unit: "mol/m²/day" },
2402:           notes: [
2403:             "Germination can take 2-4 weeks - be patient",
2404:             "Soak seeds 12-24 hours before planting to improve germination",
2405:           ],
2406:         },
2407:         vegetativeHarvest: {
2408:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
2409:           photoperiod: { hours: 14, maxHours: 16 },
2410:           dli: { min: 17.3, max: 34.6, unit: "mol/m²/day" },
2411:           notes: [
2412:             "Plant develops abundant, flavorful leaves with characteristic flat shape",
2413:             "Higher light produces more robust growth and stronger flavor",
2414:           ],
2415:         },
2416:         flowering: {
2417:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
2418:           photoperiod: { hours: 12, maxHours: 16 },
2419:           dli: { min: 8.6, max: 23.0, unit: "mol/m²/day" },
2420:           notes: [
2421:             "Bolting produces tall flower stalk with yellow-green flowers",
2422:             "Flowering makes leaves bitter - harvest before bolting occurs",
2423:           ],
2424:         },
2425:       },
2426:       watering: {
2427:         seedling: {
2428:           trigger: { moistureLevel: "when surface begins to dry" },
2429:           target: { moistureLevel: "consistently moist" },
2430:           volume: {
2431:             amount: "gentle, frequent applications",
2432:             frequency: "daily monitoring",
2433:           },
2434:           notes: [
2435:             "Consistent moisture critical during long germination period",
2436:             "Use fine spray to avoid disturbing seeds or tiny seedlings",
2437:           ],
2438:         },
2439:         vegetativeHarvest: {
2440:           trigger: { moistureLevel: "when top inch becomes dry" },
2441:           target: { moistureLevel: "evenly moist throughout" },
2442:           volume: {
2443:             amount: "thorough watering",
2444:             frequency: "every 2-3 days typically",
2445:           },
2446:           notes: [
2447:             "Unlike Mediterranean herbs, parsley prefers consistent moisture",
2448:             "Deeper root system benefits from thorough watering",
2449:           ],
2450:         },
2451:         flowering: {
2452:           trigger: { moistureLevel: "as vegetative stage" },
2453:           target: { moistureLevel: "consistently moist" },
2454:           volume: {
2455:             amount: "maintain regular watering",
2456:             frequency: "as needed",
2457:           },
2458:           notes: [
2459:             "Continue consistent watering even if plant begins to bolt",
2460:             "Consistent moisture may delay onset of flowering",
2461:           ],
2462:         },
2463:       },
2464:       fertilization: {
2465:         seedling: {
2466:           products: [
2467:             {
2468:               name: "Worm castings",
2469:               dilution: "1 tbsp per gallon of soil mix",
2470:               amount: "incorporated during soil preparation",
2471:               frequency: "one-time soil amendment",
2472:               method: "mix-in-soil",
2473:             },
2474:           ],
2475:           timing: "Soil preparation",
2476:           notes: [
2477:             "Gentle organic matter supports establishment without burning tender roots",
2478:           ],
2479:         },
2480:         vegetativeHarvest: {
2481:           products: [
2482:             {
2483:               name: "Balanced organic fertilizer or compost tea",
2484:               dilution: "half to full strength",
2485:               amount: "regular applications",
2486:               frequency: "every 2-3 weeks during active harvest",
2487:             },
2488:           ],
2489:           timing: "Throughout growing season",
2490:           notes: [
2491:             "Parsley is a moderate feeder requiring regular nutrition",
2492:             "Benefits from nitrogen for leaf production unlike Mediterranean herbs",
2493:           ],
2494:         },
2495:         flowering: {
2496:           products: [
2497:             {
2498:               name: "Reduce feeding if bolting occurs",
2499:               dilution: "light applications only",
2500:               amount: "minimal",
2501:               frequency: "monthly if needed",
2502:             },
2503:           ],
2504:           notes: [
2505:             "Focus on preventing bolting rather than supporting flower production",
2506:           ],
2507:         },
2508:       },
2509:       environment: {
2510:         temperature: { min: 60, max: 75, optimal: 68, unit: "F" },
2511:         humidity: { min: 40, max: 70, optimal: 55 },
2512:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2513:       },
2514:       soilMixture: {
2515:         components: {
2516:           "coco coir": 35,
2517:           perlite: 25,
2518:           vermiculite: 25,
2519:           compost: 15,
2520:         },
2521:         amendments: {
2522:           "worm castings": "1 tbsp per gallon",
2523:         },
2524:       },
2525:       container: {
2526:         minSize: "2-gallon container minimum",
2527:         depth: "8-12 inches - deeper than most herbs due to taproot",
2528:         drainage:
2529:           "Good drainage but retains more moisture than Mediterranean herbs",
2530:       },
2531:       succession: {
2532:         interval: 21,
2533:         method: "continuous",
2534:         harvestMethod: "cut-and-come-again",
2535:         notes: [
2536:           "Cut outer stems at base, leave center growing point intact",
2537:           "Succession planting every 3 weeks provides continuous fresh harvest",
2538:         ],
2539:       },
2540:       specialRequirements: [
2541:         "Unlike Mediterranean herbs, parsley needs consistent moisture and feeding",
2542:         "Deeper containers required to accommodate taproot development",
2543:         "Harvest outer stems regularly to encourage continued production",
2544:         "Cool-season crop that may bolt in hot weather",
2545:         "Biennial but typically grown as annual for best leaf quality",
2546:       ],
2547:     },
2548:   },
2549: 
2550:   {
2551:     name: "Garlic",
2552:     category: "herbs",
2553:     isEverbearing: false,
2554:     productiveLifespan: 240,
2555:     growthTimeline: {
2556:       germination: 14,
2557:       seedling: 28,
2558:       vegetative: 120,
2559:       maturation: 240,
2560:     },
2561:     protocols: {
2562:       lighting: {
2563:         earlyGrowth: {
2564:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
2565:           photoperiod: { hours: 10, maxHours: 14 },
2566:           dli: { min: 3.6, max: 15.1, unit: "mol/m²/day" },
2567:           notes: [
2568:             "Green shoots emerge from planted cloves",
2569:             "Plant establishes root system during this phase",
2570:           ],
2571:         },
2572:         bulbDevelopment: {
2573:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
2574:           photoperiod: { hours: 12, maxHours: 16 },
2575:           dli: { min: 17.3, max: 34.6, unit: "mol/m²/day" },
2576:           notes: [
2577:             "Occurs as daylight hours increase and soil temperatures rise above 60°F",
2578:             "Plant focuses energy on growing the bulb underground",
2579:           ],
2580:         },
2581:         maturation: {
2582:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
2583:           photoperiod: { hours: 8, maxHours: 12 },
2584:           dli: { min: 5.8, max: 17.3, unit: "mol/m²/day" },
2585:           notes: [
2586:             "Lower leaves begin to yellow and die back",
2587:             "Reduced light needs as plant approaches harvest",
2588:           ],
2589:         },
2590:       },
2591:       watering: {
2592:         earlyGrowth: {
2593:           trigger: { moistureLevel: "when top inch becomes dry" },
2594:           target: { moistureLevel: "evenly moist" },
2595:           volume: {
2596:             amount: "moderate applications",
2597:             frequency: "weekly typically",
2598:           },
2599:           notes: [
2600:             "Consistent moisture supports root development",
2601:             "Avoid waterlogging which can cause clove rot",
2602:           ],
2603:         },
2604:         bulbDevelopment: {
2605:           trigger: { moistureLevel: "when top 2 inches become dry" },
2606:           target: { moistureLevel: "adequately moist" },
2607:           volume: { amount: "regular watering", frequency: "every 5-7 days" },
2608:           notes: [
2609:             "Critical period for bulb formation requires consistent moisture",
2610:             "Monitor soil moisture more carefully during active bulbing",
2611:           ],
2612:         },
2613:         maturation: {
2614:           trigger: { moistureLevel: "allow significant drying" },
2615:           target: { moistureLevel: "minimal moisture" },
2616:           volume: {
2617:             amount: "reduce watering significantly",
2618:             frequency: "infrequent",
2619:           },
2620:           notes: [
2621:             "Reduce watering as harvest approaches to firm up bulbs",
2622:             "Stop watering completely 2-3 weeks before harvest",
2623:           ],
2624:         },
2625:       },
2626:       fertilization: {
2627:         earlyGrowth: {
2628:           products: [
2629:             {
2630:               name: "Well-rotted compost",
2631:               dilution: "2 tbsp per gallon of soil",
2632:               amount: "incorporated during soil preparation",
2633:               frequency: "one-time soil amendment",
2634:               method: "mix-in-soil",
2635:             },
2636:             {
2637:               name: "Bone meal",
2638:               dilution: "1 tsp per gallon",
2639:               amount: "mixed into soil at planting",
2640:               frequency: "one-time amendment",
2641:               method: "mix-in-soil",
2642:             },
2643:           ],
2644:           timing: "At planting",
2645:           notes: ["Slow-release nutrients support long growing cycle"],
2646:         },
2647:         bulbDevelopment: {
2648:           products: [
2649:             {
2650:               name: "Balanced liquid fertilizer (low nitrogen)",
2651:               dilution: "half strength",
2652:               amount: "light application",
2653:               frequency: "monthly during active bulbing",
2654:             },
2655:           ],
2656:           timing: "Spring growing season",
2657:           notes: [
2658:             "Moderate feeding during bulb development",
2659:             "Avoid high nitrogen which produces more leaves than bulb",
2660:           ],
2661:         },
2662:         maturation: {
2663:           notes: [
2664:             "Cease all fertilization 6-8 weeks before harvest",
2665:             "Allow plant to focus energy on bulb maturation",
2666:           ],
2667:         },
2668:       },
2669:       environment: {
2670:         temperature: { min: 50, max: 80, optimal: 65, unit: "F" },
2671:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2672:       },
2673:       soilMixture: {
2674:         components: {
2675:           "coco coir": 40,
2676:           perlite: 30,
2677:           vermiculite: 20,
2678:           compost: 10,
2679:         },
2680:         amendments: {
2681:           "well-rotted compost": "2 tbsp per gallon",
2682:           "bone meal": "1 tsp per gallon",
2683:         },
2684:       },
2685:       container: {
2686:         minSize: "2-gallon pot (8 inch diameter)",
2687:         depth: "6-8 inches adequate for bulb development",
2688:       },
2689:       succession: {
2690:         interval: 0,
2691:         method: "single",
2692:         harvestMethod: "single-harvest",
2693:         notes: [
2694:           "Plant cloves in fall for summer harvest",
2695:           "Harvest when lower leaves begin to brown but upper leaves still green",
2696:         ],
2697:       },
2698:       specialRequirements: [
2699:         "Requires cold period for proper bulb formation - may need refrigeration",
2700:         "Plant individual cloves pointed end up, 2 inches deep",
2701:         "Harvest timing critical - too early gives small bulbs, too late causes splitting",
2702:         "Cure harvested bulbs in warm, dry, well-ventilated area for storage",
2703:         "Remove flower stalks (scapes) to encourage bulb development",
2704:       ],
2705:     },
2706:   },
2707:   {
2708:     name: "May Queen Lettuce",
2709:     category: "leafy-greens",
2710:     isEverbearing: true,
2711:     productiveLifespan: 63,
2712:     growthTimeline: {
2713:       germination: 7,
2714:       seedling: 20,
2715:       vegetative: 35,
2716:       maturation: 56,
2717:     },
2718:     protocols: {
2719:       lighting: {
2720:         germination: {
2721:           ppfd: { min: 100, max: 150, unit: "µmol/m²/s" },
2722:           photoperiod: { hours: 10, maxHours: 12 },
2723:           dli: { min: 3.6, max: 6.5, unit: "mol/m²/day" },
2724:           notes: [
2725:             "Keep surface moist during germination",
2726:             "Pre-soak seed 2h in 0.2% kelp solution",
2727:           ],
2728:         },
2729:         seedling: {
2730:           ppfd: { min: 200, max: 300, unit: "µmol/m²/s" },
2731:           photoperiod: { hours: 10, maxHours: 12 },
2732:           dli: { min: 7.2, max: 13.0, unit: "mol/m²/day" },
2733:           notes: [
2734:             "Once 3-4 true leaves appear, begin light fertilization",
2735:             "Strict photoperiod control to prevent bolting",
2736:           ],
2737:         },
2738:         vegetativeRosette: {
2739:           ppfd: { min: 300, max: 350, unit: "µmol/m²/s" },
2740:           photoperiod: { hours: 10, maxHours: 12 },
2741:           dli: { min: 10.8, max: 15.1, unit: "mol/m²/day" },
2742:           notes: [
2743:             "Critical phase for leaf and rosette development",
2744:             "Maintain strict 10-12 hour maximum photoperiod",
2745:           ],
2746:         },
2747:         headFormation: {
2748:           ppfd: { min: 300, max: 350, unit: "µmol/m²/s" },
2749:           photoperiod: { hours: 10, maxHours: 12 },
2750:           dli: { min: 10.8, max: 15.1, unit: "mol/m²/day" },
2751:           notes: [
2752:             "Outer leaves curl inward to form head",
2753:             "Monitor for tip burn (calcium deficiency)",
2754:           ],
2755:         },
2756:       },
2757:       watering: {
2758:         germination: {
2759:           trigger: { moistureLevel: "surface moist" },
2760:           target: { moistureLevel: "7-8" },
2761:           volume: {
2762:             amount: "16-32 oz (0.5-1 L)",
2763:             frequency: "daily/as needed",
2764:           },
2765:           notes: [
2766:             "Keep surface consistently moist",
2767:             "Use mist or light watering",
2768:           ],
2769:         },
2770:         seedling: {
2771:           trigger: { moistureLevel: "3-4" },
2772:           target: { moistureLevel: "8-10" },
2773:           volume: {
2774:             amount: "0.5-1 gal (1.9-3.8 L)",
2775:             frequency: "every 1-3 days",
2776:           },
2777:           notes: ["Water thoroughly until drainage occurs"],
2778:         },
2779:         vegetativeRosette: {
2780:           trigger: { moistureLevel: "3-4" },
2781:           target: { moistureLevel: "8-10" },
2782:           volume: {
2783:             amount: "0.75-1.5 gal (2.8-5.7 L)",
2784:             frequency: "every 2-3 days",
2785:           },
2786:           notes: ["Consistent moisture critical for leaf development"],
2787:         },
2788:         headFormation: {
2789:           trigger: { moistureLevel: "3-4" },
2790:           target: { moistureLevel: "8-10" },
2791:           volume: {
2792:             amount: "0.75-1.5 gal (2.8-5.7 L)",
2793:             frequency: "every 2-3 days",
2794:           },
2795:           notes: ["Stop fertilization 1-2 weeks before final head harvest"],
2796:         },
2797:       },
2798:       fertilization: {
2799:         seedling: {
2800:           products: [
2801:             {
2802:               name: "Diluted fish emulsion",
2803:               dilution: "0.5-1 Tbsp/gal",
2804:               amount: "as needed",
2805:               frequency: "every 2-3 weeks",
2806:             },
2807:             {
2808:               name: "Fish+kelp blend",
2809:               dilution: "0.5-1 Tbsp/gal",
2810:               amount: "as needed",
2811:               frequency: "every 2-3 weeks",
2812:             },
2813:           ],
2814:           timing: "Once 3-4 true leaves appear",
2815:         },
2816:         vegetativeRosette: {
2817:           products: [
2818:             {
2819:               name: "Fish emulsion/fish+kelp",
2820:               dilution: "1-2 Tbsp/gal",
2821:               amount: "as needed",
2822:               frequency: "every 2-3 weeks",
2823:             },
2824:           ],
2825:         },
2826:         headFormation: {
2827:           products: [
2828:             {
2829:               name: "Continue as vegetative",
2830:               dilution: "1-2 Tbsp/gal",
2831:               amount: "as needed",
2832:               frequency: "every 2-3 weeks",
2833:             },
2834:           ],
2835:           notes: ["Stop 1-2 weeks before final head harvest"],
2836:         },
2837:       },
2838:       environment: {
2839:         temperature: { min: 60, max: 75, optimal: 68, unit: "F" },
2840:         humidity: { min: 40, max: 70, optimal: 55 },
2841:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2842:         constraints: [
2843:           {
2844:             description:
2845:               "Prone to bolting in warm conditions with extended daylight",
2846:             parameter: "light",
2847:             threshold: 12,
2848:             consequence: "premature bolting reduces head quality",
2849:           },
2850:         ],
2851:       },
2852:       soilMixture: {
2853:         components: {
2854:           "coco coir": 40,
2855:           perlite: 30,
2856:           vermiculite: 20,
2857:           compost: 10,
2858:         },
2859:         amendments: {
2860:           compost: "2 tbsp per gallon",
2861:           "worm castings": "1 tbsp per gallon",
2862:         },
2863:       },
2864:       container: {
2865:         minSize: "bed section 24 inch width",
2866:         depth: "4-6 inches soil depth",
2867:       },
2868:       succession: {
2869:         interval: 14,
2870:         method: "continuous",
2871:         harvestMethod: "cut-and-come-again",
2872:         notes: [
2873:           "Baby leaves ready 30-35 days",
2874:           "Full heads ready 45-60 days",
2875:           "Can harvest outer leaves for extended yield",
2876:         ],
2877:       },
2878:       specialRequirements: [
2879:         "Strict 10-12 hour photoperiod maximum to prevent bolting",
2880:         "Monitor for tip burn (calcium deficiency) - add gypsum if needed",
2881:         "Butterhead lettuce variety - forms loose heads",
2882:         "Cut-and-come-again harvesting extends yield",
2883:         "Succession plant every 1-2 weeks for continuous harvest",
2884:       ],
2885:     },
2886:   },
2887: 
2888: 
2889: 
2890: 
2891: 
2892: 
2893: 
2894: 
2895: 
2896: 
2897: 
2898: 
2899: 
2900: 
2901: 
2902: 
2903: 
2904: 
2905: 
2906: 
2907: 
2908: 
2909: 
2910: 
2911: 
2912: 
2913: 
2914: 
2915: 
2916: 
2917: 
2918: 
2919: 
2920: 
2921: 
2922: 
2923: 
2924: 
2925: 
2926: 
2927: 
2928: 
2929: 
2930: ];

================
File: src/hooks/useDynamicStage.ts
================
 1: import { useEffect, useState } from "react";
 2: import { PlantRecord, varietyService } from "@/types/database";
 3: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 4: import { GrowthStage } from "@/types";
 5: 
 6: export function useDynamicStage(plant: PlantRecord): GrowthStage {
 7:   const [calculatedStage, setCalculatedStage] = useState<GrowthStage>(
 8:     plant.currentStage
 9:   );
10: 
11:   useEffect(() => {
12:     const calculateStage = async () => {
13:       try {
14:         const variety = await varietyService.getVariety(plant.varietyId);
15:         const stage = calculateCurrentStageWithVariety(
16:           plant.plantedDate,
17:           variety
18:         );
19:         setCalculatedStage(stage);
20:       } catch (error) {
21:         console.error("useDynamicStage: Error calculating stage:", error);
22:         setCalculatedStage(plant.currentStage);
23:       }
24:     };
25: 
26:     calculateStage();
27:   }, [plant.varietyId, plant.plantedDate, plant.currentStage]);
28: 
29:   return calculatedStage;
30: }

================
File: src/pages/care/LogCare.tsx
================
 1: import React from "react";
 2: import { CareLogForm } from "@/pages/care/CareLogForm";
 3: import { useNavigate, useSearchParams } from "react-router-dom";
 4: 
 5: const LogCare: React.FC = () => {
 6:   const navigate = useNavigate();
 7:   const [searchParams] = useSearchParams();
 8:   const preSelectedPlantId = searchParams.get("plantId");
 9: 
10:   const handleSuccess = () => {
11:     navigate("/");
12:   };
13: 
14:   const handleCancel = () => {
15:     navigate(-1);
16:   };
17: 
18:   return (
19:     <div className="p-4">
20:       <h1 className="text-2xl font-bold text-gray-900 mb-6 text-center">
21:         Log Care Activity
22:       </h1>
23:       <CareLogForm
24:         onSuccess={handleSuccess}
25:         onCancel={handleCancel}
26:         preselectedPlantId={preSelectedPlantId || undefined}
27:       />
28:     </div>
29:   );
30: };
31: 
32: export default LogCare;

================
File: src/pages/care/QuickCompletionButtons.tsx
================
 1: import { useState, useEffect } from "react";
 2: import { Button } from "@/components/ui/Button";
 3: import {
 4:   SmartDefaultsService,
 5:   QuickCompletionValues,
 6: } from "@/services/smartDefaultsService";
 7: import { PlantRecord } from "@/types/database";
 8: 
 9: interface QuickCompletionButtonsProps {
10:   plant: PlantRecord;
11:   activityType: "water" | "fertilize";
12:   onQuickComplete: (values: QuickCompletionValues) => void;
13:   className?: string;
14: }
15: 
16: const QuickCompletionButtons = ({
17:   plant,
18:   activityType,
19:   onQuickComplete,
20:   className = "",
21: }: QuickCompletionButtonsProps) => {
22:   const [options, setOptions] = useState<Array<{
23:     label: string;
24:     values: QuickCompletionValues;
25:   }> | null>(null);
26:   const [isLoading, setIsLoading] = useState(false);
27: 
28:   useEffect(() => {
29:     const loadOptions = async () => {
30:       try {
31:         setIsLoading(true);
32:         const completionOptions =
33:           await SmartDefaultsService.getQuickCompletionOptions(
34:             plant,
35:             activityType
36:           );
37:         setOptions(completionOptions);
38:       } catch (error) {
39:         console.error("Error loading quick completion options:", error);
40:         setOptions(null);
41:       } finally {
42:         setIsLoading(false);
43:       }
44:     };
45: 
46:     if (plant) {
47:       loadOptions();
48:     }
49:   }, [plant, activityType]);
50: 
51:   if (isLoading) {
52:     return (
53:       <div className={`flex gap-2 ${className}`}>
54:         <div className="animate-pulse bg-gray-200 rounded-full h-8 w-20"></div>
55:         <div className="animate-pulse bg-gray-200 rounded-full h-8 w-20"></div>
56:       </div>
57:     );
58:   }
59: 
60:   if (!options || options.length === 0) {
61:     return null;
62:   }
63: 
64:   return (
65:     <div className={`flex gap-2 flex-wrap ${className}`}>
66:       <span className="text-xs text-gray-500 self-center">Quick actions:</span>
67:       {options.map((option, index) => (
68:         <Button
69:           key={index}
70:           type="button"
71:           variant="outline"
72:           size="sm"
73:           onClick={() => onQuickComplete(option.values)}
74:         >
75:           {option.label}
76:         </Button>
77:       ))}
78:     </div>
79:   );
80: };
81: 
82: export default QuickCompletionButtons;

================
File: src/services/growthStageService.ts
================
 1: import { plantService, varietyService } from "@/types/database";
 2: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 3: 
 4: export class GrowthStageService {
 5:   static async updatePlantStages(): Promise<void> {
 6:     const plants = await plantService.getActivePlants();
 7: 
 8:     for (const plant of plants) {
 9:       const variety = await varietyService.getVariety(plant.varietyId);
10: 
11:       const currentStage = calculateCurrentStageWithVariety(
12:         plant.plantedDate,
13:         variety
14:       );
15: 
16:       if (currentStage !== plant.currentStage) {
17:         await plantService.updatePlant(plant.id, {
18:           currentStage,
19:           updatedAt: new Date(),
20:         });
21:       }
22:     }
23:   }
24: }

================
File: src/types/index.ts
================
 1: export * from "./core";
 2: export type { CategoryMoistureDefaults, MoistureProtocolInfo } from "./core";
 3: 
 4: 
 5: export * from "./database";
 6: 
 7: 
 8: export type {
 9:   PlantRecord as PlantInstance,
10:   VarietyRecord as PlantVariety,
11:   CareRecord as CareActivity,
12: } from "./database";
13: 
14: 
15: export * from "./scheduling";
16: 
17: 
18: export * from "./user";

================
File: print_structure.py
================
 1: import os
 2: 
 3: def print_directory_structure(root_dir, prefix=""):
 4:     for item in os.listdir(root_dir):
 5:         path = os.path.join(root_dir, item)
 6:         if os.path.isdir(path):
 7: 
 8:             if item == "node_modules":
 9:                 continue
10:             if item == "__pycache__":
11:                 continue
12:             if item == ".git":
13:                 continue
14:             if item == ".vscode":
15:                 continue
16:             if item == ".idea":
17:                 continue
18:             if item == ".DS_Store":
19:                 continue
20:             print(f"{prefix}├── {item}/")
21:             print_directory_structure(path, prefix + "│   ")
22:         else:
23:             print(f"{prefix}├── {item}")
24: 
25: if __name__ == "__main__":
26:     project_root = "."
27:     print_directory_structure(project_root)

================
File: README.md
================
 1: # 🌱 SmartGarden PWA
 2: 
 3: A Progressive Web Application for managing indoor gardening with scientifically-backed growing protocols, offline-first plant tracking, and intelligent care scheduling.
 4: 
 5: ## ✨ Features
 6: 
 7: - **Plant Registration**: Track varieties with custom container configurations
 8: - **Growth Stage Tracking**: Automated stage progression based on planting dates
 9: - **Care Scheduling**: Protocol-driven watering, fertilizing, and observation reminders
10: - **Offline-First**: Full functionality without internet connection
11: - **Mobile Optimized**: Touch-friendly interface designed for gloved hands
12: - **PWA**: Installable app experience on mobile and desktop
13: 
14: ## 🛠️ Tech Stack
15: 
16: - **Frontend**: React 18 + TypeScript
17: - **Styling**: TailwindCSS + shadcn/ui components
18: - **State**: Zustand for global state management
19: - **Database**: IndexedDB via Dexie.js (offline-first)
20: - **Testing**: Jest + React Testing Library + Cypress
21: - **PWA**: Service Worker + Web App Manifest
22: 
23: ## 🚀 Quick Start
24: 
25: ```bash
26: # Install dependencies
27: npm install
28: 
29: # Start development server
30: npm run dev
31: 
32: # Run tests
33: npm test
34: 
35: # Build for production
36: npm run build
37: ```

================
File: src/components/plant/CareHistory.tsx
================
  1: import React, { useState } from "react";
  2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { CareRecord } from "@/types/database";
  5: import CareActivityItem from "./CareActivityItem";
  6: 
  7: interface CareHistoryProps {
  8:   careHistory: CareRecord[];
  9: }
 10: 
 11: const CareHistory: React.FC<CareHistoryProps> = ({ careHistory }) => {
 12:   const [showAll, setShowAll] = useState(false);
 13:   const [filter, setFilter] = useState<string>("all");
 14: 
 15: 
 16:   const filteredHistory = careHistory.filter((activity) => {
 17:     if (filter === "all") return true;
 18:     return activity.type === filter;
 19:   });
 20: 
 21: 
 22:   const displayedHistory = showAll
 23:     ? filteredHistory
 24:     : filteredHistory.slice(0, 5);
 25: 
 26:   const activityTypeFilters = [
 27:     { value: "all", label: "All Activities", icon: "📋" },
 28:     { value: "water", label: "Watering", icon: "💧" },
 29:     { value: "fertilize", label: "Fertilizing", icon: "🌱" },
 30:     { value: "observe", label: "Observations", icon: "👁️" },
 31:     { value: "harvest", label: "Harvest", icon: "🌾" },
 32:     { value: "transplant", label: "Transplant", icon: "🏺" },
 33:   ];
 34: 
 35:   return (
 36:     <Card>
 37:       <CardHeader>
 38:         <CardTitle className="flex items-center gap-2">
 39:           <span className="text-2xl">📊</span>
 40:           Care History
 41:           <span className="text-sm font-normal text-gray-500">
 42:             ({careHistory.length} activities)
 43:           </span>
 44:         </CardTitle>
 45:       </CardHeader>
 46:       <CardContent>
 47:         {careHistory.length === 0 ? (
 48:           <div className="text-center py-8">
 49:             <div className="text-4xl mb-2">📝</div>
 50:             <h3 className="text-lg font-medium text-gray-900 mb-2">
 51:               No care activities yet
 52:             </h3>
 53:             <p className="text-gray-600 mb-4">
 54:               Start logging care activities to track your plant's progress
 55:             </p>
 56:             <Button variant="primary">Log First Activity</Button>
 57:           </div>
 58:         ) : (
 59:           <div className="space-y-4">
 60:             {}
 61:             <div className="flex gap-1 overflow-x-auto pb-2">
 62:               {activityTypeFilters.map((filterOption) => (
 63:                 <Button
 64:                   key={filterOption.value}
 65:                   variant={
 66:                     filter === filterOption.value ? "primary" : "outline"
 67:                   }
 68:                   size="sm"
 69:                   onClick={() => setFilter(filterOption.value)}
 70:                   className="whitespace-nowrap"
 71:                 >
 72:                   <span className="mr-1">{filterOption.icon}</span>
 73:                   {filterOption.label}
 74:                 </Button>
 75:               ))}
 76:             </div>
 77: 
 78:             {}
 79:             <div className="space-y-3">
 80:               {displayedHistory.map((activity) => (
 81:                 <CareActivityItem key={activity.id} activity={activity} />
 82:               ))}
 83:             </div>
 84: 
 85:             {}
 86:             {filteredHistory.length > 5 && (
 87:               <div className="text-center pt-4">
 88:                 <Button variant="outline" onClick={() => setShowAll(!showAll)}>
 89:                   {showAll
 90:                     ? "Show Less"
 91:                     : `Show All ${filteredHistory.length} Activities`}
 92:                 </Button>
 93:               </div>
 94:             )}
 95:           </div>
 96:         )}
 97:       </CardContent>
 98:     </Card>
 99:   );
100: };
101: 
102: export default CareHistory;

================
File: src/components/plant/PlantRegistrationForm.tsx
================
  1: import { useState, useEffect } from "react";
  2: import { Controller, useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { Button } from "../ui/Button";
  6: import { Card, CardContent, CardHeader, CardTitle } from "../ui/Card";
  7: import { plantService, varietyService, VarietyRecord } from "@/types/database";
  8: import { CustomVarietyForm } from "./CustomVarietyForm";
  9: import toast from "react-hot-toast";
 10: import SoilMixtureSelector from "./SoilMixtureSelector";
 11: import { Switch } from "@/components/ui/Switch";
 12: import ReminderPreferencesSection from "@/components/plant/ReminderPreferencesSection";
 13: import { cn } from "@/utils/cn";
 14: 
 15: const plantSchema = z.object({
 16:   varietyId: z.string().min(1, "Please select a variety"),
 17:   name: z.string().optional(),
 18:   plantedDate: z.string().min(1, "Please select a planting date"),
 19:   location: z.boolean(),
 20:   containerType: z.string().min(1, "Please select a container type"),
 21:   containerSize: z.string().min(1, "Please specify container size"),
 22:   customBagShape: z.string().optional(),
 23:   customDiameter: z.string().optional(),
 24:   customBagHeight: z.string().optional(),
 25:   customBagWidth: z.string().optional(),
 26:   customBagLength: z.string().optional(),
 27:   customWidth: z.string().optional(),
 28:   customLength: z.string().optional(),
 29:   customDepth: z.string().optional(),
 30:   soilMix: z.string().min(1, "Please select a soil mixture"),
 31:   notes: z.string().optional(),
 32: });
 33: 
 34: type PlantFormData = z.infer<typeof plantSchema>;
 35: 
 36: interface PlantRegistrationFormProps {
 37:   onSuccess?: () => void;
 38:   onCancel?: () => void;
 39: }
 40: 
 41: interface FormErrors {
 42:   [key: string]: { message?: string } | undefined;
 43: }
 44: 
 45: 
 46: const containerOptions = {
 47:   "grow-bag": {
 48:     label: "Grow Bag",
 49:     icon: "🎒",
 50:     sizes: [
 51:       { value: "1-gallon", label: "1 Gallon" },
 52:       { value: "2-gallon", label: "2 Gallon" },
 53:       { value: "3-gallon", label: "3 Gallon" },
 54:       { value: "5-gallon", label: "5 Gallon" },
 55:       { value: "7-gallon", label: "7 Gallon" },
 56:       { value: "10-gallon", label: "10 Gallon" },
 57:       { value: "15-gallon", label: "15 Gallon" },
 58:       { value: "30-gallon", label: "30 Gallon" },
 59:       { value: "custom", label: "Custom Size" },
 60:     ],
 61:   },
 62:   pot: {
 63:     label: "Pot",
 64:     icon: "🪴",
 65:     sizes: [
 66:       { value: "4-inch", label: "4 inch" },
 67:       { value: "5-inch", label: "5 inch" },
 68:       { value: "6-inch", label: "6 inch" },
 69:     ],
 70:   },
 71:   "cell-tray": {
 72:     label: "Seed Starting Cell Tray",
 73:     icon: "📱",
 74:     sizes: [{ value: "standard", label: "Standard Cell Tray" }],
 75:   },
 76:   "raised-bed": {
 77:     label: "Raised Bed",
 78:     icon: "🏗️",
 79:     sizes: [{ value: "custom-dimensions", label: "Custom Dimensions" }],
 80:   },
 81: };
 82: 
 83: export function PlantRegistrationForm({
 84:   onSuccess,
 85:   onCancel,
 86: }: PlantRegistrationFormProps) {
 87:   const [varieties, setVarieties] = useState<VarietyRecord[]>([]);
 88:   const [isLoading, setIsLoading] = useState(false);
 89:   const [submitError, setSubmitError] = useState<string | null>(null);
 90:   const [showCustomVarietyForm, setShowCustomVarietyForm] = useState(false);
 91:   const [reminderPreferences, setReminderPreferences] = useState({
 92:     watering: true,
 93:     fertilizing: true,
 94:     observation: true,
 95:     lighting: true,
 96:     pruning: true,
 97:   });
 98: 
 99:   const {
100:     register,
101:     handleSubmit,
102:     formState: { errors, isValid, isSubmitting },
103:     reset,
104:     setValue,
105:     watch,
106:     control,
107:   } = useForm<PlantFormData>({
108:     resolver: zodResolver(plantSchema),
109:     mode: "onChange",
110:     defaultValues: {
111:       name: "",
112:       plantedDate: new Date().toISOString().split("T")[0],
113:       containerType: "",
114:       containerSize: "",
115:       soilMix: "",
116:       notes: "",
117:       location: false,
118:     },
119:   });
120: 
121:   const selectedContainerType = watch("containerType");
122:   const selectedContainerSize = watch("containerSize");
123: 
124:   useEffect(() => {
125:     loadVarieties();
126:   }, []);
127: 
128:   useEffect(() => {
129:     if (selectedContainerType) {
130:       setValue("containerSize", "");
131:       setValue("customBagShape", "");
132:       setValue("customDiameter", "");
133:       setValue("customBagHeight", "");
134:       setValue("customBagWidth", "");
135:       setValue("customBagLength", "");
136:       setValue("customWidth", "");
137:       setValue("customLength", "");
138:       setValue("customDepth", "");
139:     }
140:   }, [selectedContainerType, setValue]);
141: 
142:   async function loadVarieties() {
143:     try {
144:       const allVarieties = await varietyService.getAllVarieties();
145:       const sortedVarieties = allVarieties.sort((a, b) => {
146:         if (a.isCustom !== b.isCustom) {
147:           return a.isCustom ? 1 : -1;
148:         }
149:         return a.name.localeCompare(b.name);
150:       });
151:       setVarieties(sortedVarieties);
152:     } catch (error) {
153:       console.error("Failed to load varieties:", error);
154:       setSubmitError(
155:         "Failed to load plant varieties. Please refresh the page."
156:       );
157:     }
158:   }
159: 
160:   async function onSubmit(data: PlantFormData) {
161:     setIsLoading(true);
162:     setSubmitError(null);
163: 
164:     try {
165:       const selectedVariety = varieties.find((v) => v.id === data.varietyId);
166:       const varietyName = selectedVariety?.name || "Unknown Variety";
167: 
168:       const locationString = data.location ? "Outdoor" : "Indoor";
169: 
170: 
171:       let containerDescription = "";
172:       const containerConfig =
173:         containerOptions[data.containerType as keyof typeof containerOptions];
174: 
175:       if (data.containerSize === "custom") {
176: 
177:         if (data.customBagShape === "circular") {
178:           containerDescription = `${containerConfig.label} - ${data.customDiameter}"⌀ x ${data.customBagHeight}"H (Circular)`;
179:         } else if (data.customBagShape === "rectangular") {
180:           containerDescription = `${containerConfig.label} - ${data.customBagWidth}"W x ${data.customBagLength}"L x ${data.customBagHeight}"H (Rectangular)`;
181:         }
182:       } else if (data.containerSize === "custom-dimensions") {
183: 
184:         containerDescription = `${containerConfig.label} - ${data.customWidth}"W x ${data.customLength}"L x ${data.customDepth}"D`;
185:       } else {
186: 
187:         const sizeConfig = containerConfig.sizes.find(
188:           (size) => size.value === data.containerSize
189:         );
190:         containerDescription = `${containerConfig.label} - ${sizeConfig?.label}`;
191:       }
192: 
193:       await plantService.addPlant({
194:         varietyId: data.varietyId,
195:         varietyName,
196:         name: data.name?.trim() || undefined,
197:         plantedDate: new Date(data.plantedDate),
198:         currentStage: "germination",
199:         location: locationString,
200:         container: containerDescription,
201:         soilMix: data.soilMix || undefined,
202:         isActive: true,
203:         notes: data.notes ? [data.notes] : [],
204:         reminderPreferences,
205:       });
206: 
207:       toast.success(`${data.name || varietyName} registered successfully! 🌱`);
208: 
209:       reset();
210:       onSuccess?.();
211:     } catch (error) {
212:       console.error("Failed to register plant:", error);
213:       setSubmitError("Failed to register plant. Please try again.");
214:       toast.error("Failed to register plant. Please try again.");
215:     } finally {
216:       setIsLoading(false);
217:     }
218:   }
219: 
220:   function renderFormField(
221:     id: keyof PlantFormData,
222:     label: string,
223:     type: "text" | "date" | "select" | "textarea" = "text",
224:     placeholder?: string,
225:     required: boolean = false
226:   ) {
227:     const error = (errors as FormErrors)[id];
228: 
229:     return (
230:       <div>
231:         <label
232:           htmlFor={id}
233:           className="block text-sm font-medium text-gray-700 mb-2"
234:         >
235:           {label} {required && "*"}
236:         </label>
237: 
238:         {type === "select" && id === "varietyId" ? (
239:           <div className="space-y-2">
240:             <select
241:               id={id}
242:               {...register(id)}
243:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
244:             >
245:               <option value="">Select a variety...</option>
246: 
247:               {varieties.filter((v) => !v.isCustom).length > 0 && (
248:                 <optgroup label="Built-in Varieties">
249:                   {varieties
250:                     .filter((variety) => !variety.isCustom)
251:                     .map((variety) => (
252:                       <option key={variety.id} value={variety.id}>
253:                         {variety.name} ({variety.category})
254:                       </option>
255:                     ))}
256:                 </optgroup>
257:               )}
258: 
259:               {varieties.filter((v) => v.isCustom).length > 0 && (
260:                 <optgroup label="Your Custom Varieties">
261:                   {varieties
262:                     .filter((variety) => variety.isCustom)
263:                     .map((variety) => (
264:                       <option key={variety.id} value={variety.id}>
265:                         🌱 {variety.name} ({variety.category})
266:                       </option>
267:                     ))}
268:                 </optgroup>
269:               )}
270:             </select>
271: 
272:             <Button
273:               type="button"
274:               variant="primary"
275:               onClick={() => setShowCustomVarietyForm(true)}
276:               className="w-full"
277:             >
278:               ➕ Create Custom Variety
279:             </Button>
280:           </div>
281:         ) : type === "textarea" ? (
282:           <textarea
283:             id={id}
284:             {...register(id)}
285:             placeholder={placeholder}
286:             rows={3}
287:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
288:           />
289:         ) : (
290:           <input
291:             id={id}
292:             type={type}
293:             {...register(id)}
294:             placeholder={placeholder}
295:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
296:           />
297:         )}
298: 
299:         {error?.message && (
300:           <p className="mt-1 text-sm text-red-600">{error.message}</p>
301:         )}
302:       </div>
303:     );
304:   }
305: 
306:   function renderContainerFields() {
307:     const selectedBagShape = watch("customBagShape");
308: 
309:     return (
310:       <div className="space-y-4">
311:         {}
312:         <div>
313:           <label className="block text-sm font-medium text-gray-700 mb-3">
314:             Container Type *
315:           </label>
316:           <div className="grid grid-cols-2 gap-3">
317:             {Object.entries(containerOptions).map(([key, option]) => (
318:               <label
319:                 key={key}
320:                 className={`relative flex items-center p-4 border-2 rounded-lg cursor-pointer transition-all active:scale-95 ${
321:                   selectedContainerType === key
322:                     ? "border-emerald-500 bg-emerald-50"
323:                     : "border-gray-200 active:border-gray-400"
324:                 }`}
325:               >
326:                 <input
327:                   type="radio"
328:                   value={key}
329:                   {...register("containerType")}
330:                   className="sr-only"
331:                 />
332:                 <span className="text-2xl mr-3">{option.icon}</span>
333:                 <span className="font-medium text-card-foreground text-sm">
334:                   {option.label}
335:                 </span>
336:                 {selectedContainerType === key && (
337:                   <span className="absolute top-2 right-2 text-emerald-500">
338:                     ✓
339:                   </span>
340:                 )}
341:               </label>
342:             ))}
343:           </div>
344:           {errors.containerType && (
345:             <p className="mt-1 text-sm text-red-600">
346:               {errors.containerType.message}
347:             </p>
348:           )}
349:         </div>
350: 
351:         {}
352:         {selectedContainerType && (
353:           <div>
354:             <label className="block text-sm font-medium text-gray-700 mb-3">
355:               {
356:                 containerOptions[
357:                   selectedContainerType as keyof typeof containerOptions
358:                 ].label
359:               }{" "}
360:               Size *
361:             </label>
362:             <div className="grid grid-cols-2 gap-3">
363:               {containerOptions[
364:                 selectedContainerType as keyof typeof containerOptions
365:               ].sizes.map((size) => (
366:                 <label
367:                   key={size.value}
368:                   className={`relative flex items-center p-3 border-2 rounded-lg cursor-pointer transition-all active:scale-95 ${
369:                     selectedContainerSize === size.value
370:                       ? "border-emerald-500 bg-emerald-50"
371:                       : "border-gray-200 active:border-gray-400"
372:                   }`}
373:                 >
374:                   <input
375:                     type="radio"
376:                     value={size.value}
377:                     {...register("containerSize")}
378:                     className="sr-only"
379:                   />
380:                   <span className="font-medium text-card-foreground text-sm">
381:                     {size.label}
382:                   </span>
383:                   {selectedContainerSize === size.value && (
384:                     <span className="absolute top-2 right-2 text-emerald-500">
385:                       ✓
386:                     </span>
387:                   )}
388:                 </label>
389:               ))}
390:             </div>
391:             {errors.containerSize && (
392:               <p className="mt-1 text-sm text-red-600">
393:                 {errors.containerSize.message}
394:               </p>
395:             )}
396:           </div>
397:         )}
398: 
399:         {}
400:         {selectedContainerType === "grow-bag" &&
401:           selectedContainerSize === "custom" && (
402:             <div className="p-4 bg-blue-50 border border-blue-200 rounded-md space-y-4">
403:               <div>
404:                 <label className="block text-sm font-medium text-gray-700 mb-3">
405:                   Grow Bag Shape *
406:                 </label>
407:                 <div className="grid grid-cols-2 gap-3">
408:                   <label
409:                     className={`relative flex flex-col items-center p-3 border-2 rounded-lg cursor-pointer transition-all active:scale-95 ${
410:                       selectedBagShape === "circular"
411:                         ? "border-blue-500 bg-blue-100"
412:                         : "border-gray-200 active:border-gray-400"
413:                     }`}
414:                   >
415:                     <input
416:                       type="radio"
417:                       value="circular"
418:                       {...register("customBagShape")}
419:                       className="sr-only"
420:                     />
421:                     <span className="text-3xl mb-1">⭕</span>
422:                     <span className="font-medium text-card-foreground text-sm">
423:                       Circle
424:                     </span>
425:                     {selectedBagShape === "circular" && (
426:                       <span className="absolute top-2 right-2 text-blue-500">
427:                         ✓
428:                       </span>
429:                     )}
430:                   </label>
431: 
432:                   <label
433:                     className={`relative flex flex-col items-center p-3 border-2 rounded-lg cursor-pointer transition-all active:scale-95 ${
434:                       selectedBagShape === "rectangular"
435:                         ? "border-blue-500 bg-blue-100"
436:                         : "border-gray-200 active:border-gray-400"
437:                     }`}
438:                   >
439:                     <input
440:                       type="radio"
441:                       value="rectangular"
442:                       {...register("customBagShape")}
443:                       className="sr-only"
444:                     />
445:                     <span className="text-3xl mb-1">⬜</span>
446:                     <span className="font-medium text-card-foreground text-sm">
447:                       Rectangle
448:                     </span>
449:                     {selectedBagShape === "rectangular" && (
450:                       <span className="absolute top-2 right-2 text-blue-500">
451:                         ✓
452:                       </span>
453:                     )}
454:                   </label>
455:                 </div>
456:                 {errors.customBagShape && (
457:                   <p className="mt-1 text-sm text-red-600">
458:                     {errors.customBagShape.message}
459:                   </p>
460:                 )}
461:               </div>
462: 
463:               {}
464:               {selectedBagShape === "circular" && (
465:                 <div>
466:                   <label className="block text-sm font-medium text-gray-700 mb-3">
467:                     Circular Grow Bag Dimensions (inches) *
468:                   </label>
469:                   <div className="grid grid-cols-2 gap-3">
470:                     <div>
471:                       <label
472:                         htmlFor="customDiameter"
473:                         className="block text-xs font-medium text-gray-600 mb-1"
474:                       >
475:                         Diameter
476:                       </label>
477:                       <input
478:                         id="customDiameter"
479:                         type="number"
480:                         step="0.5"
481:                         min="1"
482:                         {...register("customDiameter")}
483:                         placeholder="24"
484:                         className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center"
485:                       />
486:                       {errors.customDiameter && (
487:                         <p className="mt-1 text-xs text-red-600">
488:                           {errors.customDiameter.message}
489:                         </p>
490:                       )}
491:                     </div>
492: 
493:                     <div>
494:                       <label
495:                         htmlFor="customBagHeight"
496:                         className="block text-xs font-medium text-gray-600 mb-1"
497:                       >
498:                         Height
499:                       </label>
500:                       <input
501:                         id="customBagHeight"
502:                         type="number"
503:                         step="0.5"
504:                         min="1"
505:                         {...register("customBagHeight")}
506:                         placeholder="18"
507:                         className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center"
508:                       />
509:                       {errors.customBagHeight && (
510:                         <p className="mt-1 text-xs text-red-600">
511:                           {errors.customBagHeight.message}
512:                         </p>
513:                       )}
514:                     </div>
515:                   </div>
516:                   <p className="mt-2 text-xs text-gray-500">
517:                     Example: 24" diameter × 18" height
518:                   </p>
519:                 </div>
520:               )}
521: 
522:               {}
523:               {selectedBagShape === "rectangular" && (
524:                 <div>
525:                   <label className="block text-sm font-medium text-gray-700 mb-3">
526:                     Rectangular Grow Bag Dimensions (inches) *
527:                   </label>
528:                   <div className="grid grid-cols-3 gap-3">
529:                     <div>
530:                       <label
531:                         htmlFor="customBagWidth"
532:                         className="block text-xs font-medium text-gray-600 mb-1"
533:                       >
534:                         Width
535:                       </label>
536:                       <input
537:                         id="customBagWidth"
538:                         type="number"
539:                         step="0.5"
540:                         min="1"
541:                         {...register("customBagWidth")}
542:                         placeholder="24"
543:                         className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center"
544:                       />
545:                       {errors.customBagWidth && (
546:                         <p className="mt-1 text-xs text-red-600">
547:                           {errors.customBagWidth.message}
548:                         </p>
549:                       )}
550:                     </div>
551: 
552:                     <div>
553:                       <label
554:                         htmlFor="customBagLength"
555:                         className="block text-xs font-medium text-gray-600 mb-1"
556:                       >
557:                         Length
558:                       </label>
559:                       <input
560:                         id="customBagLength"
561:                         type="number"
562:                         step="0.5"
563:                         min="1"
564:                         {...register("customBagLength")}
565:                         placeholder="48"
566:                         className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center"
567:                       />
568:                       {errors.customBagLength && (
569:                         <p className="mt-1 text-xs text-red-600">
570:                           {errors.customBagLength.message}
571:                         </p>
572:                       )}
573:                     </div>
574: 
575:                     <div>
576:                       <label
577:                         htmlFor="customBagHeight"
578:                         className="block text-xs font-medium text-gray-600 mb-1"
579:                       >
580:                         Height
581:                       </label>
582:                       <input
583:                         id="customBagHeight"
584:                         type="number"
585:                         step="0.5"
586:                         min="1"
587:                         {...register("customBagHeight")}
588:                         placeholder="18"
589:                         className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center"
590:                       />
591:                       {errors.customBagHeight && (
592:                         <p className="mt-1 text-xs text-red-600">
593:                           {errors.customBagHeight.message}
594:                         </p>
595:                       )}
596:                     </div>
597:                   </div>
598:                   <p className="mt-2 text-xs text-gray-500">
599:                     Example: 24" wide × 48" long × 18" height
600:                   </p>
601:                 </div>
602:               )}
603:             </div>
604:           )}
605: 
606:         {}
607:         {selectedContainerType === "raised-bed" &&
608:           selectedContainerSize === "custom-dimensions" && (
609:             <div className="p-4 bg-green-50 border border-green-200 rounded-md">
610:               <label className="block text-sm font-medium text-gray-700 mb-3">
611:                 Raised Bed Dimensions (inches) *
612:               </label>
613:               <div className="grid grid-cols-3 gap-3">
614:                 <div>
615:                   <label
616:                     htmlFor="customWidth"
617:                     className="block text-xs font-medium text-gray-600 mb-1"
618:                   >
619:                     Width
620:                   </label>
621:                   <input
622:                     id="customWidth"
623:                     type="number"
624:                     step="0.5"
625:                     min="1"
626:                     {...register("customWidth")}
627:                     placeholder="48"
628:                     className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent text-center"
629:                   />
630:                   {errors.customWidth && (
631:                     <p className="mt-1 text-xs text-red-600">
632:                       {errors.customWidth.message}
633:                     </p>
634:                   )}
635:                 </div>
636: 
637:                 <div>
638:                   <label
639:                     htmlFor="customLength"
640:                     className="block text-xs font-medium text-gray-600 mb-1"
641:                   >
642:                     Length
643:                   </label>
644:                   <input
645:                     id="customLength"
646:                     type="number"
647:                     step="0.5"
648:                     min="1"
649:                     {...register("customLength")}
650:                     placeholder="96"
651:                     className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent text-center"
652:                   />
653:                   {errors.customLength && (
654:                     <p className="mt-1 text-xs text-red-600">
655:                       {errors.customLength.message}
656:                     </p>
657:                   )}
658:                 </div>
659: 
660:                 <div>
661:                   <label
662:                     htmlFor="customDepth"
663:                     className="block text-xs font-medium text-gray-600 mb-1"
664:                   >
665:                     Soil Depth
666:                   </label>
667:                   <input
668:                     id="customDepth"
669:                     type="number"
670:                     step="0.5"
671:                     min="1"
672:                     {...register("customDepth")}
673:                     placeholder="12"
674:                     className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent text-center"
675:                   />
676:                   {errors.customDepth && (
677:                     <p className="mt-1 text-xs text-red-600">
678:                       {errors.customDepth.message}
679:                     </p>
680:                   )}
681:                 </div>
682:               </div>
683:               <p className="mt-2 text-xs text-gray-500">
684:                 Example: 48" wide × 96" long × 12" deep
685:               </p>
686:             </div>
687:           )}
688:       </div>
689:     );
690:   }
691: 
692:   return (
693:     <>
694:       <Card className="max-w-2xl mx-auto">
695:         <CardHeader>
696:           <CardTitle>Register New Plant</CardTitle>
697:         </CardHeader>
698:         <CardContent>
699:           <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
700:             {submitError && (
701:               <div className="p-4 bg-red-50 border border-red-200 rounded-md">
702:                 <p className="text-sm text-red-600">{submitError}</p>
703:               </div>
704:             )}
705:             {renderFormField(
706:               "varietyId",
707:               "Plant Variety",
708:               "select",
709:               undefined,
710:               true
711:             )}
712:             {renderFormField(
713:               "name",
714:               "Plant Name (Optional)",
715:               "text",
716:               "e.g., Tomato #1, Kitchen Basil"
717:             )}
718:             {renderFormField(
719:               "plantedDate",
720:               "Planting Date",
721:               "date",
722:               undefined,
723:               true
724:             )}
725:             <div>
726:               <label
727:                 id="location-label"
728:                 className="block text-sm font-medium text-gray-700 mb-3"
729:               >
730:                 Location *
731:               </label>
732:               <Switch
733:                 id="location"
734:                 checked={watch("location") || false}
735:                 onCheckedChange={(checked) => setValue("location", checked)}
736:                 leftLabel="Indoor"
737:                 rightLabel="Outdoor"
738:                 leftIcon={<span className="text-lg">🏠</span>}
739:                 rightIcon={<span className="text-lg">🌞</span>}
740:                 size="lg"
741:                 className="justify-center"
742:                 aria-labelledby="location-label"
743:               />
744:               {errors.location && (
745:                 <p className="mt-2 text-sm text-red-600">
746:                   Please select a location
747:                 </p>
748:               )}
749:             </div>
750: 
751:             {}
752:             {renderContainerFields()}
753:             <div>
754:               <label className="block text-sm font-medium text-gray-700 mb-2">
755:                 Soil Mix *
756:               </label>
757: 
758:               <Controller
759:                 name="soilMix"
760:                 control={control}
761:                 render={({ field }) => (
762:                   <SoilMixtureSelector
763:                     selectedMixture={field.value}
764:                     onMixtureChange={field.onChange}
765:                     plantCategory={
766:                       varieties.find((v) => v.id === watch("varietyId"))
767:                         ?.category
768:                     }
769:                   />
770:                 )}
771:               />
772:               {errors.soilMix?.message && (
773:                 <p className="mt-1 text-sm text-red-600">
774:                   {errors.soilMix.message}
775:                 </p>
776:               )}
777:             </div>
778: 
779:             <ReminderPreferencesSection
780:               preferences={reminderPreferences}
781:               onChange={setReminderPreferences}
782:             />
783:             {}
784:             <div>
785:               <label
786:                 htmlFor="notes"
787:                 className="block text-sm font-medium text-gray-700 mb-2"
788:               >
789:                 Notes (Optional)
790:               </label>
791:               <textarea
792:                 id="notes"
793:                 {...register("notes")}
794:                 placeholder="Any additional notes about this plant..."
795:                 rows={3}
796:                 className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
797:               />
798:               {errors.notes?.message && (
799:                 <p className="mt-1 text-sm text-red-600">
800:                   {errors.notes.message}
801:                 </p>
802:               )}
803:             </div>
804:             <div className="flex gap-4 pt-4">
805:               <Button
806:                 type="submit"
807:                 variant={isValid && !isSubmitting ? "primary" : "outline"}
808:                 disabled={isLoading || !isValid}
809:                 className={cn(
810:                   "flex-1 transition-all duration-300",
811:                   isValid && !isSubmitting && !isLoading
812:                     ? "shadow-lg shadow-emerald-500/25 hover:shadow-xl hover:shadow-emerald-500/30 transform hover:scale-[1.02]"
813:                     : "opacity-60 cursor-not-allowed shadow-sm"
814:                 )}
815:               >
816:                 {isLoading ? (
817:                   <div className="flex items-center gap-2">
818:                     <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
819:                     Registering...
820:                   </div>
821:                 ) : (
822:                   <div className="flex items-center gap-2">
823:                     {isValid ? (
824:                       <>
825:                         <span className="text-lg">🌱</span>
826:                         Register Plant
827:                       </>
828:                     ) : (
829:                       <>
830:                         <span className="text-gray-400">📝</span>
831:                         Complete Required Fields
832:                       </>
833:                     )}
834:                   </div>
835:                 )}
836:               </Button>
837: 
838:               {onCancel && (
839:                 <Button
840:                   type="button"
841:                   variant="outline"
842:                   onClick={onCancel}
843:                   disabled={isLoading}
844:                   className="flex-1"
845:                 >
846:                   Cancel
847:                 </Button>
848:               )}
849:             </div>
850:           </form>
851:         </CardContent>
852:       </Card>
853: 
854:       {}
855:       {showCustomVarietyForm && (
856:         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
857:           <div className="bg-white rounded-lg max-w-2xl w-full max-h-96 overflow-y-auto">
858:             <CustomVarietyForm
859:               onSuccess={async (varietyId) => {
860:                 setShowCustomVarietyForm(false);
861: 
862:                 await loadVarieties();
863:                 setValue("varietyId", varietyId);
864:               }}
865:               onCancel={() => setShowCustomVarietyForm(false)}
866:             />
867:           </div>
868:         </div>
869:       )}
870:     </>
871:   );
872: }

================
File: src/components/plant/PlantReminderSettings.tsx
================
  1: import { useState } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: import { plantService, PlantRecord } from "@/types/database";
  4: import ReminderPreferencesSection from "./ReminderPreferencesSection";
  5: import toast from "react-hot-toast";
  6: 
  7: interface PlantReminderSettingsProps {
  8:   plant: PlantRecord;
  9:   onUpdate: (updatedPlant: PlantRecord) => void;
 10: }
 11: 
 12: const PlantReminderSettings = ({
 13:   plant,
 14:   onUpdate,
 15: }: PlantReminderSettingsProps) => {
 16:   const [preferences, setPreferences] = useState(
 17:     plant.reminderPreferences || {
 18:       watering: true,
 19:       fertilizing: true,
 20:       observation: true,
 21:       lighting: true,
 22:       pruning: true,
 23:     }
 24:   );
 25:   const [isLoading, setIsLoading] = useState(false);
 26:   const [saveStatus, setSaveStatus] = useState<"idle" | "success" | "error">(
 27:     "idle"
 28:   );
 29: 
 30:   const handleSave = async () => {
 31:     try {
 32:       setIsLoading(true);
 33:       setSaveStatus("idle");
 34: 
 35:       await plantService.updatePlant(plant.id, {
 36:         reminderPreferences: preferences,
 37:         updatedAt: new Date(),
 38:       });
 39: 
 40:       const updatedPlant = {
 41:         ...plant,
 42:         reminderPreferences: preferences,
 43:       };
 44: 
 45:       onUpdate(updatedPlant);
 46:       setSaveStatus("success");
 47:       toast.success("Reminder preferences updated!");
 48: 
 49: 
 50:       setTimeout(() => setSaveStatus("idle"), 3000);
 51:     } catch (error) {
 52:       console.error("Failed to update reminder preferences:", error);
 53:       setSaveStatus("error");
 54:       toast.error("Failed to update preferences");
 55: 
 56: 
 57:       setTimeout(() => setSaveStatus("idle"), 5000);
 58:     } finally {
 59:       setIsLoading(false);
 60:     }
 61:   };
 62: 
 63: 
 64:   const hasChanges =
 65:     JSON.stringify(preferences) !==
 66:     JSON.stringify(
 67:       plant.reminderPreferences || {
 68:         watering: true,
 69:         fertilizing: true,
 70:         observation: true,
 71:         lighting: true,
 72:         pruning: true,
 73:       }
 74:     );
 75: 
 76:   const getButtonContent = () => {
 77:     if (isLoading) {
 78:       return (
 79:         <div className="flex items-center gap-2">
 80:           <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
 81:           Saving...
 82:         </div>
 83:       );
 84:     }
 85: 
 86:     if (saveStatus === "success") {
 87:       return (
 88:         <div className="flex items-center gap-2">
 89:           <span className="text-green-600">✓</span>
 90:           Saved Successfully!
 91:         </div>
 92:       );
 93:     }
 94: 
 95:     if (saveStatus === "error") {
 96:       return (
 97:         <div className="flex items-center gap-2">
 98:           <span className="text-red-600">✗</span>
 99:           Save Failed - Retry
100:         </div>
101:       );
102:     }
103: 
104:     return hasChanges ? "Save Changes" : "No Changes";
105:   };
106: 
107:   const getButtonVariant = () => {
108:     if (saveStatus === "success") return "outline";
109:     if (saveStatus === "error") return "destructive";
110:     return hasChanges ? "primary" : "outline";
111:   };
112: 
113:   return (
114:     <div className="space-y-6">
115:       <ReminderPreferencesSection
116:         preferences={preferences}
117:         onChange={setPreferences}
118:       />
119: 
120:       {}
121:       {saveStatus !== "idle" && (
122:         <div
123:           className={`p-3 rounded-lg text-sm font-medium ${
124:             saveStatus === "success"
125:               ? "bg-green-50 text-green-800 border border-green-200"
126:               : "bg-red-50 text-red-800 border border-red-200"
127:           }`}
128:         >
129:           {saveStatus === "success" && (
130:             <div className="flex items-center gap-2">
131:               <span className="text-green-600">✓</span>
132:               Your reminder preferences have been updated successfully!
133:             </div>
134:           )}
135:           {saveStatus === "error" && (
136:             <div className="flex items-center gap-2">
137:               <span className="text-red-600">⚠️</span>
138:               Failed to save your preferences. Please try again.
139:             </div>
140:           )}
141:         </div>
142:       )}
143: 
144:       <div className="flex justify-end">
145:         <Button
146:           onClick={handleSave}
147:           disabled={isLoading || !hasChanges}
148:           variant={getButtonVariant()}
149: 
150: 
151: 
152: 
153: 
154: 
155: 
156: 
157: 
158:         >
159:           {getButtonContent()}
160:         </Button>
161:       </div>
162: 
163:       {}
164:       {hasChanges && saveStatus === "idle" && (
165:         <div className="text-xs text-amber-600 bg-amber-50 border border-amber-200 rounded p-2 text-center">
166:           <span className="mr-1">⚠️</span>
167:           You have unsaved changes
168:         </div>
169:       )}
170:     </div>
171:   );
172: };
173: 
174: export default PlantReminderSettings;

================
File: .gitignore
================
 1: # Logs
 2: logs
 3: *.log
 4: npm-debug.log*
 5: yarn-debug.log*
 6: yarn-error.log*
 7: pnpm-debug.log*
 8: lerna-debug.log*
 9: 
10: # Cache directories
11: .cache/
12: .parcel-cache/
13: 
14: node_modules
15: dist
16: dist-ssr
17: *.local
18: 
19: # Editor directories and files
20: .vscode/*
21: !.vscode/extensions.json
22: .idea
23: .DS_Store
24: *.suo
25: *.ntvs*
26: *.njsproj
27: *.sln
28: *.sw?
29: # Testing
30: coverage/.DS_Store
31: .DS_Store?
32: **/.DS_Store
33: # macOS
34: .DS_Store
35: .DS_Store?
36: ._*
37: .Spotlight-V100
38: .Trashes
39: ehthumbs.db
40: Thumbs.db
41: 
42: # IDE
43: .vscode/
44: .idea/
45: 
46: # Environment
47: .env.local
48: .env.development.local
49: .env.test.local
50: .env.production.local
51: 
52: # Temporary files
53: *.tmp
54: *.temp

================
File: jest.config.ts
================
 1: import type { Config } from "jest";
 2: 
 3: const config: Config = {
 4:   preset: "ts-jest",
 5:   testEnvironment: "jsdom",
 6:   setupFilesAfterEnv: ["<rootDir>/src/setupTests.ts"],
 7:   moduleNameMapper: {
 8:     "^@/(.*)$": "<rootDir>/src/$1",
 9:     "^@/components/(.*)$": "<rootDir>/src/components/$1",
10:     "^@/pages/(.*)$": "<rootDir>/src/pages/$1",
11:     "^@/hooks/(.*)$": "<rootDir>/src/hooks/$1",
12:     "^@/services/(.*)$": "<rootDir>/src/services/$1",
13:     "^@/types/(.*)$": "<rootDir>/src/types/$1",
14:     "^@/utils/(.*)$": "<rootDir>/src/utils/$1",
15:     "^@/data/(.*)$": "<rootDir>/src/data/$1",
16:     "^@/db/(.*)$": "<rootDir>/src/db/$1",
17:   },
18:   collectCoverageFrom: [
19:     "src/**/*.{ts,tsx}",
20:     "!src/**/*.d.ts",
21:     "!src/main.tsx",
22:     "!src/vite-env.d.ts",
23:     "!src/setupTests.ts",
24:   ],
25:   coverageThreshold: {
26:     global: {
27:       branches: 70,
28:       functions: 70,
29:       lines: 70,
30:       statements: 70,
31:     },
32:   },
33:   testMatch: [
34:     "<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}",
35:     "<rootDir>/src/**/*.(test|spec).{js,jsx,ts,tsx}",
36:   ],
37:   transform: {
38:     "^.+\\.(ts|tsx)$": "ts-jest",
39:   },
40:   moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json"],
41: };
42: 
43: export default config;

================
File: package.json
================
 1: {
 2:   "name": "smartgarden-app",
 3:   "private": true,
 4:   "version": "0.0.0",
 5:   "type": "module",
 6:   "scripts": {
 7:     "dev": "vite",
 8:     "dev:watch": "concurrently \"npm run dev\" \"npm run test:watch\"",
 9:     "build": "tsc -b && vite build",
10:     "lint": "eslint .",
11:     "preview": "vite preview",
12:     "test": "jest",
13:     "test:watch": "jest --watchAll",
14:     "test:coverage": "jest --coverage",
15:     "test:ci": "jest --ci --coverage --watchAll=false --passWithNoTests",
16:     "test:e2e": "playwright test",
17:     "test:e2e:ui": "playwright test --ui",
18:     "test:lighthouse": "node scripts/lighthouse-ci.js",
19:     "test:all": "npm run test:ci && npm run test:e2e && npm run test:lighthouse"
20:   },
21:   "dependencies": {
22:     "@hookform/resolvers": "^5.1.1",
23:     "@radix-ui/react-dialog": "^1.1.14",
24:     "@radix-ui/react-slot": "^1.2.3",
25:     "@radix-ui/react-tabs": "^1.1.12",
26:     "@tanstack/react-query": "^5.80.7",
27:     "clsx": "^2.1.1",
28:     "date-fns": "^4.1.0",
29:     "dexie": "^4.0.11",
30:     "dexie-react-hooks": "^1.1.7",
31:     "react": "^19.1.0",
32:     "react-dom": "^19.1.0",
33:     "react-hook-form": "^7.57.0",
34:     "react-hot-toast": "^2.5.2",
35:     "react-router-dom": "^7.6.2",
36:     "tailwind-merge": "^3.3.1",
37:     "ts-node": "^10.9.2",
38:     "util": "^0.12.5",
39:     "uuid": "^11.1.0",
40:     "vite-plugin-pwa": "^1.0.0",
41:     "workbox-window": "^7.3.0",
42:     "zod": "^3.25.64"
43:   },
44:   "devDependencies": {
45:     "@eslint/js": "^9.25.0",
46:     "@playwright/test": "^1.53.0",
47:     "@testing-library/jest-dom": "^6.6.3",
48:     "@testing-library/react": "^16.3.0",
49:     "@testing-library/user-event": "^14.6.1",
50:     "@types/jest": "^29.5.14",
51:     "@types/react": "^19.1.2",
52:     "@types/react-dom": "^19.1.2",
53:     "@types/testing-library__jest-dom": "^5.14.9",
54:     "@types/uuid": "^10.0.0",
55:     "@vitejs/plugin-react": "^4.4.1",
56:     "autoprefixer": "^10.4.21",
57:     "concurrently": "^9.1.2",
58:     "eslint": "^9.25.0",
59:     "eslint-plugin-react-hooks": "^5.2.0",
60:     "eslint-plugin-react-refresh": "^0.4.19",
61:     "fake-indexeddb": "^6.0.1",
62:     "globals": "^16.0.0",
63:     "identity-obj-proxy": "^3.0.0",
64:     "jest": "^29.7.0",
65:     "jest-axe": "^10.0.0",
66:     "jest-environment-jsdom": "^29.7.0",
67:     "postcss": "^8.5.5",
68:     "tailwindcss": "^3.4.17",
69:     "ts-jest": "^29.4.0",
70:     "typescript": "~5.8.3",
71:     "typescript-eslint": "^8.30.1",
72:     "vite": "^6.3.5"
73:   }
74: }

================
File: tsconfig.json
================
 1: {
 2:   "compilerOptions": {
 3:     "target": "ES2020",
 4:     "useDefineForClassFields": true,
 5:     "lib": ["ES2020", "DOM", "DOM.Iterable"],
 6:     "module": "ESNext",
 7:     "skipLibCheck": true,
 8:     "moduleResolution": "bundler",
 9:     "allowImportingTsExtensions": true,
10:     "resolveJsonModule": true,
11:     "isolatedModules": true,
12:     "noEmit": true,
13:     "jsx": "react-jsx",
14:     "strict": true,
15:     "noUnusedLocals": true,
16:     "noUnusedParameters": true,
17:     "noFallthroughCasesInSwitch": true,
18:     "baseUrl": ".",
19:     "paths": {
20:       "@/*": ["./src/*"],
21:       "@/components/*": ["./src/components/*"],
22:       "@/pages/*": ["./src/pages/*"],
23:       "@/hooks/*": ["./src/hooks/*"],
24:       "@/services/*": ["./src/services/*"],
25:       "@/types/*": ["./src/types/*"],
26:       "@/utils/*": ["./src/utils/*"]
27:     },
28:     "types": ["node", "jest", "@testing-library/jest-dom"]
29:   },
30:   "include": ["src", "vite.config.ts"],
31:   "setupFilesAfterEnv": ["<rootDir>/support/setupTests.js"]
32: }

================
File: src/db/seedData.ts
================
 1: import { varietyService } from "@/types/database";
 2: import { seedVarieties } from "../data/seedVarieties";
 3: 
 4: 
 5: let isInitializing = false;
 6: 
 7: export async function initializeDatabase() {
 8: 
 9:   if (isInitializing) {
10:     console.log("Database initialization already in progress, skipping...");
11:     return;
12:   }
13: 
14:   try {
15:     isInitializing = true;
16: 
17: 
18:     const existingVarieties = await varietyService.getAllVarieties();
19: 
20: 
21:     const existingNames = new Set(existingVarieties.map((v) => v.name.trim()));
22: 
23: 
24: 
25: 
26:     const varietiesToAdd = seedVarieties.filter(
27:       (variety) => !existingNames.has(variety.name.trim())
28:     );
29: 
30:     if (varietiesToAdd.length > 0) {
31:       console.log(
32:         `Adding ${varietiesToAdd.length} new varieties:`,
33:         varietiesToAdd.map((v) => v.name)
34:       );
35: 
36:       for (const variety of varietiesToAdd) {
37: 
38:         const existing = await varietyService.getVarietyByName(
39:           variety.name.trim()
40:         );
41:         if (existing) {
42:           console.log(`Variety "${variety.name}" already exists, skipping...`);
43:           continue;
44:         }
45: 
46:         await varietyService.addVariety({
47:           name: variety.name.trim(),
48:           category: variety.category,
49:           growthTimeline: variety.growthTimeline,
50:           protocols: variety.protocols || {},
51:           isEverbearing: variety.isEverbearing,
52:           productiveLifespan: variety.productiveLifespan,
53:         });
54: 
55:         console.log(`Added variety: ${variety.name}`);
56:       }
57: 
58:       console.log(
59:         `✅ Successfully added ${varietiesToAdd.length} new varieties`
60:       );
61:     } else {
62:       console.log("✅ All seed varieties already exist in database");
63:     }
64: 
65: 
66:     const finalVarieties = await varietyService.getAllVarieties();
67:     const finalNames = finalVarieties.map((v) => v.name);
68:     const uniqueFinalNames = new Set(finalNames);
69: 
70:     if (finalNames.length !== uniqueFinalNames.size) {
71:       console.error("🚨 Duplicates detected after initialization!");
72:       const duplicates = finalNames.filter(
73:         (name, index) => finalNames.indexOf(name) !== index
74:       );
75:       console.error("Duplicate names:", [...new Set(duplicates)]);
76:     }
77:   } catch (error) {
78:     console.error("Failed to initialize database:", error);
79:   } finally {
80:     isInitializing = false;
81:   }
82: }

================
File: src/pages/plants/PlantDetail.tsx
================
  1: import React, { useState, useEffect } from "react";
  2: import { useParams, useNavigate, Link } from "react-router-dom";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { Button } from "@/components/ui/Button";
  5: import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
  6: import {
  7:   plantService,
  8:   careService,
  9:   varietyService,
 10:   PlantRecord,
 11:   CareRecord,
 12:   VarietyRecord,
 13: } from "@/types/database";
 14: import PlantStageDisplay from "@/components/plant/PlantStageDisplay";
 15: import NextTaskDisplay from "@/components/plant/NextTaskDisplay";
 16: import CareHistory from "@/components/plant/CareHistory";
 17: import PlantReminderSettings from "@/components/plant/PlantReminderSettings";
 18: import { formatDate, getDaysSincePlanting } from "@/utils/dateUtils";
 19: import { getPlantDisplayName } from "@/utils/plantDisplay";
 20: 
 21: const PlantDetail: React.FC = () => {
 22:   const { plantId } = useParams<{ plantId: string }>();
 23:   const navigate = useNavigate();
 24: 
 25:   const [plant, setPlant] = useState<PlantRecord | null>(null);
 26:   const [variety, setVariety] = useState<VarietyRecord | null>(null);
 27:   const [careHistory, setCareHistory] = useState<CareRecord[]>([]);
 28:   const [isLoading, setIsLoading] = useState(true);
 29:   const [error, setError] = useState<string | null>(null);
 30:   const [showReminderSettings, setShowReminderSettings] = useState(false);
 31: 
 32:   useEffect(() => {
 33:     if (!plantId) {
 34:       setError("No plant ID provided");
 35:       setIsLoading(false);
 36:       return;
 37:     }
 38: 
 39:     async function loadPlantDetails() {
 40:       try {
 41:         setIsLoading(true);
 42:         setError(null);
 43: 
 44:         const [plantData, careHistoryData] = await Promise.all([
 45:           plantService.getPlant(plantId as string),
 46:           careService.getPlantCareHistory(plantId as string),
 47:         ]);
 48: 
 49:         if (!plantData) {
 50:           setError("Plant not found");
 51:           return;
 52:         }
 53: 
 54:         setPlant(plantData);
 55:         setCareHistory(careHistoryData);
 56: 
 57:         if (plantData.varietyId) {
 58:           const varietyData = await varietyService.getVariety(
 59:             plantData.varietyId
 60:           );
 61:           setVariety(varietyData || null);
 62:         }
 63:       } catch (error) {
 64:         console.error("Failed to load plant details:", error);
 65:         setError("Failed to load plant details");
 66:       } finally {
 67:         setIsLoading(false);
 68:       }
 69:     }
 70: 
 71:     loadPlantDetails();
 72:   }, [plantId]);
 73: 
 74:   const handlePlantUpdate = (updatedPlant: PlantRecord) => {
 75:     setPlant(updatedPlant);
 76:   };
 77: 
 78:   const handleLogCare = (activityType?: string) => {
 79:     const params = new URLSearchParams();
 80:     if (plantId) params.set("plantId", plantId);
 81:     if (activityType) params.set("type", activityType);
 82: 
 83:     navigate(`/log-care?${params.toString()}`);
 84:   };
 85: 
 86:   if (isLoading) {
 87:     return (
 88:       <div className="min-h-screen flex items-center justify-center">
 89:         <LoadingSpinner />
 90:       </div>
 91:     );
 92:   }
 93: 
 94:   if (error || !plant) {
 95:     return (
 96:       <div className="min-h-screen flex flex-col items-center justify-center p-4">
 97:         <div className="text-center max-w-md">
 98:           <span className="text-6xl mb-4 block">🌱</span>
 99:           <h2 className="text-xl font-semibold text-gray-900 mb-2">
100:             {error || "Plant not found"}
101:           </h2>
102:           <p className="text-gray-600 mb-4">
103:             We couldn't load the details for this plant.
104:           </p>
105:           <Button onClick={() => navigate(-1)} variant="outline">
106:             Go Back
107:           </Button>
108:         </div>
109:       </div>
110:     );
111:   }
112: 
113:   return (
114:     <div className="min-h-screen bg-gray-50">
115:       {}
116:       <div className="bg-card border-b border-border">
117:         <div className="p-4">
118:           <div className="flex items-center justify-between mb-4">
119:             <Button
120:               variant="outline"
121:               onClick={() => navigate(-1)}
122:               className="flex items-center gap-2"
123:             >
124:               <span>←</span>
125:               Back
126:             </Button>
127:             <Button
128:               variant="outline"
129:               onClick={() => setShowReminderSettings(!showReminderSettings)}
130:               className="flex items-center gap-2"
131:             >
132:               <span>⚙️</span>
133:               {showReminderSettings ? "Hide" : "Settings"}
134:             </Button>
135:           </div>
136: 
137:           <h1 className="text-2xl font-bold text-foreground mb-2">
138:             {getPlantDisplayName(plant)}
139:           </h1>
140: 
141:           <div className="flex gap-3">
142:             {}
143:             <Button
144:               onClick={() => handleLogCare()}
145:               className="flex-1"
146:               variant="primary"
147:             >
148:               <span className="mr-2">💧</span>
149:               Log Care
150:             </Button>
151:             <Button variant="outline" className="flex-1">
152:               <span className="mr-2">📷</span>
153:               Add Photo
154:             </Button>
155:           </div>
156:         </div>
157:       </div>
158: 
159:       <div className="p-4 space-y-4 bg-background">
160:         {}
161:         {showReminderSettings && plant && (
162:           <Card className="border-blue-200 bg-blue-50/30">
163:             <CardHeader>
164:               <CardTitle className="text-lg flex items-center gap-2">
165:                 <span>🔔</span>
166:                 Notification Settings
167:               </CardTitle>
168:             </CardHeader>
169:             <CardContent>
170:               <PlantReminderSettings
171:                 plant={plant}
172:                 onUpdate={handlePlantUpdate}
173:               />
174:             </CardContent>
175:           </Card>
176:         )}
177: 
178:         {}
179:         <Card>
180:           <CardHeader>
181:             <CardTitle className="flex items-center gap-2">
182:               <span className="text-2xl">🌿</span>
183:               Plant Details
184:             </CardTitle>
185:           </CardHeader>
186:           <CardContent className="space-y-4">
187:             {}
188:             <div>
189:               <span className="font-medium text-muted-foreground">
190:                 Next Task:
191:               </span>
192:               <div className="mt-1">
193:                 <NextTaskDisplay
194:                   plantId={plantId!}
195:                   className="text-base"
196:                   onClick={(taskType) => handleLogCare(taskType)}
197:                 />
198:               </div>
199:             </div>
200:             {}
201:             <div className="grid grid-cols-2 gap-4 text-sm">
202:               <div>
203:                 <span className="font-medium text-muted-foreground">
204:                   Variety:
205:                 </span>
206:                 <div className="text-card-foreground">
207:                   {variety?.name || "Unknown"}
208:                 </div>
209:               </div>
210:               <div>
211:                 <span className="font-medium text-muted-foreground">
212:                   Location:
213:                 </span>
214:                 <div className="text-card-foreground">
215:                   {plant.location ? "Outdoor" : "Indoor"}
216:                 </div>{" "}
217:               </div>
218:               <div>
219:                 <span className="font-medium text-gray-600">Container:</span>
220:                 <div className="text-card-foreground">📦 {plant.container}</div>
221:               </div>
222:               <div>
223:                 <span className="font-medium text-muted-foreground">
224:                   Planted:
225:                 </span>
226:                 <div className="text-card-foreground">
227:                   📅 {formatDate(plant.plantedDate)} (
228:                   {getDaysSincePlanting(plant.plantedDate)} days ago)
229:                 </div>
230:               </div>
231:             </div>
232: 
233:             {}
234:             {plant.soilMix && (
235:               <div>
236:                 <span className="font-medium text-gray-600">Soil Mix:</span>
237:                 <div className="text-card-foreground">🌱 {plant.soilMix}</div>
238:               </div>
239:             )}
240: 
241:             {}
242:             {variety && variety.category && (
243:               <div>
244:                 <span className="font-medium text-gray-600">Category:</span>
245:                 <div className="text-card-foreground capitalize">
246:                   {variety.category.replace("-", " ")}
247:                 </div>
248:               </div>
249:             )}
250: 
251:             {}
252:             <div>
253:               <span className="font-medium text-gray-600">Growth Stage:</span>
254:               <div className="mt-1">
255:                 <PlantStageDisplay
256:                   plant={plant}
257:                   showEmoji={true}
258:                   className="text-base"
259:                 />
260:               </div>
261:             </div>
262: 
263:             {}
264:             {variety && variety.growthTimeline && (
265:               <div>
266:                 <span className="font-medium text-gray-600">
267:                   Expected Timeline:
268:                 </span>
269:                 <div className="text-gray-900 text-sm mt-1 grid grid-cols-2 gap-2">
270:                   <div>
271:                     Germination: {variety.growthTimeline.germination} days
272:                   </div>
273:                   <div>Seedling: {variety.growthTimeline.seedling} days</div>
274:                   <div>
275:                     Vegetative: {variety.growthTimeline.vegetative} days
276:                   </div>
277:                   <div>
278:                     Maturation: {variety.growthTimeline.maturation} days
279:                   </div>
280:                 </div>
281:               </div>
282:             )}
283: 
284:             {}
285:             {plant.reminderPreferences && (
286:               <div>
287:                 <span className="font-medium text-gray-600">
288:                   Active Reminders:
289:                 </span>
290:                 <div className="text-gray-900 text-sm mt-1 flex flex-wrap justify-center gap-2">
291:                   {Object.entries(plant.reminderPreferences)
292:                     .filter(([, enabled]) => enabled)
293:                     .map(([type]) => (
294:                       <span
295:                         key={type}
296:                         className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-emerald-100 text-emerald-800 capitalize"
297:                       >
298:                         {type === "observation" ? "Health Checks" : type}
299:                       </span>
300:                     ))}
301:                   {Object.values(plant.reminderPreferences).every(
302:                     (enabled) => !enabled
303:                   ) && (
304:                     <span className="text-gray-500 text-xs">
305:                       All reminders disabled
306:                     </span>
307:                   )}
308:                 </div>
309:               </div>
310:             )}
311: 
312:             {}
313:             {plant.notes && plant.notes.length > 0 && (
314:               <div>
315:                 <span className="font-medium text-gray-600">Notes:</span>
316:                 <div className="text-gray-900 text-sm mt-1 space-y-1">
317:                   {plant.notes.map((note, index) => (
318:                     <div key={index} className="bg-gray-50 p-2 rounded">
319:                       📝 {note}
320:                     </div>
321:                   ))}
322:                 </div>
323:               </div>
324:             )}
325:           </CardContent>
326:         </Card>
327: 
328:         {}
329:         <CareHistory careHistory={careHistory} />
330:       </div>
331:     </div>
332:   );
333: };
334: 
335: export default PlantDetail;

================
File: src/pages/plants/Plants.tsx
================
  1: import React, { useState, useEffect } from "react";
  2: import { Card, CardContent } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { plantService, PlantRecord } from "@/types/database";
  5: import { Link } from "react-router-dom";
  6: import PlantStageDisplay from "@/components/plant/PlantStageDisplay";
  7: import NextTaskDisplay from "@/components/plant/NextTaskDisplay";
  8: import { formatDate, getDaysSincePlanting } from "@/utils/dateUtils";
  9: 
 10: const Plants: React.FC = () => {
 11:   const [plants, setPlants] = useState<PlantRecord[]>([]);
 12:   const [isLoading, setIsLoading] = useState(true);
 13: 
 14:   useEffect(() => {
 15:     loadPlants();
 16:   }, []);
 17: 
 18:   async function loadPlants() {
 19:     try {
 20:       const activePlants = await plantService.getActivePlants();
 21:       setPlants(activePlants);
 22:     } catch (error) {
 23:       console.error("Failed to load plants:", error);
 24:     } finally {
 25:       setIsLoading(false);
 26:     }
 27:   }
 28: 
 29:   if (isLoading) {
 30:     return (
 31:       <div className="p-4 flex items-center justify-center min-h-screen">
 32:         <div className="text-muted-foreground">Loading plants...</div>
 33:       </div>
 34:     );
 35:   }
 36: 
 37:   return (
 38:     <div className="p-4 space-y-4">
 39:       {}
 40:       <div className="flex items-center justify-between">
 41:         <h1 className="text-2xl font-bold text-foreground">My Plants</h1>
 42:         <Link to="/add-plant">
 43:           <Button variant="primary" size="sm">
 44:             Add Plant
 45:           </Button>
 46:         </Link>
 47:       </div>
 48: 
 49:       {}
 50:       {plants.length === 0 ? (
 51:         <Card>
 52:           <div className="text-center py-12">
 53:             <div className="text-6xl mb-4">🌱</div>
 54:             <h2 className="text-xl font-semibold text-foreground mb-2">
 55:               No plants yet
 56:             </h2>
 57:             <p className="text-muted-foreground mb-6">
 58:               Start your digital garden by adding your first plant
 59:             </p>
 60:             <Link to="/add-plant">
 61:               <Button variant="primary">Add Your First Plant</Button>
 62:             </Link>
 63:           </div>
 64:         </Card>
 65:       ) : (
 66:         <div className="space-y-4">
 67:           {plants.map((plant) => (
 68:             <Link
 69:               key={plant.id}
 70:               to={`/plants/${plant.id}`}
 71:               className="block"
 72:             >
 73:               <Card className="cursor-pointer hover:shadow-md transition-shadow">
 74:                 <CardContent className="p-4">
 75:                   <div className="flex items-start justify-between">
 76:                     <div className="flex-1">
 77:                       <h3 className="font-semibold text-card-foreground mb-1">
 78:                         {plant.name || plant.varietyName}
 79:                       </h3>
 80:                       <div className="text-sm text-muted-foreground mb-2">
 81:                         <div>📍 {plant.location}</div>
 82:                         <div>📦 {plant.container}</div>
 83:                         <PlantStageDisplay
 84:                           plant={plant}
 85:                           showEmoji={true}
 86:                           className="text-sm text-gray-600 mb-2"
 87:                         />
 88:                         <div>
 89:                           📅 Planted: {formatDate(plant.plantedDate)} (
 90:                           {getDaysSincePlanting(plant.plantedDate)} days ago)
 91:                         </div>
 92:                         <NextTaskDisplay
 93:                           plantId={plant.id}
 94:                           className="mt-2 font-medium"
 95:                         />
 96:                       </div>
 97:                       {plant.notes && plant.notes.length > 0 && (
 98:                         <div className="mt-2 text-sm text-gray-500">
 99:                           📝 {plant.notes[0]}
100:                         </div>
101:                       )}
102:                     </div>
103:                     <div className="text-3xl ml-4">🌿</div>
104:                   </div>
105:                 </CardContent>
106:               </Card>
107:             </Link>
108:           ))}
109:         </div>
110:       )}
111:     </div>
112:   );
113: };
114: 
115: export default Plants;

================
File: src/services/careSchedulingService.ts
================
  1: import {
  2:   plantService,
  3:   careService,
  4:   varietyService,
  5:   PlantRecord,
  6: } from "@/types/database";
  7: import { GrowthStage } from "@/types/core";
  8: import { calculateCurrentStage } from "@/utils/growthStage";
  9: import { getPlantDisplayName } from "@/utils/plantDisplay";
 10: import { UpcomingTask } from "@/types/scheduling";
 11: import { addDays, differenceInDays } from "date-fns";
 12: 
 13: export class CareSchedulingService {
 14:   static async getUpcomingTasks(): Promise<UpcomingTask[]> {
 15:     try {
 16:       const plants = await plantService.getActivePlants();
 17:       const allTasks: UpcomingTask[] = [];
 18: 
 19:       for (const plant of plants) {
 20:         const plantTasks = await this.getTasksForPlant(plant);
 21: 
 22: 
 23:         const filteredTasks = plantTasks.filter((task) => {
 24:           if (!plant.reminderPreferences) return true;
 25: 
 26: 
 27:           const taskTypeMap: Record<
 28:             string,
 29:             keyof typeof plant.reminderPreferences
 30:           > = {
 31:             "Check water level": "watering",
 32:             Water: "watering",
 33:             Fertilize: "fertilizing",
 34:             Observe: "observation",
 35:             "Check lighting": "lighting",
 36:             Prune: "pruning",
 37:             "Health check": "observation",
 38:           };
 39: 
 40:           const preferenceKey = taskTypeMap[task.task];
 41:           return preferenceKey
 42:             ? plant.reminderPreferences[preferenceKey]
 43:             : true;
 44:         });
 45: 
 46:         allTasks.push(...filteredTasks);
 47:       }
 48: 
 49:       return allTasks.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());
 50:     } catch (error) {
 51:       console.error("Error getting upcoming tasks:", error);
 52:       return [];
 53:     }
 54:   }
 55: 
 56:   private static async getTasksForPlant(
 57:     plant: PlantRecord
 58:   ): Promise<UpcomingTask[]> {
 59:     try {
 60:       const variety = await varietyService.getVariety(plant.varietyId);
 61:       if (!variety) return [];
 62: 
 63: 
 64:       const currentStage = calculateCurrentStage(
 65:         plant.plantedDate,
 66:         variety.growthTimeline
 67:       );
 68: 
 69:       if (currentStage !== plant.currentStage) {
 70:         await plantService.updatePlant(plant.id, {
 71:           currentStage,
 72:           updatedAt: new Date(),
 73:         });
 74:       }
 75: 
 76:       const tasks: UpcomingTask[] = [];
 77: 
 78: 
 79:       const wateringTask = await this.createWateringTask(plant, currentStage);
 80:       if (wateringTask) tasks.push(wateringTask);
 81: 
 82: 
 83:       const observationTask = await this.createObservationTask(
 84:         plant,
 85:         currentStage
 86:       );
 87:       if (observationTask) tasks.push(observationTask);
 88: 
 89:       return tasks;
 90:     } catch (error) {
 91:       console.error(`Error processing tasks for plant ${plant.id}:`, error);
 92:       return [];
 93:     }
 94:   }
 95: 
 96:   private static async createWateringTask(
 97:     plant: PlantRecord,
 98:     currentStage: GrowthStage
 99:   ): Promise<UpcomingTask | null> {
100:     const lastWatering = await careService.getLastCareActivityByType(
101:       plant.id,
102:       "water"
103:     );
104: 
105: 
106:     const wateringIntervals: Record<GrowthStage, number> = {
107:       germination: 1,
108:       seedling: 2,
109:       vegetative: 3,
110:       flowering: 2,
111:       fruiting: 2,
112:       maturation: 3,
113:       harvest: 4,
114:       "ongoing-production": 2,
115:     };
116: 
117:     const intervalDays = wateringIntervals[currentStage] || 3;
118: 
119:     let nextDueDate: Date;
120: 
121:     if (lastWatering) {
122:       nextDueDate = addDays(lastWatering.date, intervalDays);
123:     } else {
124: 
125:       const daysSincePlanting = differenceInDays(new Date(), plant.plantedDate);
126:       nextDueDate =
127:         daysSincePlanting > 1 ? new Date() : addDays(plant.plantedDate, 1);
128:     }
129: 
130: 
131:     if (nextDueDate <= addDays(new Date(), 2)) {
132: 
133:       const daysOverdue = differenceInDays(new Date(), nextDueDate);
134: 
135:       return {
136:         id: `water-${plant.id}`,
137:         plantId: plant.id,
138:         name: getPlantDisplayName(plant),
139:         task: "Check water level",
140:         dueIn: this.formatDueIn(nextDueDate),
141:         priority: this.calculatePriority(daysOverdue),
142:         plantStage: currentStage,
143:         dueDate: nextDueDate,
144:       };
145:     }
146: 
147:     return null;
148:   }
149: 
150:   private static async createObservationTask(
151:     plant: PlantRecord,
152:     currentStage: GrowthStage
153:   ): Promise<UpcomingTask | null> {
154:     const lastObservation = await careService.getLastCareActivityByType(
155:       plant.id,
156:       "observe"
157:     );
158: 
159: 
160:     const observationInterval = 7;
161: 
162:     let nextDueDate: Date;
163: 
164:     if (lastObservation) {
165:       nextDueDate = addDays(lastObservation.date, observationInterval);
166:     } else {
167: 
168:       nextDueDate = addDays(plant.plantedDate, 3);
169:     }
170: 
171: 
172:     if (nextDueDate <= addDays(new Date(), 1)) {
173: 
174:       const daysOverdue = differenceInDays(new Date(), nextDueDate);
175: 
176:       return {
177:         id: `observe-${plant.id}`,
178:         plantId: plant.id,
179:         name: getPlantDisplayName(plant),
180:         task: "Health check",
181:         dueIn: this.formatDueIn(nextDueDate),
182:         priority: this.calculatePriority(daysOverdue),
183:         plantStage: currentStage,
184:         dueDate: nextDueDate,
185:       };
186:     }
187: 
188:     return null;
189:   }
190: 
191:   static async getNextTaskForPlant(
192:     plantId: string
193:   ): Promise<UpcomingTask | null> {
194:     const plants = await plantService.getActivePlants();
195:     const plant = plants.find((p) => p.id === plantId);
196: 
197:     if (!plant) return null;
198: 
199:     const tasks = await this.getTasksForPlant(plant);
200: 
201: 
202:     const filteredTasks = tasks.filter((task) => {
203:       if (!plant.reminderPreferences) return true;
204: 
205:       const taskTypeMap: Record<
206:         string,
207:         keyof typeof plant.reminderPreferences
208:       > = {
209:         "Check water level": "watering",
210:         Water: "watering",
211:         Fertilize: "fertilizing",
212:         Observe: "observation",
213:         "Check lighting": "lighting",
214:         Prune: "pruning",
215:         "Health check": "observation",
216:       };
217: 
218:       const preferenceKey = taskTypeMap[task.task];
219:       return preferenceKey ? plant.reminderPreferences[preferenceKey] : true;
220:     });
221: 
222: 
223:     if (filteredTasks.length === 0) return null;
224: 
225:     return filteredTasks.sort(
226:       (a, b) => a.dueDate.getTime() - b.dueDate.getTime()
227:     )[0];
228:   }
229: 
230:   private static formatDueIn(dueDate: Date): string {
231:     const now = new Date();
232:     const diffDays = differenceInDays(dueDate, now);
233: 
234:     if (diffDays < 0) {
235:       return `${Math.abs(diffDays)} days overdue`;
236:     } else if (diffDays === 0) {
237:       return "Due today";
238:     } else if (diffDays === 1) {
239:       return "Due tomorrow";
240:     } else {
241:       return `Due in ${diffDays} days`;
242:     }
243:   }
244: 
245:   private static calculatePriority(
246:     daysOverdue: number
247:   ): "low" | "medium" | "high" {
248:     if (daysOverdue >= 2) return "high";
249:     if (daysOverdue >= 0) return "medium";
250:     return "low";
251:   }
252: }

================
File: src/types/database.ts
================
  1: import Dexie, { Table } from "dexie";
  2: import { v4 as uuidv4 } from "uuid";
  3: import {
  4:   GrowthStage,
  5:   PlantCategory,
  6:   CareActivityType,
  7:   QualityRating,
  8:   HealthAssessment,
  9:   ApplicationMethod,
 10:   WateringMethod,
 11:   BaseRecord,
 12:   TimestampedRecord,
 13:   MoistureReading,
 14:   Volume,
 15:   GrowthTimeline,
 16: } from "./core";
 17: 
 18: 
 19: export interface StageSpecificWateringProtocol {
 20:   [stageName: string]: {
 21:     trigger: {
 22:       moistureLevel: string | number;
 23:       description?: string;
 24:     };
 25:     target: {
 26:       moistureLevel: string | number;
 27:       description?: string;
 28:     };
 29:     volume: {
 30:       amount: string;
 31:       frequency: string;
 32:       perPlant?: boolean;
 33:     };
 34:     notes?: string[];
 35:   };
 36: }
 37: 
 38: export interface StageSpecificLightingProtocol {
 39:   [stageName: string]: {
 40:     ppfd: {
 41:       min: number;
 42:       max: number;
 43:       optimal?: number;
 44:       unit: "µmol/m²/s";
 45:     };
 46:     photoperiod: {
 47:       hours: number;
 48:       maxHours?: number;
 49:       minHours?: number;
 50:       constraint?: string;
 51:     };
 52:     dli: {
 53:       min: number;
 54:       max: number;
 55:       unit: "mol/m²/day";
 56:     };
 57:     notes?: string[];
 58:   };
 59: }
 60: 
 61: export interface StageSpecificFertilizationProtocol {
 62:   [stageName: string]: {
 63:     products?: {
 64:       name: string;
 65:       dilution: string;
 66:       amount: string;
 67:       frequency: string;
 68:       method?: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
 69:     }[];
 70:     timing?: string;
 71:     specialInstructions?: string[];
 72:     notes?: string[];
 73:   };
 74: }
 75: 
 76: export interface EnvironmentalProtocol {
 77:   temperature?: {
 78:     min?: number;
 79:     max?: number;
 80:     optimal?: number;
 81:     unit: "F" | "C";
 82:     criticalMax?: number;
 83:     criticalMin?: number;
 84:     stage?: string;
 85:   };
 86:   humidity?: {
 87:     min?: number;
 88:     max?: number;
 89:     optimal?: number;
 90:     criticalForStage?: string;
 91:   };
 92:   pH: {
 93:     min: number;
 94:     max: number;
 95:     optimal: number;
 96:   };
 97:   specialConditions?: string[];
 98:   constraints?: {
 99:     description: string;
100:     parameter: "temperature" | "humidity" | "light" | "other";
101:     threshold: number;
102:     consequence: string;
103:   }[];
104: }
105: 
106: export interface SoilMixture {
107:   components: {
108:     [component: string]: number;
109:   };
110:   amendments?: {
111:     [amendment: string]: string;
112:   };
113: }
114: 
115: export interface ContainerRequirements {
116:   minSize?: string;
117:   depth: string;
118:   drainage?: string;
119:   staging?: {
120:     seedling?: string;
121:     intermediate?: string;
122:     final: string;
123:   };
124: }
125: 
126: export interface SuccessionProtocol {
127:   interval: number;
128:   method: "continuous" | "zoned" | "single";
129:   harvestMethod: "cut-and-come-again" | "single-harvest" | "selective";
130:   productiveWeeks?: number;
131:   notes?: string[];
132: }
133: 
134: 
135: export interface PlantProtocols {
136:   lighting?: StageSpecificLightingProtocol;
137:   watering?: StageSpecificWateringProtocol;
138:   fertilization?: StageSpecificFertilizationProtocol;
139:   environment?: EnvironmentalProtocol;
140:   soilMixture?: SoilMixture;
141:   container?: ContainerRequirements;
142:   succession?: SuccessionProtocol;
143:   specialRequirements?: string[];
144: }
145: 
146: 
147: export interface WateringProtocol {
148:   frequency: string;
149:   moistureTrigger: {
150:     triggerLevel: number;
151:     targetLevel: number;
152:     scale: "1-10" | "visual";
153:   };
154:   amount: Volume;
155:   method?: WateringMethod;
156:   notes: string[];
157: }
158: 
159: export interface LightingProtocol {
160:   ppfd: {
161:     min: number;
162:     max: number;
163:     optimal?: number;
164:   };
165:   photoperiod: {
166:     hours: number;
167:     maxHours?: number;
168:     minHours?: number;
169:   };
170:   dli: {
171:     min: number;
172:     max: number;
173:   };
174: }
175: 
176: export interface FertilizationProtocol {
177:   timing: {
178:     description: string;
179:     daysFromStart?: number;
180:     frequency?: string;
181:   };
182:   fertilizer: {
183:     product: string;
184:     type?: string;
185:     npkRatio?: string;
186:   };
187:   application: {
188:     dilution: string;
189:     amount: string;
190:     method: ApplicationMethod;
191:   };
192: }
193: export interface WaterAmount {
194:   value: number;
195:   unit: "oz" | "ml" | "cups" | "gallons" | "liters";
196: }
197: 
198: 
199: export interface WateringDetails {
200:   type: "water";
201:   amount: WaterAmount;
202:   moistureReading?: MoistureReading;
203:   method?: WateringMethod;
204:   runoffObserved?: boolean;
205:   notes?: string;
206: }
207: 
208: export interface FertilizingDetails {
209:   type: "fertilize";
210:   product: string;
211:   dilution: string;
212:   amount: string;
213:   method?: ApplicationMethod;
214:   notes?: string;
215: }
216: 
217: export interface ObservationDetails {
218:   type: "observe";
219:   healthAssessment: HealthAssessment;
220:   observations: string;
221:   photos?: string[];
222:   notes?: string;
223: }
224: 
225: export interface HarvestDetails {
226:   type: "harvest";
227:   amount: string;
228:   quality: QualityRating;
229:   method?: string;
230:   notes?: string;
231: }
232: 
233: export interface TransplantDetails {
234:   type: "transplant";
235:   fromContainer: string;
236:   toContainer: string;
237:   reason: string;
238:   notes?: string;
239: }
240: 
241: export type CareActivityDetails =
242:   | WateringDetails
243:   | FertilizingDetails
244:   | ObservationDetails
245:   | HarvestDetails
246:   | TransplantDetails;
247: 
248: 
249: export interface PlantRecord extends BaseRecord {
250:   varietyId: string;
251:   varietyName: string;
252:   name?: string;
253:   plantedDate: Date;
254:   currentStage: GrowthStage;
255:   location: string;
256:   container: string;
257:   soilMix?: string;
258:   isActive: boolean;
259:   notes?: string[];
260:   reminderPreferences?: {
261:     watering: boolean;
262:     fertilizing: boolean;
263:     observation: boolean;
264:     lighting: boolean;
265:     pruning: boolean;
266:   };
267: }
268: 
269: 
270: export interface VarietyRecord extends TimestampedRecord {
271:   name: string;
272:   category: PlantCategory;
273:   growthTimeline: GrowthTimeline;
274:   protocols?: PlantProtocols;
275:   moistureProtocols?: {
276:     [key in GrowthStage]?: {
277:       trigger: {
278:         min: number;
279:         max: number;
280:       };
281:       target: {
282:         min: number;
283:         max: number;
284:       };
285:     };
286:   };
287:   isCustom?: boolean;
288:   isEverbearing?: boolean;
289:   productiveLifespan?: number;
290: }
291: 
292: export interface CareRecord extends TimestampedRecord {
293:   plantId: string;
294:   type: CareActivityType;
295:   date: Date;
296:   details: CareActivityDetails;
297: }
298: 
299: export interface SyncQueueRecord {
300:   id: string;
301:   table: "plants" | "varieties" | "careActivities";
302:   operation: "create" | "update" | "delete";
303:   recordId: string;
304:   data?: string;
305:   timestamp: Date;
306:   synced: boolean;
307:   retryCount?: number;
308: }
309: 
310: class SmartGardenDatabase extends Dexie {
311:   plants!: Table<PlantRecord>;
312:   varieties!: Table<VarietyRecord>;
313:   careActivities!: Table<CareRecord>;
314:   syncQueue!: Table<SyncQueueRecord>;
315: 
316:   constructor() {
317:     super("SmartGardenDB");
318: 
319:     this.version(1).stores({
320:       plants: "id, varietyId, plantedDate, currentStage, isActive, location",
321:       varieties: "id, name, category",
322:       careActivities: "id, plantId, type, date",
323:       syncQueue: "id, table, timestamp, synced",
324:     });
325:   }
326: 
327:   async addToSyncQueue(
328:     table: SyncQueueRecord["table"],
329:     operation: SyncQueueRecord["operation"],
330:     recordId: string,
331:     data?: unknown
332:   ): Promise<void> {
333:     try {
334:       await this.syncQueue.add({
335:         id: uuidv4(),
336:         table,
337:         operation,
338:         recordId,
339:         data: data ? JSON.stringify(data) : undefined,
340:         timestamp: new Date(),
341:         synced: false,
342:       });
343:     } catch (error) {
344:       console.warn("Failed to add to sync queue:", error);
345:     }
346:   }
347: }
348: 
349: export const db = new SmartGardenDatabase();
350: 
351: 
352: export const plantService = {
353:   async addPlant(
354:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">
355:   ): Promise<string> {
356:     const id = uuidv4();
357:     const now = new Date();
358:     const fullPlant: PlantRecord = {
359:       ...plant,
360:       id,
361:       createdAt: now,
362:       updatedAt: now,
363:     };
364: 
365:     await db.plants.add(fullPlant);
366:     await db.addToSyncQueue("plants", "create", id, fullPlant);
367:     return id;
368:   },
369: 
370:   async getActivePlants(): Promise<PlantRecord[]> {
371: 
372:     const allPlants = await db.plants.toArray();
373:     return allPlants.filter((plant) => plant.isActive === true);
374:   },
375: 
376:   async getPlant(id: string): Promise<PlantRecord | undefined> {
377:     return db.plants.get(id);
378:   },
379: 
380:   async updatePlant(
381:     id: string,
382:     updates: Partial<Omit<PlantRecord, "id" | "createdAt">>
383:   ): Promise<void> {
384:     const updateData = {
385:       ...updates,
386:       updatedAt: new Date(),
387:     };
388: 
389:     await db.plants.update(id, updateData);
390:     await db.addToSyncQueue("plants", "update", id, updateData);
391:   },
392: 
393:   async deletePlant(id: string): Promise<void> {
394:     const updateData = { isActive: false, updatedAt: new Date() };
395:     await db.plants.update(id, updateData);
396:     await db.addToSyncQueue("plants", "delete", id, updateData);
397:   },
398: };
399: 
400: export const varietyService = {
401:   async addVariety(
402:     variety: Omit<VarietyRecord, "id" | "createdAt">
403:   ): Promise<string> {
404:     const existingVariety = await db.varieties
405:       .where("name")
406:       .equals(variety.name)
407:       .first();
408: 
409:     if (existingVariety) {
410:       console.warn(
411:         `Variety "${variety.name}" already exists. Returning existing ID.`
412:       );
413:       return existingVariety.id;
414:     }
415: 
416:     const id = uuidv4();
417:     const fullVariety: VarietyRecord = {
418:       ...variety,
419:       id,
420:       createdAt: new Date(),
421:     };
422: 
423:     await db.varieties.add(fullVariety);
424:     await db.addToSyncQueue("varieties", "create", id, fullVariety);
425:     return id;
426:   },
427: 
428:   async getAllVarieties(): Promise<VarietyRecord[]> {
429:     return db.varieties.toArray();
430:   },
431: 
432:   async getVariety(id: string): Promise<VarietyRecord | undefined> {
433:     return db.varieties.get(id);
434:   },
435: 
436:   async getVarietyByName(name: string): Promise<VarietyRecord | undefined> {
437:     return db.varieties.where("name").equals(name).first();
438:   },
439: };
440: 
441: export const careService = {
442:   async addCareActivity(
443:     activity: Omit<CareRecord, "id" | "createdAt">
444:   ): Promise<string> {
445:     const id = uuidv4();
446:     const fullActivity: CareRecord = {
447:       ...activity,
448:       id,
449:       createdAt: new Date(),
450:     };
451: 
452:     await db.careActivities.add(fullActivity);
453:     await db.addToSyncQueue("careActivities", "create", id, fullActivity);
454:     return id;
455:   },
456: 
457:   async getLastCareActivityByType(
458:     plantId: string,
459:     type: CareActivityType
460:   ): Promise<CareRecord | null> {
461:     const activities = await db.careActivities
462:       .where("plantId")
463:       .equals(plantId)
464:       .and((activity) => activity.type === type)
465:       .reverse()
466:       .sortBy("date");
467: 
468:     return activities.length > 0 ? activities[0] : null;
469:   },
470: 
471:   async getPlantCareHistory(plantId: string): Promise<CareRecord[]> {
472:     return db.careActivities
473:       .where("plantId")
474:       .equals(plantId)
475:       .reverse()
476:       .sortBy("date");
477:   },
478: 
479:   async getRecentActivities(limit: number = 10): Promise<CareRecord[]> {
480:     return db.careActivities.orderBy("date").reverse().limit(limit).toArray();
481:   },
482: };

================
File: src/utils/growthStage.ts
================
  1: import { GrowthStage } from "../types";
  2: import { addDays, differenceInDays } from "date-fns";
  3: import { VarietyRecord } from "@/types/database";
  4: 
  5: export interface GrowthStageInfo {
  6:   stage: GrowthStage;
  7:   startDay: number;
  8:   endDay: number;
  9:   description: string;
 10: }
 11: 
 12: export interface VarietyTimeline {
 13:   germination: number;
 14:   seedling: number;
 15:   vegetative: number;
 16:   maturation: number;
 17: }
 18: 
 19: 
 20: export function calculateCurrentStageWithVariety(
 21:   plantedDate: Date,
 22:   variety: VarietyRecord | undefined,
 23:   currentDate: Date = new Date()
 24: ): GrowthStage {
 25:   if (!variety) {
 26:     return "germination";
 27:   }
 28:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 29:   const timeline = variety.growthTimeline;
 30: 
 31:   if (daysSincePlanting < 0) {
 32:     return "germination";
 33:   }
 34:   if (daysSincePlanting < timeline.germination) {
 35:     return "germination";
 36:   }
 37:   if (daysSincePlanting < timeline.germination + timeline.seedling) {
 38:     return "seedling";
 39:   }
 40:   if (
 41:     daysSincePlanting <
 42:     timeline.germination + timeline.seedling + timeline.vegetative
 43:   ) {
 44:     return "vegetative";
 45:   }
 46:   if (daysSincePlanting < timeline.maturation) {
 47:     return "flowering";
 48:   }
 49: 
 50:   if (variety.isEverbearing) {
 51: 
 52:     if (
 53:       variety.productiveLifespan &&
 54:       daysSincePlanting >= variety.productiveLifespan
 55:     ) {
 56:       return "harvest";
 57:     }
 58:     return "ongoing-production";
 59:   } else {
 60: 
 61:     return "harvest";
 62:   }
 63: }
 64: 
 65: 
 66: export function calculateCurrentStage(
 67:   plantedDate: Date,
 68:   timeline: VarietyTimeline,
 69:   currentDate: Date = new Date()
 70: ): GrowthStage {
 71:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 72: 
 73:   if (daysSincePlanting < 0) return "germination";
 74:   if (daysSincePlanting < timeline.germination) return "germination";
 75:   if (daysSincePlanting < timeline.germination + timeline.seedling)
 76:     return "seedling";
 77:   if (
 78:     daysSincePlanting <
 79:     timeline.germination + timeline.seedling + timeline.vegetative
 80:   )
 81:     return "vegetative";
 82:   if (daysSincePlanting < timeline.maturation) return "flowering";
 83: 
 84:   return "harvest";
 85: }
 86: 
 87: export function getStageProgress(
 88:   plantedDate: Date,
 89:   timeline: VarietyTimeline,
 90:   currentDate: Date = new Date()
 91: ): number {
 92:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 93:   const currentStage = calculateCurrentStage(
 94:     plantedDate,
 95:     timeline,
 96:     currentDate
 97:   );
 98: 
 99:   let stageStart = 0;
100:   let stageEnd = timeline.germination;
101: 
102:   switch (currentStage) {
103:     case "seedling":
104:       stageStart = timeline.germination;
105:       stageEnd = timeline.germination + timeline.seedling;
106:       break;
107:     case "vegetative":
108:       stageStart = timeline.germination + timeline.seedling;
109:       stageEnd = timeline.germination + timeline.seedling + timeline.vegetative;
110:       break;
111:     case "flowering":
112:       stageStart =
113:         timeline.germination + timeline.seedling + timeline.vegetative;
114:       stageEnd = timeline.maturation;
115:       break;
116:     case "maturation":
117:     case "ongoing-production":
118:     case "harvest":
119:       return 100;
120:   }
121: 
122:   const stageProgress =
123:     ((daysSincePlanting - stageStart) / (stageEnd - stageStart)) * 100;
124:   return Math.min(Math.max(stageProgress, 0), 100);
125: }
126: 
127: export function getNextStage(currentStage: GrowthStage): GrowthStage | null {
128:   const stages: GrowthStage[] = [
129:     "germination",
130:     "seedling",
131:     "vegetative",
132:     "flowering",
133:     "maturation",
134:     "ongoing-production",
135:     "harvest",
136:   ];
137:   const currentIndex = stages.indexOf(currentStage);
138: 
139:   if (currentIndex === -1 || currentIndex === stages.length - 1) {
140:     return null;
141:   }
142: 
143:   return stages[currentIndex + 1];
144: }
145: 
146: export function estimateStageTransition(
147:   plantedDate: Date,
148:   timeline: VarietyTimeline,
149:   targetStage: GrowthStage
150: ): Date {
151:   let daysToTarget = 0;
152: 
153:   switch (targetStage) {
154:     case "seedling":
155:       daysToTarget = timeline.germination;
156:       break;
157:     case "vegetative":
158:       daysToTarget = timeline.germination + timeline.seedling;
159:       break;
160:     case "flowering":
161:       daysToTarget =
162:         timeline.germination + timeline.seedling + timeline.vegetative;
163:       break;
164:     case "maturation":
165:     case "ongoing-production":
166:     case "harvest":
167:       daysToTarget = timeline.maturation;
168:       break;
169:   }
170: 
171:   return addDays(plantedDate, daysToTarget);
172: }
173: 
174: export function formatStageProgress(progress: number): string {
175:   return `${Math.round(progress)}%`;
176: }

================
File: src/App.tsx
================
 1: import { useEffect } from "react";
 2: import { Routes, Route } from "react-router-dom";
 3: 
 4: import Dashboard from "./pages/dashboard";
 5: import Plants from "./pages/plants/Plants";
 6: import PlantDetail from "@/pages/plants/PlantDetail";
 7: import AddPlant from "./pages/plants/AddPlant";
 8: import LogCare from "./pages/care/LogCare";
 9: import Navigation from "./components/Navigation";
10: import { useAppInitialization } from "./hooks/useAppInitialization";
11: import { initializeDatabase } from "./db/seedData";
12: import "./App.css";
13: 
14: function App() {
15:   useAppInitialization();
16: 
17:   useEffect(() => {
18:     initializeDatabase();
19:   }, []);
20: 
21:   return (
22:     <div className="min-h-screen bg-background">
23:       <main className="pb-20">
24:         <Routes>
25:           <Route path="/" element={<Dashboard />} />
26:           <Route path="/plants" element={<Plants />} />
27:           <Route path="/plants/:plantId" element={<PlantDetail />} />{" "}
28:           {}
29:           <Route path="/log-care" element={<LogCare />} />
30:           <Route path="/add-plant" element={<AddPlant />} />
31:         </Routes>
32:       </main>
33: 
34:       <Navigation />
35:     </div>
36:   );
37: }
38: 
39: export default App;

================
File: src/setupTests.ts
================
  1: import "@testing-library/jest-dom";
  2: import "fake-indexeddb/auto";
  3: 
  4: 
  5: import { TextEncoder, TextDecoder } from "util";
  6: 
  7: 
  8: global.TextEncoder = TextEncoder as typeof global.TextEncoder;
  9: global.TextDecoder = TextDecoder as typeof global.TextDecoder;
 10: 
 11: 
 12: if (!global.crypto) {
 13:   global.crypto = {
 14:     randomUUID: () =>
 15:       "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx" as `${string}-${string}-${string}-${string}-${string}`,
 16:     getRandomValues: <T extends ArrayBufferView | null>(array: T): T => array,
 17:     subtle: {} as SubtleCrypto,
 18:   } as unknown as Crypto;
 19: }
 20: 
 21: if (!global.crypto.randomUUID) {
 22:   global.crypto.randomUUID = () => {
 23:     return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
 24:       /[xy]/g,
 25:       function (c) {
 26:         const r = (Math.random() * 16) | 0;
 27:         const v = c === "x" ? r : (r & 0x3) | 0x8;
 28:         return v.toString(16);
 29:       }
 30:     ) as `${string}-${string}-${string}-${string}-${string}`;
 31:   };
 32: }
 33: 
 34: 
 35: global.IntersectionObserver = class IntersectionObserver {
 36:   root: Element | null = null;
 37:   rootMargin: string = "0px";
 38:   thresholds: ReadonlyArray<number> = [0];
 39: 
 40:   constructor() {}
 41:   observe() {
 42:     return null;
 43:   }
 44:   disconnect() {
 45:     return null;
 46:   }
 47:   unobserve() {
 48:     return null;
 49:   }
 50:   takeRecords(): IntersectionObserverEntry[] {
 51:     return [];
 52:   }
 53: } as any;
 54: 
 55: 
 56: Object.defineProperty(navigator, "onLine", {
 57:   writable: true,
 58:   value: true,
 59: });
 60: 
 61: Object.defineProperty(navigator, "serviceWorker", {
 62:   value: {
 63:     register: jest.fn(() =>
 64:       Promise.resolve({
 65:         installing: null,
 66:         waiting: null,
 67:         active: null,
 68:         addEventListener: jest.fn(),
 69:         removeEventListener: jest.fn(),
 70:       })
 71:     ),
 72:     ready: Promise.resolve({
 73:       update: jest.fn(),
 74:       unregister: jest.fn(),
 75:       addEventListener: jest.fn(),
 76:     }),
 77:     controller: null,
 78:     addEventListener: jest.fn(),
 79:   },
 80: });
 81: 
 82: 
 83: Object.defineProperty(navigator, "mediaDevices", {
 84:   value: {
 85:     getUserMedia: jest.fn(() =>
 86:       Promise.resolve({
 87:         getTracks: () => [{ stop: jest.fn() }],
 88:       })
 89:     ),
 90:   },
 91: });
 92: 
 93: 
 94: global.FileReader = class FileReader {
 95:   static readonly EMPTY = 0;
 96:   static readonly LOADING = 1;
 97:   static readonly DONE = 2;
 98: 
 99:   result: string | ArrayBuffer | null = null;
100:   readyState: number = 0;
101:   error: DOMException | null = null;
102: 
103:   readAsDataURL = jest.fn();
104:   readAsText = jest.fn();
105:   readAsArrayBuffer = jest.fn();
106:   readAsBinaryString = jest.fn();
107:   addEventListener = jest.fn();
108:   removeEventListener = jest.fn();
109:   dispatchEvent = jest.fn();
110:   abort = jest.fn();
111: 
112:   onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null =
113:     null;
114:   onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null =
115:     null;
116:   onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null =
117:     null;
118:   onloadstart:
119:     | ((this: FileReader, ev: ProgressEvent<FileReader>) => any)
120:     | null = null;
121:   onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null =
122:     null;
123:   onprogress:
124:     | ((this: FileReader, ev: ProgressEvent<FileReader>) => any)
125:     | null = null;
126: } as any;
127: 
128: if (!global.structuredClone) {
129:   global.structuredClone = <T>(obj: T): T => {
130: 
131:     if (obj === null || typeof obj !== "object") {
132:       return obj;
133:     }
134: 
135:     if (obj instanceof Date) {
136:       return new Date(obj.getTime()) as T;
137:     }
138: 
139:     if (obj instanceof Array) {
140:       return obj.map((item) => global.structuredClone(item)) as T;
141:     }
142: 
143:     if (typeof obj === "object") {
144:       const cloned: Record<string, unknown> = {};
145:       for (const key in obj) {
146:         if (Object.hasOwn(obj, key)) {
147:           cloned[key] = global.structuredClone(
148:             (obj as Record<string, unknown>)[key]
149:           );
150:         }
151:       }
152:       return cloned as T;
153:     }
154: 
155:     return obj;
156:   };
157: }
158: 
159: 
160: Object.defineProperty(navigator, "storage", {
161:   value: {
162:     estimate: jest.fn(() =>
163:       Promise.resolve({
164:         quota: 1000000000,
165:         usage: 100000,
166:       })
167:     ),
168:   },
169: });
170: 
171: 
172: export const mockDate = (date: string): void => {
173:   const mockNow = new Date(date);
174:   jest.spyOn(Date, "now").mockReturnValue(mockNow.getTime());
175:   jest.spyOn(global, "Date").mockImplementation(() => mockNow);
176: };
177: 
178: export const restoreDate = (): void => {
179:   jest.restoreAllMocks();
180: };

================
File: src/pages/care/CareLogForm.tsx
================
   1: import { useState, useEffect, useCallback } from "react";
   2: import { useForm } from "react-hook-form";
   3: import { useSearchParams } from "react-router-dom";
   4: import { zodResolver } from "@hookform/resolvers/zod";
   5: import { z } from "zod";
   6: import {
   7:   plantService,
   8:   careService,
   9:   varietyService,
  10:   PlantRecord,
  11:   VarietyRecord,
  12:   CareActivityDetails,
  13:   WateringDetails,
  14:   FertilizingDetails,
  15:   ObservationDetails,
  16: } from "@/types/database";
  17: import { Button } from "@/components/ui/Button";
  18: import { PhotoCapture } from "./PhotoCapture";
  19: import { calculateCurrentStage } from "@/utils/growthStage";
  20: import { GrowthStage } from "@/types/core";
  21: import toast from "react-hot-toast";
  22: import {
  23:   SmartDefaultsService,
  24:   SmartDefaults,
  25:   QuickCompletionValues,
  26: } from "@/services/smartDefaultsService";
  27: import QuickCompletionButtons from "@/pages/care/QuickCompletionButtons";
  28: 
  29: 
  30: interface MoistureValidationMessage {
  31:   field: "before" | "after" | "source";
  32:   message: string;
  33:   color: string;
  34: }
  35: 
  36: interface MoistureValidationResult {
  37:   validations: MoistureValidationMessage[];
  38:   isValid: boolean;
  39: }
  40: 
  41: interface CategoryMoistureDefaults {
  42:   trigger: [number, number];
  43:   target: [number, number];
  44: }
  45: 
  46: interface PlantMoistureProtocol {
  47:   trigger: [number, number];
  48:   target: [number, number];
  49:   varietyName: string;
  50:   currentStage: GrowthStage;
  51:   isDefault: boolean;
  52:   source: "protocol" | "category" | "universal";
  53: }
  54: 
  55: 
  56: function extractMoistureRangesForStage(
  57:   variety: VarietyRecord,
  58:   stage: GrowthStage
  59: ): PlantMoistureProtocol | null {
  60: 
  61:   const stageProtocol = variety.protocols?.watering?.[stage] as {
  62:     trigger?: { moistureLevel?: string | number };
  63:     target?: { moistureLevel?: string | number };
  64:   };
  65: 
  66:   if (
  67:     stageProtocol?.trigger?.moistureLevel &&
  68:     stageProtocol?.target?.moistureLevel
  69:   ) {
  70:     const triggerRange = parseMoistureRange(
  71:       stageProtocol.trigger.moistureLevel
  72:     );
  73:     const targetRange = parseMoistureRange(stageProtocol.target.moistureLevel);
  74: 
  75:     if (triggerRange && targetRange) {
  76:       return {
  77:         trigger: triggerRange,
  78:         target: targetRange,
  79:         varietyName: variety.name || "Unknown",
  80:         currentStage: stage,
  81:         isDefault: false,
  82:         source: "protocol",
  83:       };
  84:     }
  85:   }
  86: 
  87: 
  88:   const categoryDefaults = getCategoryBasedDefaults(variety.category, stage);
  89:   if (categoryDefaults) {
  90:     return {
  91:       ...categoryDefaults,
  92:       varietyName: variety.name || "Unknown",
  93:       currentStage: stage,
  94:       isDefault: false,
  95:       source: "category",
  96:     };
  97:   }
  98: 
  99: 
 100:   return {
 101:     trigger: [3, 4] as [number, number],
 102:     target: [6, 7] as [number, number],
 103:     varietyName: variety.name || "Unknown",
 104:     currentStage: stage,
 105:     isDefault: true,
 106:     source: "universal",
 107:   };
 108: }
 109: 
 110: function parseMoistureRange(value: string | number): [number, number] | null {
 111:   if (typeof value === "number") {
 112:     return [value, value];
 113:   }
 114: 
 115:   if (typeof value === "string") {
 116: 
 117:     const rangeMatch = value.match(/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)/);
 118:     if (rangeMatch) {
 119:       return [parseFloat(rangeMatch[1]), parseFloat(rangeMatch[2])];
 120:     }
 121: 
 122: 
 123:     const singleMatch = value.match(/(\d+(?:\.\d+)?)/);
 124:     if (singleMatch) {
 125:       const num = parseFloat(singleMatch[1]);
 126:       return [num, num];
 127:     }
 128:   }
 129: 
 130:   return null;
 131: }
 132: 
 133: function getCategoryBasedDefaults(
 134:   category: string,
 135:   stage: GrowthStage
 136: ): CategoryMoistureDefaults | null {
 137: 
 138:   const categoryProtocols: Record<
 139:     string,
 140:     Record<GrowthStage, CategoryMoistureDefaults>
 141:   > = {
 142:     "root-vegetables": {
 143:       germination: { trigger: [4, 5], target: [6, 7] },
 144:       seedling: { trigger: [4, 5], target: [6, 7] },
 145:       vegetative: { trigger: [3, 4], target: [6, 7] },
 146:       flowering: { trigger: [3, 4], target: [6, 7] },
 147:       fruiting: { trigger: [3, 4], target: [6, 7] },
 148:       maturation: { trigger: [3, 4], target: [6, 7] },
 149:       harvest: { trigger: [3, 4], target: [6, 7] },
 150:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 151:     },
 152:     "leafy-greens": {
 153:       germination: { trigger: [3, 4], target: [6, 7] },
 154:       seedling: { trigger: [3, 4], target: [6, 7] },
 155:       vegetative: { trigger: [3, 4], target: [6, 7] },
 156:       flowering: { trigger: [3, 4], target: [6, 7] },
 157:       fruiting: { trigger: [3, 4], target: [6, 7] },
 158:       maturation: { trigger: [3, 4], target: [6, 7] },
 159:       harvest: { trigger: [3, 4], target: [6, 7] },
 160:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 161:     },
 162:     "fruiting-plants": {
 163:       germination: { trigger: [4, 5], target: [7, 8] },
 164:       seedling: { trigger: [4, 5], target: [7, 8] },
 165:       vegetative: { trigger: [3, 4], target: [6, 7] },
 166:       flowering: { trigger: [3, 4], target: [6, 7] },
 167:       fruiting: { trigger: [3, 4], target: [6, 8] },
 168:       maturation: { trigger: [3, 4], target: [6, 8] },
 169:       harvest: { trigger: [3, 4], target: [6, 8] },
 170:       "ongoing-production": { trigger: [3, 4], target: [6, 8] },
 171:     },
 172:     herbs: {
 173:       germination: { trigger: [3, 4], target: [6, 7] },
 174:       seedling: { trigger: [3, 4], target: [6, 7] },
 175:       vegetative: { trigger: [3, 4], target: [6, 7] },
 176:       flowering: { trigger: [3, 4], target: [6, 7] },
 177:       fruiting: { trigger: [3, 4], target: [6, 7] },
 178:       maturation: { trigger: [3, 4], target: [6, 7] },
 179:       harvest: { trigger: [3, 4], target: [6, 7] },
 180:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 181:     },
 182:     berries: {
 183:       germination: { trigger: [3, 4], target: [6, 7] },
 184:       seedling: { trigger: [3, 4], target: [6, 7] },
 185:       vegetative: { trigger: [3, 4], target: [6, 7] },
 186:       flowering: { trigger: [3, 4], target: [6, 7] },
 187:       fruiting: { trigger: [3, 4], target: [6, 7] },
 188:       maturation: { trigger: [3, 4], target: [6, 7] },
 189:       harvest: { trigger: [3, 4], target: [6, 7] },
 190:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 191:     },
 192:   };
 193: 
 194:   return categoryProtocols[category]?.[stage] || null;
 195: }
 196: 
 197: 
 198: const baseCareSchema = z.object({
 199:   plantId: z.string().min(1, "Please select a plant"),
 200:   type: z.enum(["water", "fertilize", "observe", "harvest", "transplant"]),
 201:   date: z.string(),
 202:   notes: z.string().optional(),
 203: });
 204: 
 205: const wateringSchema = baseCareSchema.extend({
 206:   type: z.literal("water"),
 207:   waterValue: z.number().min(0.1, "Water amount must be greater than 0"),
 208:   waterUnit: z.enum(["oz", "ml", "cups", "liters", "gallons"]),
 209:   moistureBefore: z.number().min(1).max(10).optional(),
 210:   moistureAfter: z.number().min(1).max(10).optional(),
 211:   applicationMethod: z
 212:     .enum(["top-watering", "bottom-watering", "drip", "misting"])
 213:     .optional(),
 214:   runoffObserved: z.boolean().optional(),
 215: });
 216: 
 217: const fertilizingSchema = baseCareSchema.extend({
 218:   type: z.literal("fertilize"),
 219:   product: z.string().min(1, "Fertilizer product is required"),
 220:   dilution: z.string().min(1, "Dilution ratio is required"),
 221:   amount: z.string().min(1, "Application amount is required"),
 222: });
 223: 
 224: const observationSchema = baseCareSchema.extend({
 225:   type: z.literal("observe"),
 226:   healthAssessment: z.enum([
 227:     "excellent",
 228:     "good",
 229:     "fair",
 230:     "concerning",
 231:     "critical",
 232:   ]),
 233:   observations: z.string().min(1, "Observations are required"),
 234:   photos: z.array(z.string()).optional(),
 235: });
 236: 
 237: const careFormSchema = z.discriminatedUnion("type", [
 238:   wateringSchema,
 239:   fertilizingSchema,
 240:   observationSchema,
 241: ]);
 242: 
 243: type CareFormData = z.infer<typeof careFormSchema>;
 244: 
 245: interface CareLogFormProps {
 246:   onSuccess?: () => void;
 247:   onCancel?: () => void;
 248:   preselectedPlantId?: string;
 249:   preselectedActivityType?:
 250:     | "water"
 251:     | "fertilize"
 252:     | "observe"
 253:     | "harvest"
 254:     | "transplant";
 255: }
 256: 
 257: export function CareLogForm({
 258:   onSuccess,
 259:   onCancel,
 260:   preselectedPlantId,
 261:   preselectedActivityType,
 262: }: CareLogFormProps) {
 263:   const [plants, setPlants] = useState<PlantRecord[]>([]);
 264:   const [isLoading, setIsLoading] = useState(false);
 265:   const [submitError, setSubmitError] = useState<string | null>(null);
 266:   const [capturedPhotos, setCapturedPhotos] = useState<string[]>([]);
 267:   const [showDetailedTracking, setShowDetailedTracking] = useState(false);
 268:   const [searchParams] = useSearchParams();
 269: 
 270:   const initialPlantId =
 271:     preselectedPlantId || searchParams.get("plantId") || "";
 272:   const initialActivityType =
 273:     preselectedActivityType || searchParams.get("type") || "water";
 274: 
 275: 
 276:   const [moistureValidation, setMoistureValidation] =
 277:     useState<MoistureValidationResult | null>(null);
 278: 
 279: 
 280:   const [smartDefaults, setSmartDefaults] = useState<SmartDefaults | null>(
 281:     null
 282:   );
 283:   const [isLoadingDefaults, setIsLoadingDefaults] = useState(false);
 284: 
 285:   const {
 286:     register,
 287:     handleSubmit,
 288:     watch,
 289:     formState: { errors },
 290:     reset,
 291:     setValue,
 292:   } = useForm<CareFormData>({
 293:     resolver: zodResolver(careFormSchema),
 294:     defaultValues: {
 295:       plantId: preselectedPlantId || searchParams.get("plantId") || "",
 296:       type:
 297:         (searchParams.get("type") as "water" | "fertilize" | "observe") ||
 298:         "water",
 299:       date: new Date().toISOString().split("T")[0],
 300:       waterValue: undefined,
 301:       waterUnit: "oz",
 302:     },
 303:   });
 304: 
 305:   const activityType = watch("type");
 306:   const selectedPlantId = watch("plantId");
 307:   const moistureBefore = watch("moistureBefore");
 308:   const moistureAfter = watch("moistureAfter");
 309: 
 310: 
 311:   useEffect(() => {
 312:     const loadPlants = async () => {
 313:       try {
 314:         const plantList = await plantService.getActivePlants();
 315:         setPlants(plantList);
 316:       } catch (error) {
 317:         console.error("Failed to load plants:", error);
 318:         toast.error("Failed to load plants");
 319:       }
 320:     };
 321: 
 322:     loadPlants();
 323:   }, []);
 324: 
 325:   useEffect(() => {
 326:     const plantIdToSet = preselectedPlantId || searchParams.get("plantId");
 327:     if (plantIdToSet && plants.length > 0) {
 328:       const plant = plants.find((p) => p.id === plantIdToSet);
 329:       if (plant) {
 330:         setValue("plantId", plantIdToSet);
 331:       }
 332:     }
 333:   }, [plants, preselectedPlantId, searchParams, setValue]);
 334: 
 335:   useEffect(() => {
 336:     const activityTypeToSet = searchParams.get("type");
 337:     if (activityTypeToSet) {
 338:       setValue("type", activityTypeToSet as any);
 339:     }
 340:   }, [searchParams, setValue]);
 341: 
 342: 
 343:   useEffect(() => {
 344:     const loadSmartDefaults = async () => {
 345:       if (!selectedPlantId || !plants.length) {
 346:         setSmartDefaults(null);
 347:         return;
 348:       }
 349: 
 350:       const plant = plants.find((p) => p.id === selectedPlantId);
 351:       if (!plant) return;
 352: 
 353:       try {
 354:         setIsLoadingDefaults(true);
 355:         const defaults = await SmartDefaultsService.getDefaultsForPlant(plant);
 356:         setSmartDefaults(defaults);
 357: 
 358: 
 359:         if (activityType === "water" && defaults?.watering) {
 360:           setValue("waterValue", defaults.watering.suggestedAmount);
 361:           setValue("waterUnit", defaults.watering.unit);
 362:         }
 363:       } catch (error) {
 364:         console.error("Error loading smart defaults:", error);
 365:       } finally {
 366:         setIsLoadingDefaults(false);
 367:       }
 368:     };
 369: 
 370:     loadSmartDefaults();
 371:   }, [selectedPlantId, plants, activityType, setValue]);
 372: 
 373: 
 374:   const handleQuickComplete = (values: QuickCompletionValues) => {
 375:     Object.entries(values).forEach(([key, value]) => {
 376:       if (value !== undefined) {
 377:         setValue(key as keyof CareFormData, value);
 378:       }
 379:     });
 380:   };
 381: 
 382: 
 383:   const getPlantMoistureProtocol = useCallback(
 384:     async (plantId: string) => {
 385:       const plant = plants.find((p) => p.id === plantId);
 386:       if (!plant) return null;
 387: 
 388:       try {
 389:         const variety = await varietyService.getVariety(plant.varietyId);
 390:         if (!variety) return null;
 391: 
 392: 
 393:         const currentStage = calculateCurrentStage(
 394:           plant.plantedDate,
 395:           variety.growthTimeline
 396:         );
 397: 
 398: 
 399:         return extractMoistureRangesForStage(variety, currentStage);
 400:       } catch (error) {
 401:         console.error("Error fetching plant moisture protocol:", error);
 402:         return null;
 403:       }
 404:     },
 405:     [plants]
 406:   );
 407: 
 408: 
 409:   const getMoistureValidationForPlant = useCallback(
 410:     async (
 411:       plantId: string,
 412:       moistureBefore?: number,
 413:       moistureAfter?: number
 414:     ): Promise<MoistureValidationResult | null> => {
 415:       const protocol = await getPlantMoistureProtocol(plantId);
 416:       if (!protocol) return null;
 417: 
 418:       const validations: MoistureValidationMessage[] = [];
 419: 
 420: 
 421:       if (moistureBefore !== undefined) {
 422:         const [triggerMin, triggerMax] = protocol.trigger;
 423:         if (moistureBefore >= triggerMin && moistureBefore <= triggerMax) {
 424:           validations.push({
 425:             field: "before",
 426:             message: `✓ Perfect timing! ${triggerMin}-${triggerMax} is ideal for watering.`,
 427:             color: "text-green-600",
 428:           });
 429:         } else if (moistureBefore > triggerMax) {
 430:           validations.push({
 431:             field: "before",
 432:             message: `ℹ️ Plant still moist (${triggerMin}-${triggerMax} recommended for watering).`,
 433:             color: "text-blue-600",
 434:           });
 435:         } else {
 436:           validations.push({
 437:             field: "before",
 438:             message: `⚠️ Very dry! Watering at ${triggerMin}-${triggerMax} prevents stress.`,
 439:             color: "text-orange-600",
 440:           });
 441:         }
 442:       }
 443: 
 444: 
 445:       if (moistureAfter !== undefined) {
 446:         const [targetMin, targetMax] = protocol.target;
 447:         if (moistureAfter >= targetMin && moistureAfter <= targetMax) {
 448:           validations.push({
 449:             field: "after",
 450:             message: `✓ Perfect! Target range ${targetMin}-${targetMax} achieved.`,
 451:             color: "text-green-600",
 452:           });
 453:         } else if (moistureAfter > targetMax) {
 454:           validations.push({
 455:             field: "after",
 456:             message: `⚠️ Over-watered. Target is ${targetMin}-${targetMax}. Allow drying time.`,
 457:             color: "text-orange-600",
 458:           });
 459:         } else {
 460:           validations.push({
 461:             field: "after",
 462:             message: `ℹ️ Could use more water. Target: ${targetMin}-${targetMax}.`,
 463:             color: "text-blue-600",
 464:           });
 465:         }
 466:       }
 467: 
 468: 
 469:       const sourceMessages = {
 470:         protocol: `Using ${protocol.varietyName} ${protocol.currentStage} stage protocol`,
 471:         category: `Using category-based guidance for ${protocol.currentStage} stage`,
 472:         universal: `Using universal defaults (variety protocol incomplete)`,
 473:       };
 474: 
 475:       validations.push({
 476:         field: "source",
 477:         message: sourceMessages[protocol.source],
 478:         color: protocol.isDefault ? "text-gray-500" : "text-gray-700",
 479:       });
 480: 
 481:       return {
 482:         validations,
 483:         isValid: true,
 484:       };
 485:     },
 486:     [getPlantMoistureProtocol]
 487:   );
 488: 
 489: 
 490:   useEffect(() => {
 491:     if (selectedPlantId && (moistureBefore || moistureAfter)) {
 492:       getMoistureValidationForPlant(
 493:         selectedPlantId,
 494:         moistureBefore,
 495:         moistureAfter
 496:       ).then(setMoistureValidation);
 497:     } else {
 498:       setMoistureValidation(null);
 499:     }
 500:   }, [
 501:     selectedPlantId,
 502:     moistureBefore,
 503:     moistureAfter,
 504:     getMoistureValidationForPlant,
 505:   ]);
 506: 
 507:   useEffect(() => {
 508:     const loadPlants = async () => {
 509:       try {
 510:         const activePlants = await plantService.getActivePlants();
 511:         setPlants(activePlants);
 512:       } catch (error) {
 513:         console.error("Failed to load plants:", error);
 514:         toast.error("Failed to load plants");
 515:       }
 516:     };
 517: 
 518:     loadPlants();
 519:   }, []);
 520: 
 521:   const onSubmit = async (data: CareFormData) => {
 522:     try {
 523:       setIsLoading(true);
 524:       setSubmitError(null);
 525: 
 526: 
 527:       let careDetails: CareActivityDetails;
 528: 
 529:       switch (data.type) {
 530:         case "water": {
 531:           const wateringDetails: WateringDetails = {
 532:             type: "water" as const,
 533:             amount: {
 534:               value: data.waterValue,
 535:               unit: data.waterUnit,
 536:             },
 537:             moistureReading:
 538:               showDetailedTracking && data.moistureBefore && data.moistureAfter
 539:                 ? {
 540:                     before: data.moistureBefore,
 541:                     after: data.moistureAfter,
 542:                     scale: "1-10" as const,
 543:                   }
 544:                 : undefined,
 545:             method: data.applicationMethod,
 546:             runoffObserved: data.runoffObserved,
 547:             notes: data.notes,
 548:           };
 549:           careDetails = wateringDetails;
 550:           break;
 551:         }
 552: 
 553:         case "fertilize": {
 554:           const fertilizingDetails: FertilizingDetails = {
 555:             type: "fertilize" as const,
 556:             product: data.product,
 557:             dilution: data.dilution,
 558:             amount: data.amount,
 559:             notes: data.notes,
 560:           };
 561:           careDetails = fertilizingDetails;
 562:           break;
 563:         }
 564: 
 565:         case "observe": {
 566:           const observationDetails: ObservationDetails = {
 567:             type: "observe" as const,
 568:             healthAssessment: data.healthAssessment,
 569:             observations: data.observations,
 570:             photos: capturedPhotos,
 571:             notes: data.notes,
 572:           };
 573:           careDetails = observationDetails;
 574:           break;
 575:         }
 576: 
 577:         default:
 578:           throw new Error(`Unsupported activity type: ${data.type as string}`);
 579:       }
 580: 
 581:       await careService.addCareActivity({
 582:         plantId: data.plantId,
 583:         type: data.type,
 584:         date: new Date(data.date),
 585:         details: careDetails,
 586:       });
 587: 
 588:       toast.success("Care activity logged successfully!");
 589:       reset();
 590:       setCapturedPhotos([]);
 591:       onSuccess?.();
 592:     } catch (error) {
 593:       console.error("Failed to log care activity:", error);
 594:       setSubmitError("Failed to log care activity. Please try again.");
 595:       toast.error("Failed to log care activity");
 596:     } finally {
 597:       setIsLoading(false);
 598:     }
 599:   };
 600: 
 601:   function renderWateringFields() {
 602:     const selectedPlant = plants.find((p) => p.id === selectedPlantId);
 603: 
 604:     return (
 605:       <>
 606:         {}
 607:         {smartDefaults?.watering && (
 608:           <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
 609:             <div className="flex items-start justify-between">
 610:               <div>
 611:                 <h4 className="text-sm font-medium text-blue-900 mb-1">
 612:                   💡 Smart Suggestion
 613:                 </h4>
 614:                 <p className="text-sm text-blue-700">
 615:                   {smartDefaults.watering.reasoning}
 616:                 </p>
 617:                 <div className="flex items-center mt-2 text-xs text-blue-600">
 618:                   <span
 619:                     className={`inline-block w-2 h-2 rounded-full mr-1 ${
 620:                       smartDefaults.watering.confidence === "high"
 621:                         ? "bg-green-500"
 622:                         : smartDefaults.watering.confidence === "medium"
 623:                         ? "bg-yellow-500"
 624:                         : "bg-red-500"
 625:                     }`}
 626:                   />
 627:                   {smartDefaults.watering.confidence} confidence
 628:                 </div>
 629:               </div>
 630:               <div className="text-right">
 631:                 <div className="text-lg font-semibold text-blue-900">
 632:                   {smartDefaults.watering.suggestedAmount}{" "}
 633:                   {smartDefaults.watering.unit}
 634:                 </div>
 635:                 <button
 636:                   type="button"
 637:                   onClick={() =>
 638:                     handleQuickComplete({
 639:                       waterValue: smartDefaults.watering!.suggestedAmount,
 640:                       waterUnit: smartDefaults.watering!.unit,
 641:                     })
 642:                   }
 643:                   className="text-xs text-blue-600 hover:text-blue-800 underline"
 644:                 >
 645:                   Use this amount
 646:                 </button>
 647:               </div>
 648:             </div>
 649:           </div>
 650:         )}
 651: 
 652:         {}
 653:         {selectedPlant && (
 654:           <QuickCompletionButtons
 655:             plant={selectedPlant}
 656:             activityType="water"
 657:             onQuickComplete={handleQuickComplete}
 658:             className="mb-4"
 659:           />
 660:         )}
 661: 
 662:         <div className="grid grid-cols-3 gap-4">
 663:           <div className="col-span-2">
 664:             <label
 665:               htmlFor="waterValue"
 666:               className="block text-sm font-medium text-gray-700 mb-2"
 667:             >
 668:               Water Amount *
 669:             </label>
 670:             <input
 671:               id="waterValue"
 672:               type="number"
 673:               step="0.1"
 674:               min="0.1"
 675:               {...register("waterValue", { valueAsNumber: true })}
 676:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
 677:               placeholder="Amount"
 678:             />
 679:             {"waterValue" in errors && errors.waterValue && (
 680:               <p className="mt-1 text-sm text-red-600">
 681:                 {errors.waterValue.message}
 682:               </p>
 683:             )}
 684:           </div>
 685: 
 686:           <div>
 687:             <label
 688:               htmlFor="waterUnit"
 689:               className="block text-sm font-medium text-gray-700 mb-2"
 690:             >
 691:               Unit *
 692:             </label>
 693:             <select
 694:               id="waterUnit"
 695:               {...register("waterUnit")}
 696:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
 697:             >
 698:               <option value="oz">oz</option>
 699:               <option value="ml">ml</option>
 700:               <option value="cups">cups</option>
 701:               <option value="liters">liters</option>
 702:               <option value="gallons">gallons</option>
 703:             </select>
 704:           </div>
 705:         </div>
 706: 
 707:         {}
 708:         <div className="flex items-center">
 709:           <input
 710:             id="showDetailedTracking"
 711:             type="checkbox"
 712:             checked={showDetailedTracking}
 713:             onChange={(e) => setShowDetailedTracking(e.target.checked)}
 714:             className="h-4 w-4 text-garden-600 border-gray-300 rounded focus:ring-garden-500"
 715:           />
 716:           <label
 717:             htmlFor="showDetailedTracking"
 718:             className="ml-2 text-sm text-gray-700"
 719:           >
 720:             📊 Track moisture readings & method
 721:           </label>
 722:         </div>
 723: 
 724:         {}
 725:         {showDetailedTracking && (
 726:           <div className="space-y-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
 727:             <h4 className="text-sm font-medium text-gray-900">
 728:               Detailed Tracking
 729:             </h4>
 730: 
 731:             <div className="grid grid-cols-2 gap-4">
 732:               <div>
 733:                 <label
 734:                   htmlFor="moistureBefore"
 735:                   className="block text-sm font-medium text-gray-700 mb-2"
 736:                 >
 737:                   Moisture Before (1-10 scale)
 738:                 </label>
 739:                 <input
 740:                   id="moistureBefore"
 741:                   type="number"
 742:                   min="1"
 743:                   max="10"
 744:                   step="0.5"
 745:                   {...register("moistureBefore", { valueAsNumber: true })}
 746:                   className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
 747:                   placeholder="e.g., 3"
 748:                 />
 749:                 <p className="mt-1 text-xs text-gray-500">
 750:                   1 = bone dry, 10 = waterlogged
 751:                 </p>
 752: 
 753:                 {}
 754:                 {moistureValidation?.validations
 755:                   ?.filter((v) => v.field === "before")
 756:                   .map((validation, idx) => (
 757:                     <p
 758:                       key={idx}
 759:                       className={`mt-1 text-xs ${validation.color} flex items-start`}
 760:                     >
 761:                       <span className="flex-shrink-0 mr-1">
 762:                         {validation.message.split(" ")[0]}
 763:                       </span>
 764:                       <span>
 765:                         {validation.message.substring(
 766:                           validation.message.indexOf(" ") + 1
 767:                         )}
 768:                       </span>
 769:                     </p>
 770:                   ))}
 771: 
 772:                 {"moistureBefore" in errors && errors.moistureBefore && (
 773:                   <p className="mt-1 text-sm text-red-600">
 774:                     {errors.moistureBefore.message}
 775:                   </p>
 776:                 )}
 777:               </div>
 778: 
 779:               <div>
 780:                 <label
 781:                   htmlFor="moistureAfter"
 782:                   className="block text-sm font-medium text-gray-700 mb-2"
 783:                 >
 784:                   Moisture After (1-10 scale)
 785:                 </label>
 786:                 <input
 787:                   id="moistureAfter"
 788:                   type="number"
 789:                   min="1"
 790:                   max="10"
 791:                   step="0.5"
 792:                   {...register("moistureAfter", { valueAsNumber: true })}
 793:                   className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500"
 794:                   placeholder="e.g., 7"
 795:                 />
 796:                 <p className="mt-1 text-xs text-gray-500">
 797:                   Target range varies by plant - see protocol above
 798:                 </p>
 799: 
 800:                 {}
 801:                 {moistureValidation?.validations
 802:                   ?.filter((v) => v.field === "after")
 803:                   .map((validation, idx) => (
 804:                     <p
 805:                       key={idx}
 806:                       className={`mt-1 text-xs ${validation.color} flex items-start`}
 807:                     >
 808:                       <span className="flex-shrink-0 mr-1">
 809:                         {validation.message.split(" ")[0]}
 810:                       </span>
 811:                       <span>
 812:                         {validation.message.substring(
 813:                           validation.message.indexOf(" ") + 1
 814:                         )}
 815:                       </span>
 816:                     </p>
 817:                   ))}
 818: 
 819:                 {"moistureAfter" in errors && errors.moistureAfter && (
 820:                   <p className="mt-1 text-sm text-red-600">
 821:                     {errors.moistureAfter.message}
 822:                   </p>
 823:                 )}
 824:               </div>
 825:             </div>
 826: 
 827:             <div className="flex items-start">
 828:               <input
 829:                 id="runoffObserved"
 830:                 type="checkbox"
 831:                 {...register("runoffObserved")}
 832:                 className="mt-1 h-4 w-4 text-garden-600 border-gray-300 rounded focus:ring-garden-500"
 833:               />
 834:               <div className="ml-3">
 835:                 <label
 836:                   htmlFor="runoffObserved"
 837:                   className="text-sm font-medium text-gray-700"
 838:                 >
 839:                   Observed water runoff from drainage holes
 840:                 </label>
 841:                 <p className="text-xs text-gray-500 mt-1">
 842:                   Runoff indicates thorough watering and good drainage
 843:                 </p>
 844:               </div>
 845:             </div>
 846: 
 847:             {}
 848:             {moistureValidation?.validations
 849:               ?.filter((v) => v.field === "source")
 850:               .map((validation, idx) => (
 851:                 <div
 852:                   key={idx}
 853:                   className="mt-3 p-2 bg-gray-50 border border-gray-200 rounded-md"
 854:                 >
 855:                   <p className={`text-xs ${validation.color}`}>
 856:                     {validation.message}
 857:                   </p>
 858:                 </div>
 859:               ))}
 860:           </div>
 861:         )}
 862:       </>
 863:     );
 864:   }
 865: 
 866:   function renderFertilizingFields() {
 867:     const selectedPlant = plants.find((p) => p.id === selectedPlantId);
 868: 
 869:     return (
 870:       <>
 871:         {}
 872:         {smartDefaults?.fertilizer && (
 873:           <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
 874:             <h4 className="text-sm font-medium text-green-900 mb-2">
 875:               💡 Smart Suggestion
 876:             </h4>
 877:             <p className="text-sm text-green-700 mb-3">
 878:               {smartDefaults.fertilizer.reasoning}
 879:             </p>
 880:             <div className="space-y-2">
 881:               {smartDefaults.fertilizer.products.map((product, index) => (
 882:                 <button
 883:                   key={index}
 884:                   type="button"
 885:                   onClick={() =>
 886:                     handleQuickComplete({
 887:                       product: product.name,
 888:                       dilution: product.dilution,
 889:                       amount: product.amount,
 890:                     })
 891:                   }
 892:                   className="block w-full text-left p-2 bg-white border border-green-200 rounded hover:bg-green-50 transition-colors"
 893:                 >
 894:                   <div className="font-medium text-green-900">
 895:                     {product.name}
 896:                   </div>
 897:                   <div className="text-xs text-green-600">
 898:                     {product.dilution} • {product.amount}
 899:                   </div>
 900:                 </button>
 901:               ))}
 902:             </div>
 903:           </div>
 904:         )}
 905: 
 906:         {}
 907:         {selectedPlant && (
 908:           <QuickCompletionButtons
 909:             plant={selectedPlant}
 910:             activityType="fertilize"
 911:             onQuickComplete={handleQuickComplete}
 912:             className="mb-4"
 913:           />
 914:         )}
 915: 
 916:         <div>
 917:           <label
 918:             htmlFor="product"
 919:             className="block text-sm font-medium text-gray-700 mb-2"
 920:           >
 921:             Fertilizer Product *
 922:           </label>
 923:           <input
 924:             id="product"
 925:             type="text"
 926:             {...register("product")}
 927:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
 928:             placeholder="e.g., Neptune's Harvest Fish & Seaweed"
 929:           />
 930:           {"product" in errors && errors.product && (
 931:             <p className="mt-1 text-sm text-red-600">
 932:               {errors.product.message}
 933:             </p>
 934:           )}
 935:         </div>
 936: 
 937:         <div className="grid grid-cols-2 gap-4">
 938:           <div>
 939:             <label
 940:               htmlFor="dilution"
 941:               className="block text-sm font-medium text-gray-700 mb-2"
 942:             >
 943:               Dilution Ratio *
 944:             </label>
 945:             <input
 946:               id="dilution"
 947:               type="text"
 948:               {...register("dilution")}
 949:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
 950:               placeholder="e.g., 1 tbsp/gal, half strength"
 951:             />
 952:             {"dilution" in errors && errors.dilution && (
 953:               <p className="mt-1 text-sm text-red-600">
 954:                 {errors.dilution.message}
 955:               </p>
 956:             )}
 957:           </div>
 958: 
 959:           <div>
 960:             <label
 961:               htmlFor="amount"
 962:               className="block text-sm font-medium text-gray-700 mb-2"
 963:             >
 964:               Application Amount *
 965:             </label>
 966:             <input
 967:               id="amount"
 968:               type="text"
 969:               {...register("amount")}
 970:               className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
 971:               placeholder="e.g., 16 oz, apply until runoff"
 972:             />
 973:             {"amount" in errors && errors.amount && (
 974:               <p className="mt-1 text-sm text-red-600">
 975:                 {errors.amount.message}
 976:               </p>
 977:             )}
 978:           </div>
 979:         </div>
 980:       </>
 981:     );
 982:   }
 983: 
 984:   function renderObservationFields() {
 985:     return (
 986:       <>
 987:         <div>
 988:           <label
 989:             htmlFor="healthAssessment"
 990:             className="block text-sm font-medium text-gray-700 mb-2"
 991:           >
 992:             Health Assessment *
 993:           </label>
 994:           <select
 995:             id="healthAssessment"
 996:             {...register("healthAssessment")}
 997:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
 998:           >
 999:             <option value="">Select assessment...</option>
1000:             <option value="excellent">🌟 Excellent</option>
1001:             <option value="good">😊 Good</option>
1002:             <option value="fair">😐 Fair</option>
1003:             <option value="concerning">😟 Concerning</option>
1004:             <option value="critical">🚨 Critical</option>
1005:           </select>
1006:           {"healthAssessment" in errors && errors.healthAssessment && (
1007:             <p className="mt-1 text-sm text-red-600">
1008:               {errors.healthAssessment.message}
1009:             </p>
1010:           )}
1011:         </div>
1012: 
1013:         <div>
1014:           <label
1015:             htmlFor="observations"
1016:             className="block text-sm font-medium text-gray-700 mb-2"
1017:           >
1018:             Observations *
1019:           </label>
1020:           <textarea
1021:             id="observations"
1022:             rows={4}
1023:             {...register("observations")}
1024:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
1025:             placeholder="Describe what you observed (growth, color, pests, diseases, etc.)"
1026:           />
1027:           {"observations" in errors && errors.observations && (
1028:             <p className="mt-1 text-sm text-red-600">
1029:               {errors.observations.message}
1030:             </p>
1031:           )}
1032:         </div>
1033: 
1034:         <PhotoCapture
1035:           photos={capturedPhotos}
1036:           onPhotosChange={setCapturedPhotos}
1037:           maxPhotos={5}
1038:         />
1039:       </>
1040:     );
1041:   }
1042: 
1043:   function renderActivitySpecificFields() {
1044:     switch (activityType) {
1045:       case "water":
1046:         return renderWateringFields();
1047:       case "fertilize":
1048:         return renderFertilizingFields();
1049:       case "observe":
1050:         return renderObservationFields();
1051:       default:
1052:         return null;
1053:     }
1054:   }
1055: 
1056:   return (
1057:     <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-sm">
1058:       <div className="mb-6">
1059:         <h2 className="text-2xl font-bold text-gray-900 mb-2">
1060:           Log Care Activity
1061:         </h2>
1062:         <p className="text-gray-600">
1063:           Record care activities to track your plants' progress and optimize
1064:           their health.
1065:         </p>
1066:       </div>
1067: 
1068:       <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
1069:         {submitError && (
1070:           <div className="bg-red-50 border border-red-200 rounded-md p-4">
1071:             <p className="text-sm text-red-600">{submitError}</p>
1072:           </div>
1073:         )}
1074: 
1075:         {}
1076:         <div>
1077:           <label
1078:             htmlFor="plantId"
1079:             className="block text-sm font-medium text-gray-700 mb-2"
1080:           >
1081:             Plant *
1082:           </label>
1083:           <select
1084:             id="plantId"
1085:             {...register("plantId")}
1086:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
1087:           >
1088:             <option value="">Select a plant...</option>
1089:             {plants.map((plant) => (
1090:               <option key={plant.id} value={plant.id}>
1091:                 {plant.name || plant.varietyName} - {plant.location}
1092:               </option>
1093:             ))}
1094:           </select>
1095:           {errors.plantId && (
1096:             <p className="mt-1 text-sm text-red-600">
1097:               {errors.plantId.message}
1098:             </p>
1099:           )}
1100:         </div>
1101: 
1102:         {}
1103:         <div>
1104:           <label
1105:             htmlFor="type"
1106:             className="block text-sm font-medium text-gray-700 mb-2"
1107:           >
1108:             Activity Type *
1109:           </label>
1110:           <select
1111:             id="type"
1112:             {...register("type")}
1113:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
1114:           >
1115:             <option value="water">💧 Watering</option>
1116:             <option value="fertilize">🌱 Fertilizing</option>
1117:             <option value="observe">👁️ Observation</option>
1118:             <option value="harvest">🌾 Harvest</option>
1119:             <option value="transplant">🪴 Transplant</option>
1120:           </select>
1121:         </div>
1122: 
1123:         {}
1124:         <div>
1125:           <label
1126:             htmlFor="date"
1127:             className="block text-sm font-medium text-gray-700 mb-2"
1128:           >
1129:             Date *
1130:           </label>
1131:           <input
1132:             id="date"
1133:             type="date"
1134:             {...register("date")}
1135:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
1136:           />
1137:           {errors.date && (
1138:             <p className="mt-1 text-sm text-red-600">{errors.date.message}</p>
1139:           )}
1140:         </div>
1141: 
1142:         {}
1143:         {renderActivitySpecificFields()}
1144: 
1145:         {}
1146:         <div>
1147:           <label
1148:             htmlFor="notes"
1149:             className="block text-sm font-medium text-gray-700 mb-2"
1150:           >
1151:             Notes (optional)
1152:           </label>
1153:           <textarea
1154:             id="notes"
1155:             rows={3}
1156:             {...register("notes")}
1157:             className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-garden-500 focus:border-transparent"
1158:             placeholder="Any additional observations or notes..."
1159:           />
1160:         </div>
1161: 
1162:         {}
1163:         <div className="flex gap-4">
1164:           <Button
1165:             type="submit"
1166:             variant="primary"
1167:             disabled={isLoading || isLoadingDefaults}
1168:             className="flex-1"
1169:           >
1170:             {isLoading ? "Logging..." : "Log Activity"}
1171:           </Button>
1172:           {onCancel && (
1173:             <Button type="button" variant="outline" onClick={onCancel}>
1174:               Cancel
1175:             </Button>
1176:           )}
1177:         </div>
1178:       </form>
1179:     </div>
1180:   );
1181: }

================
File: src/pages/dashboard/index.tsx
================
  1: import { useState, useEffect } from "react";
  2: import { Link, useNavigate } from "react-router-dom";
  3: import { Button } from "@/components/ui/Button";
  4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  5: import { StatusBadge } from "@/components/ui/StatusBadge";
  6: import { plantService, PlantRecord } from "@/types/database";
  7: import { CareSchedulingService } from "@/services/careSchedulingService";
  8: import { UpcomingTask } from "@/types/scheduling";
  9: import PlantStageDisplay from "@/components/plant/PlantStageDisplay";
 10: import { getPlantDisplayName } from "@/utils/plantDisplay";
 11: 
 12: const Dashboard = () => {
 13:   const navigate = useNavigate();
 14:   const [plants, setPlants] = useState<PlantRecord[]>([]);
 15:   const [upcomingTasks, setUpcomingTasks] = useState<UpcomingTask[]>([]);
 16:   const [isLoading, setIsLoading] = useState(true);
 17:   const [error, setError] = useState<string | null>(null);
 18: 
 19:   const handlePlantClick = (plantId: string) => {
 20:     navigate(`/plants/${plantId}`);
 21:   };
 22: 
 23:   const handleTaskClick = (task: UpcomingTask) => {
 24:     navigate(`/plants/${task.plantId}`);
 25:   };
 26: 
 27:   useEffect(() => {
 28:     loadDashboardData();
 29:   }, []);
 30: 
 31:   async function loadDashboardData() {
 32:     try {
 33:       setIsLoading(true);
 34:       setError(null);
 35: 
 36:       const [plantsData, tasksData] = await Promise.all([
 37:         plantService.getActivePlants(),
 38:         CareSchedulingService.getUpcomingTasks(),
 39:       ]);
 40: 
 41:       setPlants(plantsData);
 42:       console.log("Tasks Data:", tasksData);
 43:       setUpcomingTasks(tasksData);
 44:     } catch (error) {
 45:       console.error("Failed to load dashboard data:", error);
 46:       setError("Failed to load plants");
 47:     } finally {
 48:       setIsLoading(false);
 49:     }
 50:   }
 51: 
 52: 
 53:   function getTaskStatus(
 54:     priority: "low" | "medium" | "high"
 55:   ): "healthy" | "attention" | "critical" | "new" {
 56:     switch (priority) {
 57:       case "high":
 58:         return "critical";
 59:       case "medium":
 60:         return "attention";
 61:       case "low":
 62:       default:
 63:         return "healthy";
 64:     }
 65:   }
 66: 
 67:   function getDaysSincePlanting(plantedDate: Date): number {
 68:     const now = new Date();
 69:     const diffTime = Math.abs(now.getTime() - plantedDate.getTime());
 70:     return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
 71:   }
 72: 
 73:   if (isLoading) {
 74:     return (
 75:       <div className="min-h-screen flex items-center justify-center">
 76:         <div className="text-center">
 77:           <div className="text-4xl mb-4">🌱</div>
 78:           <div className="text-lg font-medium">Loading your garden...</div>
 79:         </div>
 80:       </div>
 81:     );
 82:   }
 83: 
 84:   if (error) {
 85:     return (
 86:       <div className="min-h-screen flex items-center justify-center">
 87:         <div className="text-center">
 88:           <div className="text-4xl mb-4">🚨</div>
 89:           <div className="text-lg font-medium text-red-600 mb-4">{error}</div>
 90:           <Button onClick={loadDashboardData}>Try Again</Button>
 91:         </div>
 92:       </div>
 93:     );
 94:   }
 95: 
 96: 
 97:   if (plants.length === 0) {
 98:     return (
 99:       <div className="min-h-screen flex items-center justify-center p-4">
100:         <div className="text-center max-w-md">
101:           <div className="text-6xl mb-6">🌱</div>
102:           <h1 className="text-2xl font-bold text-gray-900 mb-4">
103:             Start Your Digital Garden
104:           </h1>
105:           <p className="text-gray-600 mb-8">
106:             Add your first plant to begin tracking its growth, scheduling care
107:             tasks, and building healthy growing habits.
108:           </p>
109:           <Link to="/add-plant">
110:             <Button className="w-full h-14 text-base">
111:               <span className="mr-2 text-xl">🌿</span>
112:               Add Your First Plant
113:             </Button>
114:           </Link>
115:         </div>
116:       </div>
117:     );
118:   }
119: 
120:   return (
121:     <>
122:       {}
123:       <div className="bg-gradient-to-r from-green-600 to-emerald-600 text-white p-6">
124:         <h1 className="text-2xl font-bold mb-2">My Smart Garden</h1>
125:         <div className="flex items-center space-x-6">
126:           <div className="text-center">
127:             <div
128:               className="text-2xl font-bold"
129:               data-testid="active-plants-count"
130:             >
131:               {plants.length}
132:             </div>
133:             <div className="text-sm opacity-90">Active Plants</div>
134:           </div>
135:           <div className="text-center">
136:             <div className="text-2xl font-bold" data-testid="tasks-due-count">
137:               {upcomingTasks.length}
138:             </div>
139:             <div className="text-sm opacity-90">Tasks Due</div>
140:           </div>
141:         </div>
142:       </div>
143: 
144:       {}
145:       <div className="p-4 space-y-6">
146:         {}
147:         <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm rounded-2xl">
148:           <CardHeader className="pb-3">
149:             <CardTitle className="text-xl font-bold flex items-center">
150:               <span className="mr-2 text-2xl">📋</span>
151:               Today's Tasks
152:             </CardTitle>
153:           </CardHeader>
154:           <CardContent className="space-y-3">
155:             {upcomingTasks.length === 0 ? (
156:               <div className="text-center py-6">
157:                 <div className="text-4xl mb-2">✅</div>
158:                 <div className="font-medium text-gray-600">All caught up!</div>
159:                 <div className="text-sm text-gray-500">No tasks due today</div>
160:               </div>
161:             ) : (
162:               <>
163:                 {upcomingTasks.slice(0, 3).map((task) => (
164:                   <div
165:                     key={task.id}
166:                     onClick={() => handleTaskClick(task)}
167:                     className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-white rounded-xl border border-blue-100 cursor-pointer hover:bg-blue-100"
168:                   >
169:                     <div className="flex-1">
170:                       <div className="font-bold text-gray-900 mb-1">
171:                         {task.name}
172:                       </div>
173:                       <div className="text-sm text-gray-600 mb-2">
174:                         {task.task}
175:                       </div>
176:                       <StatusBadge
177:                         status={getTaskStatus(task.priority)}
178:                         size="sm"
179:                       />
180:                     </div>
181:                   </div>
182:                 ))}
183:                 {upcomingTasks.length > 3 && (
184:                   <Link to="/plants" className="block">
185:                     <Button variant="outline" className="w-full">
186:                       View All Tasks ({upcomingTasks.length})
187:                     </Button>
188:                   </Link>
189:                 )}
190:               </>
191:             )}
192:           </CardContent>
193:         </Card>
194: 
195:         {}
196:         <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm rounded-2xl">
197:           <CardHeader className="pb-3">
198:             <CardTitle className="text-xl font-bold flex items-center">
199:               <span className="mr-2 text-2xl">🌿</span>
200:               Recent Plants
201:             </CardTitle>
202:           </CardHeader>
203:           <CardContent
204:             className="space-y-3"
205:             data-testid="recent-plants-content"
206:           >
207:             {plants.slice(0, 3).map((plant) => (
208:               <div
209:                 key={plant.id}
210:                 onClick={() => handlePlantClick(plant.id)}
211:                 className="flex items-center justify-between p-4 bg-gradient-to-r from-muted to-card rounded-xl border border-border cursor-pointer hover:bg-muted"
212:               >
213:                 <div className="flex-1">
214:                   <div className="font-bold text-foreground mb-1">
215:                     {getPlantDisplayName(plant)}
216:                   </div>
217:                   <PlantStageDisplay plant={plant} />
218: 
219:                   <StatusBadge status="healthy" size="sm" />
220:                 </div>
221:                 <div className="text-right">
222:                   <div className="text-4xl mb-2">🌿</div>
223:                   <div className="text-xs font-semibold text-muted-foreground">
224:                     {getDaysSincePlanting(plant.plantedDate)} days
225:                   </div>
226:                 </div>
227:               </div>
228:             ))}
229:             {plants.length > 3 && (
230:               <Link to="/plants" className="block">
231:                 <Button variant="outline" className="w-full">
232:                   View All Plants ({plants.length})
233:                 </Button>
234:               </Link>
235:             )}
236:           </CardContent>
237:         </Card>
238: 
239:         {}
240:         <div className="grid grid-cols-2 gap-4">
241:           <Link to="/add-plant">
242:             <Button className="w-full h-14 text-base" variant="primary">
243:               <span className="mr-2 text-xl">➕</span>
244:               Add Plant
245:             </Button>
246:           </Link>
247:           <Link to="/log-care">
248:             <Button variant="primary">
249:               <span className="mr-2 text-xl">💧</span>
250:               Log Care
251:             </Button>
252:           </Link>
253:         </div>
254:       </div>
255:     </>
256:   );
257: };
258: 
259: export default Dashboard;




================================================================
End of Codebase
================================================================
