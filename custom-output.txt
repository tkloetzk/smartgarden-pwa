This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: logs, *.log, npm-debug.log*, yarn-debug.log*, yarn-error.log*, pnpm-debug.log*, lerna-debug.log*, .cache/, .parcel-cache/, node_modules, dist, dist-ssr, *.local, .vscode/*, *.suo, *.ntvs*, *.njsproj, *.sln, *.sw?, ._*, .Spotlight-V100, .Trashes, ehthumbs.db, Thumbs.db, .vscode/, .idea/, .env.local, .env.development.local, .env.test.local, .env.production.local, *.tmp, *.temp
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
public/
  vite.svg
scripts/
  lighthouse-ci.js
src/
  __tests__/
    components/
      AddPlant.test.tsx
      BulkActivityModal.test.tsx
      CareLogForm.test.tsx
      Dashboard.test.tsx
      LogCare.test.tsx
      PlantRegistrationForm.test.tsx
      PlantReminderSettings.test.tsx
      PlantStageDisplay.test.tsx
      ReminderPreferencesSection.test.tsx
      SoilMixtureSelector.test.tsx
    database/
      plantService.test.ts
      varietyService.test.ts
    e2e/
      plant-registration.spec.ts
    integration/
      plantDetailReminderSettings.test.tsx
      plantRegistrationFlow.test.tsx
      smartDefaultsIntegration.test.tsx
      stageCalculationDisplay.test.tsx
    services/
      careSchedulingService.test.ts
      smartDefaultsService.test.ts
    setup/
      mockFirebase.ts
    utils/
      growthStage.test.ts
      plantDisplay.test.ts
      plantGrouping.test.ts
      plantRegistration.test.ts
      testHelpers.tsx
      varietyGrowthStages.test.ts
  assets/
    react.svg
  components/
    fertilization/
      FertilizationDashboardSection.tsx
      FertilizationTaskCard.tsx
    layouts/
      EmptyState.tsx
      Welcome.tsx
    plant/
      BulkActivityModal.tsx
      CareActivityItem.tsx
      CareHistory.tsx
      CustomVarietyForm.tsx
      NextActivityCard.tsx
      PlantGroupCard.tsx
      PlantInfoCard.tsx
      PlantRegistrationForm.tsx
      PlantReminderSettings.tsx
      PlantStageDisplay.tsx
      ReminderPreferencesSection.tsx
      SoilMixtureSelector.tsx
    ui/
      Badge.tsx
      Button.tsx
      Card.tsx
      DarkModeToggle.tsx
      Input.tsx
      LoadingSpinner.tsx
      LocationToggle.tsx
      OfflineIndicator.tsx
      StatusBadge.tsx
      Switch.tsx
    AuthForm.tsx
    Navigation.tsx
  data/
    seedVarieties.ts
  db/
    seedData.ts
  hooks/
    useAppInitialization.ts
    useDarkMode.ts
    useDynamicStage.ts
    useFirebaseAuth.ts
    useFirebaseCareActivities.ts
    useFirebasePlants.ts
    useFirstTimeUser.ts
    useNextPlantTask.ts
    useScheduledTasks.ts
  pages/
    care/
      CareLogForm.tsx
      LogCare.tsx
      PhotoCapture.tsx
      QuickCompletionButtons.tsx
    dashboard/
      index.tsx
      TaskGroup.tsx
      TaskItem.tsx
    plants/
      AddPlant.tsx
      PlantDetail.tsx
      Plants.tsx
    settings/
      index.tsx
  services/
    firebase/
      __mocks__/
        config.ts
      authService.ts
      careActivityService.ts
      config.ts
      plantService.ts
      scheduledTaskService.ts
    bulkActivityService.ts
    careSchedulingService.ts
    dynamicSchedulingService.ts
    index.ts
    PlantRegistrationService.ts
    ProtocolTranspilerService.ts
    smartDefaultsService.ts
  styles/
    globals.css
  types/
    core.ts
    database.ts
    firebase.ts
    index.ts
    protocols.ts
    scheduling.ts
    user.ts
  utils/
    cn.ts
    dateUtils.ts
    fertilizationUtils.ts
    growthStage.ts
    plantDisplay.ts
    plantGrouping.ts
    plantStage.ts
  App.css
  App.tsx
  index.css
  jest.polyfills.ts
  main.tsx
  setupTests.ts
  vite-env.d.ts
tests/
  e2e/
    pwa-functionality.spec.ts
.firebaserc
.gitignore
eslint.config.js
firebase.json
firestore.indexes.json
firestore.rules
index.html
jest.config.ts
package.json
postcss.config.js
print_structure.py
README.md
repomix.config.json
storage.rules
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
tsconfig.tsbuildinfo
vite.config.ts

================================================================
Files
================================================================

================
File: src/components/fertilization/FertilizationDashboardSection.tsx
================
  1: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  2: import { Button } from "@/components/ui/Button";
  3: import { Badge } from "@/components/ui/Badge";
  4: import {
  5:   Beaker,
  6:   ChevronDown,
  7:   ChevronUp,
  8:   AlertTriangle,
  9:   Clock,
 10:   CheckCircle2,
 11: } from "lucide-react";
 12: import { useState } from "react";
 13: import { ScheduledTask } from "@/services/ProtocolTranspilerService";
 14: import FertilizationTaskCard from "@/components/fertilization/FertilizationTaskCard";
 15: import { QuickCompletionValues } from "@/services/smartDefaultsService";
 16: 
 17: interface FertilizationDashboardSectionProps {
 18:   tasks: ScheduledTask[];
 19:   onTaskComplete: (taskId: string, quickData?: QuickCompletionValues) => void;
 20:   onTaskBypass: (taskId: string, reason?: string) => void;
 21:   onTaskLogActivity: (taskId: string) => void;
 22: }
 23: 
 24: const FertilizationDashboardSection: React.FC<
 25:   FertilizationDashboardSectionProps
 26: > = ({ tasks, onTaskComplete, onTaskBypass, onTaskLogActivity }) => {
 27:   const [isExpanded, setIsExpanded] = useState(true);
 28: 
 29:   if (tasks.length === 0) return null;
 30: 
 31:   const overdueTasks = tasks.filter((task) => task.dueDate < new Date());
 32:   const todayTasks = tasks.filter((task) => {
 33:     const today = new Date();
 34:     return task.dueDate.toDateString() === today.toDateString();
 35:   });
 36:   const upcomingTasks = tasks.filter((task) => task.dueDate > new Date());
 37: 
 38:   const getPriorityCount = () => {
 39:     const overdue = overdueTasks.length;
 40:     const today = todayTasks.length;
 41:     return { overdue, today };
 42:   };
 43: 
 44:   const { overdue, today } = getPriorityCount();
 45: 
 46:   return (
 47:     <Card className="mb-6">
 48:       <CardHeader
 49:         className="cursor-pointer hover:bg-muted/50 transition-colors"
 50:         onClick={() => setIsExpanded(!isExpanded)}
 51:       >
 52:         <div className="flex items-center justify-between">
 53:           <CardTitle className="flex items-center gap-2">
 54:             <Beaker className="h-5 w-5 text-green-600" />
 55:             <span>🌱 Fertilization Tasks</span>
 56:             <Badge variant="secondary" className="ml-2">
 57:               {tasks.length}
 58:             </Badge>
 59:           </CardTitle>
 60:           <div className="flex items-center gap-2">
 61:             {overdue > 0 && (
 62:               <Badge variant="destructive" className="flex items-center gap-1">
 63:                 <AlertTriangle className="h-3 w-3" />
 64:                 {overdue}
 65:               </Badge>
 66:             )}
 67:             {today > 0 && (
 68:               <Badge variant="default" className="flex items-center gap-1">
 69:                 <Clock className="h-3 w-3" />
 70:                 {today}
 71:               </Badge>
 72:             )}
 73:             {isExpanded ? (
 74:               <ChevronUp className="h-4 w-4" />
 75:             ) : (
 76:               <ChevronDown className="h-4 w-4" />
 77:             )}
 78:           </div>
 79:         </div>
 80:       </CardHeader>
 81: 
 82:       {isExpanded && (
 83:         <CardContent className="space-y-4">
 84:           {}
 85:           {overdueTasks.length > 0 && (
 86:             <div>
 87:               <div className="flex items-center gap-2 mb-3">
 88:                 <AlertTriangle className="h-4 w-4 text-red-600" />
 89:                 <h4 className="font-medium text-red-600">
 90:                   Overdue ({overdueTasks.length})
 91:                 </h4>
 92:               </div>
 93:               <div className="space-y-3">
 94:                 {overdueTasks.map((task) => (
 95:                   <FertilizationTaskCard
 96:                     key={task.id}
 97:                     task={task}
 98:                     onComplete={onTaskComplete}
 99:                     onBypass={onTaskBypass}
100:                     onLogActivity={onTaskLogActivity}
101:                   />
102:                 ))}
103:               </div>
104:             </div>
105:           )}
106: 
107:           {}
108:           {todayTasks.length > 0 && (
109:             <div>
110:               <div className="flex items-center gap-2 mb-3">
111:                 <Clock className="h-4 w-4 text-orange-600" />
112:                 <h4 className="font-medium text-orange-600">
113:                   Due Today ({todayTasks.length})
114:                 </h4>
115:               </div>
116:               <div className="space-y-3">
117:                 {todayTasks.map((task) => (
118:                   <FertilizationTaskCard
119:                     key={task.id}
120:                     task={task}
121:                     onComplete={onTaskComplete}
122:                     onBypass={onTaskBypass}
123:                     onLogActivity={onTaskLogActivity}
124:                   />
125:                 ))}
126:               </div>
127:             </div>
128:           )}
129: 
130:           {}
131:           {upcomingTasks.length > 0 && (
132:             <div>
133:               <div className="flex items-center gap-2 mb-3">
134:                 <CheckCircle2 className="h-4 w-4 text-green-600" />
135:                 <h4 className="font-medium text-green-600">
136:                   Upcoming ({upcomingTasks.slice(0, 3).length}
137:                   {upcomingTasks.length > 3 ? "+" : ""})
138:                 </h4>
139:               </div>
140:               <div className="space-y-3">
141:                 {upcomingTasks.slice(0, 3).map((task) => (
142:                   <FertilizationTaskCard
143:                     key={task.id}
144:                     task={task}
145:                     onComplete={onTaskComplete}
146:                     onBypass={onTaskBypass}
147:                     onLogActivity={onTaskLogActivity}
148:                     showQuickActions={false}
149:                   />
150:                 ))}
151:               </div>
152:               {upcomingTasks.length > 3 && (
153:                 <Button variant="outline" className="w-full mt-3">
154:                   View All {upcomingTasks.length} Upcoming Tasks
155:                 </Button>
156:               )}
157:             </div>
158:           )}
159:         </CardContent>
160:       )}
161:     </Card>
162:   );
163: };
164: 
165: export default FertilizationDashboardSection;

================
File: src/components/fertilization/FertilizationTaskCard.tsx
================
  1: import React from "react";
  2: import { ScheduledTask } from "@/services/ProtocolTranspilerService";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { Button } from "@/components/ui/Button";
  5: import { Badge } from "@/components/ui/Badge";
  6: import {
  7:   Beaker,
  8:   Clock,
  9:   Droplets,
 10:   Leaf,
 11:   Info,
 12:   CheckCircle2,
 13:   AlertTriangle,
 14:   Calendar,
 15: } from "lucide-react";
 16: import { formatDistanceToNow, isPast, isToday, isTomorrow } from "date-fns";
 17: import { QuickCompletionValues } from "@/services/smartDefaultsService";
 18: 
 19: interface FertilizationTaskCardProps {
 20:   task: ScheduledTask;
 21:   onComplete: (taskId: string, quickData?: QuickCompletionValues) => void;
 22:   onBypass: (taskId: string, reason?: string) => void;
 23:   onLogActivity: (taskId: string) => void;
 24:   isWateringDueSoon?: boolean;
 25:   canCombineWithWatering?: boolean;
 26:   showQuickActions?: boolean;
 27: }
 28: 
 29: export const FertilizationTaskCard: React.FC<FertilizationTaskCardProps> = ({
 30:   task,
 31:   onComplete,
 32:   onBypass,
 33:   onLogActivity,
 34:   isWateringDueSoon = false,
 35:   canCombineWithWatering = false,
 36:   showQuickActions = true,
 37: }) => {
 38:   const isOverdue = isPast(task.dueDate);
 39:   const isDueToday = isToday(task.dueDate);
 40:   const isDueTomorrow = isTomorrow(task.dueDate);
 41: 
 42:   const getMethodIcon = (method: string) => {
 43:     switch (method) {
 44:       case "soil-drench":
 45:         return <Droplets className="h-4 w-4" />;
 46:       case "foliar-spray":
 47:         return <Leaf className="h-4 w-4" />;
 48:       case "top-dress":
 49:         return <Beaker className="h-4 w-4" />;
 50:       default:
 51:         return <Beaker className="h-4 w-4" />;
 52:     }
 53:   };
 54: 
 55:   const getMethodDisplay = (method: string) => {
 56:     switch (method) {
 57:       case "soil-drench":
 58:         return "Soil Drench";
 59:       case "foliar-spray":
 60:         return "Foliar Spray";
 61:       case "top-dress":
 62:         return "Top Dress";
 63:       default:
 64:         return method;
 65:     }
 66:   };
 67: 
 68:   const getPriorityColor = () => {
 69:     if (isOverdue) return "border-red-500 bg-red-50 dark:bg-red-950/30";
 70:     if (isDueToday)
 71:       return "border-orange-500 bg-orange-50 dark:bg-orange-950/30";
 72:     if (isDueTomorrow)
 73:       return "border-yellow-500 bg-yellow-50 dark:bg-yellow-950/30";
 74:     return "border-green-500 bg-green-50 dark:bg-green-950/30";
 75:   };
 76: 
 77:   const getStatusDisplay = () => {
 78:     if (isOverdue) {
 79:       return {
 80:         text: `Overdue by ${formatDistanceToNow(task.dueDate)}`,
 81:         icon: <AlertTriangle className="h-4 w-4" />,
 82:         color: "text-red-600 dark:text-red-400",
 83:       };
 84:     }
 85:     if (isDueToday) {
 86:       return {
 87:         text: "Due today",
 88:         icon: <Clock className="h-4 w-4" />,
 89:         color: "text-orange-600 dark:text-orange-400",
 90:       };
 91:     }
 92:     if (isDueTomorrow) {
 93:       return {
 94:         text: "Due tomorrow",
 95:         icon: <Calendar className="h-4 w-4" />,
 96:         color: "text-yellow-600 dark:text-yellow-500",
 97:       };
 98:     }
 99:     return {
100:       text: `Due in ${formatDistanceToNow(task.dueDate)}`,
101:       icon: <Clock className="h-4 w-4" />,
102:       color: "text-green-600 dark:text-green-400",
103:     };
104:   };
105: 
106:   const handleQuickComplete = () => {
107:     const quickData: QuickCompletionValues = {
108:       product: task.details.product,
109:       amount: task.details.amount,
110:       dilution: task.details.dilution,
111:       notes: `Quick completion: ${task.taskName}`,
112:     };
113:     onComplete(task.id, quickData);
114:   };
115: 
116:   const status = getStatusDisplay();
117: 
118:   return (
119:     <Card
120:       className={`border-l-4 transition-all duration-200 hover:shadow-md ${getPriorityColor()}`}
121:     >
122:       <CardHeader className="pb-3">
123:         <div className="flex items-start justify-between">
124:           <div className="flex-1">
125:             <CardTitle className="flex items-center gap-2 text-lg">
126:               <Beaker className="h-5 w-5 text-green-600" />
127:               {task.taskName}
128:             </CardTitle>
129:             <div className="flex items-center gap-2 mt-1">
130:               {status.icon}
131:               <span className={`text-sm font-medium ${status.color}`}>
132:                 {status.text}
133:               </span>
134:             </div>
135:           </div>
136:           <Badge
137:             variant={
138:               isOverdue ? "destructive" : isDueToday ? "default" : "secondary"
139:             }
140:           >
141:             {task.priority}
142:           </Badge>
143:         </div>
144:       </CardHeader>
145: 
146:       <CardContent className="space-y-4">
147:         {}
148:         <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
149:           <div className="space-y-2">
150:             <div className="flex items-center gap-2">
151:               <Beaker className="h-4 w-4 text-muted-foreground" />
152:               <span className="text-sm font-medium">Product</span>
153:             </div>
154:             <p className="text-sm text-muted-foreground pl-6">
155:               {task.details.product}
156:             </p>
157:           </div>
158: 
159:           <div className="space-y-2">
160:             <div className="flex items-center gap-2">
161:               {getMethodIcon(task.details.method)}
162:               <span className="text-sm font-medium">Method</span>
163:             </div>
164:             <p className="text-sm text-muted-foreground pl-6">
165:               {getMethodDisplay(task.details.method)}
166:             </p>
167:           </div>
168: 
169:           <div className="space-y-2">
170:             <div className="flex items-center gap-2">
171:               <span className="text-sm font-medium">Amount</span>
172:             </div>
173:             <p className="text-sm text-muted-foreground">
174:               {task.details.amount}
175:             </p>
176:           </div>
177: 
178:           <div className="space-y-2">
179:             <div className="flex items-center gap-2">
180:               <span className="text-sm font-medium">Dilution</span>
181:             </div>
182:             <p className="text-sm text-muted-foreground">
183:               {task.details.dilution}
184:             </p>
185:           </div>
186:         </div>
187: 
188:         {}
189:         {canCombineWithWatering && isWateringDueSoon && (
190:           <div className="p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
191:             <div className="flex items-start gap-2">
192:               <Info className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
193:               <div className="text-sm">
194:                 <p className="font-medium text-blue-900 dark:text-blue-100">
195:                   Smart Timing Suggestion
196:                 </p>
197:                 <p className="text-blue-700 dark:text-blue-300 mt-1">
198:                   Watering is due soon. Consider combining this fertilizer
199:                   application with watering to prevent overwatering.
200:                 </p>
201:               </div>
202:             </div>
203:           </div>
204:         )}
205: 
206:         {}
207:         {showQuickActions && (
208:           <div className="flex flex-col sm:flex-row gap-2 pt-2">
209:             <Button
210:               onClick={handleQuickComplete}
211:               className="flex-1 bg-green-600 hover:bg-green-700 text-white"
212:               size="sm"
213:             >
214:               <CheckCircle2 className="h-4 w-4 mr-2" />
215:               Quick: {task.details.product}
216:             </Button>
217: 
218:             <Button
219:               onClick={() => onLogActivity(task.id)}
220:               variant="outline"
221:               className="flex-1"
222:               size="sm"
223:             >
224:               <Beaker className="h-4 w-4 mr-2" />
225:               Log Details
226:             </Button>
227: 
228:             <Button
229:               onClick={() => onBypass(task.id)}
230:               variant="outline"
231:               className="text-muted-foreground hover:text-foreground"
232:               size="sm"
233:             >
234:               Bypass
235:             </Button>
236:           </div>
237:         )}
238: 
239:         {}
240:         {task.sourceProtocol && (
241:           <div className="text-xs text-muted-foreground border-t pt-2">
242:             Protocol guidance for {task.sourceProtocol.stage} stage
243:           </div>
244:         )}
245:       </CardContent>
246:     </Card>
247:   );
248: };
249: 
250: export default FertilizationTaskCard;

================
File: src/hooks/useScheduledTasks.ts
================
 1: import { useState, useEffect } from "react";
 2: import { FirebaseScheduledTaskService } from "../services/firebase/scheduledTaskService";
 3: import { ScheduledTask } from "../services/ProtocolTranspilerService";
 4: import { useFirebaseAuth } from "./useFirebaseAuth";
 5: 
 6: export function useScheduledTasks() {
 7:   const [tasks, setTasks] = useState<ScheduledTask[]>([]);
 8:   const [loading, setLoading] = useState(true);
 9:   const [error, setError] = useState<string | null>(null);
10:   const { user } = useFirebaseAuth();
11: 
12:   useEffect(() => {
13:     if (!user) {
14:       setTasks([]);
15:       setLoading(false);
16:       return;
17:     }
18: 
19:     const unsubscribe = FirebaseScheduledTaskService.subscribeToUserTasks(
20:       user.uid,
21:       (userTasks) => {
22:         setTasks(userTasks);
23:         setLoading(false);
24:         setError(null);
25:       },
26:       (err) => {
27: 
28:         setError(err.message);
29:         setLoading(false);
30:       }
31:     );
32: 
33:     return unsubscribe;
34:   }, [user]);
35: 
36: 
37:   const getUpcomingFertilizationTasks = (daysAhead = 7) => {
38:     const cutoffDate = new Date();
39:     cutoffDate.setDate(cutoffDate.getDate() + daysAhead);
40: 
41:     return tasks.filter(
42:       (task) => task.taskType === "fertilize" && task.dueDate <= cutoffDate
43:     );
44:   };
45: 
46:   return {
47:     tasks,
48:     loading,
49:     error,
50:     getUpcomingFertilizationTasks,
51:   };
52: }

================
File: src/services/firebase/scheduledTaskService.ts
================
  1: import {
  2:   collection,
  3:   addDoc,
  4:   query,
  5:   where,
  6:   onSnapshot,
  7:   orderBy,
  8:   Timestamp,
  9: } from "firebase/firestore";
 10: import { db } from "./config";
 11: import { ScheduledTask } from "../ProtocolTranspilerService";
 12: 
 13: export interface FirebaseScheduledTask {
 14:   id?: string;
 15:   userId: string;
 16:   plantId: string;
 17:   taskName: string;
 18:   taskType: string;
 19:   details: {
 20:     type: string;
 21:     product: string;
 22:     dilution: string;
 23:     amount: string;
 24:     method: string;
 25:   };
 26:   dueDate: Timestamp;
 27:   status: string;
 28:   sourceProtocol: {
 29:     stage: string;
 30:     originalStartDays: number;
 31:     isDynamic: boolean;
 32:   };
 33:   createdAt: Timestamp;
 34:   updatedAt: Timestamp;
 35: }
 36: 
 37: export class FirebaseScheduledTaskService {
 38:   private static tasksCollection = collection(db, "scheduledTasks");
 39: 
 40:   static async createTask(
 41:     task: ScheduledTask,
 42:     userId: string
 43:   ): Promise<string> {
 44:     const firebaseTask: Omit<FirebaseScheduledTask, "id"> = {
 45:       userId,
 46:       plantId: task.plantId,
 47:       taskName: task.taskName,
 48:       taskType: task.taskType,
 49:       details: task.details,
 50:       dueDate: Timestamp.fromDate(task.dueDate),
 51:       status: task.status,
 52:       sourceProtocol: task.sourceProtocol,
 53:       createdAt: Timestamp.now(),
 54:       updatedAt: Timestamp.now(),
 55:     };
 56: 
 57:     const docRef = await addDoc(this.tasksCollection, firebaseTask);
 58:     return docRef.id;
 59:   }
 60: 
 61:   static async createMultipleTasks(
 62:     tasks: ScheduledTask[],
 63:     userId: string
 64:   ): Promise<string[]> {
 65:     const promises = tasks.map((task) => this.createTask(task, userId));
 66:     const taskIds = await Promise.all(promises);
 67: 
 68:     return taskIds;
 69:   }
 70: 
 71:   static subscribeToUserTasks(
 72:     userId: string,
 73:     callback: (tasks: ScheduledTask[]) => void,
 74:     errorCallback: (error: Error) => void
 75:   ) {
 76:     const q = query(
 77:       this.tasksCollection,
 78:       where("userId", "==", userId),
 79:       where("status", "==", "pending"),
 80:       orderBy("dueDate", "asc")
 81:     );
 82: 
 83:     return onSnapshot(
 84:       q,
 85:       (snapshot) => {
 86:         const tasks: ScheduledTask[] = snapshot.docs.map((doc) => {
 87:           const data = doc.data() as FirebaseScheduledTask;
 88:           return {
 89:             id: doc.id,
 90:             plantId: data.plantId,
 91:             taskName: data.taskName,
 92:             taskType: data.taskType as ScheduledTask["taskType"],
 93:             details: data.details as ScheduledTask["details"],
 94:             dueDate: data.dueDate.toDate(),
 95:             status: data.status as ScheduledTask["status"],
 96:             sourceProtocol:
 97:               data.sourceProtocol as ScheduledTask["sourceProtocol"],
 98:             createdAt: data.createdAt.toDate(),
 99:             updatedAt: data.updatedAt.toDate(),
100:           };
101:         });
102:         callback(tasks);
103:       },
104:       (error) => {
105: 
106:         console.error("❌ Error subscribing to tasks:", error);
107:         errorCallback(error);
108:       }
109:     );
110:   }
111: }

================
File: src/services/index.ts
================
1: export { PlantRegistrationService } from "./PlantRegistrationService";
2: export { ProtocolTranspilerService } from "./ProtocolTranspilerService";
3: export type { ScheduledTask } from "./ProtocolTranspilerService";
4: 
5: 
6: export { plantService, varietyService } from "@/types";

================
File: src/services/PlantRegistrationService.ts
================
  1: import { PlantRecord } from "@/types";
  2: import {
  3:   ProtocolTranspilerService,
  4:   ScheduledTask,
  5: } from "./ProtocolTranspilerService";
  6: import { plantService, varietyService } from ".";
  7: 
  8: 
  9: const scheduledTasksStore: ScheduledTask[] = [];
 10: 
 11: export class PlantRegistrationService {
 12: 
 13: 
 14: 
 15:   static async registerPlant(plantData: PlantRecord): Promise<void> {
 16:     try {
 17: 
 18:       const { id, createdAt, updatedAt, ...plantDataForDb } = plantData;
 19:       await plantService.addPlant(plantDataForDb);
 20: 
 21:       const variety = await varietyService.getVariety(plantData.varietyId);
 22:       if (!variety) {
 23:         throw new Error(`Variety not found: ${plantData.varietyId}`);
 24:       }
 25: 
 26:       if (variety.protocols?.fertilization) {
 27:         const scheduledTasks =
 28:           await ProtocolTranspilerService.transpilePlantProtocol(
 29:             plantData,
 30:             variety
 31:           );
 32:         scheduledTasksStore.push(...scheduledTasks);
 33:       }
 34:     } catch (error) {
 35: 
 36:       try {
 37:         await plantService.deletePlant(plantData.id);
 38:       } catch (rollbackError) {
 39:         console.error("Failed to rollback plant creation:", rollbackError);
 40:       }
 41:       throw new Error(`Failed to register plant: ${(error as Error).message}`);
 42:     }
 43:   }
 44: 
 45: 
 46: 
 47: 
 48:   static async createPlantFromForm(formData: {
 49:     varietyId: string;
 50:     name?: string;
 51:     plantedDate: Date;
 52:     location: string;
 53:     container: string;
 54:     soilMix?: string;
 55:     notes?: string[];
 56:     quantity?: number;
 57:     reminderPreferences?: {
 58:       watering: boolean;
 59:       fertilizing: boolean;
 60:       observation: boolean;
 61:       lighting: boolean;
 62:       pruning: boolean;
 63:     };
 64:   }): Promise<PlantRecord> {
 65: 
 66:     const variety = await varietyService.getVariety(formData.varietyId);
 67:     if (!variety) {
 68:       throw new Error(`Variety not found: ${formData.varietyId}`);
 69:     }
 70: 
 71: 
 72:     const plantId = crypto.randomUUID();
 73: 
 74:     const plant: PlantRecord = {
 75:       id: plantId,
 76:       varietyId: formData.varietyId,
 77:       varietyName: variety.name,
 78:       name: formData.name,
 79:       plantedDate: formData.plantedDate,
 80:       location: formData.location,
 81:       container: formData.container,
 82:       soilMix: formData.soilMix,
 83:       isActive: true,
 84:       notes: formData.notes,
 85:       quantity: formData.quantity || 1,
 86:       reminderPreferences: formData.reminderPreferences || {
 87:         watering: true,
 88:         fertilizing: true,
 89:         observation: true,
 90:         lighting: true,
 91:         pruning: true,
 92:       },
 93:       createdAt: new Date(),
 94:       updatedAt: new Date(),
 95:     };
 96: 
 97:     await this.registerPlant(plant);
 98:     return plant;
 99:   }
100: 
101: 
102: 
103: 
104:   static getScheduledTasksForPlant(plantId: string): ScheduledTask[] {
105:     return scheduledTasksStore.filter((task) => task.plantId === plantId);
106:   }
107: 
108: 
109: 
110: 
111:   static getPendingFertilizationTasks(): ScheduledTask[] {
112:     return scheduledTasksStore.filter(
113:       (task) => task.status === "pending" && task.taskType === "fertilize"
114:     );
115:   }
116: }

================
File: src/services/ProtocolTranspilerService.ts
================
  1: import {
  2:   PlantRecord,
  3:   VarietyRecord,
  4:   GrowthStage,
  5:   CareActivityType,
  6:   FertilizationScheduleItem,
  7: } from "@/types";
  8: 
  9: export interface ScheduledTask {
 10:   id: string;
 11:   plantId: string;
 12:   taskName: string;
 13:   taskType: CareActivityType;
 14:   details: {
 15:     type: "fertilize";
 16:     product: string;
 17:     dilution: string;
 18:     amount: string;
 19:     method: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
 20:   };
 21:   dueDate: Date;
 22:   status: "pending" | "completed" | "skipped" | "bypassed";
 23:   sourceProtocol: {
 24:     stage: GrowthStage;
 25:     originalStartDays: number;
 26:     isDynamic: boolean;
 27:   };
 28:   coordinatedWith?: string[];
 29:   priority?: "low" | "normal" | "high" | "critical";
 30:   createdAt: Date;
 31:   updatedAt: Date;
 32: }
 33: 
 34: export class ProtocolTranspilerService {
 35: 
 36: 
 37: 
 38:   static async transpilePlantProtocol(
 39:     plant: PlantRecord,
 40:     variety: VarietyRecord
 41:   ): Promise<ScheduledTask[]> {
 42:     const tasks: ScheduledTask[] = [];
 43:     const plantedDate = new Date(plant.plantedDate);
 44: 
 45:     if (!variety.protocols?.fertilization) {
 46:       return tasks;
 47:     }
 48: 
 49: 
 50:     for (const [stageName, stageProtocol] of Object.entries(
 51:       variety.protocols.fertilization
 52:     )) {
 53:       const stageStartDays = this.calculateStageStartDays(
 54:         variety.growthTimeline,
 55:         stageName as GrowthStage
 56:       );
 57: 
 58: 
 59:       for (const scheduleItem of stageProtocol.schedule || []) {
 60:         const taskInstances = this.createTaskInstances(
 61:           plant,
 62:           stageName as GrowthStage,
 63:           scheduleItem,
 64:           plantedDate,
 65:           stageStartDays
 66:         );
 67:         tasks.push(...taskInstances);
 68:       }
 69:     }
 70: 
 71:     return tasks;
 72:   }
 73: 
 74: 
 75: 
 76: 
 77:   private static calculateStageStartDays(
 78:     growthTimeline: any,
 79:     stageName: string
 80:   ): number {
 81: 
 82:     if (growthTimeline[stageName] !== undefined) {
 83:       return growthTimeline[stageName];
 84:     }
 85: 
 86:     console.warn(`Stage '${stageName}' not found in growth timeline`);
 87:     return 0;
 88:   }
 89: 
 90: 
 91: 
 92: 
 93:   private static createTaskInstances(
 94:     plant: PlantRecord,
 95:     stage: GrowthStage,
 96:     scheduleItem: FertilizationScheduleItem,
 97:     plantedDate: Date,
 98:     stageStartDays: number
 99:   ): ScheduledTask[] {
100:     const tasks: ScheduledTask[] = [];
101:     const absoluteStartDays = stageStartDays + scheduleItem.startDays;
102: 
103:     for (let i = 0; i < scheduleItem.repeatCount; i++) {
104:       const dueDate = new Date(plantedDate);
105:       dueDate.setDate(
106:         dueDate.getDate() + absoluteStartDays + i * scheduleItem.frequencyDays
107:       );
108: 
109:       const taskId = `${plant.id}-${stage}-${scheduleItem.taskName
110:         .replace(/\s+/g, "-")
111:         .toLowerCase()}-${i}`;
112: 
113:       tasks.push({
114:         id: taskId,
115:         plantId: plant.id,
116:         taskName: scheduleItem.taskName,
117:         taskType: "fertilize",
118:         details: {
119:           type: "fertilize",
120:           product: scheduleItem.details.product,
121:           dilution: scheduleItem.details.dilution || "As directed",
122:           amount: scheduleItem.details.amount || "Apply as needed",
123:           method: scheduleItem.details.method || "soil-drench",
124:         },
125:         dueDate,
126:         status: "pending",
127:         sourceProtocol: {
128:           stage,
129:           originalStartDays: scheduleItem.startDays,
130:           isDynamic: false,
131:         },
132:         priority: "normal",
133:         createdAt: new Date(),
134:         updatedAt: new Date(),
135:       });
136:     }
137: 
138:     return tasks;
139:   }
140: }

================
File: src/types/protocols.ts
================
  1: import { GrowthStage, ApplicationMethod } from "./core";
  2: 
  3: export interface GrowthTimeline {
  4:   germination: number;
  5:   seedling: number;
  6:   vegetative: number;
  7:   maturation: number;
  8:   rootDevelopment: number;
  9: }
 10: 
 11: export interface FertilizerProtocol {
 12:   product?: string;
 13:   dilution?: string;
 14:   amount?: string;
 15:   method?: ApplicationMethod;
 16: }
 17: 
 18: export interface ApplicationDetails {
 19:   dilution?: string;
 20:   amount?: string;
 21:   method?: ApplicationMethod;
 22: }
 23: 
 24: 
 25: 
 26: export interface VarietyProtocols {
 27:   watering?: Record<
 28:     GrowthStage,
 29:     {
 30:       trigger?: { moistureLevel?: string | number };
 31:       target?: { moistureLevel?: string | number };
 32:       volume?: { amount?: string | number; frequency?: string };
 33:     }
 34:   >;
 35:   fertilization?: Record<
 36:     GrowthStage,
 37:     {
 38:       schedule?: FertilizationScheduleItem[];
 39:       notes?: string[];
 40:     }
 41:   >;
 42:   lighting?: Record<
 43:     GrowthStage,
 44:     {
 45:       ppfd?: { min: number; max: number; unit: string };
 46:       photoperiod?: { hours: number };
 47:       dli?: { min: number; max: number; unit: string };
 48:     }
 49:   >;
 50:   environment?: EnvironmentalProtocol;
 51:   soilMixture?: SoilMixture;
 52:   container?: ContainerRequirements;
 53:   succession?: SuccessionProtocol;
 54:   specialRequirements?: string[];
 55: }
 56: export interface CategoryMoistureDefaults {
 57:   trigger: [number, number];
 58:   target: [number, number];
 59: }
 60: 
 61: export interface MoistureProtocolInfo {
 62:   trigger: [number, number];
 63:   target: [number, number];
 64:   varietyName: string;
 65:   currentStage: GrowthStage;
 66:   isDefault: boolean;
 67:   source: "custom" | "category" | "universal";
 68: }
 69: 
 70: export interface FertilizationScheduleItem {
 71:   taskName: string;
 72:   details: {
 73:     product: string;
 74:     dilution?: string;
 75:     amount?: string;
 76:     method?: ApplicationMethod;
 77:   };
 78:   startDays: number;
 79:   frequencyDays: number;
 80:   repeatCount: number;
 81: }
 82: 
 83: export interface StageSpecificWateringProtocol {
 84:   [stageName: string]: {
 85:     trigger: {
 86:       moistureLevel: string | number;
 87:       description?: string;
 88:     };
 89:     target: {
 90:       moistureLevel: string | number;
 91:       description?: string;
 92:     };
 93:     volume: {
 94:       amount: string;
 95:       frequency: string;
 96:       perPlant?: boolean;
 97:     };
 98:     notes?: string[];
 99:   };
100: }
101: 
102: export interface StageSpecificLightingProtocol {
103:   [stageName: string]: {
104:     ppfd: {
105:       min: number;
106:       max: number;
107:       optimal?: number;
108:       unit: "µmol/m²/s";
109:     };
110:     photoperiod: {
111:       hours: number;
112:       maxHours?: number;
113:       minHours?: number;
114:       constraint?: string;
115:     };
116:     dli: {
117:       min: number;
118:       max: number;
119:       unit: "mol/m²/day";
120:     };
121:     notes?: string[];
122:   };
123: }
124: 
125: export interface FertilizationScheduleItem {
126:   taskName: string;
127:   details: {
128:     product: string;
129:     dilution?: string;
130:     amount?: string;
131:     method?: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
132:   };
133:   startDays: number;
134:   frequencyDays: number;
135:   repeatCount: number;
136: }
137: 
138: export interface StageSpecificFertilizationProtocol {
139:   [stageName: string]: {
140:     schedule?: FertilizationScheduleItem[];
141:     notes?: string[];
142:   };
143: }
144: 
145: 
146: export interface EnvironmentalProtocol {
147:   temperature?: {
148:     min?: number;
149:     max?: number;
150:     optimal?: number;
151:     unit: "F" | "C";
152:     criticalMax?: number;
153:     criticalMin?: number;
154:     stage?: string;
155:   };
156:   humidity?: {
157:     min?: number;
158:     max?: number;
159:     optimal?: number;
160:     criticalForStage?: string;
161:   };
162:   pH: {
163:     min: number;
164:     max: number;
165:     optimal: number;
166:   };
167:   specialConditions?: string[];
168:   constraints?: {
169:     description: string;
170:     parameter: "temperature" | "humidity" | "light" | "other";
171:     threshold: number;
172:     consequence: string;
173:   }[];
174: }
175: 
176: export interface SoilMixture {
177:   components: {
178:     [component: string]: number;
179:   };
180:   amendments?: {
181:     [amendment: string]: string;
182:   };
183: }
184: 
185: export interface ContainerRequirements {
186:   minSize?: string;
187:   depth: string;
188:   drainage?: string;
189:   staging?: {
190:     seedling?: string;
191:     intermediate?: string;
192:     final: string;
193:   };
194: }
195: 
196: export interface SuccessionProtocol {
197:   interval: number;
198:   method: "continuous" | "zoned" | "single";
199:   harvestMethod: "cut-and-come-again" | "single-harvest" | "selective";
200:   productiveWeeks?: number;
201:   notes?: string[];
202: }

================
File: src/utils/fertilizationUtils.ts
================
 1: import { ApplicationMethod } from "@/types/core";
 2: 
 3: export const getMethodIcon = (method: ApplicationMethod | string) => {
 4:   switch (method) {
 5:     case "soil-drench":
 6:       return "💧";
 7:     case "foliar-spray":
 8:       return "🌿";
 9:     case "top-dress":
10:       return "🥄";
11:     case "side-dress":
12:       return "🔄";
13:     default:
14:       return "🌱";
15:   }
16: };
17: 
18: export const getMethodDisplay = (method: ApplicationMethod | string) => {
19:   switch (method) {
20:     case "soil-drench":
21:       return "Soil Drench";
22:     case "foliar-spray":
23:       return "Foliar Spray";
24:     case "top-dress":
25:       return "Top Dress";
26:     case "side-dress":
27:       return "Side Dress";
28:     default:
29:       return method;
30:   }
31: };
32: 
33: export const getMethodDescription = (method: ApplicationMethod | string) => {
34:   switch (method) {
35:     case "soil-drench":
36:       return "Apply diluted fertilizer solution directly to soil, watering thoroughly";
37:     case "foliar-spray":
38:       return "Spray diluted fertilizer directly onto leaves and stems";
39:     case "top-dress":
40:       return "Sprinkle dry fertilizer on soil surface and work in lightly";
41:     case "side-dress":
42:       return "Apply fertilizer around the base of the plant, avoiding direct contact with stems";
43:     default:
44:       return "Follow fertilizer package instructions";
45:   }
46: };
47: 
48: export const requiresWater = (method: ApplicationMethod | string): boolean => {
49:   return method === "soil-drench";
50: };

================
File: public/vite.svg
================
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: scripts/lighthouse-ci.js
================
 1: const lighthouse = require("lighthouse");
 2: const chromeLauncher = require("chrome-launcher");
 3: 
 4: async function runLighthouse() {
 5:   const chrome = await chromeLauncher.launch({ chromeFlags: ["--headless"] });
 6: 
 7:   const options = {
 8:     logLevel: "info",
 9:     output: "html",
10:     onlyCategories: ["performance", "pwa", "accessibility"],
11:     port: chrome.port,
12:   };
13: 
14:   const runnerResult = await lighthouse("http://localhost:3000", options);
15: 
16: 
17:   const { performance, pwa, accessibility } = runnerResult.lhr.categories;
18: 
19:   console.log("Lighthouse Scores:");
20:   console.log(`Performance: ${Math.round(performance.score * 100)}`);
21:   console.log(`PWA: ${Math.round(pwa.score * 100)}`);
22:   console.log(`Accessibility: ${Math.round(accessibility.score * 100)}`);
23: 
24: 
25:   if (performance.score < 0.9 || pwa.score < 0.9 || accessibility.score < 0.9) {
26:     process.exit(1);
27:   }
28: 
29:   await chrome.kill();
30: }
31: 
32: runLighthouse().catch(console.error);

================
File: src/__tests__/components/AddPlant.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { BrowserRouter } from "react-router-dom";
  4: import AddPlant from "@/pages/plants/AddPlant";
  5: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  6: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  7: import { varietyService } from "@/types";
  8: 
  9: 
 10: jest.mock("@/hooks/useFirebaseAuth");
 11: jest.mock("@/hooks/useFirebasePlants");
 12: jest.mock("@/types/database");
 13: 
 14: const mockNavigate = jest.fn();
 15: jest.mock("react-router-dom", () => ({
 16:   ...jest.requireActual("react-router-dom"),
 17:   useNavigate: () => mockNavigate,
 18: }));
 19: 
 20: const mockUser = {
 21:   uid: "test-user-id",
 22:   email: "test@example.com",
 23:   displayName: "Test User",
 24: };
 25: 
 26: const mockVarieties = [
 27:   {
 28:     id: "variety-1",
 29:     name: "Test Variety",
 30:     category: "herbs" as const,
 31:     growthTimeline: {
 32:       germination: 7,
 33:       seedling: 14,
 34:       vegetative: 21,
 35:       maturation: 45,
 36:     },
 37:     createdAt: new Date(),
 38:   },
 39: ];
 40: 
 41: describe("AddPlant Page", () => {
 42:   const user = userEvent.setup();
 43: 
 44:   beforeEach(() => {
 45:     jest.clearAllMocks();
 46: 
 47:     (useFirebaseAuth as jest.Mock).mockReturnValue({
 48:       user: mockUser,
 49:       signOut: jest.fn(),
 50:     });
 51: 
 52:     (useFirebasePlants as jest.Mock).mockReturnValue({
 53:       createPlant: jest.fn().mockResolvedValue("plant-id"),
 54:     });
 55: 
 56:     (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
 57:       mockVarieties
 58:     );
 59:   });
 60: 
 61:   const renderWithRouter = (component: React.ReactElement) => {
 62:     return render(<BrowserRouter>{component}</BrowserRouter>);
 63:   };
 64: 
 65:   it("renders the add plant page with proper styling", async () => {
 66:     renderWithRouter(<AddPlant />);
 67: 
 68: 
 69:     expect(screen.getByText("Add New Plant")).toBeInTheDocument();
 70:     expect(
 71:       screen.getByText("Register a new plant to start tracking its growth")
 72:     ).toBeInTheDocument();
 73: 
 74: 
 75:     expect(
 76:       screen.getByRole("button", { name: /go back/i })
 77:     ).toBeInTheDocument();
 78: 
 79: 
 80:     expect(screen.getByText("Welcome, Test User")).toBeInTheDocument();
 81: 
 82: 
 83:     await waitFor(() => {
 84:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
 85:     });
 86:   });
 87: 
 88:   it("navigates back to dashboard when back button is clicked", async () => {
 89:     renderWithRouter(<AddPlant />);
 90: 
 91:     const backButton = screen.getByRole("button", { name: /go back/i });
 92:     await user.click(backButton);
 93: 
 94:     expect(mockNavigate).toHaveBeenCalledWith("/");
 95:   });
 96: 
 97:   it("navigates to dashboard on successful plant registration", async () => {
 98:     renderWithRouter(<AddPlant />);
 99: 
100: 
101:     await waitFor(() => {
102:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
103:     });
104: 
105: 
106:     const varietySelect = screen.getByLabelText(/plant variety/i);
107:     await user.selectOptions(varietySelect, "variety-1");
108: 
109: 
110:     const growBagButton = screen.getByTestId("container-type-grow-bag");
111:     await user.click(growBagButton);
112: 
113: 
114:     const soilMixtureCard = screen.getByTestId(
115:       "mixture-card-leafy-greens-standard"
116:     );
117:     await user.click(soilMixtureCard);
118: 
119: 
120:     const submitButton = screen.getByRole("button", {
121:       name: /register plant/i,
122:     });
123: 
124: 
125:     await waitFor(() => {
126:       expect(submitButton).toBeEnabled();
127:     });
128:     await user.click(submitButton);
129: 
130: 
131:     await waitFor(() => {
132:       expect(mockNavigate).toHaveBeenCalledWith("/");
133:     });
134:   });
135: 
136:   it("shows offline indicator when navigator is offline", () => {
137: 
138:     const onlineSpy = jest.spyOn(navigator, "onLine", "get");
139:     onlineSpy.mockReturnValue(false);
140: 
141:     renderWithRouter(<AddPlant />);
142: 
143: 
144:     expect(
145:       screen.getByText(
146:         /You're offline - Data will sync when connection returns/i
147:       )
148:     ).toBeInTheDocument();
149: 
150: 
151:     onlineSpy.mockRestore();
152:   });
153: 
154:   it("includes navigation component", () => {
155:     renderWithRouter(<AddPlant />);
156: 
157: 
158:     expect(screen.getByRole("navigation")).toBeInTheDocument();
159:   });
160: });

================
File: src/__tests__/components/BulkActivityModal.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import BulkActivityModal from "@/components/plant/BulkActivityModal";
  4: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  5: import toast from "react-hot-toast";
  6: 
  7: 
  8: jest.mock("@/hooks/useFirebaseCareActivities");
  9: jest.mock("react-hot-toast");
 10: 
 11: const mockLogActivity = jest.fn();
 12: 
 13: describe("BulkActivityModal", () => {
 14:   const user = userEvent.setup();
 15: 
 16:   beforeEach(() => {
 17:     jest.clearAllMocks();
 18:     (useFirebaseCareActivities as jest.Mock).mockReturnValue({
 19:       logActivity: mockLogActivity,
 20:     });
 21:     mockLogActivity.mockResolvedValue(undefined);
 22:   });
 23: 
 24:   const defaultProps = {
 25:     isOpen: true,
 26:     onClose: jest.fn(),
 27:     plantIds: ["plant-1", "plant-2"],
 28:     plantCount: 2,
 29:     varietyName: "Cherry Tomato",
 30:   };
 31: 
 32:   it("renders the correct title for watering multiple plants", () => {
 33:     render(<BulkActivityModal {...defaultProps} activityType="water" />);
 34:     expect(screen.getByText("💧 Water All Plants")).toBeInTheDocument();
 35:     expect(
 36:       screen.getByText("Logging for 2 Cherry Tomato plants")
 37:     ).toBeInTheDocument();
 38:   });
 39: 
 40:   it("renders the correct title and inputs for fertilizing a single plant", () => {
 41:     render(
 42:       <BulkActivityModal
 43:         {...defaultProps}
 44:         plantCount={1}
 45:         activityType="fertilize"
 46:       />
 47:     );
 48:     expect(screen.getByText("🌱 Fertilize Plant")).toBeInTheDocument();
 49:     expect(screen.getByLabelText("Amount")).toBeInTheDocument();
 50:   });
 51: 
 52:   it("calls logActivity for each plant ID on submit", async () => {
 53:     const mockOnClose = jest.fn();
 54:     render(
 55:       <BulkActivityModal
 56:         {...defaultProps}
 57:         activityType="water"
 58:         onClose={mockOnClose}
 59:       />
 60:     );
 61: 
 62:     const amountInput = screen.getByLabelText(/Amount/i);
 63:     await user.clear(amountInput);
 64:     await user.type(amountInput, "50");
 65: 
 66:     const submitButton = screen.getByRole("button", {
 67:       name: /Log Activity for All 2 Plants/i,
 68:     });
 69:     await user.click(submitButton);
 70: 
 71:     await waitFor(() => {
 72:       expect(mockLogActivity).toHaveBeenCalledTimes(2);
 73:       expect(mockLogActivity).toHaveBeenCalledWith(
 74:         expect.objectContaining({ plantId: "plant-1", type: "water" })
 75:       );
 76:       expect(mockLogActivity).toHaveBeenCalledWith(
 77:         expect.objectContaining({ plantId: "plant-2", type: "water" })
 78:       );
 79:       expect(toast.success).toHaveBeenCalledWith(
 80:         "Activity logged for all 2 Cherry Tomato plants! 🌱"
 81:       );
 82:       expect(mockOnClose).toHaveBeenCalledTimes(1);
 83:     });
 84:   });
 85: 
 86:   it("disables submit button while submitting", async () => {
 87: 
 88:     mockLogActivity.mockImplementation(() => new Promise(() => {}));
 89:     render(<BulkActivityModal {...defaultProps} activityType="water" />);
 90: 
 91:     const submitButton = screen.getByRole("button", { name: /Log Activity/i });
 92:     await user.click(submitButton);
 93: 
 94:     expect(submitButton).toBeDisabled();
 95:     expect(screen.getByText("Logging...")).toBeInTheDocument();
 96:   });
 97: 
 98:   it("calls onClose when the close button is clicked", async () => {
 99:     const mockOnClose = jest.fn();
100:     render(
101:       <BulkActivityModal
102:         {...defaultProps}
103:         activityType="observe"
104:         onClose={mockOnClose}
105:       />
106:     );
107: 
108:     const closeButton = screen.getByRole("button", { name: "✕" });
109:     await user.click(closeButton);
110: 
111:     expect(mockOnClose).toHaveBeenCalledTimes(1);
112:   });
113: });

================
File: src/__tests__/components/LogCare.test.tsx
================
 1: import { describe, it, expect, beforeEach } from "@jest/globals";
 2: import { render, screen } from "@testing-library/react";
 3: import { MemoryRouter } from "react-router-dom";
 4: import LogCare from "../../pages/care/LogCare";
 5: import { initializeDatabase } from "@/db/seedData";
 6: 
 7: 
 8: jest.mock("@/pages/care/CareLogForm", () => ({
 9:   CareLogForm: ({ preselectedPlantId }: { preselectedPlantId?: string }) => (
10:     <div data-testid="care-log-form">
11:       {preselectedPlantId && (
12:         <div data-testid="pre-selected-plant-id">{preselectedPlantId}</div>
13:       )}
14:     </div>
15:   ),
16: }));
17: 
18: describe("LogCare", () => {
19:   beforeEach(async () => {
20:     await initializeDatabase();
21:   });
22: 
23:   it("renders without a pre-selected plant", () => {
24:     render(
25:       <MemoryRouter initialEntries={["/log-care"]}>
26:         <LogCare />
27:       </MemoryRouter>
28:     );
29: 
30:     expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
31:     expect(screen.getByTestId("care-log-form")).toBeInTheDocument();
32:     expect(
33:       screen.queryByTestId("pre-selected-plant-id")
34:     ).not.toBeInTheDocument();
35:   });
36: 
37:   it("passes pre-selected plant ID from URL params to CareLogForm", () => {
38:     const testPlantId = "test-plant-123";
39: 
40:     render(
41:       <MemoryRouter initialEntries={[`/log-care?plantId=${testPlantId}`]}>
42:         <LogCare />
43:       </MemoryRouter>
44:     );
45: 
46:     expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
47:     expect(screen.getByTestId("care-log-form")).toBeInTheDocument();
48:     expect(screen.getByTestId("pre-selected-plant-id")).toHaveTextContent(
49:       testPlantId
50:     );
51:   });
52: });

================
File: src/__tests__/components/PlantReminderSettings.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import PlantReminderSettings from "@/components/plant/PlantReminderSettings";
  4: import { plantService } from "@/types/database";
  5: import toast from "react-hot-toast";
  6: 
  7: 
  8: jest.mock("@/types/database", () => ({
  9:   plantService: {
 10:     updatePlant: jest.fn(),
 11:   },
 12: }));
 13: 
 14: jest.mock("react-hot-toast", () => ({
 15:   __esModule: true,
 16:   default: {
 17:     success: jest.fn(),
 18:     error: jest.fn(),
 19:   },
 20: }));
 21: 
 22: jest.mock("@/components/plant/ReminderPreferencesSection", () => ({
 23:   __esModule: true,
 24: 
 25:   default: ({ preferences, onChange }: any) => (
 26:     <div data-testid="reminder-preferences-section">
 27:       <button
 28:         data-testid="toggle-watering"
 29:         onClick={() =>
 30:           onChange({ ...preferences, watering: !preferences.watering })
 31:         }
 32:       >
 33:         Toggle Watering: {preferences.watering ? "ON" : "OFF"}
 34:       </button>
 35:     </div>
 36:   ),
 37: }));
 38: 
 39: const mockPlantService = plantService as jest.Mocked<typeof plantService>;
 40: const mockToast = toast as jest.Mocked<typeof toast>;
 41: 
 42: describe("PlantReminderSettings", () => {
 43:   const mockPlant = {
 44:     id: "test-plant-1",
 45:     varietyId: "tomato-1",
 46:     varietyName: "Roma Tomato",
 47:     name: "My Tomato",
 48:     plantedDate: new Date("2024-01-01"),
 49:     currentStage: "vegetative" as const,
 50:     location: "Indoor",
 51:     container: "5 gallon pot",
 52:     isActive: true,
 53:     notes: [],
 54:     createdAt: new Date(),
 55:     updatedAt: new Date(),
 56:     reminderPreferences: {
 57:       watering: true,
 58:       fertilizing: true,
 59:       observation: false,
 60:       lighting: true,
 61:       pruning: false,
 62:     },
 63:   };
 64: 
 65:   const mockOnUpdate = jest.fn();
 66: 
 67:   beforeEach(() => {
 68:     jest.clearAllMocks();
 69:     mockPlantService.updatePlant.mockResolvedValue(undefined);
 70:   });
 71: 
 72:   it("renders with current plant preferences", () => {
 73:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 74: 
 75:     expect(
 76:       screen.getByTestId("reminder-preferences-section")
 77:     ).toBeInTheDocument();
 78:     expect(screen.getByText("Toggle Watering: ON")).toBeInTheDocument();
 79:   });
 80: 
 81:   it("shows 'No Changes' button when preferences haven't changed", () => {
 82:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 83: 
 84:     const saveButton = screen.getByRole("button", { name: /no changes/i });
 85:     expect(saveButton).toBeDisabled();
 86:   });
 87: 
 88:   it("shows 'Save Changes' button when preferences change", async () => {
 89:     const user = userEvent.setup();
 90: 
 91:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 92: 
 93: 
 94:     const toggleButton = screen.getByTestId("toggle-watering");
 95:     await user.click(toggleButton);
 96: 
 97:     await waitFor(() => {
 98:       const saveButton = screen.getByRole("button", { name: /save changes/i });
 99:       expect(saveButton).not.toBeDisabled();
100:     });
101:   });
102: 
103:   it("saves preferences successfully", async () => {
104:     const user = userEvent.setup();
105: 
106:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
107: 
108: 
109:     const toggleButton = screen.getByTestId("toggle-watering");
110:     await user.click(toggleButton);
111: 
112: 
113:     const saveButton = screen.getByRole("button", { name: /save changes/i });
114:     await user.click(saveButton);
115: 
116:     await waitFor(() => {
117:       expect(mockPlantService.updatePlant).toHaveBeenCalledWith(
118:         "test-plant-1",
119:         {
120:           reminderPreferences: {
121:             watering: false,
122:             fertilizing: true,
123:             observation: false,
124:             lighting: true,
125:             pruning: false,
126:           },
127:           updatedAt: expect.any(Date),
128:         }
129:       );
130:     });
131: 
132:     expect(mockOnUpdate).toHaveBeenCalledWith({
133:       ...mockPlant,
134:       reminderPreferences: {
135:         watering: false,
136:         fertilizing: true,
137:         observation: false,
138:         lighting: true,
139:         pruning: false,
140:       },
141:     });
142: 
143:     expect(mockToast.success).toHaveBeenCalledWith(
144:       "Reminder preferences updated!"
145:     );
146:   });
147: 
148:   it("handles save errors gracefully", async () => {
149:     const user = userEvent.setup();
150:     mockPlantService.updatePlant.mockRejectedValue(new Error("Database error"));
151: 
152:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
153: 
154: 
155:     const toggleButton = screen.getByTestId("toggle-watering");
156:     await user.click(toggleButton);
157: 
158: 
159:     const saveButton = screen.getByRole("button", { name: /save changes/i });
160:     await user.click(saveButton);
161: 
162:     await waitFor(() => {
163:       expect(mockToast.error).toHaveBeenCalledWith(
164:         "Failed to update preferences"
165:       );
166:     });
167: 
168:     expect(mockOnUpdate).not.toHaveBeenCalled();
169:   });
170: 
171:   it("shows loading state during save", async () => {
172:     const user = userEvent.setup();
173: 
174: 
175:     mockPlantService.updatePlant.mockImplementation(
176:       () => new Promise(() => {})
177:     );
178: 
179:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
180: 
181: 
182:     const toggleButton = screen.getByTestId("toggle-watering");
183:     await user.click(toggleButton);
184: 
185: 
186:     const saveButton = screen.getByRole("button", { name: /save changes/i });
187:     await user.click(saveButton);
188: 
189: 
190:     expect(screen.getByText("Saving...")).toBeInTheDocument();
191:     expect(saveButton).toBeDisabled();
192:   });
193: 
194:   it("uses default preferences when plant has none", () => {
195:     const plantWithoutPreferences = {
196:       ...mockPlant,
197:       reminderPreferences: undefined,
198:     };
199: 
200:     render(
201:       <PlantReminderSettings
202:         plant={plantWithoutPreferences}
203:         onUpdate={mockOnUpdate}
204:       />
205:     );
206: 
207: 
208:     expect(screen.getByText("Toggle Watering: ON")).toBeInTheDocument();
209:   });
210: });

================
File: src/__tests__/components/ReminderPreferencesSection.test.tsx
================
  1: import { render, screen } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import ReminderPreferencesSection from "@/components/plant/ReminderPreferencesSection";
  4: 
  5: describe("ReminderPreferencesSection", () => {
  6:   const defaultPreferences = {
  7:     watering: true,
  8:     fertilizing: true,
  9:     observation: true,
 10:     lighting: true,
 11:     pruning: true,
 12:   };
 13: 
 14:   const mockOnChange = jest.fn();
 15: 
 16:   beforeEach(() => {
 17:     jest.clearAllMocks();
 18:   });
 19: 
 20:   it("renders all reminder types with correct labels", () => {
 21:     render(
 22:       <ReminderPreferencesSection
 23:         preferences={defaultPreferences}
 24:         onChange={mockOnChange}
 25:       />
 26:     );
 27: 
 28:     expect(screen.getByText("Reminder Preferences")).toBeInTheDocument();
 29:     expect(screen.getByText("Watering")).toBeInTheDocument();
 30:     expect(screen.getByText("Fertilizing")).toBeInTheDocument();
 31:     expect(screen.getByText("Health Checks")).toBeInTheDocument();
 32:     expect(screen.getByText("Lighting")).toBeInTheDocument();
 33:     expect(screen.getByText("Maintenance")).toBeInTheDocument();
 34: 
 35: 
 36:     expect(
 37:       screen.getByText("Get notified when watering is due")
 38:     ).toBeInTheDocument();
 39:     expect(
 40:       screen.getByText("Reminders for feeding schedule")
 41:     ).toBeInTheDocument();
 42:     expect(
 43:       screen.getByText("Regular observation reminders")
 44:     ).toBeInTheDocument();
 45:   });
 46: 
 47:   it("displays current preference states correctly", () => {
 48:     const mixedPreferences = {
 49:       watering: true,
 50:       fertilizing: false,
 51:       observation: true,
 52:       lighting: false,
 53:       pruning: true,
 54:     };
 55: 
 56:     render(
 57:       <ReminderPreferencesSection
 58:         preferences={mixedPreferences}
 59:         onChange={mockOnChange}
 60:       />
 61:     );
 62: 
 63: 
 64:     const switches = screen.getAllByRole("switch");
 65:     expect(switches).toHaveLength(5);
 66: 
 67: 
 68:     expect(switches[0]).toHaveAttribute("aria-checked", "true");
 69: 
 70:     expect(switches[1]).toHaveAttribute("aria-checked", "false");
 71: 
 72:     expect(switches[2]).toHaveAttribute("aria-checked", "true");
 73: 
 74:     expect(switches[3]).toHaveAttribute("aria-checked", "false");
 75: 
 76:     expect(switches[4]).toHaveAttribute("aria-checked", "true");
 77:   });
 78: 
 79:   it("calls onChange when a switch is toggled", async () => {
 80:     const user = userEvent.setup();
 81: 
 82:     render(
 83:       <ReminderPreferencesSection
 84:         preferences={defaultPreferences}
 85:         onChange={mockOnChange}
 86:       />
 87:     );
 88: 
 89: 
 90:     const wateringSwitch = screen.getAllByRole("switch")[0];
 91:     await user.click(wateringSwitch);
 92: 
 93:     expect(mockOnChange).toHaveBeenCalledWith({
 94:       watering: false,
 95:       fertilizing: true,
 96:       observation: true,
 97:       lighting: true,
 98:       pruning: true,
 99:     });
100:   });
101: 
102:   it("toggles multiple preferences correctly", async () => {
103:     const user = userEvent.setup();
104: 
105:     render(
106:       <ReminderPreferencesSection
107:         preferences={defaultPreferences}
108:         onChange={mockOnChange}
109:       />
110:     );
111: 
112: 
113:     const fertilizingSwitch = screen.getAllByRole("switch")[1];
114:     await user.click(fertilizingSwitch);
115: 
116:     expect(mockOnChange).toHaveBeenCalledWith({
117:       watering: true,
118:       fertilizing: false,
119:       observation: true,
120:       lighting: true,
121:       pruning: true,
122:     });
123: 
124: 
125:     const lightingSwitch = screen.getAllByRole("switch")[3];
126:     await user.click(lightingSwitch);
127: 
128:     expect(mockOnChange).toHaveBeenCalledWith({
129:       watering: true,
130:       fertilizing: true,
131:       observation: true,
132:       lighting: false,
133:       pruning: true,
134:     });
135:   });
136: 
137:   it("has proper accessibility attributes", () => {
138:     render(
139:       <ReminderPreferencesSection
140:         preferences={defaultPreferences}
141:         onChange={mockOnChange}
142:       />
143:     );
144: 
145:     const switches = screen.getAllByRole("switch");
146:     switches.forEach((switchElement) => {
147:       expect(switchElement).toHaveAttribute("aria-checked");
148:       expect(switchElement).not.toHaveAttribute("aria-disabled");
149:     });
150:   });
151: });

================
File: src/__tests__/e2e/plant-registration.spec.ts
================
  1: import { test, expect } from "@playwright/test";
  2: 
  3: test.describe("Plant Registration", () => {
  4:   test.beforeEach(async ({ page }) => {
  5: 
  6:     await page.route("**/auth/**", (route) => {
  7:       route.fulfill({
  8:         status: 200,
  9:         contentType: "application/json",
 10:         body: JSON.stringify({
 11:           user: { uid: "test-user", email: "test@example.com" },
 12:         }),
 13:       });
 14:     });
 15: 
 16: 
 17:     await page.route("**/varieties", (route) => {
 18:       route.fulfill({
 19:         status: 200,
 20:         contentType: "application/json",
 21:         body: JSON.stringify([
 22:           {
 23:             id: "tomato-1",
 24:             name: "Cherry Tomato",
 25:             category: "fruiting-plants",
 26:             growthTimeline: {
 27:               germination: 7,
 28:               seedling: 14,
 29:               vegetative: 28,
 30:               maturation: 60,
 31:             },
 32:           },
 33:         ]),
 34:       });
 35:     });
 36: 
 37:     await page.goto("/plants/add");
 38:   });
 39: 
 40:   test("successfully registers a new plant", async ({ page }) => {
 41: 
 42:     await expect(page.getByText("Register New Plant")).toBeVisible();
 43: 
 44: 
 45:     await page.selectOption('[data-testid="variety-select"]', "tomato-1");
 46: 
 47: 
 48:     const today = new Date().toISOString().split("T")[0];
 49:     await page.fill('[data-testid="planting-date"]', today);
 50: 
 51: 
 52:     await page.click("text=Grow Bag");
 53: 
 54: 
 55:     await expect(
 56:       page.locator('[data-testid="container-size-select"]')
 57:     ).toHaveValue("1-gallon");
 58: 
 59: 
 60:     await page.click('[data-testid="select-soil-mixture"]');
 61: 
 62: 
 63:     await page.click('button:has-text("Register Plant")');
 64: 
 65: 
 66:     await expect(
 67:       page.getByText("Successfully registered 1 plant(s)! 🌱")
 68:     ).toBeVisible();
 69:   });
 70: 
 71:   test("handles validation errors properly", async ({ page }) => {
 72: 
 73:     await page.click('button:has-text("Register Plant")');
 74: 
 75: 
 76:     await expect(page.getByText("Please select a variety")).toBeVisible();
 77:     await expect(
 78:       page.getByText("Please select a container type")
 79:     ).toBeVisible();
 80:     await expect(page.getByText("Please select a soil mixture")).toBeVisible();
 81:   });
 82: 
 83:   test("works with custom container dimensions", async ({ page }) => {
 84:     await page.selectOption('[data-testid="variety-select"]', "tomato-1");
 85: 
 86:     await page.click("text=Grow Bag");
 87:     await page.selectOption('[data-testid="container-size-select"]', "custom");
 88: 
 89: 
 90:     await page.selectOption('[data-testid="bag-shape-select"]', "round");
 91:     await page.fill('[data-testid="diameter-input"]', "12");
 92:     await page.fill('[data-testid="height-input"]', "8");
 93: 
 94:     await page.click('[data-testid="select-soil-mixture"]');
 95: 
 96:     await page.click('button:has-text("Register Plant")');
 97: 
 98:     await expect(
 99:       page.getByText("Successfully registered 1 plant(s)! 🌱")
100:     ).toBeVisible();
101:   });
102: 
103:   test("supports multiple plants registration", async ({ page }) => {
104:     await page.selectOption('[data-testid="variety-select"]', "tomato-1");
105:     await page.click("text=Grow Bag");
106: 
107: 
108:     await page.fill('[data-testid="quantity-input"]', "3");
109: 
110:     await page.click('[data-testid="select-soil-mixture"]');
111:     await page.click('button:has-text("Register Plants")');
112: 
113:     await expect(
114:       page.getByText("Successfully registered 3 plant(s)! 🌱")
115:     ).toBeVisible();
116:   });
117: });

================
File: src/__tests__/setup/mockFirebase.ts
================
 1: export const mockFirebaseConfig = {
 2:   apiKey: "test-api-key",
 3:   authDomain: "test-project.firebaseapp.com",
 4:   projectId: "test-project",
 5:   storageBucket: "test-project.appspot.com",
 6:   messagingSenderId: "123456789",
 7:   appId: "test-app-id",
 8: };
 9: 
10: export const mockDb = {};
11: export const mockAuth = {};
12: export const mockStorage = {};
13: 
14: export const mockFirebaseFunctions = {
15:   initializeApp: jest.fn(() => ({})),
16:   getFirestore: jest.fn(() => mockDb),
17:   getAuth: jest.fn(() => mockAuth),
18:   getStorage: jest.fn(() => mockStorage),
19:   enableNetwork: jest.fn(),
20:   disableNetwork: jest.fn(),
21: };
22: 
23: 
24: describe("MockFirebase Setup", () => {
25:   it("should export mock Firebase functions", () => {
26:     expect(mockFirebaseFunctions.initializeApp).toBeDefined();
27:     expect(mockFirebaseFunctions.getFirestore).toBeDefined();
28:     expect(mockFirebaseFunctions.getAuth).toBeDefined();
29:     expect(mockFirebaseFunctions.getStorage).toBeDefined();
30:   });
31: });

================
File: src/__tests__/utils/plantGrouping.test.ts
================
 1: import { groupPlantsByConditions } from "@/utils/plantGrouping";
 2: import { PlantRecord } from "@/types/database";
 3: 
 4: describe("groupPlantsByConditions", () => {
 5:   const createMockPlant = (overrides: Partial<PlantRecord>): PlantRecord => {
 6:     return {
 7:       id: `plant-${Math.random()}`,
 8:       varietyId: "tomato-1",
 9:       varietyName: "Cherry Tomato",
10:       name: "Test Plant",
11:       plantedDate: new Date("2024-05-10T00:00:00.000Z"),
12:       location: "Indoor",
13:       container: "5 Gallon Grow Bag",
14:       soilMix: "standard-mix",
15:       isActive: true,
16:       createdAt: new Date(),
17:       updatedAt: new Date(),
18:       ...overrides,
19:     };
20:   };
21: 
22:   it("should group plants with identical conditions", () => {
23:     const p1 = createMockPlant({ id: "p1" });
24:     const p2 = createMockPlant({ id: "p2" });
25:     const plants = [p1, p2];
26: 
27:     const groups = groupPlantsByConditions(plants);
28:     expect(groups).toHaveLength(1);
29:     expect(groups[0].plants).toHaveLength(2);
30:     expect(groups[0].plants.map((p) => p.id)).toEqual(["p1", "p2"]);
31:   });
32: 
33:   it("should not group plants with different varieties", () => {
34:     const p1 = createMockPlant({ id: "p1", varietyId: "tomato-1" });
35:     const p2 = createMockPlant({ id: "p2", varietyId: "basil-1" });
36:     const plants = [p1, p2];
37: 
38:     const groups = groupPlantsByConditions(plants);
39:     expect(groups).toHaveLength(2);
40:   });
41: 
42:   it("should not group plants with different planted dates", () => {
43:     const p1 = createMockPlant({
44:       id: "p1",
45:       plantedDate: new Date("2024-05-10T00:00:00.000Z"),
46:     });
47:     const p2 = createMockPlant({
48:       id: "p2",
49:       plantedDate: new Date("2024-05-11T00:00:00.000Z"),
50:     });
51:     const plants = [p1, p2];
52: 
53:     const groups = groupPlantsByConditions(plants);
54:     expect(groups).toHaveLength(2);
55:   });
56: 
57:   it("should not group plants with different containers", () => {
58:     const p1 = createMockPlant({ id: "p1", container: "5 Gallon" });
59:     const p2 = createMockPlant({ id: "p2", container: "3 Gallon" });
60:     const plants = [p1, p2];
61: 
62:     const groups = groupPlantsByConditions(plants);
63:     expect(groups).toHaveLength(2);
64:   });
65: 
66:   it("should handle an empty array of plants", () => {
67:     const groups = groupPlantsByConditions([]);
68:     expect(groups).toHaveLength(0);
69:   });
70: 
71:   it("should create separate groups for plants with and without soil mix", () => {
72:     const p1 = createMockPlant({ id: "p1", soilMix: "standard-mix" });
73:     const p2 = createMockPlant({ id: "p2", soilMix: undefined });
74:     const p3 = createMockPlant({ id: "p3", soilMix: "standard-mix" });
75: 
76:     const plants = [p1, p2, p3];
77:     const groups = groupPlantsByConditions(plants);
78: 
79:     expect(groups).toHaveLength(2);
80:     const groupWithSoil = groups.find((g) => g.soilMix === "standard-mix");
81:     const groupWithoutSoil = groups.find((g) => g.soilMix === undefined);
82: 
83:     expect(groupWithSoil?.plants).toHaveLength(2);
84:     expect(groupWithoutSoil?.plants).toHaveLength(1);
85:   });
86: });

================
File: src/__tests__/utils/plantRegistration.test.ts
================
 1: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 2: 
 3: describe("Plant Registration Utils", () => {
 4:   const mockVariety = {
 5:     id: "test-variety",
 6:     name: "Test Plant",
 7:     category: "herbs" as const,
 8:     growthTimeline: {
 9:       germination: 7,
10:       seedling: 14,
11:       vegetative: 21,
12:       maturation: 45,
13:     },
14:     createdAt: new Date(),
15:   };
16: 
17:   describe("calculateCurrentStageWithVariety", () => {
18:     it("calculates germination stage correctly", () => {
19:       const plantedDate = new Date();
20:       plantedDate.setDate(plantedDate.getDate() - 3);
21: 
22:       const stage = calculateCurrentStageWithVariety(plantedDate, mockVariety);
23:       expect(stage).toBe("germination");
24:     });
25: 
26:     it("calculates seedling stage correctly", () => {
27:       const plantedDate = new Date();
28:       plantedDate.setDate(plantedDate.getDate() - 10);
29: 
30:       const stage = calculateCurrentStageWithVariety(plantedDate, mockVariety);
31:       expect(stage).toBe("seedling");
32:     });
33: 
34:     it("calculates vegetative stage correctly", () => {
35:       const plantedDate = new Date();
36:       plantedDate.setDate(plantedDate.getDate() - 25);
37: 
38:       const stage = calculateCurrentStageWithVariety(plantedDate, mockVariety);
39:       expect(stage).toBe("vegetative");
40:     });
41: 
42:     it("handles invalid variety gracefully", () => {
43:       const plantedDate = new Date();
44:       const stage = calculateCurrentStageWithVariety(plantedDate, null);
45:       expect(stage).toBe("vegetative");
46:     });
47:   });
48: });

================
File: src/__tests__/utils/varietyGrowthStages.test.ts
================
  1: import {
  2:   calculateCurrentStage,
  3:   getStageProgress,
  4: } from "../../utils/growthStage";
  5: import { restoreDate } from "../../setupTests";
  6: 
  7: describe("Variety-Specific Growth Stage Calculations", () => {
  8:   beforeEach(() => {
  9:     restoreDate();
 10:   });
 11: 
 12:   describe("Fast-Growing Crops (21-45 days)", () => {
 13:     const arugulaTimeline = {
 14:       germination: 5,
 15:       seedling: 14,
 16:       vegetative: 14,
 17:       maturation: 37,
 18:     };
 19: 
 20:     it("calculates arugula stages correctly", () => {
 21:       const plantedDate = new Date("2024-01-01");
 22: 
 23: 
 24:       expect(
 25:         calculateCurrentStage(
 26:           plantedDate,
 27:           arugulaTimeline,
 28:           new Date("2024-01-03")
 29:         )
 30:       ).toBe("germination");
 31: 
 32: 
 33:       expect(
 34:         calculateCurrentStage(
 35:           plantedDate,
 36:           arugulaTimeline,
 37:           new Date("2024-01-10")
 38:         )
 39:       ).toBe("seedling");
 40: 
 41: 
 42:       expect(
 43:         calculateCurrentStage(
 44:           plantedDate,
 45:           arugulaTimeline,
 46:           new Date("2024-01-25")
 47:         )
 48:       ).toBe("vegetative");
 49: 
 50: 
 51:       expect(
 52:         calculateCurrentStage(
 53:           plantedDate,
 54:           arugulaTimeline,
 55:           new Date("2024-02-10")
 56:         )
 57:       ).toBe("harvest");
 58:     });
 59: 
 60:     const spinachTimeline = {
 61:       germination: 7,
 62:       seedling: 14,
 63:       vegetative: 9,
 64:       maturation: 30,
 65:     };
 66: 
 67:     it("calculates spinach stages correctly", () => {
 68:       const plantedDate = new Date("2024-01-01");
 69: 
 70: 
 71: 
 72:       expect(
 73:         calculateCurrentStage(
 74:           plantedDate,
 75:           spinachTimeline,
 76:           new Date("2024-01-31")
 77:         )
 78:       ).toBe("harvest");
 79: 
 80:       expect(
 81:         calculateCurrentStage(
 82:           plantedDate,
 83:           spinachTimeline,
 84:           new Date("2024-01-20")
 85:         )
 86:       ).toBe("seedling");
 87:     });
 88:   });
 89: 
 90:   describe("Medium Crops (45-70 days)", () => {
 91:     const lettuceTimeline = {
 92:       germination: 7,
 93:       seedling: 18,
 94:       vegetative: 21,
 95:       maturation: 55,
 96:     };
 97: 
 98:     it("calculates lettuce stages correctly", () => {
 99:       const plantedDate = new Date("2024-01-01");
100: 
101: 
102:       expect(
103:         calculateCurrentStage(
104:           plantedDate,
105:           lettuceTimeline,
106:           new Date("2024-02-20")
107:         )
108:       ).toBe("flowering");
109:       expect(
110:         calculateCurrentStage(
111:           plantedDate,
112:           lettuceTimeline,
113:           new Date("2024-02-25")
114:         )
115:       ).toBe("harvest");
116:     });
117: 
118:     const beetTimeline = {
119:       germination: 7,
120:       seedling: 14,
121:       vegetative: 21,
122:       maturation: 60,
123:     };
124: 
125:     it("calculates beet stages correctly", () => {
126:       const plantedDate = new Date("2024-01-01");
127: 
128: 
129:       expect(
130:         calculateCurrentStage(plantedDate, beetTimeline, new Date("2024-03-01"))
131:       ).toBe("harvest");
132:     });
133: 
134:     const carrotTimeline = {
135:       germination: 14,
136:       seedling: 14,
137:       vegetative: 14,
138:       maturation: 70,
139:     };
140: 
141:     it("calculates carrot stages correctly with strict photoperiod needs", () => {
142:       const plantedDate = new Date("2024-01-01");
143: 
144: 
145:       expect(
146:         calculateCurrentStage(
147:           plantedDate,
148:           carrotTimeline,
149:           new Date("2024-01-10")
150:         )
151:       ).toBe("germination");
152:       expect(
153:         calculateCurrentStage(
154:           plantedDate,
155:           carrotTimeline,
156:           new Date("2024-01-15")
157:         )
158:       ).toBe("seedling");
159: 
160: 
161:       expect(
162:         calculateCurrentStage(
163:           plantedDate,
164:           carrotTimeline,
165:           new Date("2024-03-11")
166:         )
167:       ).toBe("harvest");
168:     });
169:   });
170: 
171:   describe("Long Crops (90+ days)", () => {
172:     const sweetPotatoTimeline = {
173:       germination: 14,
174:       seedling: 21,
175:       vegetative: 42,
176:       maturation: 100,
177:     };
178: 
179:     it("calculates sweet potato stages correctly", () => {
180:       const plantedDate = new Date("2024-01-01");
181: 
182: 
183:       expect(
184:         calculateCurrentStage(
185:           plantedDate,
186:           sweetPotatoTimeline,
187:           new Date("2024-01-10")
188:         )
189:       ).toBe("germination");
190: 
191: 
192:       expect(
193:         calculateCurrentStage(
194:           plantedDate,
195:           sweetPotatoTimeline,
196:           new Date("2024-01-25")
197:         )
198:       ).toBe("seedling");
199: 
200: 
201:       expect(
202:         calculateCurrentStage(
203:           plantedDate,
204:           sweetPotatoTimeline,
205:           new Date("2024-02-20")
206:         )
207:       ).toBe("vegetative");
208: 
209: 
210:       expect(
211:         calculateCurrentStage(
212:           plantedDate,
213:           sweetPotatoTimeline,
214:           new Date("2024-04-15")
215:         )
216:       ).toBe("harvest");
217:     });
218: 
219:     const broccoliTimeline = {
220:       germination: 7,
221:       seedling: 17,
222:       vegetative: 30,
223:       maturation: 90,
224:     };
225: 
226:     it("calculates broccoli stages correctly", () => {
227:       const plantedDate = new Date("2024-01-01");
228: 
229: 
230:       expect(
231:         calculateCurrentStage(
232:           plantedDate,
233:           broccoliTimeline,
234:           new Date("2024-04-01")
235:         )
236:       ).toBe("harvest");
237:       expect(
238:         calculateCurrentStage(
239:           plantedDate,
240:           broccoliTimeline,
241:           new Date("2024-03-15")
242:         )
243:       ).toBe("flowering");
244:     });
245: 
246:     const onionTimeline = {
247:       germination: 14,
248:       seedling: 28,
249:       vegetative: 42,
250:       maturation: 120,
251:     };
252: 
253:     it("calculates onion bulbing stages correctly", () => {
254:       const plantedDate = new Date("2024-01-01");
255: 
256: 
257:       expect(
258:         calculateCurrentStage(
259:           plantedDate,
260:           onionTimeline,
261:           new Date("2024-03-01")
262:         )
263:       ).toBe("vegetative");
264: 
265: 
266:       expect(
267:         calculateCurrentStage(
268:           plantedDate,
269:           onionTimeline,
270:           new Date("2024-05-01")
271:         )
272:       ).toBe("harvest");
273:     });
274:   });
275: 
276:   describe("Continuous Production Crops", () => {
277:     const strawberryTimeline = {
278:       germination: 21,
279:       seedling: 21,
280:       vegetative: 14,
281:       maturation: 91,
282:     };
283: 
284:     it("calculates strawberry production stages correctly", () => {
285:       const plantedDate = new Date("2024-01-01");
286: 
287: 
288:       expect(
289:         calculateCurrentStage(
290:           plantedDate,
291:           strawberryTimeline,
292:           new Date("2024-04-16")
293:         )
294:       ).toBe("harvest");
295: 
296: 
297:       expect(
298:         calculateCurrentStage(
299:           plantedDate,
300:           strawberryTimeline,
301:           new Date("2024-01-15")
302:         )
303:       ).toBe("germination");
304: 
305: 
306:       expect(
307:         calculateCurrentStage(
308:           plantedDate,
309:           strawberryTimeline,
310:           new Date("2024-02-05")
311:         )
312:       ).toBe("seedling");
313: 
314: 
315:       expect(
316:         calculateCurrentStage(
317:           plantedDate,
318:           strawberryTimeline,
319:           new Date("2024-02-20")
320:         )
321:       ).toBe("vegetative");
322: 
323: 
324:       expect(
325:         calculateCurrentStage(
326:           plantedDate,
327:           strawberryTimeline,
328:           new Date("2024-03-15")
329:         )
330:       ).toBe("flowering");
331: 
332: 
333:       expect(
334:         calculateCurrentStage(
335:           plantedDate,
336:           strawberryTimeline,
337:           new Date("2024-04-01")
338:         )
339:       ).toBe("harvest");
340:     });
341:   });
342: 
343:   describe("Stage Progress Calculations", () => {
344:     it("calculates progress correctly within stages", () => {
345:       const plantedDate = new Date("2024-01-01");
346:       const lettuceTimeline = {
347:         germination: 7,
348:         seedling: 18,
349:         vegetative: 21,
350:         maturation: 55,
351:       };
352: 
353: 
354:       const midSeedlingProgress = getStageProgress(
355:         plantedDate,
356:         lettuceTimeline,
357:         new Date("2024-01-16")
358:       );
359:       expect(midSeedlingProgress).toBeCloseTo(44, 0);
360: 
361: 
362:       const earlyGerminationProgress = getStageProgress(
363:         plantedDate,
364:         lettuceTimeline,
365:         new Date("2024-01-04")
366:       );
367:       expect(earlyGerminationProgress).toBeCloseTo(43, 0);
368: 
369: 
370:       const earlyVegetativeProgress = getStageProgress(
371:         plantedDate,
372:         lettuceTimeline,
373:         new Date("2024-01-30")
374:       );
375:       expect(earlyVegetativeProgress).toBeCloseTo(19, 0);
376:     });
377: 
378:     it("returns 100% for completed crops", () => {
379:       const plantedDate = new Date("2024-01-01");
380:       const arugulaTimeline = {
381:         germination: 5,
382:         seedling: 14,
383:         vegetative: 14,
384:         maturation: 37,
385:       };
386: 
387:       const progress = getStageProgress(
388:         plantedDate,
389:         arugulaTimeline,
390:         new Date("2024-03-01")
391:       );
392:       expect(progress).toBe(100);
393:     });
394:   });
395: 
396:   describe("Edge Cases", () => {
397:     it("handles future planting dates gracefully", () => {
398:       const plantedDate = new Date("2024-12-31");
399:       const currentDate = new Date("2024-01-01");
400:       const arugulaTimeline = {
401:         germination: 5,
402:         seedling: 14,
403:         vegetative: 14,
404:         maturation: 37,
405:       };
406: 
407:       expect(
408:         calculateCurrentStage(plantedDate, arugulaTimeline, currentDate)
409:       ).toBe("germination");
410:     });
411: 
412:     it("handles same-day calculations", () => {
413:       const plantedDate = new Date("2024-01-01");
414:       const currentDate = new Date("2024-01-01");
415:       const spinachTimeline = {
416:         germination: 7,
417:         seedling: 14,
418:         vegetative: 14,
419:         maturation: 30,
420:       };
421: 
422:       expect(
423:         calculateCurrentStage(plantedDate, spinachTimeline, currentDate)
424:       ).toBe("germination");
425:     });
426:   });
427: });

================
File: src/assets/react.svg
================
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/plant/BulkActivityModal.tsx
================
  1: import { useState } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { Input } from "@/components/ui/Input";
  5: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  6: import { toast } from "react-hot-toast";
  7: 
  8: interface BulkActivityModalProps {
  9:   isOpen: boolean;
 10:   onClose: () => void;
 11:   plantIds: string[];
 12:   activityType: string;
 13:   plantCount: number;
 14:   varietyName: string;
 15: }
 16: 
 17: const BulkActivityModal = ({
 18:   isOpen,
 19:   onClose,
 20:   plantIds,
 21:   activityType,
 22:   plantCount,
 23:   varietyName,
 24: }: BulkActivityModalProps) => {
 25:   const [isSubmitting, setIsSubmitting] = useState(false);
 26:   const [amount, setAmount] = useState("20");
 27:   const [notes, setNotes] = useState("");
 28: 
 29:   const { logActivity } = useFirebaseCareActivities();
 30: 
 31:   const isIndividual = plantCount === 1;
 32:   const modalTitle = isIndividual
 33:     ? `${
 34:         activityType === "water"
 35:           ? "💧 Water Plant"
 36:           : activityType === "fertilize"
 37:           ? "🌱 Fertilize Plant"
 38:           : "👁️ Inspect Plant"
 39:       }`
 40:     : `${
 41:         activityType === "water"
 42:           ? "💧 Water All Plants"
 43:           : activityType === "fertilize"
 44:           ? "🌱 Fertilize All Plants"
 45:           : "👁️ Inspect All Plants"
 46:       }`;
 47: 
 48:   const buttonText = isIndividual
 49:     ? `Log ${
 50:         activityType === "water"
 51:           ? "Watering"
 52:           : activityType === "fertilize"
 53:           ? "Fertilizing"
 54:           : "Inspection"
 55:       }`
 56:     : `Log Activity for All ${plantCount} Plants`;
 57: 
 58:   const handleSubmit = async () => {
 59:     setIsSubmitting(true);
 60:     try {
 61:       for (const plantId of plantIds) {
 62:         let details: any = { notes };
 63: 
 64:         if (activityType === "water") {
 65:           details = {
 66:             type: "water",
 67:             amount: { value: parseFloat(amount), unit: "oz" },
 68:             notes,
 69:           };
 70:         } else if (activityType === "fertilize") {
 71:           details = {
 72:             type: "fertilize",
 73:             product: "General fertilizer",
 74:             dilution: "1:10",
 75:             amount: amount,
 76:             notes,
 77:           };
 78:         } else if (activityType === "observe") {
 79:           details = {
 80:             type: "observe",
 81:             healthAssessment: "good",
 82:             observations: notes || "Routine inspection",
 83:             notes,
 84:           };
 85:         }
 86: 
 87:         await logActivity({
 88:           plantId,
 89:           type: activityType as any,
 90:           date: new Date(),
 91:           details,
 92:         });
 93:       }
 94: 
 95:       const successMessage = isIndividual
 96:         ? `${
 97:             activityType === "water"
 98:               ? "Watering"
 99:               : activityType === "fertilize"
100:               ? "Fertilizing"
101:               : "Inspection"
102:           } logged successfully! 🌱`
103:         : `Activity logged for all ${plantCount} ${varietyName} plants! 🌱`;
104: 
105:       toast.success(successMessage);
106:       onClose();
107:     } catch (error) {
108:       toast.error("Failed to log activities");
109:       console.error("Activity logging error:", error);
110:     } finally {
111:       setIsSubmitting(false);
112:     }
113:   };
114: 
115:   if (!isOpen) return null;
116: 
117:   return (
118:     <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
119:       <Card className="w-full max-w-md">
120:         <CardHeader>
121:           <CardTitle className="flex items-center justify-between">
122:             <span>{modalTitle}</span>
123:             <Button variant="outline" size="sm" onClick={onClose}>
124:               ✕
125:             </Button>
126:           </CardTitle>
127:           <p className="text-sm text-muted-foreground">
128:             {isIndividual
129:               ? `Logging for ${varietyName} plant`
130:               : `Logging for ${plantCount} ${varietyName} plants`}
131:           </p>
132:         </CardHeader>
133:         <CardContent className="space-y-4">
134:           {activityType === "water" && (
135:             <div>
136:               <label htmlFor="bulk-amount" className="text-sm font-medium">
137:                 Amount (oz)
138:               </label>
139:               <Input
140:                 id="bulk-amount"
141:                 type="number"
142:                 value={amount}
143:                 onChange={(e) => setAmount(e.target.value)}
144:                 placeholder="20"
145:               />
146:             </div>
147:           )}
148: 
149:           {activityType === "fertilize" && (
150:             <div>
151:               <label htmlFor="fertilize-amount" className="text-sm font-medium">
152:                 Amount
153:               </label>
154:               <Input
155:                 id="fertilize-amount"
156:                 value={amount}
157:                 onChange={(e) => setAmount(e.target.value)}
158:                 placeholder="2 tbsp"
159:               />
160:             </div>
161:           )}
162: 
163:           <div>
164:             <label htmlFor="bulk-notes" className="text-sm font-medium">
165:               Notes (optional)
166:             </label>
167:             <Input
168:               id="bulk-notes"
169:               value={notes}
170:               onChange={(e) => setNotes(e.target.value)}
171:               placeholder="Any observations..."
172:             />
173:           </div>
174: 
175:           <Button
176:             onClick={handleSubmit}
177:             disabled={isSubmitting}
178:             className="w-full"
179:           >
180:             {isSubmitting ? "Logging..." : buttonText}
181:           </Button>
182:         </CardContent>
183:       </Card>
184:     </div>
185:   );
186: };
187: 
188: export default BulkActivityModal;

================
File: src/components/plant/NextActivityCard.tsx
================
  1: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  2: import { Button } from "@/components/ui/Button";
  3: import { useNextPlantTask } from "@/hooks/useNextPlantTask";
  4: import { Clock, Calendar, AlertTriangle, CheckCircle2 } from "lucide-react";
  5: import Badge from "../ui/Badge";
  6: 
  7: interface NextActivityCardProps {
  8:   plantId: string;
  9:   onTaskClick?: (taskType: string) => void;
 10:   className?: string;
 11: }
 12: 
 13: const NextActivityCard = ({
 14:   plantId,
 15:   onTaskClick,
 16:   className = "",
 17: }: NextActivityCardProps) => {
 18:   const { nextTask, isLoading } = useNextPlantTask(plantId);
 19: 
 20:   const getTaskIcon = (task: string): string => {
 21:     const taskLower = task.toLowerCase();
 22:     if (taskLower.includes("water")) return "💧";
 23:     if (taskLower.includes("fertiliz")) return "🌱";
 24:     if (taskLower.includes("observe") || taskLower.includes("check"))
 25:       return "👁️";
 26:     if (taskLower.includes("harvest")) return "🌾";
 27:     if (taskLower.includes("prune")) return "✂️";
 28:     return "📋";
 29:   };
 30: 
 31:   const getPriorityConfig = (priority: "low" | "medium" | "high") => {
 32:     switch (priority) {
 33:       case "high":
 34:         return {
 35:           color: "bg-red-100 text-red-800 border-red-200",
 36:           icon: <AlertTriangle className="h-3 w-3" />,
 37:           buttonStyle: "bg-red-500 hover:bg-red-600 text-white",
 38:         };
 39:       case "medium":
 40:         return {
 41:           color: "bg-orange-100 text-orange-800 border-orange-200",
 42:           icon: <Clock className="h-3 w-3" />,
 43:           buttonStyle: "bg-orange-500 hover:bg-orange-600 text-white",
 44:         };
 45:       case "low":
 46:         return {
 47:           color: "bg-green-100 text-green-800 border-green-200",
 48:           icon: <CheckCircle2 className="h-3 w-3" />,
 49:           buttonStyle: "bg-green-500 hover:bg-green-600 text-white",
 50:         };
 51:       default:
 52:         return {
 53:           color: "bg-gray-100 text-gray-800 border-gray-200",
 54:           icon: <Clock className="h-3 w-3" />,
 55:           buttonStyle: "bg-primary hover:bg-primary/90",
 56:         };
 57:     }
 58:   };
 59: 
 60:   const getActivityType = (taskDescription: string): string => {
 61:     const task = taskDescription.toLowerCase();
 62:     if (task.includes("water") || task.includes("watering")) return "water";
 63:     if (task.includes("fertiliz")) return "fertilize";
 64:     if (task.includes("health check") || task.includes("observe"))
 65:       return "observe";
 66:     if (task.includes("harvest")) return "harvest";
 67:     if (task.includes("transplant")) return "transplant";
 68:     return "water";
 69:   };
 70: 
 71:   const handleTaskClick = () => {
 72:     if (nextTask && onTaskClick) {
 73:       const activityType = getActivityType(nextTask.task);
 74:       onTaskClick(activityType);
 75:     }
 76:   };
 77: 
 78:   if (isLoading) {
 79:     return (
 80:       <Card className={`border-border shadow-sm ${className}`}>
 81:         <CardHeader className="pb-3">
 82:           <CardTitle className="flex items-center gap-2 text-base">
 83:             <Calendar className="h-4 w-4" />
 84:             Next Activity
 85:           </CardTitle>
 86:         </CardHeader>
 87:         <CardContent className="pt-0">
 88:           <div className="flex items-center gap-3">
 89:             <div className="h-8 w-8 bg-muted rounded-full animate-pulse"></div>
 90:             <div className="flex-1">
 91:               <div className="h-4 bg-muted rounded animate-pulse mb-2"></div>
 92:               <div className="h-3 bg-muted rounded animate-pulse w-2/3"></div>
 93:             </div>
 94:           </div>
 95:         </CardContent>
 96:       </Card>
 97:     );
 98:   }
 99: 
100:   if (!nextTask) {
101:     return (
102:       <Card className={`border-border shadow-sm ${className}`}>
103:         <CardHeader className="pb-3">
104:           <CardTitle className="flex items-center gap-2 text-base">
105:             <Calendar className="h-4 w-4" />
106:             Next Activity
107:           </CardTitle>
108:         </CardHeader>
109:         <CardContent className="pt-0">
110:           <div className="flex items-center gap-3 py-2">
111:             <div className="h-8 w-8 bg-green-100 rounded-full flex items-center justify-center">
112:               <CheckCircle2 className="h-4 w-4 text-green-600" />
113:             </div>
114:             <div className="flex-1">
115:               <div className="text-sm font-medium text-foreground">
116:                 All caught up!
117:               </div>
118:               <div className="text-xs text-muted-foreground">
119:                 No tasks scheduled
120:               </div>
121:             </div>
122:           </div>
123:         </CardContent>
124:       </Card>
125:     );
126:   }
127: 
128:   const priorityConfig = getPriorityConfig(nextTask.priority);
129: 
130:   return (
131:     <Card className={`border-border shadow-sm ${className}`}>
132:       <CardHeader className="pb-3">
133:         <CardTitle className="flex items-center gap-2 text-base">
134:           <Calendar className="h-4 w-4" />
135:           Next Activity
136:         </CardTitle>
137:       </CardHeader>
138:       <CardContent className="pt-0">
139:         <div className="space-y-3">
140:           {}
141:           <div className="flex items-start gap-3">
142:             <div className="h-8 w-8 bg-background border border-border rounded-full flex items-center justify-center text-lg">
143:               {getTaskIcon(nextTask.task)}
144:             </div>
145:             <div className="flex-1 min-w-0">
146:               <div className="flex items-center gap-2 mb-1">
147:                 <span className="text-sm font-medium text-foreground">
148:                   {nextTask.task}
149:                 </span>
150:                 <Badge
151:                   className={`${priorityConfig.color} text-xs px-2 py-0.5 flex items-center gap-1`}
152:                 >
153:                   {priorityConfig.icon}
154:                   {nextTask.priority}
155:                 </Badge>
156:               </div>
157:               <div className="text-xs text-muted-foreground">
158:                 {nextTask.dueIn}
159:               </div>
160:             </div>
161:           </div>
162: 
163:           {}
164:           {onTaskClick && (
165:             <Button
166:               onClick={handleTaskClick}
167:               className={`w-full ${priorityConfig.buttonStyle} text-sm py-2`}
168:               size="sm"
169:             >
170:               <span className="mr-2">{getTaskIcon(nextTask.task)}</span>
171:               Log {nextTask.task}
172:             </Button>
173:           )}
174:         </div>
175:       </CardContent>
176:     </Card>
177:   );
178: };
179: 
180: export default NextActivityCard;

================
File: src/components/plant/PlantGroupCard.tsx
================
  1: import { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { PlantGroup } from "@/utils/plantGrouping";
  4: import { Button } from "@/components/ui/Button";
  5: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  6: import { StatusBadge } from "@/components/ui/StatusBadge";
  7: import { useDynamicStage } from "@/hooks/useDynamicStage";
  8: 
  9: interface PlantGroupCardProps {
 10:   group: PlantGroup;
 11:   onBulkLogActivity: (plantIds: string[], activityType: string) => void;
 12: }
 13: 
 14: const PlantGroupCard = ({ group, onBulkLogActivity }: PlantGroupCardProps) => {
 15:   const navigate = useNavigate();
 16:   const [currentIndex, setCurrentIndex] = useState(0);
 17:   const [showBulkActions, setShowBulkActions] = useState(false);
 18:   const [showIndividualActions, setShowIndividualActions] = useState(false);
 19: 
 20:   const currentPlant = group.plants[currentIndex];
 21:   const hasMultiplePlants = group.plants.length > 1;
 22:   const calculatedStage = useDynamicStage(currentPlant);
 23: 
 24:   const goToPrevious = () => {
 25:     setCurrentIndex((prev) =>
 26:       prev === 0 ? group.plants.length - 1 : prev - 1
 27:     );
 28:   };
 29: 
 30:   const goToNext = () => {
 31:     setCurrentIndex((prev) =>
 32:       prev === group.plants.length - 1 ? 0 : prev + 1
 33:     );
 34:   };
 35: 
 36:   const handlePlantClick = () => {
 37:     navigate(`/plants/${currentPlant.id}`);
 38:   };
 39: 
 40:   const handleBulkAction = (activityType: string) => {
 41:     const plantIds = group.plants.map((p) => p.id);
 42:     onBulkLogActivity(plantIds, activityType);
 43:     setShowBulkActions(false);
 44:   };
 45: 
 46:   const handleIndividualAction = (activityType: string) => {
 47:     onBulkLogActivity([currentPlant.id], activityType);
 48:     setShowIndividualActions(false);
 49:   };
 50: 
 51:   return (
 52:     <Card className="hover:shadow-lg transition-shadow">
 53:       <CardHeader>
 54:         <div className="flex justify-between items-start">
 55:           <div className="flex-1">
 56:             <CardTitle className="text-lg flex items-center justify-between">
 57:               <span className="truncate">{currentPlant.name}</span>
 58:               <StatusBadge status="healthy" size="sm" />
 59:             </CardTitle>
 60: 
 61:             {hasMultiplePlants && (
 62:               <div className="flex items-center gap-2 mt-2">
 63:                 <Button
 64:                   variant="outline"
 65:                   size="sm"
 66:                   onClick={(e) => {
 67:                     e.stopPropagation();
 68:                     goToPrevious();
 69:                   }}
 70:                   className="h-8 w-8 p-0"
 71:                 >
 72:                   ←
 73:                 </Button>
 74:                 <span className="text-sm text-muted-foreground min-w-fit">
 75:                   {currentIndex + 1} of {group.plants.length}
 76:                 </span>
 77:                 <Button
 78:                   variant="outline"
 79:                   size="sm"
 80:                   onClick={(e) => {
 81:                     e.stopPropagation();
 82:                     goToNext();
 83:                   }}
 84:                   className="h-8 w-8 p-0"
 85:                 >
 86:                   →
 87:                 </Button>
 88:               </div>
 89:             )}
 90:           </div>
 91:         </div>
 92:       </CardHeader>
 93: 
 94:       <CardContent className="space-y-4">
 95:         <div className="cursor-pointer space-y-2" onClick={handlePlantClick}>
 96:           <div className="flex items-center gap-2">
 97:             <span className="text-xs font-medium bg-primary/10 text-primary px-2 py-1 rounded-full">
 98:               {currentPlant.varietyName}
 99:             </span>
100:             {hasMultiplePlants && (
101:               <span className="text-xs font-medium bg-secondary/50 text-secondary-foreground px-2 py-1 rounded-full">
102:                 {group.plants.length} plants
103:               </span>
104:             )}
105:           </div>
106: 
107:           <div className="grid grid-cols-2 gap-2 text-sm">
108:             <div>
109:               <span className="text-muted-foreground">Stage:</span>
110:               <div className="font-medium text-foreground capitalize">
111:                 {calculatedStage.replace("-", " ")}
112:               </div>
113:             </div>
114:             <div>
115:               <span className="text-muted-foreground">Planted:</span>
116:               <div className="font-medium text-foreground">
117:                 {currentPlant.plantedDate.toLocaleDateString()}
118:               </div>
119:             </div>
120:           </div>
121: 
122:           <div className="text-sm">
123:             <span className="text-muted-foreground">Location:</span>
124:             <span className="font-medium text-foreground ml-1">
125:               {currentPlant.location || "Not specified"}
126:             </span>
127:           </div>
128:         </div>
129: 
130:         <div className="border-t pt-3 space-y-3">
131:           <div className="space-y-3">
132:             <div className="flex items-center justify-between">
133:               <div>
134:                 <div className="text-sm font-medium text-primary">
135:                   {hasMultiplePlants
136:                     ? "Current Plant Actions"
137:                     : "Quick Actions"}
138:                 </div>
139:                 <div className="text-xs text-muted-foreground">
140:                   Log activity for {currentPlant.name}
141:                 </div>
142:               </div>
143:               <Button
144:                 variant="outline"
145:                 size="sm"
146:                 onClick={(e) => {
147:                   e.stopPropagation();
148:                   setShowIndividualActions(!showIndividualActions);
149:                 }}
150:                 className="text-primary border-primary/50 hover:bg-primary/10"
151:               >
152:                 {showIndividualActions
153:                   ? "Cancel"
154:                   : hasMultiplePlants
155:                   ? "Log One"
156:                   : "Log Care"}
157:               </Button>
158:             </div>
159: 
160:             {showIndividualActions && (
161:               <div className="grid grid-cols-2 gap-2">
162:                 <Button
163:                   size="sm"
164:                   onClick={(e) => {
165:                     e.stopPropagation();
166:                     handleIndividualAction("water");
167:                   }}
168:                   className="bg-blue-500 hover:bg-blue-600 text-white"
169:                 >
170:                   💧 Water
171:                 </Button>
172:                 <Button
173:                   size="sm"
174:                   onClick={(e) => {
175:                     e.stopPropagation();
176:                     handleIndividualAction("fertilize");
177:                   }}
178:                   className="bg-green-500 hover:bg-green-600 text-white"
179:                 >
180:                   🌱 Fertilize
181:                 </Button>
182:                 <Button
183:                   size="sm"
184:                   onClick={(e) => {
185:                     e.stopPropagation();
186:                     handleIndividualAction("observe");
187:                   }}
188:                   className="bg-orange-500 hover:bg-orange-600 text-white"
189:                 >
190:                   👁️ Inspect
191:                 </Button>
192:                 <Button
193:                   size="sm"
194:                   onClick={(e) => {
195:                     e.stopPropagation();
196:                     navigate(`/log-care/${currentPlant.id}`);
197:                   }}
198:                   variant="outline"
199:                 >
200:                   📝 More
201:                 </Button>
202:               </div>
203:             )}
204:           </div>
205: 
206:           {hasMultiplePlants && (
207:             <div className="border-t pt-3 space-y-3">
208:               <div className="flex items-center justify-between">
209:                 <div>
210:                   <div className="text-sm font-medium text-primary">
211:                     Group Actions
212:                   </div>
213:                   <div className="text-xs text-muted-foreground">
214:                     Log activity for all {group.plants.length} plants
215:                   </div>
216:                 </div>
217:                 <Button
218:                   variant="outline"
219:                   size="sm"
220:                   onClick={(e) => {
221:                     e.stopPropagation();
222:                     setShowBulkActions(!showBulkActions);
223:                   }}
224:                   className="text-primary border-primary/50 hover:bg-primary/10"
225:                 >
226:                   {showBulkActions ? "Cancel" : "Log All"}
227:                 </Button>
228:               </div>
229: 
230:               {showBulkActions && (
231:                 <div className="grid grid-cols-2 gap-2">
232:                   <Button
233:                     size="sm"
234:                     onClick={(e) => {
235:                       e.stopPropagation();
236:                       handleBulkAction("water");
237:                     }}
238:                     className="bg-blue-500 hover:bg-blue-600 text-white"
239:                   >
240:                     💧 Water All
241:                   </Button>
242:                   <Button
243:                     size="sm"
244:                     onClick={(e) => {
245:                       e.stopPropagation();
246:                       handleBulkAction("fertilize");
247:                     }}
248:                     className="bg-green-500 hover:bg-green-600 text-white"
249:                   >
250:                     🌱 Fertilize All
251:                   </Button>
252:                   <Button
253:                     size="sm"
254:                     onClick={(e) => {
255:                       e.stopPropagation();
256:                       handleBulkAction("observe");
257:                     }}
258:                     className="bg-orange-500 hover:bg-orange-600 text-white"
259:                   >
260:                     👁️ Inspect All
261:                   </Button>
262:                   <Button
263:                     size="sm"
264:                     onClick={(e) => {
265:                       e.stopPropagation();
266:                       handleBulkAction("note");
267:                     }}
268:                     className="bg-purple-500 hover:bg-purple-600 text-white"
269:                   >
270:                     📝 Note All
271:                   </Button>
272:                 </div>
273:               )}
274:             </div>
275:           )}
276:         </div>
277:       </CardContent>
278:     </Card>
279:   );
280: };
281: 
282: export default PlantGroupCard;

================
File: src/components/plant/PlantInfoCard.tsx
================
  1: import { useState, useEffect } from "react";
  2: import { Card, CardContent } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { Badge } from "@/components/ui/Badge";
  5: import { PlantRecord, VarietyRecord } from "@/types/database";
  6: import { useDynamicStage } from "@/hooks/useDynamicStage";
  7: import { formatDate, getDaysSincePlanting } from "@/utils/dateUtils";
  8: import { getPlantDisplayName } from "@/utils/plantDisplay";
  9: import { useNavigate } from "react-router-dom";
 10: import { Calendar, MapPin, Package, Sun, Droplet } from "lucide-react";
 11: import { GrowthStage } from "@/types";
 12: import { varietyService } from "@/services";
 13: 
 14: interface PlantInfoCardProps {
 15:   plant: PlantRecord;
 16:   onLogCare?: (plantId: string, activityType: string) => void;
 17:   className?: string;
 18:   showQuickActions?: boolean;
 19: }
 20: 
 21: 
 22: 
 23: 
 24: 
 25: 
 26: 
 27: 
 28: const getProtocolForStage = (
 29:   protocols: any,
 30:   stage: GrowthStage
 31: ): any | null => {
 32:   if (!protocols) return null;
 33: 
 34: 
 35:   if (protocols[stage]) return protocols[stage];
 36: 
 37: 
 38:   const stageMappings: { [key in GrowthStage]?: string[] } = {
 39:     vegetative: ["vegetativeGrowth", "vegetativeVining"],
 40:     flowering: ["flowerBudFormation"],
 41:     harvest: ["fruitingHarvesting", "podSetMaturation"],
 42:     "ongoing-production": ["ongoingProduction"],
 43:     germination: ["germinationEmergence", "slipProduction"],
 44:     seedling: ["establishment"],
 45:   };
 46: 
 47:   const possibleKeys = stageMappings[stage] || [];
 48:   for (const key of possibleKeys) {
 49:     if (protocols[key]) {
 50:       return protocols[key];
 51:     }
 52:   }
 53: 
 54: 
 55:   return null;
 56: };
 57: 
 58: const PlantInfoCard = ({
 59:   plant,
 60:   onLogCare,
 61:   className = "",
 62:   showQuickActions = true,
 63: }: PlantInfoCardProps) => {
 64:   const [showActions, setShowActions] = useState(false);
 65:   const navigate = useNavigate();
 66:   const stage = useDynamicStage(plant);
 67:   const daysSincePlanting = getDaysSincePlanting(plant.plantedDate);
 68:   const plantDisplayName = getPlantDisplayName(plant);
 69:   const [variety, setVariety] = useState<VarietyRecord | null>(null);
 70: 
 71:   useEffect(() => {
 72:     const fetchVariety = async () => {
 73:       if (plant.varietyId) {
 74:         const varietyData = await varietyService.getVariety(plant.varietyId);
 75:         setVariety(varietyData || null);
 76:       }
 77:     };
 78:     fetchVariety();
 79:   }, [plant.varietyId]);
 80: 
 81:   const lightingProtocol = getProtocolForStage(
 82:     variety?.protocols?.lighting,
 83:     stage
 84:   );
 85:   const wateringProtocol = getProtocolForStage(
 86:     variety?.protocols?.watering,
 87:     stage
 88:   );
 89: 
 90:   const handleQuickAction = (activityType: string) => {
 91:     if (onLogCare) {
 92:       onLogCare(plant.id, activityType);
 93:     } else {
 94:       const params = new URLSearchParams();
 95:       params.set("plantId", plant.id);
 96:       params.set("type", activityType);
 97:       navigate(`/log-care?${params.toString()}`);
 98:     }
 99:   };
100: 
101:   const handleCardClick = () => {
102:     navigate(`/plants/${plant.id}`);
103:   };
104: 
105:   return (
106:     <Card
107:       className={`transition-all duration-200 hover:shadow-md ${className}`}
108:     >
109:       <CardContent className="p-4">
110:         <div onClick={handleCardClick} className="cursor-pointer space-y-3">
111:           <div className="flex items-start justify-between">
112:             <div className="flex-1">
113:               <h3 className="font-semibold text-foreground text-lg leading-tight">
114:                 {plantDisplayName}
115:               </h3>
116:               <div className="flex items-center gap-2 mt-1">
117:                 <Badge variant="secondary" className="text-xs">
118:                   {stage}
119:                 </Badge>
120:                 <span className="text-xs text-muted-foreground">
121:                   Day {daysSincePlanting}
122:                 </span>
123:               </div>
124:             </div>
125:           </div>
126: 
127:           <div className="space-y-2 text-sm">
128:             <div className="flex items-center gap-2 text-muted-foreground">
129:               <Calendar size={14} />
130:               <span>Planted {formatDate(plant.plantedDate)}</span>
131:             </div>
132: 
133:             {plant.location && (
134:               <div className="flex items-center gap-2 text-muted-foreground">
135:                 <MapPin size={14} />
136:                 <span>{plant.location}</span>
137:               </div>
138:             )}
139: 
140:             {plant.container && (
141:               <div className="flex items-center gap-2 text-muted-foreground">
142:                 <Package size={14} />
143:                 <span>{plant.container}</span>
144:               </div>
145:             )}
146:             {lightingProtocol && (
147:               <div className="flex items-center gap-2 text-muted-foreground">
148:                 <Sun size={14} />
149:                 <span>
150:                   {lightingProtocol.photoperiod.hours}h light | PPFD:{" "}
151:                   {lightingProtocol.ppfd.min}-{lightingProtocol.ppfd.max}{" "}
152:                   {lightingProtocol.ppfd.optimal &&
153:                     `"| Optimal " ${lightingProtocol.ppfd.optimal}`}{" "}
154:                   {lightingProtocol.ppfd.unit}
155:                 </span>
156:               </div>
157:             )}
158:             {wateringProtocol && (
159:               <div className="flex items-start gap-2 text-muted-foreground">
160:                 <Droplet size={14} className="mt-0.5 flex-shrink-0" />
161:                 <div className="flex flex-col">
162:                   {(() => {
163:                     if (wateringProtocol.volume) {
164:                       const details = [
165:                         ...wateringProtocol.volume.amount
166:                           .split(",")
167:                           .map((s: string) => s.trim()),
168:                       ];
169:                       let frequencyString = wateringProtocol.volume.frequency;
170:                       if (wateringProtocol.volume.perPlant) {
171:                         frequencyString += " per plant";
172:                       }
173:                       details.push(frequencyString);
174: 
175:                       return details.map((detail, index) => (
176:                         <span key={index}>{detail}</span>
177:                       ));
178:                     }
179:                     return (
180:                       <span>
181:                         Water at moisture:{" "}
182:                         {wateringProtocol.trigger.moistureLevel}
183:                       </span>
184:                     );
185:                   })()}
186:                 </div>
187:               </div>
188:             )}
189:           </div>
190:         </div>
191: 
192:         {showQuickActions && (
193:           <div className="mt-4 pt-3 border-t border-border">
194:             <div className="flex items-center justify-between">
195:               <div>
196:                 <div className="text-sm font-medium text-primary">
197:                   Quick Actions
198:                 </div>
199:                 <div className="text-xs text-muted-foreground">
200:                   Log activity for this plant
201:                 </div>
202:               </div>
203:               <Button
204:                 variant="outline"
205:                 size="sm"
206:                 onClick={(e) => {
207:                   e.stopPropagation();
208:                   setShowActions(!showActions);
209:                 }}
210:                 className="text-primary border-primary/50 hover:bg-primary/10"
211:               >
212:                 {showActions ? "Cancel" : "Log Care"}
213:               </Button>
214:             </div>
215: 
216:             {showActions && (
217:               <div className="grid grid-cols-2 gap-2 mt-3">
218:                 <Button
219:                   size="sm"
220:                   onClick={(e) => {
221:                     e.stopPropagation();
222:                     handleQuickAction("water");
223:                   }}
224:                   className="bg-blue-500 hover:bg-blue-600 text-white"
225:                 >
226:                   💧 Water
227:                 </Button>
228:                 <Button
229:                   size="sm"
230:                   onClick={(e) => {
231:                     e.stopPropagation();
232:                     handleQuickAction("fertilize");
233:                   }}
234:                   className="bg-green-500 hover:bg-green-600 text-white"
235:                 >
236:                   🌱 Fertilize
237:                 </Button>
238:                 <Button
239:                   size="sm"
240:                   onClick={(e) => {
241:                     e.stopPropagation();
242:                     handleQuickAction("observe");
243:                   }}
244:                   className="bg-orange-500 hover:bg-orange-600 text-white"
245:                 >
246:                   👁️ Inspect
247:                 </Button>
248:                 <Button
249:                   size="sm"
250:                   onClick={(e) => {
251:                     e.stopPropagation();
252:                     handleQuickAction("photo");
253:                   }}
254:                   className="bg-purple-500 hover:bg-purple-600 text-white"
255:                 >
256:                   📸 Photo
257:                 </Button>
258:               </div>
259:             )}
260:           </div>
261:         )}
262:       </CardContent>
263:     </Card>
264:   );
265: };
266: 
267: export default PlantInfoCard;

================
File: src/components/ui/Badge.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
 5:   variant?: "default" | "secondary" | "destructive" | "outline";
 6:   size?: "sm" | "md" | "lg";
 7:   children: React.ReactNode;
 8:   className?: string;
 9: }
10: 
11: export const Badge = ({
12:   variant = "default",
13:   size = "md",
14:   children,
15:   className,
16:   ...props
17: }: BadgeProps) => {
18:   const baseClasses =
19:     "inline-flex items-center font-medium rounded-full border";
20: 
21:   const variantClasses = {
22:     default: "bg-primary text-primary-foreground border-primary",
23:     secondary: "bg-secondary text-secondary-foreground border-secondary",
24:     destructive:
25:       "bg-destructive text-destructive-foreground border-destructive",
26:     outline: "text-foreground border-border bg-transparent",
27:   };
28: 
29:   const sizeClasses = {
30:     sm: "px-2 py-0.5 text-xs",
31:     md: "px-2.5 py-1 text-sm",
32:     lg: "px-3 py-1.5 text-base",
33:   };
34: 
35:   return (
36:     <div
37:       className={cn(
38:         baseClasses,
39:         variantClasses[variant],
40:         sizeClasses[size],
41:         className
42:       )}
43:       {...props}
44:     >
45:       {children}
46:     </div>
47:   );
48: };
49: 
50: export default Badge;

================
File: src/components/ui/Input.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
 5:   className?: string;
 6: }
 7: 
 8: export const Input: React.FC<InputProps> = ({
 9:   className,
10:   type = "text",
11:   ...props
12: }) => {
13:   return (
14:     <input
15:       type={type}
16:       className={cn(
17:         "flex h-10 w-full rounded-md border border-border bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
18:         className
19:       )}
20:       {...props}
21:     />
22:   );
23: };

================
File: src/components/ui/LoadingSpinner.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface LoadingSpinnerProps {
 5:   size?: "sm" | "md" | "lg";
 6:   className?: string;
 7: }
 8: 
 9: export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
10:   size = "md",
11:   className,
12: }) => {
13:   const sizeClasses = {
14:     sm: "w-4 h-4",
15:     md: "w-6 h-6",
16:     lg: "w-8 h-8",
17:   };
18: 
19:   return (
20:     <div className={cn("flex items-center justify-center", className)}>
21:       <div
22:         className={cn(
23:           "animate-spin rounded-full border-2 border-garden-200 border-t-garden-600",
24:           sizeClasses[size]
25:         )}
26:       />
27:     </div>
28:   );
29: };

================
File: src/components/ui/OfflineIndicator.tsx
================
 1: import React, { useState, useEffect } from "react";
 2: 
 3: export const OfflineIndicator: React.FC = () => {
 4:   const [isOnline, setIsOnline] = useState(navigator.onLine);
 5: 
 6:   useEffect(() => {
 7:     function handleOnline() {
 8:       setIsOnline(true);
 9:     }
10: 
11:     function handleOffline() {
12:       setIsOnline(false);
13:     }
14: 
15:     window.addEventListener("online", handleOnline);
16:     window.addEventListener("offline", handleOffline);
17: 
18:     return () => {
19:       window.removeEventListener("online", handleOnline);
20:       window.removeEventListener("offline", handleOffline);
21:     };
22:   }, []);
23: 
24:   if (isOnline) return null;
25: 
26:   return (
27:     <div className="fixed top-0 left-0 right-0 bg-red-600 text-white px-4 py-2 text-center text-sm font-medium z-50">
28:       📡 You're offline - Data will sync when connection returns
29:     </div>
30:   );
31: };

================
File: src/components/ui/StatusBadge.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface StatusBadgeProps {
 5:   status: "healthy" | "attention" | "critical" | "new";
 6:   size?: "sm" | "md";
 7: }
 8: 
 9: export const StatusBadge: React.FC<StatusBadgeProps> = ({
10:   status,
11:   size = "md",
12: }) => {
13:   const baseClasses = "inline-flex items-center font-medium rounded-full";
14: 
15:   const sizeClasses = {
16:     sm: "px-2 py-0.5 text-xs",
17:     md: "px-2.5 py-1 text-sm",
18:   };
19: 
20:   const statusClasses = {
21:     healthy: "bg-green-100 text-green-800",
22:     attention: "bg-yellow-100 text-yellow-800",
23:     critical: "bg-red-100 text-red-800",
24:     new: "bg-blue-100 text-blue-800",
25:   };
26: 
27:   const statusIcons = {
28:     healthy: "✅",
29:     attention: "⚠️",
30:     critical: "🚨",
31:     new: "🌱",
32:   };
33: 
34:   return (
35:     <span className={cn(baseClasses, sizeClasses[size], statusClasses[status])}>
36:       <span className="mr-1">{statusIcons[status]}</span>
37:       {status}
38:     </span>
39:   );
40: };

================
File: src/components/AuthForm.tsx
================
 1: import React, { useState } from "react";
 2: import { useFirebaseAuth } from "../hooks/useFirebaseAuth";
 3: import { Card, CardContent, CardHeader, CardTitle } from "./ui/Card";
 4: import { Button } from "./ui/Button";
 5: import { Input } from "./ui/Input";
 6: 
 7: export const AuthForm = () => {
 8:   const [isSignUp, setIsSignUp] = useState(false);
 9:   const [email, setEmail] = useState("");
10:   const [password, setPassword] = useState("");
11:   const [displayName, setDisplayName] = useState("");
12:   const { signIn, signUp, loading, error } = useFirebaseAuth();
13: 
14:   const handleSubmit = async (e: React.FormEvent) => {
15:     e.preventDefault();
16: 
17:     try {
18:       if (isSignUp) {
19:         await signUp(email, password, displayName);
20:       } else {
21:         await signIn(email, password);
22:       }
23:     } catch {
24:       // Error is handled by the hook
25:     }
26:   };
27: 
28:   return (
29:     <div className="min-h-screen flex items-center justify-center bg-gray-50">
30:       <Card className="w-full max-w-md">
31:         <CardHeader>
32:           <CardTitle className="text-center">
33:             {isSignUp ? "Create Account" : "Sign In"}
34:           </CardTitle>
35:         </CardHeader>
36:         <CardContent>
37:           <form onSubmit={handleSubmit} className="space-y-4">
38:             {isSignUp && (
39:               <Input
40:                 type="text"
41:                 placeholder="Display Name"
42:                 value={displayName}
43:                 onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
44:                   setDisplayName(e.target.value)
45:                 }
46:                 required
47:               />
48:             )}
49:             <Input
50:               type="email"
51:               placeholder="Email"
52:               value={email}
53:               onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
54:                 setEmail(e.target.value)
55:               }
56:               required
57:             />
58:             <Input
59:               type="password"
60:               placeholder="Password"
61:               value={password}
62:               onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
63:                 setPassword(e.target.value)
64:               }
65:               required
66:             />
67: 
68:             {error && <div className="text-red-600 text-sm">{error}</div>}
69: 
70:             <Button type="submit" className="w-full" loading={loading}>
71:               {isSignUp ? "Create Account" : "Sign In"}
72:             </Button>
73: 
74:             <Button
75:               type="button"
76:               variant="ghost"
77:               className="w-full"
78:               onClick={() => setIsSignUp(!isSignUp)}
79:             >
80:               {isSignUp
81:                 ? "Already have an account? Sign in"
82:                 : "Don't have an account? Sign up"}
83:             </Button>
84:           </form>
85:         </CardContent>
86:       </Card>
87:     </div>
88:   );
89: };

================
File: src/hooks/useDarkMode.ts
================
 1: import { useState, useEffect } from "react";
 2: 
 3: export const useDarkMode = () => {
 4:   const [isDarkMode, setIsDarkMode] = useState(() => {
 5: 
 6:     const saved = localStorage.getItem("darkMode");
 7:     if (saved !== null) {
 8:       return JSON.parse(saved);
 9:     }
10: 
11: 
12:     return window.matchMedia("(prefers-color-scheme: dark)").matches;
13:   });
14: 
15:   useEffect(() => {
16: 
17:     if (isDarkMode) {
18:       document.documentElement.classList.add("dark");
19:     } else {
20:       document.documentElement.classList.remove("dark");
21:     }
22: 
23: 
24:     localStorage.setItem("darkMode", JSON.stringify(isDarkMode));
25:   }, [isDarkMode]);
26: 
27: 
28:   useEffect(() => {
29:     const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
30:     const handleChange = (e: MediaQueryListEvent) => {
31: 
32:       const saved = localStorage.getItem("darkMode");
33:       if (saved === null) {
34:         setIsDarkMode(e.matches);
35:       }
36:     };
37: 
38:     mediaQuery.addEventListener("change", handleChange);
39:     return () => mediaQuery.removeEventListener("change", handleChange);
40:   }, []);
41: 
42:   return { isDarkMode, toggleDarkMode: () => setIsDarkMode(!isDarkMode) };
43: };

================
File: src/hooks/useFirebaseAuth.ts
================
 1: import { useState, useEffect } from "react";
 2: import { User } from "firebase/auth";
 3: import { FirebaseAuthService } from "../services/firebase/authService";
 4: 
 5: export function useFirebaseAuth() {
 6:   const [user, setUser] = useState<User | null>(null);
 7:   const [loading, setLoading] = useState(true);
 8:   const [error, setError] = useState<string | null>(null);
 9: 
10:   useEffect(() => {
11:     const unsubscribe = FirebaseAuthService.onAuthStateChanged((user) => {
12:       setUser(user);
13:       setLoading(false);
14:     });
15: 
16:     return unsubscribe;
17:   }, []);
18: 
19:   const signIn = async (email: string, password: string) => {
20:     try {
21:       setError(null);
22:       setLoading(true);
23:       await FirebaseAuthService.signIn(email, password);
24:     } catch (err) {
25:       setError(err instanceof Error ? err.message : "Sign in failed");
26:       throw err;
27:     } finally {
28:       setLoading(false);
29:     }
30:   };
31: 
32:   const signUp = async (
33:     email: string,
34:     password: string,
35:     displayName?: string
36:   ) => {
37:     try {
38:       setError(null);
39:       setLoading(true);
40:       await FirebaseAuthService.signUp(email, password, displayName);
41:     } catch (err) {
42:       setError(err instanceof Error ? err.message : "Sign up failed");
43:       throw err;
44:     } finally {
45:       setLoading(false);
46:     }
47:   };
48: 
49:   const signOut = async () => {
50:     try {
51:       setError(null);
52:       await FirebaseAuthService.signOut();
53:     } catch (err) {
54:       setError(err instanceof Error ? err.message : "Sign out failed");
55:       throw err;
56:     }
57:   };
58: 
59:   const resetPassword = async (email: string) => {
60:     try {
61:       setError(null);
62:       await FirebaseAuthService.resetPassword(email);
63:     } catch (err) {
64:       setError(err instanceof Error ? err.message : "Password reset failed");
65:       throw err;
66:     }
67:   };
68: 
69:   return {
70:     user,
71:     loading,
72:     error,
73:     signIn,
74:     signUp,
75:     signOut,
76:     resetPassword,
77:   };
78: }

================
File: src/hooks/useFirebaseCareActivities.ts
================
 1: import { useState, useEffect } from "react";
 2: import { FirebaseCareActivityService } from "../services/firebase/careActivityService";
 3: import { useFirebaseAuth } from "./useFirebaseAuth";
 4: import { CareRecord } from "@/types";
 5: 
 6: export function useFirebaseCareActivities(plantId?: string) {
 7:   const [activities, setActivities] = useState<CareRecord[]>([]);
 8:   const [loading, setLoading] = useState(true);
 9:   const [error, setError] = useState<string | null>(null);
10:   const { user } = useFirebaseAuth();
11: 
12:   useEffect(() => {
13:     if (!user) {
14:       setActivities([]);
15:       setLoading(false);
16:       return;
17:     }
18: 
19:     const unsubscribe = plantId
20:       ? FirebaseCareActivityService.subscribeToPlantActivities(
21:           plantId,
22:           (updatedActivities) => {
23:             setActivities(updatedActivities);
24:             setLoading(false);
25:             setError(null);
26:           }
27:         )
28:       : FirebaseCareActivityService.subscribeToUserActivities(
29:           user.uid,
30:           (updatedActivities) => {
31:             setActivities(updatedActivities);
32:             setLoading(false);
33:             setError(null);
34:           }
35:         );
36: 
37:     return unsubscribe;
38:   }, [user, plantId]);
39: 
40:   const logActivity = async (
41:     activity: Omit<CareRecord, "id" | "createdAt" | "updatedAt">
42:   ) => {
43:     try {
44:       if (!user) throw new Error("User not authenticated");
45:       setError(null);
46:       return await FirebaseCareActivityService.createCareActivity(
47:         activity,
48:         user.uid
49:       );
50:     } catch (err) {
51:       const errorMessage =
52:         err instanceof Error ? err.message : "Failed to log activity";
53:       setError(errorMessage);
54:       throw new Error(errorMessage);
55:     }
56:   };
57: 
58:   return {
59:     activities,
60:     loading,
61:     error,
62:     logActivity,
63:   };
64: }

================
File: src/hooks/useFirebasePlants.ts
================
 1: import { useState, useEffect } from "react";
 2: import { FirebasePlantService } from "../services/firebase/plantService";
 3: import { PlantRecord } from "../types/database";
 4: import { useFirebaseAuth } from "./useFirebaseAuth";
 5: 
 6: export function useFirebasePlants(includeInactive = false) {
 7:   const [plants, setPlants] = useState<PlantRecord[]>([]);
 8:   const [loading, setLoading] = useState(true);
 9:   const [error, setError] = useState<string | null>(null);
10:   const { user } = useFirebaseAuth();
11: 
12:   useEffect(() => {
13:     if (!user) {
14:       setPlants([]);
15:       setLoading(false);
16:       return;
17:     }
18: 
19:     const unsubscribe = FirebasePlantService.subscribeToPlantsChanges(
20:       user.uid,
21:       (updatedPlants) => {
22:         setPlants(updatedPlants);
23:         setLoading(false);
24:         setError(null);
25:       },
26:       { includeInactive }
27:     );
28: 
29:     return unsubscribe;
30:   }, [user, includeInactive]);
31: 
32:   const createPlant = async (
33:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">
34:   ) => {
35:     try {
36:       if (!user) {
37:         throw new Error("User not authenticated");
38:       }
39:       setError(null);
40:       return await FirebasePlantService.createPlant(plant, user.uid);
41:     } catch (err) {
42:       const errorMessage =
43:         err instanceof Error ? err.message : "Failed to create plant";
44:       setError(errorMessage);
45:       throw new Error(errorMessage);
46:     }
47:   };
48: 
49:   const updatePlant = async (
50:     plantId: string,
51:     updates: Partial<PlantRecord>
52:   ) => {
53:     try {
54:       setError(null);
55:       await FirebasePlantService.updatePlant(plantId, updates);
56:     } catch (err) {
57:       const errorMessage =
58:         err instanceof Error ? err.message : "Failed to update plant";
59:       setError(errorMessage);
60:       throw new Error(errorMessage);
61:     }
62:   };
63: 
64:   const deletePlant = async (plantId: string) => {
65:     try {
66:       setError(null);
67:       await FirebasePlantService.deletePlant(plantId);
68:     } catch (err) {
69:       const errorMessage =
70:         err instanceof Error ? err.message : "Failed to delete plant";
71:       setError(errorMessage);
72:       throw new Error(errorMessage);
73:     }
74:   };
75: 
76:   return {
77:     plants,
78:     loading,
79:     error,
80:     createPlant,
81:     updatePlant,
82:     deletePlant,
83:   };
84: }

================
File: src/hooks/useFirstTimeUser.ts
================
 1: import { useState, useEffect } from "react";
 2: import { plantService } from "@/types/database";
 3: 
 4: export const useFirstTimeUser = () => {
 5:   const [isFirstTime, setIsFirstTime] = useState<boolean | null>(null);
 6:   const [isLoading, setIsLoading] = useState(true);
 7: 
 8:   useEffect(() => {
 9:     const checkFirstTimeUser = async () => {
10:       try {
11: 
12:         const plants = await plantService.getActivePlants();
13: 
14: 
15:         const hasCompletedOnboarding = localStorage.getItem(
16:           "smartgarden_onboarding_completed"
17:         );
18: 
19:         setIsFirstTime(plants.length === 0 && !hasCompletedOnboarding);
20:       } catch (error) {
21:         console.error("Error checking first time user:", error);
22:         setIsFirstTime(false);
23:       } finally {
24:         setIsLoading(false);
25:       }
26:     };
27: 
28:     checkFirstTimeUser();
29:   }, []);
30: 
31:   const markOnboardingComplete = () => {
32:     localStorage.setItem("smartgarden_onboarding_completed", "true");
33:     setIsFirstTime(false);
34:   };
35: 
36:   return {
37:     isFirstTime,
38:     isLoading,
39:     markOnboardingComplete,
40:   };
41: };

================
File: src/hooks/useNextPlantTask.ts
================
 1: import { useState, useEffect } from "react";
 2: import { CareSchedulingService } from "@/services/careSchedulingService";
 3: import { UpcomingTask } from "@/types/scheduling";
 4: 
 5: export const useNextPlantTask = (plantId: string) => {
 6:   const [nextTask, setNextTask] = useState<UpcomingTask | null>(null);
 7:   const [isLoading, setIsLoading] = useState(true);
 8: 
 9:   useEffect(() => {
10:     let mounted = true;
11: 
12:     const loadNextTask = async () => {
13:       try {
14:         setIsLoading(true);
15:         const task = await CareSchedulingService.getNextTaskForPlant(plantId);
16:         if (mounted) {
17:           setNextTask(task);
18:         }
19:       } catch (error) {
20:         console.error(`Failed to load next task for plant ${plantId}:`, error);
21:         if (mounted) {
22:           setNextTask(null);
23:         }
24:       } finally {
25:         if (mounted) {
26:           setIsLoading(false);
27:         }
28:       }
29:     };
30: 
31:     loadNextTask();
32: 
33:     return () => {
34:       mounted = false;
35:     };
36:   }, [plantId]);
37: 
38:   return { nextTask, isLoading };
39: };

================
File: src/pages/dashboard/TaskGroup.tsx
================
 1: import React, { useState } from "react";
 2: import { Card, CardContent, CardHeader } from "@/components/ui/Card";
 3: import TaskItem from "./TaskItem";
 4: import { TaskGroup as TaskGroupType } from "@/types/scheduling";
 5: import { QuickCompletionValues } from "@/services/smartDefaultsService";
 6: 
 7: interface TaskGroupProps {
 8:   group: TaskGroupType;
 9:   onQuickComplete?: (
10:     taskId: string,
11:     values: QuickCompletionValues
12:   ) => Promise<void>;
13:   onBypass?: (taskId: string, reason: string) => Promise<void>;
14:   onToggleExpanded?: (groupType: string) => void;
15: }
16: 
17: const TaskGroup: React.FC<TaskGroupProps> = ({
18:   group,
19:   onQuickComplete,
20:   onBypass,
21:   onToggleExpanded,
22: }) => {
23:   const [isExpanded, setIsExpanded] = useState(group.isExpanded);
24: 
25:   const handleToggle = () => {
26:     const newExpanded = !isExpanded;
27:     setIsExpanded(newExpanded);
28:     onToggleExpanded?.(group.type);
29:   };
30: 
31:   const urgentTaskCount = group.tasks.filter(
32:     (task) => task.priority === "high" || task.dueIn.includes("overdue")
33:   ).length;
34: 
35:   return (
36:     <Card className="w-full">
37:       <CardHeader className="cursor-pointer hover:bg-muted/50 transition-colors">
38:         <div
39:           className="flex items-center justify-between"
40:           onClick={handleToggle}
41:         >
42:           {}
43:           <div className="flex items-center gap-3">
44:             <span className="text-2xl">{group.emoji}</span>
45:             <div>
46:               <h3 className="text-lg font-semibold">{group.title}</h3>
47:               <p className="text-sm text-muted-foreground">
48:                 {group.tasks.length} task{group.tasks.length !== 1 ? "s" : ""}
49:                 {urgentTaskCount > 0 && (
50:                   <span className="ml-2 px-2 py-0.5 bg-red-100 text-red-700 rounded-full text-xs font-medium">
51:                     {urgentTaskCount} urgent
52:                   </span>
53:                 )}
54:               </p>
55:             </div>
56:           </div>
57: 
58:           <div className="flex items-center gap-2">
59:             <svg
60:               className={`w-5 h-5 transition-transform ${
61:                 isExpanded ? "rotate-180" : ""
62:               }`}
63:               fill="none"
64:               stroke="currentColor"
65:               viewBox="0 0 24 24"
66:             >
67:               <path
68:                 strokeLinecap="round"
69:                 strokeLinejoin="round"
70:                 strokeWidth={2}
71:                 d="M19 9l-7 7-7-7"
72:               />
73:             </svg>
74:           </div>
75:         </div>
76:       </CardHeader>
77: 
78:       {isExpanded && (
79:         <CardContent className="pt-0">
80:           <div className="space-y-3">
81:             {group.tasks.map((task) => (
82:               <TaskItem
83:                 key={task.id}
84:                 task={task}
85:                 onQuickComplete={onQuickComplete}
86:                 onBypass={onBypass}
87:               />
88:             ))}
89:           </div>
90:         </CardContent>
91:       )}
92:     </Card>
93:   );
94: };
95: 
96: export default TaskGroup;

================
File: src/services/firebase/__mocks__/config.ts
================
1: export const db = {};
2: export const auth = {};
3: export const storage = {};
4: export const enableOfflineMode = jest.fn();
5: export const enableOnlineMode = jest.fn();

================
File: src/services/firebase/authService.ts
================
 1: import {
 2:   signInWithEmailAndPassword,
 3:   createUserWithEmailAndPassword,
 4:   signOut,
 5:   onAuthStateChanged,
 6:   User,
 7:   updateProfile,
 8:   sendPasswordResetEmail,
 9: } from "firebase/auth";
10: import { auth } from "./config";
11: 
12: export class FirebaseAuthService {
13:   static async signIn(email: string, password: string): Promise<User> {
14:     const result = await signInWithEmailAndPassword(auth, email, password);
15:     return result.user;
16:   }
17: 
18:   static async signUp(
19:     email: string,
20:     password: string,
21:     displayName?: string
22:   ): Promise<User> {
23:     const result = await createUserWithEmailAndPassword(auth, email, password);
24: 
25:     if (displayName) {
26:       await updateProfile(result.user, { displayName });
27:     }
28: 
29:     return result.user;
30:   }
31: 
32:   static async signOut(): Promise<void> {
33:     await signOut(auth);
34:   }
35: 
36:   static async resetPassword(email: string): Promise<void> {
37:     await sendPasswordResetEmail(auth, email);
38:   }
39: 
40:   static onAuthStateChanged(callback: (user: User | null) => void): () => void {
41:     return onAuthStateChanged(auth, callback);
42:   }
43: 
44:   static getCurrentUser(): User | null {
45:     return auth.currentUser;
46:   }
47: }

================
File: src/services/firebase/careActivityService.ts
================
 1: import {
 2:   collection,
 3:   addDoc,
 4:   onSnapshot,
 5:   query,
 6:   where,
 7:   orderBy,
 8:   limit,
 9: } from "firebase/firestore";
10: import { db } from "./config";
11: import {
12:   FirebaseCareRecord,
13:   convertCareActivityToFirebase,
14:   convertCareActivityFromFirebase,
15: } from "../../types/firebase";
16: import { CareRecord } from "../../types/database";
17: 
18: export class FirebaseCareActivityService {
19:   private static careActivitiesCollection = collection(db, "careActivities");
20: 
21:   static async createCareActivity(
22:     activity: Omit<CareRecord, "id" | "createdAt" | "updatedAt">,
23:     userId: string
24:   ): Promise<string> {
25:     const activityWithDates: CareRecord = {
26:       ...activity,
27:       id: "", // Will be set by Firebase
28:       createdAt: new Date(),
29:       updatedAt: new Date(),
30:     };
31: 
32:     const firebaseActivity = convertCareActivityToFirebase(
33:       activityWithDates,
34:       userId
35:     );
36:     const docRef = await addDoc(
37:       this.careActivitiesCollection,
38:       firebaseActivity
39:     );
40:     return docRef.id;
41:   }
42: 
43:   static subscribeToPlantActivities(
44:     plantId: string,
45:     callback: (activities: CareRecord[]) => void,
46:     limitCount = 50
47:   ): () => void {
48:     const activitiesQuery = query(
49:       this.careActivitiesCollection,
50:       where("plantId", "==", plantId),
51:       orderBy("date", "desc"),
52:       limit(limitCount)
53:     );
54: 
55:     return onSnapshot(activitiesQuery, (snapshot) => {
56:       const activities = snapshot.docs.map((doc) => {
57:         const data = doc.data() as FirebaseCareRecord;
58:         return convertCareActivityFromFirebase({ ...data, id: doc.id });
59:       });
60:       callback(activities);
61:     });
62:   }
63: 
64:   static subscribeToUserActivities(
65:     userId: string,
66:     callback: (activities: CareRecord[]) => void,
67:     limitCount = 100
68:   ): () => void {
69:     const activitiesQuery = query(
70:       this.careActivitiesCollection,
71:       where("userId", "==", userId),
72:       orderBy("date", "desc"),
73:       limit(limitCount)
74:     );
75: 
76:     return onSnapshot(activitiesQuery, (snapshot) => {
77:       const activities = snapshot.docs.map((doc) => {
78:         const data = doc.data() as FirebaseCareRecord;
79:         return convertCareActivityFromFirebase({ ...data, id: doc.id });
80:       });
81:       callback(activities);
82:     });
83:   }
84: }

================
File: src/services/firebase/config.ts
================
 1: import { initializeApp } from "firebase/app";
 2: import { getAuth } from "firebase/auth";
 3: import { getFirestore } from "firebase/firestore";
 4: import { getStorage } from "firebase/storage";
 5: 
 6: 
 7: const firebaseConfig = {
 8:   apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
 9:   authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
10:   projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
11:   storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
12:   messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
13:   appId: import.meta.env.VITE_FIREBASE_APP_ID,
14: };
15: 
16: 
17: const app = initializeApp(firebaseConfig);
18: 
19: 
20: export const auth = getAuth(app);
21: export const db = getFirestore(app);
22: export const storage = getStorage(app);

================
File: src/services/firebase/plantService.ts
================
  1: import {
  2:   collection,
  3:   doc,
  4:   addDoc,
  5:   updateDoc,
  6:   onSnapshot,
  7:   query,
  8:   where,
  9:   orderBy,
 10:   Timestamp,
 11:   writeBatch,
 12: } from "firebase/firestore";
 13: import { db } from "./config";
 14: import {
 15:   FirebasePlantRecord,
 16:   convertPlantToFirebase,
 17:   convertPlantFromFirebase,
 18: } from "../../types/firebase";
 19: import { PlantRecord, varietyService } from "../../types/database";
 20: import { ProtocolTranspilerService } from "../ProtocolTranspilerService";
 21: import { FirebaseScheduledTaskService } from "./scheduledTaskService";
 22: 
 23: export class FirebasePlantService {
 24:   private static plantsCollection = collection(db, "plants");
 25: 
 26:   static async updatePlant(
 27:     plantId: string,
 28:     updates: Partial<PlantRecord>
 29:   ): Promise<void> {
 30:     const plantRef = doc(this.plantsCollection, plantId);
 31:     const firebaseUpdates = {
 32:       ...updates,
 33:       updatedAt: Timestamp.now(),
 34:       ...(updates.plantedDate && {
 35:         plantedDate: Timestamp.fromDate(updates.plantedDate),
 36:       }),
 37:     };
 38: 
 39:     await updateDoc(plantRef, firebaseUpdates);
 40:   }
 41: 
 42:   static async deletePlant(plantId: string): Promise<void> {
 43: 
 44:     await this.updatePlant(plantId, { isActive: false });
 45:   }
 46: 
 47:   static async hardDeletePlant(plantId: string): Promise<void> {
 48:     const batch = writeBatch(db);
 49: 
 50: 
 51:     const plantRef = doc(this.plantsCollection, plantId);
 52:     batch.delete(plantRef);
 53: 
 54: 
 55:     await batch.commit();
 56:   }
 57: 
 58:   static subscribeToPlantsChanges(
 59:     userId: string,
 60:     callback: (plants: PlantRecord[]) => void,
 61:     options?: { includeInactive?: boolean }
 62:   ): () => void {
 63:     const constraints = [
 64:       where("userId", "==", userId),
 65:       orderBy("createdAt", "desc"),
 66:     ];
 67: 
 68:     if (!options?.includeInactive) {
 69:       constraints.push(where("isActive", "==", true));
 70:     }
 71: 
 72:     const plantsQuery = query(this.plantsCollection, ...constraints);
 73: 
 74:     return onSnapshot(plantsQuery, (snapshot) => {
 75:       const plants = snapshot.docs.map((doc) => {
 76:         const data = doc.data() as FirebasePlantRecord;
 77:         return convertPlantFromFirebase({ ...data, id: doc.id });
 78:       });
 79:       callback(plants);
 80:     });
 81:   }
 82: 
 83:   static async getPlant(plantId: string): Promise<PlantRecord | null> {
 84:     return new Promise((resolve) => {
 85:       const plantRef = doc(this.plantsCollection, plantId);
 86:       const unsubscribe = onSnapshot(plantRef, (doc) => {
 87:         if (doc.exists()) {
 88:           const data = doc.data() as FirebasePlantRecord;
 89:           resolve(convertPlantFromFirebase({ ...data, id: doc.id }));
 90:         } else {
 91:           resolve(null);
 92:         }
 93:         unsubscribe();
 94:       });
 95:     });
 96:   }
 97: 
 98:   static async createPlant(
 99:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">,
100:     userId: string
101:   ): Promise<string> {
102:     try {
103: 
104:       const plantWithDates: PlantRecord = {
105:         ...plant,
106:         id: "",
107:         createdAt: new Date(),
108:         updatedAt: new Date(),
109:       };
110:       const firebasePlantData = convertPlantToFirebase(plantWithDates, userId);
111:       const docRef = await addDoc(collection(db, "plants"), firebasePlantData);
112: 
113:       const variety = await varietyService.getVariety(plant.varietyId);
114: 
115:       if (!variety) {
116:         console.error("❌ Variety not found:", plant.varietyId);
117:         return docRef.id;
118:       }
119: 
120:       if (variety.protocols?.fertilization) {
121:         const fullPlant: PlantRecord = {
122:           ...plantWithDates,
123:           id: docRef.id,
124:         };
125: 
126:         const scheduledTasks =
127:           await ProtocolTranspilerService.transpilePlantProtocol(
128:             fullPlant,
129:             variety
130:           );
131: 
132: 
133:         if (scheduledTasks.length > 0) {
134: 
135:           await FirebaseScheduledTaskService.createMultipleTasks(
136:             scheduledTasks,
137:             userId
138:           );
139:         } else {
140:           console.log("⚠️ No tasks generated");
141:         }
142:       } else {
143:         console.log("⚠️ No fertilization protocols found for variety");
144:       }
145: 
146:       return docRef.id;
147:     } catch (error) {
148:       console.error("❌ Error creating plant:", error);
149:       throw error;
150:     }
151:   }
152: }

================
File: src/services/bulkActivityService.ts
================
 1: import { CareActivityType } from "@/types";
 2: import { careService } from "@/types/database";
 3: import { CareActivityDetails } from "@/types/database";
 4: 
 5: export interface BulkActivityData {
 6:   type: CareActivityType;
 7:   date?: Date;
 8:   details: Partial<CareActivityDetails>;
 9: }
10: 
11: export class BulkActivityService {
12:   static async logActivityForPlants(
13:     plantIds: string[],
14:     activityData: BulkActivityData
15:   ): Promise<string[]> {
16:     const results: string[] = [];
17:     const date = activityData.date || new Date();
18: 
19:     for (const plantId of plantIds) {
20:       try {
21:         const careId = await careService.addCareActivity({
22:           plantId,
23:           type: activityData.type,
24:           date,
25:           details: {
26:             type: activityData.type,
27:             ...activityData.details,
28:           } as CareActivityDetails,
29:         });
30:         results.push(careId);
31:       } catch (error) {
32:         console.error(`Failed to log activity for plant ${plantId}:`, error);
33:       }
34:     }
35: 
36:     return results;
37:   }
38: 
39:   static async createBulkWateringActivity(
40:     amount: number,
41:     unit: string,
42:     moistureBefore?: number,
43:     moistureAfter?: number,
44:     notes?: string
45:   ): Promise<BulkActivityData> {
46:     return {
47:       type: "water",
48:       details: {
49:         type: "water",
50:         amount: { value: amount, unit: unit as any },
51:         moistureLevel:
52:           moistureBefore && moistureAfter
53:             ? {
54:                 before: moistureBefore,
55:                 after: moistureAfter,
56:                 scale: "1-10" as const,
57:               }
58:             : undefined,
59:         notes,
60:       },
61:     };
62:   }
63: 
64:   static async createBulkFertilizeActivity(
65:     product: string,
66:     dilution: string,
67:     amount: string,
68:     notes?: string
69:   ): Promise<BulkActivityData> {
70:     return {
71:       type: "fertilize",
72:       details: {
73:         type: "fertilize",
74:         product,
75:         dilution,
76:         amount,
77:         notes,
78:       },
79:     };
80:   }
81: 
82:   static async createBulkObservationActivity(
83:     healthAssessment: "excellent" | "good" | "fair" | "concerning" | "critical",
84:     observations: string,
85:     notes?: string
86:   ): Promise<BulkActivityData> {
87:     return {
88:       type: "observe",
89:       details: {
90:         type: "observe",
91:         healthAssessment,
92:         observations,
93:         notes,
94:       },
95:     };
96:   }
97: }

================
File: src/services/dynamicSchedulingService.ts
================
  1: import { db, TaskCompletionRecord } from "@/types/database";
  2: import { CareActivityType, GrowthStage } from "@/types/core";
  3: import { addDays, differenceInDays } from "date-fns";
  4: 
  5: export interface SchedulingAdjustment {
  6:   plantId: string;
  7:   taskType: CareActivityType;
  8:   originalInterval: number;
  9:   adjustedInterval: number;
 10:   reason: string;
 11:   confidence: number;
 12: }
 13: 
 14: export class DynamicSchedulingService {
 15:   static async recordTaskCompletion(
 16:     plantId: string,
 17:     taskType: CareActivityType,
 18:     scheduledDate: Date,
 19:     actualCompletionDate: Date,
 20:     careActivityId: string,
 21:     plantStage: GrowthStage
 22:   ): Promise<void> {
 23:     try {
 24:       const varianceDays = differenceInDays(
 25:         actualCompletionDate,
 26:         scheduledDate
 27:       );
 28: 
 29:       await db.taskCompletions.add({
 30:         id: crypto.randomUUID(),
 31:         plantId,
 32:         taskType,
 33:         scheduledDate,
 34:         actualCompletionDate,
 35:         varianceDays,
 36:         careActivityId,
 37:         plantStage,
 38:         createdAt: new Date(),
 39:         updatedAt: new Date(),
 40:       });
 41:     } catch (error) {
 42:       console.error("Failed to record task completion:", error);
 43:       throw error;
 44:     }
 45:   }
 46: 
 47:   static async getNextDueDateForTask(
 48:     plantId: string,
 49:     taskType: CareActivityType,
 50:     lastCompletionDate: Date
 51:   ): Promise<Date> {
 52:     try {
 53:       const patterns = await this.getCompletionPatterns(plantId, taskType);
 54: 
 55: 
 56:       let intervalDays = 7;
 57: 
 58:       if (patterns.recommendedAdjustment !== 0 && patterns.consistency > 0.5) {
 59:         intervalDays += patterns.recommendedAdjustment;
 60:       }
 61: 
 62:       return addDays(lastCompletionDate, intervalDays);
 63:     } catch (error) {
 64:       console.error("Failed to get next due date for task:", error);
 65: 
 66:       return addDays(lastCompletionDate, 7);
 67:     }
 68:   }
 69:   static async getCompletionPatterns(
 70:     plantId: string,
 71:     taskType: CareActivityType,
 72:     lookbackDays: number = 90
 73:   ): Promise<{
 74:     averageVariance: number;
 75:     consistency: number;
 76:     recommendedAdjustment: number;
 77:   }> {
 78:     try {
 79:       const cutoffDate = addDays(new Date(), -lookbackDays);
 80: 
 81:       const completions = await db.taskCompletions
 82:         .where("plantId")
 83:         .equals(plantId)
 84:         .and(
 85:           (completion: TaskCompletionRecord) =>
 86:             completion.taskType === taskType &&
 87:             new Date(completion.scheduledDate) > cutoffDate
 88:         )
 89:         .toArray();
 90: 
 91:       if (completions.length < 3) {
 92:         return {
 93:           averageVariance: 0,
 94:           consistency: 0,
 95:           recommendedAdjustment: 0,
 96:         };
 97:       }
 98: 
 99:       const variances = completions.map(
100:         (completion: TaskCompletionRecord) => completion.varianceDays
101:       );
102:       const averageVariance =
103:         variances.reduce((sum, variance) => sum + variance, 0) /
104:         variances.length;
105: 
106: 
107:       const mean = averageVariance;
108:       const squaredDiffs = variances.map((variance) =>
109:         Math.pow(variance - mean, 2)
110:       );
111:       const stdDev = Math.sqrt(
112:         squaredDiffs.reduce((sum, diff) => sum + diff, 0) / variances.length
113:       );
114:       const consistency = Math.max(0, 1 - stdDev / 7);
115: 
116: 
117:       let recommendedAdjustment = 0;
118:       if (Math.abs(averageVariance) > 1 && consistency > 0.6) {
119:         recommendedAdjustment = Math.round(averageVariance * 0.7);
120:       }
121: 
122:       return {
123:         averageVariance,
124:         consistency,
125:         recommendedAdjustment,
126:       };
127:     } catch (error) {
128:       console.error("Failed to get completion patterns:", error);
129:       return {
130:         averageVariance: 0,
131:         consistency: 0,
132:         recommendedAdjustment: 0,
133:       };
134:     }
135:   }
136: 
137:   static async getSchedulingAdjustments(
138:     plantId?: string
139:   ): Promise<SchedulingAdjustment[]> {
140:     try {
141:       const cutoffDate = addDays(new Date(), -60);
142: 
143:       let query = db.taskCompletions.where("scheduledDate").above(cutoffDate);
144: 
145:       if (plantId) {
146:         query = query.and(
147:           (completion: TaskCompletionRecord) => completion.plantId === plantId
148:         );
149:       }
150: 
151:       const completions = await query.toArray();
152: 
153: 
154:       const grouped = completions.reduce(
155:         (
156:           acc: Record<string, TaskCompletionRecord[]>,
157:           completion: TaskCompletionRecord
158:         ) => {
159:           const key = `${completion.plantId}-${completion.taskType}`;
160:           if (!acc[key]) {
161:             acc[key] = [];
162:           }
163:           acc[key].push(completion);
164:           return acc;
165:         },
166:         {}
167:       );
168: 
169:       const adjustments: SchedulingAdjustment[] = [];
170: 
171:       for (const [key, taskCompletions] of Object.entries(grouped)) {
172:         if (taskCompletions.length < 3) continue;
173: 
174:         const [plantId, taskType] = key.split("-");
175:         const patterns = await this.getCompletionPatterns(
176:           plantId,
177:           taskType as CareActivityType
178:         );
179: 
180:         if (Math.abs(patterns.recommendedAdjustment) > 0) {
181:           adjustments.push({
182:             plantId,
183:             taskType: taskType as CareActivityType,
184:             originalInterval: 7,
185:             adjustedInterval: 7 + patterns.recommendedAdjustment,
186:             reason:
187:               patterns.averageVariance > 0
188:                 ? `Tasks consistently completed ${Math.abs(
189:                     patterns.averageVariance
190:                   )} days late`
191:                 : `Tasks consistently completed ${Math.abs(
192:                     patterns.averageVariance
193:                   )} days early`,
194:             confidence: patterns.consistency,
195:           });
196:         }
197:       }
198: 
199:       return adjustments.sort((a, b) => b.confidence - a.confidence);
200:     } catch (error) {
201:       console.error("Failed to get scheduling adjustments:", error);
202:       return [];
203:     }
204:   }
205: }

================
File: src/types/firebase.ts
================
  1: import { Timestamp } from "firebase/firestore";
  2: import { CareActivityType, PlantCategory } from "./core";
  3: import {
  4:   PlantRecord,
  5:   CareActivityRecord,
  6:   CareActivityDetails,
  7: } from "./database";
  8: 
  9: export interface FirebasePlantRecord {
 10:   id?: string;
 11:   userId: string;
 12:   varietyId: string;
 13:   varietyName: string;
 14:   name?: string;
 15:   plantedDate: Timestamp;
 16:   location: string;
 17:   container: string;
 18:   soilMix?: string;
 19:   isActive: boolean;
 20:   notes?: string[];
 21:   quantity?: number;
 22:   setupType?: "multiple-containers" | "same-container";
 23:   reminderPreferences?: {
 24:     watering?: boolean;
 25:     fertilizing?: boolean;
 26:     observation?: boolean;
 27:     lighting?: boolean;
 28:     pruning?: boolean;
 29:   };
 30:   createdAt: Timestamp;
 31:   updatedAt: Timestamp;
 32: }
 33: 
 34: export interface FirebaseCareRecord {
 35:   id?: string;
 36:   userId: string;
 37:   plantId: string;
 38:   type: CareActivityType;
 39:   date: Timestamp;
 40:   details: CareActivityDetails;
 41:   createdAt: Timestamp;
 42:   updatedAt: Timestamp;
 43: }
 44: 
 45: export interface FirebaseVarietyRecord {
 46:   id?: string;
 47:   userId?: string;
 48:   name: string;
 49:   category: PlantCategory;
 50:   growthTimeline: {
 51:     germination: number;
 52:     seedling: number;
 53:     vegetative: number;
 54:     maturation: number;
 55:   };
 56:   protocols?: Record<string, unknown>;
 57:   moistureProtocols?: Record<string, unknown>;
 58:   isCustom?: boolean;
 59:   isEverbearing?: boolean;
 60:   productiveLifespan?: number;
 61:   createdAt: Timestamp;
 62: }
 63: 
 64: export interface FirebaseScheduledTask {
 65:   id?: string;
 66:   userId: string;
 67:   plantId: string;
 68:   taskName: string;
 69:   taskType: string;
 70:   details: {
 71:     type: string;
 72:     product: string;
 73:     dilution: string;
 74:     amount: string;
 75:     method: string;
 76:   };
 77:   dueDate: Timestamp;
 78:   status: string;
 79:   sourceProtocol: {
 80:     stage: string;
 81:     originalStartDays: number;
 82:     isDynamic: boolean;
 83:   };
 84:   createdAt: Timestamp;
 85:   updatedAt: Timestamp;
 86: }
 87: 
 88: export const toFirebaseTimestamp = (date: Date): Timestamp => {
 89:   return Timestamp.fromDate(date);
 90: };
 91: 
 92: export const fromFirebaseTimestamp = (timestamp: Timestamp): Date => {
 93:   return timestamp.toDate();
 94: };
 95: 
 96: export const convertPlantToFirebase = (
 97:   plant: PlantRecord,
 98:   userId: string
 99: ): Omit<FirebasePlantRecord, "id"> => ({
100:   userId,
101:   varietyId: plant.varietyId,
102:   varietyName: plant.varietyName,
103:   name: plant.name || plant.varietyName,
104:   plantedDate: toFirebaseTimestamp(plant.plantedDate),
105:   location: plant.location,
106:   container: plant.container,
107:   soilMix: plant.soilMix,
108:   isActive: plant.isActive,
109:   notes: plant.notes,
110:   quantity: plant.quantity,
111:   setupType: plant.setupType,
112:   reminderPreferences: plant.reminderPreferences,
113:   createdAt: Timestamp.now(),
114:   updatedAt: Timestamp.now(),
115: });
116: 
117: export const convertPlantFromFirebase = (
118:   firebasePlant: FirebasePlantRecord
119: ): PlantRecord => ({
120:   id: firebasePlant.id!,
121:   varietyId: firebasePlant.varietyId,
122:   varietyName: firebasePlant.varietyName,
123:   name: firebasePlant.name,
124:   plantedDate: fromFirebaseTimestamp(firebasePlant.plantedDate),
125:   location: firebasePlant.location,
126:   container: firebasePlant.container,
127:   soilMix: firebasePlant.soilMix,
128:   isActive: firebasePlant.isActive,
129:   notes: firebasePlant.notes,
130:   quantity: firebasePlant.quantity,
131:   setupType: firebasePlant.setupType,
132:   reminderPreferences: firebasePlant.reminderPreferences,
133:   createdAt: fromFirebaseTimestamp(firebasePlant.createdAt),
134:   updatedAt: fromFirebaseTimestamp(firebasePlant.updatedAt),
135: });
136: 
137: export const convertCareActivityToFirebase = (
138:   activity: CareActivityRecord,
139:   userId: string
140: ): Omit<FirebaseCareRecord, "id"> => ({
141:   userId,
142:   plantId: activity.plantId,
143:   type: activity.type,
144:   date: toFirebaseTimestamp(activity.date),
145:   details: activity.details,
146:   createdAt: Timestamp.now(),
147:   updatedAt: Timestamp.now(),
148: });
149: 
150: export const convertCareActivityFromFirebase = (
151:   firebaseActivity: FirebaseCareRecord
152: ): CareActivityRecord => ({
153:   id: firebaseActivity.id!,
154:   plantId: firebaseActivity.plantId,
155:   type: firebaseActivity.type,
156:   date: fromFirebaseTimestamp(firebaseActivity.date),
157:   details: firebaseActivity.details as CareActivityDetails,
158:   createdAt: fromFirebaseTimestamp(firebaseActivity.createdAt),
159:   updatedAt: fromFirebaseTimestamp(firebaseActivity.updatedAt),
160: });

================
File: src/types/user.ts
================
 1: export interface UserSettings {
 2:   id: string;
 3:   units: {
 4:     temperature: "fahrenheit" | "celsius";
 5:     volume: "ounces" | "liters";
 6:   };
 7:   notifications: {
 8:     careReminders: boolean;
 9:     harvestAlerts: boolean;
10:   };
11:   location: {
12:     timezone: string;
13:     zipCode?: string;
14:   };
15: }
16: 
17: export interface UserProfile {
18:   id: string;
19:   email: string;
20:   displayName?: string;
21:   settings: UserSettings;
22:   createdAt: Date;
23:   lastLoginAt: Date;
24: }

================
File: src/utils/cn.ts
================
1: import { type ClassValue, clsx } from "clsx";
2: import { twMerge } from "tailwind-merge";
3: 
4: export function cn(...inputs: ClassValue[]) {
5:   return twMerge(clsx(inputs));
6: }

================
File: src/utils/dateUtils.ts
================
 1: export function formatDate(date: Date): string {
 2:   return new Intl.DateTimeFormat("en-US", {
 3:     month: "short",
 4:     day: "numeric",
 5:     year: "numeric",
 6:   }).format(date);
 7: }
 8: 
 9: export function getDaysSincePlanting(plantedDate: Date): number {
10:   const now = new Date();
11:   const diffTime = Math.abs(now.getTime() - plantedDate.getTime());
12:   return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
13: }
14: 
15: export function formatDateTime(date: Date): string {
16:   return new Intl.DateTimeFormat("en-US", {
17:     month: "short",
18:     day: "numeric",
19:     hour: "numeric",
20:     minute: "2-digit",
21:   }).format(date);
22: }
23: 
24: export function formatTime(date: Date): string {
25:   return new Intl.DateTimeFormat("en-US", {
26:     hour: "numeric",
27:     minute: "2-digit",
28:   }).format(date);
29: }

================
File: src/utils/plantDisplay.ts
================
 1: import { PlantRecord } from "@/types/database";
 2: 
 3: 
 4: 
 5: 
 6: 
 7: export function getPlantDisplayName(plant: PlantRecord): string {
 8: 
 9:   if (plant.name?.trim()) {
10:     return plant.name.trim();
11:   }
12: 
13: 
14:   if (plant.varietyName?.trim()) {
15:     return plant.varietyName.trim();
16:   }
17: 
18:   return "Unknown Plant";
19: }

================
File: src/utils/plantGrouping.ts
================
 1: import { PlantRecord } from "@/types/database";
 2: 
 3: export interface PlantGroup {
 4:   id: string;
 5:   varietyId: string;
 6:   varietyName: string;
 7:   plantedDate: Date;
 8:   container: string;
 9:   soilMix?: string;
10:   location: string;
11:   plants: PlantRecord[];
12:   setupType: "multiple-containers" | "same-container";
13: }
14: 
15: export const groupPlantsByConditions = (
16:   plants: PlantRecord[]
17: ): PlantGroup[] => {
18:   const groupMap = new Map<string, PlantRecord[]>();
19: 
20:   plants.forEach((plant) => {
21: 
22:     const key = `${plant.varietyId}-${
23:       plant.plantedDate.toISOString().split("T")[0]
24:     }-${plant.container}-${plant.soilMix || "no-soil"}-${plant.location}`;
25: 
26:     if (!groupMap.has(key)) {
27:       groupMap.set(key, []);
28:     }
29:     groupMap.get(key)!.push(plant);
30:   });
31: 
32:   const groups: PlantGroup[] = [];
33: 
34:   groupMap.forEach((plantsInGroup) => {
35:     if (plantsInGroup.length === 0) return;
36: 
37: 
38:     const templatePlant = plantsInGroup[0];
39: 
40:     groups.push({
41:       id: `group-${
42:         templatePlant.varietyId
43:       }-${templatePlant.plantedDate.getTime()}`,
44:       varietyId: templatePlant.varietyId,
45:       varietyName: templatePlant.varietyName,
46:       plantedDate: templatePlant.plantedDate,
47:       container: templatePlant.container,
48:       soilMix: templatePlant.soilMix,
49:       location: templatePlant.location,
50:       plants: plantsInGroup.sort(
51:         (a, b) => a.name?.localeCompare(b.name || "") || 0
52:       ),
53:       setupType: templatePlant.setupType || "multiple-containers",
54:     });
55:   });
56: 
57:   return groups.sort((a, b) => a.varietyName.localeCompare(b.varietyName));
58: };

================
File: src/utils/plantStage.ts
================
 1: import { PlantRecord, varietyService } from "@/types/database";
 2: import { calculateCurrentStageWithVariety } from "./growthStage";
 3: import { GrowthStage } from "@/types";
 4: 
 5: export async function getPlantCurrentStage(
 6:   plant: PlantRecord
 7: ): Promise<GrowthStage> {
 8: 
 9: 
10: 
11: 
12: 
13:   try {
14:     const variety = await varietyService.getVariety(plant.varietyId);
15: 
16:     if (!variety) {
17: 
18:       const allVarieties = await varietyService.getAllVarieties();
19:       const varietyByName = allVarieties.find(
20:         (v) => v.name === plant.varietyName
21:       );
22: 
23:       if (varietyByName) {
24:         return calculateCurrentStageWithVariety(
25:           plant.plantedDate,
26:           varietyByName
27:         );
28:       }
29: 
30:       console.warn("Could not find variety, defaulting to germination");
31:       return "germination";
32:     }
33: 
34:     return calculateCurrentStageWithVariety(plant.plantedDate, variety);
35:   } catch (error) {
36:     console.error("Error calculating stage:", error);
37:     return "germination";
38:   }
39: }

================
File: src/index.css
================
 1: :root {
 2:   font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
 3:   line-height: 1.5;
 4:   font-weight: 400;
 5: 
 6:   color-scheme: light dark;
 7:   color: rgba(255, 255, 255, 0.87);
 8:   background-color: #242424;
 9: 
10:   font-synthesis: none;
11:   text-rendering: optimizeLegibility;
12:   -webkit-font-smoothing: antialiased;
13:   -moz-osx-font-smoothing: grayscale;
14: }
15: 
16: a {
17:   font-weight: 500;
18:   color: #646cff;
19:   text-decoration: inherit;
20: }
21: a:hover {
22:   color: #535bf2;
23: }
24: 
25: body {
26:   margin: 0;
27:   display: flex;
28:   place-items: center;
29:   min-width: 320px;
30:   min-height: 100vh;
31: }
32: 
33: h1 {
34:   font-size: 3.2em;
35:   line-height: 1.1;
36: }
37: 
38: button {
39:   border-radius: 8px;
40:   border: 1px solid transparent;
41:   padding: 0.6em 1.2em;
42:   font-size: 1em;
43:   font-weight: 500;
44:   font-family: inherit;
45:   background-color: #1a1a1a;
46:   cursor: pointer;
47:   transition: border-color 0.25s;
48: }
49: button:hover {
50:   border-color: #646cff;
51: }
52: button:focus,
53: button:focus-visible {
54:   outline: 4px auto -webkit-focus-ring-color;
55: }
56: 
57: @media (prefers-color-scheme: light) {
58:   :root {
59:     color: #213547;
60:     background-color: #ffffff;
61:   }
62:   a:hover {
63:     color: #747bff;
64:   }
65:   button {
66:     background-color: #f9f9f9;
67:   }
68: }

================
File: src/main.tsx
================
 1: import React from "react";
 2: import ReactDOM from "react-dom/client";
 3: import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 4: import { BrowserRouter } from "react-router-dom";
 5: import App from "./App.tsx";
 6: import "./styles/globals.css";
 7: 
 8: 
 9: const queryClient = new QueryClient({
10:   defaultOptions: {
11:     queries: {
12: 
13:       staleTime: 5 * 60 * 1000,
14: 
15:       gcTime: 24 * 60 * 60 * 1000,
16: 
17:       retry: (failureCount) => {
18: 
19:         if (!navigator.onLine) return false;
20:         return failureCount < 3;
21:       },
22:     },
23:   },
24: });
25: 
26: ReactDOM.createRoot(document.getElementById("root")!).render(
27:   <React.StrictMode>
28:     <QueryClientProvider client={queryClient}>
29:       <BrowserRouter>
30:         <App />
31:       </BrowserRouter>
32:     </QueryClientProvider>
33:   </React.StrictMode>
34: );

================
File: tests/e2e/pwa-functionality.spec.ts
================
 1: import { test, expect } from "@playwright/test";
 2: 
 3: test.describe("PWA Functionality", () => {
 4:   test.beforeEach(async ({ page }) => {
 5: 
 6:     await page.context().clearCookies();
 7:     await page.evaluate(() => {
 8:       localStorage.clear();
 9:       sessionStorage.clear();
10:     });
11:   });
12: 
13:   test("app loads and displays correctly", async ({ page }) => {
14:     await page.goto("/");
15: 
16:     await expect(page.getByText("🌱 SmartGarden")).toBeVisible();
17:     await expect(page.getByText("Active Plants")).toBeVisible();
18:     await expect(page.getByText("Tasks Due")).toBeVisible();
19:   });
20: 
21:   test("offline functionality works", async ({ page, context }) => {
22: 
23:     await page.goto("/");
24:     await expect(page.getByText("SmartGarden")).toBeVisible();
25: 
26: 
27:     await context.setOffline(true);
28: 
29: 
30:     await page.reload();
31: 
32: 
33:     await expect(page.getByText("SmartGarden")).toBeVisible();
34: 
35: 
36:     await expect(page.getByText(/offline/i)).toBeVisible();
37:   });
38: 
39:   test("plant registration flow", async ({ page }) => {
40:     await page.goto("/");
41: 
42: 
43:     await page.getByText("Add Your First Plant").click();
44: 
45: 
46:     await page.selectOption('[name="varietyId"]', { index: 1 });
47:     await page.fill('[name="name"]', "My Test Plant");
48:     await page.fill('[name="location"]', "Test Location");
49:     await page.fill('[name="container"]', "Test Container");
50: 
51: 
52:     await page.getByText("Register Plant").click();
53: 
54: 
55:     await expect(page.getByText("My Test Plant")).toBeVisible();
56:   });
57: 
58:   test("data persists across page reloads", async ({ page }) => {
59:     await page.goto("/add-plant");
60: 
61: 
62:     await page.selectOption('[name="varietyId"]', { index: 1 });
63:     await page.fill('[name="name"]', "Persistent Plant");
64:     await page.fill('[name="location"]', "Kitchen");
65:     await page.fill('[name="container"]', "4 inch pot");
66:     await page.getByText("Register Plant").click();
67: 
68: 
69:     await page.reload();
70: 
71: 
72:     await expect(page.getByText("Persistent Plant")).toBeVisible();
73:     await expect(page.getByText("1")).toBeVisible();
74:   });
75: 
76:   test("responsive design on mobile viewport", async ({ page }) => {
77: 
78:     await page.setViewportSize({ width: 375, height: 667 });
79:     await page.goto("/");
80: 
81: 
82:     const navItems = page.locator("nav a");
83:     await expect(navItems.first()).toBeVisible();
84: 
85: 
86:     const buttonSize = await page.getByText("Add Plant").boundingBox();
87:     expect(buttonSize?.height).toBeGreaterThanOrEqual(44);
88:   });
89: });

================
File: .firebaserc
================
1: {
2:   "projects": {
3:     "default": "smartgarden-41f21"
4:   }
5: }

================
File: eslint.config.js
================
 1: import js from '@eslint/js'
 2: import globals from 'globals'
 3: import reactHooks from 'eslint-plugin-react-hooks'
 4: import reactRefresh from 'eslint-plugin-react-refresh'
 5: import tseslint from 'typescript-eslint'
 6: 
 7: export default tseslint.config(
 8:   { ignores: ['dist'] },
 9:   {
10:     extends: [js.configs.recommended, ...tseslint.configs.recommended],
11:     files: ['**/*.{ts,tsx}'],
12:     languageOptions: {
13:       ecmaVersion: 2020,
14:       globals: globals.browser,
15:     },
16:     plugins: {
17:       'react-hooks': reactHooks,
18:       'react-refresh': reactRefresh,
19:     },
20:     rules: {
21:       ...reactHooks.configs.recommended.rules,
22:       'react-refresh/only-export-components': [
23:         'warn',
24:         { allowConstantExport: true },
25:       ],
26:     },
27:   },
28: )

================
File: firebase.json
================
 1: {
 2:   "firestore": {
 3:     "database": "(default)",
 4:     "location": "nam5",
 5:     "rules": "firestore.rules",
 6:     "indexes": "firestore.indexes.json"
 7:   },
 8:   "storage": {
 9:     "rules": "storage.rules"
10:   },
11:   "emulators": {
12:     "auth": {
13:       "port": 9099
14:     },
15:     "firestore": {
16:       "port": 8080
17:     },
18:     "storage": {
19:       "port": 9199
20:     },
21:     "ui": {
22:       "enabled": true
23:     },
24:     "singleProjectMode": true
25:   }
26: }

================
File: firestore.indexes.json
================
 1: {
 2:   "indexes": [
 3:     {
 4:       "collectionGroup": "plants",
 5:       "queryScope": "COLLECTION",
 6:       "fields": [
 7:         { "fieldPath": "userId", "order": "ASCENDING" },
 8:         { "fieldPath": "isActive", "order": "ASCENDING" },
 9:         { "fieldPath": "createdAt", "order": "DESCENDING" }
10:       ]
11:     },
12:     {
13:       "collectionGroup": "plants",
14:       "queryScope": "COLLECTION",
15:       "fields": [
16:         { "fieldPath": "userId", "order": "ASCENDING" },
17:         { "fieldPath": "createdAt", "order": "DESCENDING" }
18:       ]
19:     },
20:     {
21:       "collectionGroup": "careActivities",
22:       "queryScope": "COLLECTION",
23:       "fields": [
24:         { "fieldPath": "plantId", "order": "ASCENDING" },
25:         { "fieldPath": "date", "order": "DESCENDING" }
26:       ]
27:     },
28:     {
29:       "collectionGroup": "careActivities",
30:       "queryScope": "COLLECTION",
31:       "fields": [
32:         { "fieldPath": "userId", "order": "ASCENDING" },
33:         { "fieldPath": "date", "order": "DESCENDING" }
34:       ]
35:     },
36:     {
37:       "collectionGroup": "scheduledTasks",
38:       "queryScope": "COLLECTION",
39:       "fields": [
40:         { "fieldPath": "userId", "order": "ASCENDING" },
41:         { "fieldPath": "status", "order": "ASCENDING" },
42:         { "fieldPath": "dueDate", "order": "ASCENDING" }
43:       ]
44:     }
45:   ],
46:   "fieldOverrides": []
47: }

================
File: firestore.rules
================
 1: rules_version = '2';
 2: service cloud.firestore {
 3:   match /databases/{database}/documents {
 4:     // Users can only access their own data
 5:     match /plants/{plantId} {
 6:       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
 7:     }
 8:     
 9:     match /varieties/{varietyId} {
10:       allow read: if request.auth != null;
11:       allow write: if request.auth != null; // Or more restrictive rules
12:     }
13:     
14:     match /careActivities/{activityId} {
15:       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
16:     }
17:     
18:     match /scheduledTasks/{taskId} {
19:       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
20:     }
21:   }
22: }

================
File: postcss.config.js
================
1: export default {
2:   plugins: {
3:     tailwindcss: {},
4:     autoprefixer: {},
5:   },
6: }

================
File: repomix.config.json
================
 1: {
 2:   "output": {
 3:     "style": "plain",
 4:     "filePath": "custom-output.txt",
 5:     "removeComments": true,
 6:     "showLineNumbers": true,
 7:     "topFilesLength": 10
 8:   },
 9:   "ignore": {
10:     "customPatterns": [
11:       "logs",
12:       "*.log",
13:       "npm-debug.log*",
14:       "yarn-debug.log*",
15:       "yarn-error.log*",
16:       "pnpm-debug.log*",
17:       "lerna-debug.log*",
18:       ".cache/",
19:       ".parcel-cache/",
20:       "node_modules",
21:       "dist",
22:       "dist-ssr",
23:       "*.local",
24:       ".vscode/*",
25:       "*.suo",
26:       "*.ntvs*",
27:       "*.njsproj",
28:       "*.sln",
29:       "*.sw?",
30:       "._*",
31:       ".Spotlight-V100",
32:       ".Trashes",
33:       "ehthumbs.db",
34:       "Thumbs.db",
35:       ".vscode/",
36:       ".idea/",
37:       ".env.local",
38:       ".env.development.local",
39:       ".env.test.local",
40:       ".env.production.local",
41:       "*.tmp",
42:       "*.temp"
43:     ]
44:   }
45: }

================
File: storage.rules
================
1: rules_version = '2';
2: 
3: service firebase.storage {
4:   match /b/{bucket}/o {
5:     match /{allPaths=**} {
6:       allow read, write: if false;
7:     }
8:   }
9: }

================
File: tsconfig.app.json
================
 1: {
 2:   "compilerOptions": {
 3:     "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
 4:     "target": "ES2020",
 5:     "useDefineForClassFields": true,
 6:     "lib": ["ES2020", "DOM", "DOM.Iterable"],
 7:     "module": "ESNext",
 8:     "skipLibCheck": true,
 9: 
10:     /* Bundler mode */
11:     "moduleResolution": "bundler",
12:     "allowImportingTsExtensions": true,
13:     "verbatimModuleSyntax": true,
14:     "moduleDetection": "force",
15:     "noEmit": true,
16:     "jsx": "react-jsx",
17: 
18:     /* Linting */
19:     "strict": true,
20:     "noUnusedLocals": true,
21:     "noUnusedParameters": true,
22:     "erasableSyntaxOnly": true,
23:     "noFallthroughCasesInSwitch": true,
24:     "noUncheckedSideEffectImports": true
25:   },
26:   "include": ["src"]
27: }

================
File: tsconfig.node.json
================
 1: {
 2:   "compilerOptions": {
 3:     "composite": true,
 4:     "skipLibCheck": true,
 5:     "module": "ESNext",
 6:     "moduleResolution": "bundler",
 7:     "allowSyntheticDefaultImports": true,
 8:     "strict": true,
 9:     "noEmit": true
10:   },
11:   "include": ["vite.config.ts"]
12: }

================
File: src/__tests__/components/PlantStageDisplay.test.tsx
================
 1: import { render, screen } from "@testing-library/react";
 2: import PlantStageDisplay from "@/components/plant/PlantStageDisplay";
 3: import { PlantRecord } from "@/types/database";
 4: 
 5: 
 6: jest.mock("@/hooks/useDynamicStage", () => ({
 7:   useDynamicStage: jest.fn(),
 8: }));
 9: 
10: import { useDynamicStage } from "@/hooks/useDynamicStage";
11: const mockUseDynamicStage = useDynamicStage as jest.MockedFunction<
12:   typeof useDynamicStage
13: >;
14: 
15: describe("PlantStageDisplay", () => {
16:   const mockPlant: PlantRecord = {
17:     id: "test-plant",
18:     varietyId: "test-variety",
19:     varietyName: "Test Variety",
20:     name: "Test Plant",
21:     plantedDate: new Date(),
22:     location: "Indoor",
23:     container: "5 gallon",
24:     isActive: true,
25:     createdAt: new Date(),
26:     updatedAt: new Date(),
27:   };
28: 
29:   beforeEach(() => {
30:     mockUseDynamicStage.mockReturnValue("flowering");
31:   });
32: 
33:   afterEach(() => {
34:     jest.clearAllMocks();
35:   });
36: 
37:   it("displays plant stage without emoji by default", () => {
38:     render(<PlantStageDisplay plant={mockPlant} />);
39: 
40:     expect(screen.getByText("Stage: flowering")).toBeInTheDocument();
41:     expect(screen.queryByText("🌱")).not.toBeInTheDocument();
42:   });
43: 
44:   it("displays plant stage with emoji when showEmoji is true", () => {
45:     render(<PlantStageDisplay plant={mockPlant} showEmoji={true} />);
46: 
47:     expect(screen.getByText("Stage: flowering")).toBeInTheDocument();
48:     expect(screen.getByText("🌱")).toBeInTheDocument();
49:   });
50: 
51:   it("applies custom className when provided", () => {
52:     render(<PlantStageDisplay plant={mockPlant} className="custom-class" />);
53: 
54:     const stageDisplay = screen.getByText(/Stage:/).closest("div");
55:     expect(stageDisplay).toHaveClass("custom-class");
56:   });
57: 
58:   it("uses calculated stage from useDynamicStage hook", () => {
59:     mockUseDynamicStage.mockReturnValue("harvest");
60: 
61:     render(<PlantStageDisplay plant={mockPlant} />);
62: 
63:     expect(screen.getByText("Stage: harvest")).toBeInTheDocument();
64:     expect(mockUseDynamicStage).toHaveBeenCalledWith(mockPlant);
65:   });
66: });

================
File: src/__tests__/components/SoilMixtureSelector.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import SoilMixtureSelector from "@/components/plant/SoilMixtureSelector";
  4: 
  5: describe("SoilMixtureSelector", () => {
  6:   const user = userEvent.setup();
  7:   const mockOnMixtureChange = jest.fn();
  8: 
  9:   beforeEach(() => {
 10:     jest.clearAllMocks();
 11:   });
 12: 
 13:   const renderSelector = (props = {}) => {
 14:     return render(
 15:       <SoilMixtureSelector onMixtureChange={mockOnMixtureChange} {...props} />
 16:     );
 17:   };
 18: 
 19:   describe("Initial Rendering", () => {
 20:     it("renders with default state", () => {
 21:       renderSelector();
 22: 
 23:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
 24:       expect(
 25:         screen.getByText(
 26:           "Choose a preset mixture or create your own custom blend"
 27:         )
 28:       ).toBeInTheDocument();
 29:       expect(screen.getByText("🧪 Create Custom Mixture")).toBeInTheDocument();
 30:     });
 31: 
 32:     it("displays all preset mixtures", () => {
 33:       renderSelector();
 34: 
 35:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
 36:       expect(screen.getByText("Root Vegetables Mix")).toBeInTheDocument();
 37:       expect(screen.getByText("Mediterranean Herbs Mix")).toBeInTheDocument();
 38:       expect(screen.getByText("Berry & Fruit Mix")).toBeInTheDocument();
 39:       expect(screen.getByText("Fruiting Plants Mix")).toBeInTheDocument();
 40:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
 41:     });
 42: 
 43:     it("shows mixture descriptions and components", () => {
 44:       renderSelector();
 45: 
 46:       expect(
 47:         screen.getByText(
 48:           "Nutrient-rich blend perfect for arugula, spinach, and lettuce"
 49:         )
 50:       ).toBeInTheDocument();
 51:       expect(
 52:         screen.getByText(
 53:           /40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings/
 54:         )
 55:       ).toBeInTheDocument();
 56:     });
 57:   });
 58: 
 59:   describe("Preset Selection", () => {
 60:     it("calls onMixtureChange when preset is clicked", async () => {
 61:       renderSelector();
 62: 
 63:       const leafyGreensCard = screen.getByTestId(
 64:         "mixture-card-leafy-greens-standard"
 65:       );
 66:       await user.click(leafyGreensCard);
 67: 
 68:       expect(mockOnMixtureChange).toHaveBeenCalledWith(
 69:         "Leafy Greens Mix: 40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings"
 70:       );
 71:     });
 72: 
 73:     it("shows selected state when mixture is selected", () => {
 74:       renderSelector({
 75:         selectedMixture:
 76:           "Leafy Greens Mix: 40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings",
 77:       });
 78: 
 79:       const leafyGreensCard = screen.getByTestId(
 80:         "mixture-card-leafy-greens-standard"
 81:       );
 82: 
 83:       expect(leafyGreensCard).toHaveClass("cursor-pointer");
 84:       expect(leafyGreensCard).toHaveClass(
 85:         "ring-4",
 86:         "ring-ring",
 87:         "bg-muted",
 88:         "border-ring",
 89:         "shadow-lg"
 90:       );
 91:     });
 92: 
 93:     it("displays selected mixture information", () => {
 94:       const selectedMixture =
 95:         "Root Vegetables Mix: 40% Coco Coir, 30% Perlite, 25% Vermiculite, 5% Worm Castings";
 96:       renderSelector({ selectedMixture });
 97: 
 98:       expect(screen.getByText("Selected Mixture:")).toBeInTheDocument();
 99:       expect(screen.getByText(selectedMixture)).toBeInTheDocument();
100:     });
101:   });
102: 
103:   describe("Custom Mixture Functionality", () => {
104:     it("switches to custom mode when button clicked", async () => {
105:       renderSelector();
106: 
107:       const customButton = screen.getByText("🧪 Create Custom Mixture");
108:       await user.click(customButton);
109: 
110:       expect(screen.getByText("Custom Soil Mixture")).toBeInTheDocument();
111:       expect(screen.getByText("Mixture Description")).toBeInTheDocument();
112:       expect(screen.getByPlaceholderText(/40% coco coir/)).toBeInTheDocument();
113:     });
114: 
115:     it("allows typing in custom mixture textarea", async () => {
116:       renderSelector();
117: 
118:       const customButton = screen.getByText("🧪 Create Custom Mixture");
119:       await user.click(customButton);
120: 
121:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
122:       await user.type(textarea, "50% peat moss, 30% perlite, 20% sand");
123: 
124:       expect(textarea).toHaveValue("50% peat moss, 30% perlite, 20% sand");
125:     });
126: 
127:     it("calls onMixtureChange when custom mixture is submitted", async () => {
128:       renderSelector();
129: 
130:       const customButton = screen.getByText("🧪 Create Custom Mixture");
131:       await user.click(customButton);
132: 
133:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
134:       await user.type(textarea, "Custom mix");
135: 
136:       const saveButton = screen.getByRole("button", {
137:         name: /save custom mixture/i,
138:       });
139:       await user.click(saveButton);
140: 
141:       expect(mockOnMixtureChange).toHaveBeenCalledWith("Custom mix");
142:     });
143: 
144:     it("disables submit button when textarea is empty", async () => {
145:       renderSelector();
146: 
147:       const customButton = screen.getByText("🧪 Create Custom Mixture");
148:       await user.click(customButton);
149: 
150:       const saveButton = screen.getByRole("button", {
151:         name: /save custom mixture/i,
152:       });
153:       expect(saveButton).toBeDisabled();
154:     });
155: 
156:     it("returns to presets when cancel button clicked", async () => {
157:       renderSelector();
158: 
159:       const customButton = screen.getByText("🧪 Create Custom Mixture");
160:       await user.click(customButton);
161: 
162:       const cancelButton = screen.getByRole("button", {
163:         name: /cancel/i,
164:       });
165:       await user.click(cancelButton);
166: 
167:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
168:       expect(screen.queryByText("Custom Soil Mixture")).not.toBeInTheDocument();
169:     });
170: 
171:     it("closes custom mode after successful submission", async () => {
172:       renderSelector();
173: 
174:       const customButton = screen.getByText("🧪 Create Custom Mixture");
175:       await user.click(customButton);
176: 
177:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
178:       await user.type(textarea, "Custom mix");
179: 
180:       const saveButton = screen.getByRole("button", {
181:         name: /save custom mixture/i,
182:       });
183:       await user.click(saveButton);
184: 
185:       await waitFor(() => {
186:         expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
187:         expect(
188:           screen.queryByText("Custom Soil Mixture")
189:         ).not.toBeInTheDocument();
190:       });
191:     });
192:   });
193: 
194:   describe("Mixture Information Display", () => {
195:     it("shows components for different mixtures", () => {
196:       renderSelector();
197: 
198:       const leafyGreensComponents = screen.getAllByText(
199:         /40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings/
200:       );
201:       expect(leafyGreensComponents.length).toBeGreaterThan(0);
202: 
203:       const rootVegComponents = screen.getAllByText(
204:         /40% Coco Coir, 30% Perlite, 25% Vermiculite, 5% Worm Castings/
205:       );
206:       expect(rootVegComponents.length).toBeGreaterThan(0);
207:     });
208: 
209:     it("shows amendments when available", () => {
210:       renderSelector();
211: 
212:       expect(
213:         screen.getByText(/Compost \(½–1 cup per cubic foot\)/)
214:       ).toBeInTheDocument();
215:       expect(
216:         screen.getByText(/Bone Meal \(1 tsp per gallon\)/)
217:       ).toBeInTheDocument();
218:     });
219: 
220:     it("shows suitable plants information", () => {
221:       renderSelector();
222: 
223:       expect(
224:         screen.getByText(/Arugula, Spinach, Lettuce, Kale/)
225:       ).toBeInTheDocument();
226:       expect(
227:         screen.getByText(/Carrots, Beets, Onions, Radishes/)
228:       ).toBeInTheDocument();
229:     });
230:   });
231: 
232:   describe("Edge Cases", () => {
233:     it("handles undefined selectedMixture gracefully", () => {
234:       renderSelector({ selectedMixture: undefined });
235: 
236:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
237:       expect(screen.queryByText("Selected Mixture:")).not.toBeInTheDocument();
238:     });
239: 
240:     it("handles empty selectedMixture gracefully", () => {
241:       renderSelector({ selectedMixture: "" });
242: 
243:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
244:       expect(screen.queryByText("Selected Mixture:")).not.toBeInTheDocument();
245:     });
246: 
247:     it("handles undefined plantCategory gracefully", () => {
248:       renderSelector({ plantCategory: undefined });
249: 
250:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
251:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
252:     });
253: 
254:     it("handles custom mixture with only whitespace", async () => {
255:       renderSelector();
256: 
257:       const customButton = screen.getByText("🧪 Create Custom Mixture");
258:       await user.click(customButton);
259: 
260:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
261:       await user.type(textarea, "   ");
262: 
263:       const saveButton = screen.getByRole("button", {
264:         name: /save custom mixture/i,
265:       });
266:       expect(saveButton).toBeDisabled();
267:     });
268:   });
269: 
270:   describe("Accessibility", () => {
271:     it("has proper labels and structure", () => {
272:       renderSelector();
273: 
274:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
275:       expect(
276:         screen.getByText(
277:           "Choose a preset mixture or create your own custom blend"
278:         )
279:       ).toBeInTheDocument();
280:     });
281: 
282:     it("has accessible buttons", () => {
283:       renderSelector();
284: 
285:       const customButton = screen.getByRole("button", {
286:         name: /create custom mixture/i,
287:       });
288:       expect(customButton).toBeInTheDocument();
289:     });
290: 
291:     it("maintains accessibility in custom mode", async () => {
292:       renderSelector();
293: 
294:       const customButton = screen.getByText("🧪 Create Custom Mixture");
295:       await user.click(customButton);
296: 
297:       expect(screen.getByLabelText("Mixture Description")).toBeInTheDocument();
298:       expect(
299:         screen.getByRole("button", { name: /save custom mixture/i })
300:       ).toBeInTheDocument();
301:       expect(
302:         screen.getByRole("button", { name: /cancel/i })
303:       ).toBeInTheDocument();
304:     });
305:   });
306: });

================
File: src/__tests__/database/plantService.test.ts
================
 1: import { plantService, PlantRecord } from "../../types/database";
 2: 
 3: describe("plantService", () => {
 4:   beforeEach(async () => {
 5: 
 6:     const db = await import("../../types/database").then((m) => m.db);
 7:     await db.plants.clear();
 8:   });
 9: 
10:   it("adds and retrieves a plant", async () => {
11:     const plantData: Omit<PlantRecord, "id" | "createdAt" | "updatedAt"> = {
12:       varietyId: "test-variety",
13:       name: "Test Plant",
14:       varietyName: "Test Variety",
15:       plantedDate: new Date("2024-01-01"),
16:       location: "Indoor",
17:       container: "Test Container",
18:       isActive: true,
19:       notes: ["Test note"],
20:     };
21: 
22:     const plantId = await plantService.addPlant(plantData);
23:     expect(plantId).toBeDefined();
24: 
25:     const retrievedPlant = await plantService.getPlant(plantId);
26:     expect(retrievedPlant).toBeDefined();
27:     expect(retrievedPlant?.name).toBe("Test Plant");
28:     expect(retrievedPlant?.varietyId).toBe("test-variety");
29:   });
30: 
31:   it("retrieves only active plants", async () => {
32: 
33:     await plantService.addPlant({
34:       varietyId: "active-variety",
35:       varietyName: "Active Variety",
36:       plantedDate: new Date(),
37:       location: "Location 1",
38:       container: "Container 1",
39:       isActive: true,
40:     });
41: 
42: 
43:     const inactiveId = await plantService.addPlant({
44:       varietyId: "inactive-variety",
45:       varietyName: "Inactive Variety",
46:       plantedDate: new Date(),
47:       location: "Location 2",
48:       container: "Container 2",
49:       isActive: true,
50:     });
51: 
52: 
53:     await plantService.updatePlant(inactiveId, { isActive: false });
54: 
55:     const activePlants = await plantService.getActivePlants();
56:     expect(activePlants).toHaveLength(1);
57:     expect(activePlants[0].varietyId).toBe("active-variety");
58:   });
59: });

================
File: src/__tests__/integration/plantDetailReminderSettings.test.tsx
================
 1: import { render, screen, waitFor } from "@testing-library/react";
 2: import userEvent from "@testing-library/user-event";
 3: import { BrowserRouter } from "react-router-dom";
 4: import PlantDetail from "@/pages/plants/PlantDetail";
 5: import { FirebasePlantService } from "@/services/firebase/plantService";
 6: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
 7: 
 8: 
 9: jest.mock("@/services/firebase/plantService");
10: 
11: 
12: jest.mock("@/hooks/useFirebaseAuth");
13: 
14: jest.mock("react-router-dom", () => ({
15:   ...jest.requireActual("react-router-dom"),
16:   useParams: () => ({ plantId: "test-plant-1" }),
17:   useNavigate: () => jest.fn(),
18: }));
19: 
20: describe("PlantDetail Reminder Settings Integration", () => {
21:   beforeEach(() => {
22: 
23:     (useFirebaseAuth as jest.Mock).mockReturnValue({
24:       user: { uid: "test-user-id", displayName: "Test User" },
25:       loading: false,
26:     });
27:   });
28: 
29:   it("shows and hides reminder settings when settings button is clicked", async () => {
30:     const user = userEvent.setup();
31: 
32:     (
33:       FirebasePlantService.subscribeToPlantsChanges as jest.Mock
34:     ).mockImplementation((_, callback) => {
35:       const mockPlant = {
36:         id: "test-plant-1",
37:         varietyId: "tomato-1",
38:         varietyName: "Roma Tomato",
39:         name: "My Tomato",
40:         plantedDate: new Date(),
41:         currentStage: "vegetative",
42:         location: "Indoor",
43:         container: "5 gallon pot",
44:         isActive: true,
45:         notes: [],
46:         createdAt: new Date(),
47:         updatedAt: new Date(),
48:         reminderPreferences: {
49:           watering: true,
50:           fertilizing: false,
51:           observation: true,
52:           lighting: false,
53:           pruning: true,
54:         },
55:       };
56:       callback([mockPlant]);
57:       return jest.fn();
58:     });
59: 
60:     render(
61:       <BrowserRouter>
62:         <PlantDetail />
63:       </BrowserRouter>
64:     );
65: 
66:     await waitFor(() => {
67:       expect(
68:         screen.getByRole("heading", { name: /my tomato/i, level: 1 })
69:       ).toBeInTheDocument();
70:     });
71: 
72: 
73:     expect(screen.queryByText("Reminder Preferences")).not.toBeInTheDocument();
74: 
75:     const settingsButton = screen.getByRole("button", { name: /settings/i });
76:     await user.click(settingsButton);
77: 
78: 
79:     await waitFor(() => {
80:       expect(screen.getByText("Reminder Preferences")).toBeInTheDocument();
81:     });
82: 
83:     await user.click(settingsButton);
84: 
85: 
86:     await waitFor(() => {
87:       expect(
88:         screen.queryByText("Reminder Preferences")
89:       ).not.toBeInTheDocument();
90:     });
91:   });
92: 
93:   it.skip("displays active reminder preferences correctly", async () => {
94: 
95:   });
96: });

================
File: src/__tests__/integration/plantRegistrationFlow.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { BrowserRouter } from "react-router-dom";
  4: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
  5: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  6: import { FirebasePlantService } from "@/services/firebase/plantService";
  7: import { varietyService } from "@/types/database";
  8: 
  9: 
 10: jest.mock("firebase/firestore", () => ({
 11:   getFirestore: jest.fn(() => ({})),
 12:   collection: jest.fn(),
 13:   doc: jest.fn(),
 14:   addDoc: jest.fn(),
 15:   updateDoc: jest.fn(),
 16:   onSnapshot: jest.fn(),
 17:   query: jest.fn(),
 18:   where: jest.fn(),
 19:   orderBy: jest.fn(),
 20:   Timestamp: {
 21:     now: jest.fn(() => new Date()),
 22:     fromDate: jest.fn((date) => date),
 23:   },
 24:   writeBatch: jest.fn(),
 25: }));
 26: 
 27: 
 28: jest.mock("@/hooks/useFirebaseAuth");
 29: jest.mock("@/services/firebase/plantService");
 30: jest.mock("@/types/database");
 31: 
 32: const mockUser = {
 33:   uid: "test-user-id",
 34:   email: "test@example.com",
 35:   displayName: "Test User",
 36: };
 37: 
 38: const mockVarieties = [
 39:   {
 40:     id: "variety-1",
 41:     name: "Test Variety",
 42:     category: "herbs" as const,
 43:     growthTimeline: {
 44:       germination: 7,
 45:       seedling: 14,
 46:       vegetative: 21,
 47:       maturation: 45,
 48:     },
 49:     createdAt: new Date(),
 50:   },
 51: ];
 52: 
 53: describe("Plant Registration Integration Flow", () => {
 54:   const user = userEvent.setup();
 55: 
 56:   beforeEach(() => {
 57:     jest.clearAllMocks();
 58: 
 59:     (useFirebaseAuth as jest.Mock).mockReturnValue({
 60:       user: mockUser,
 61:     });
 62: 
 63:     (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
 64:       mockVarieties
 65:     );
 66:     (FirebasePlantService.createPlant as jest.Mock).mockResolvedValue(
 67:       "new-plant-id"
 68:     );
 69:   });
 70: 
 71:   const renderWithRouter = (component: React.ReactElement) => {
 72:     return render(<BrowserRouter>{component}</BrowserRouter>);
 73:   };
 74: 
 75:   it("completes full plant registration workflow", async () => {
 76:     renderWithRouter(<PlantRegistrationForm />);
 77: 
 78: 
 79:     await waitFor(() => {
 80:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
 81:     });
 82: 
 83: 
 84:     const varietySelect = screen.getByLabelText(/plant variety/i);
 85:     await user.selectOptions(varietySelect, "variety-1");
 86: 
 87: 
 88:     const dateInput = screen.getByLabelText(/planting date/i);
 89:     const today = new Date().toISOString().split("T")[0];
 90:     await user.clear(dateInput);
 91:     await user.type(dateInput, today);
 92: 
 93: 
 94:     const growBagButton = screen.getByText("Grow Bag");
 95:     await user.click(growBagButton);
 96: 
 97: 
 98:     await waitFor(() => {
 99:       expect(screen.getByDisplayValue("1 Gallon")).toBeInTheDocument();
100:     });
101: 
102: 
103:     const selectSoilButton = screen.getByTestId(
104:       "mixture-card-leafy-greens-standard"
105:     );
106:     await user.click(selectSoilButton);
107: 
108: 
109:     const submitButton = screen.getByRole("button", {
110:       name: /register plant/i,
111:     });
112:     await user.click(submitButton);
113: 
114: 
115:     await waitFor(() => {
116:       expect(FirebasePlantService.createPlant).toHaveBeenCalledWith(
117:         expect.objectContaining({
118:           varietyId: "variety-1",
119:           varietyName: "Test Variety",
120:           location: "Indoor",
121:           container: "1 Gallon Grow Bag",
122:           isActive: true,
123:         }),
124:         mockUser.uid
125:       );
126:     });
127:   });
128: 
129:   it("handles offline scenario gracefully", async () => {
130: 
131:     (FirebasePlantService.createPlant as jest.Mock).mockRejectedValue(
132:       new Error("Network error")
133:     );
134: 
135:     renderWithRouter(<PlantRegistrationForm />);
136: 
137:     await waitFor(() => {
138:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
139:     });
140: 
141: 
142:     const varietySelect = screen.getByLabelText(/plant variety/i);
143:     await user.selectOptions(varietySelect, "variety-1");
144: 
145:     const growBagButton = screen.getByText("Grow Bag");
146:     await user.click(growBagButton);
147: 
148:     const selectSoilButton = screen.getByTestId(
149:       "mixture-card-leafy-greens-standard"
150:     );
151:     await user.click(selectSoilButton);
152: 
153:     const submitButton = screen.getByRole("button", {
154:       name: /register plant/i,
155:     });
156:     await user.click(submitButton);
157: 
158: 
159:     await waitFor(() => {
160:       expect(screen.getByText("Network error")).toBeInTheDocument();
161:     });
162: 
163: 
164:     expect(screen.getByDisplayValue("Test Variety")).toBeInTheDocument();
165:   });
166: });

================
File: src/__tests__/utils/plantDisplay.test.ts
================
 1: import { getPlantDisplayName } from "@/utils/plantDisplay";
 2: import { PlantRecord } from "@/types/database";
 3: 
 4: describe("getPlantDisplayName", () => {
 5:   const basePlant: PlantRecord = {
 6:     id: "test-id",
 7:     varietyId: "some-uuid-123",
 8:     varietyName: "Roma Tomato",
 9:     plantedDate: new Date(),
10:     location: "Indoor",
11:     container: "5 gallon",
12:     isActive: true,
13:     notes: [],
14:     createdAt: new Date(),
15:     updatedAt: new Date(),
16:   };
17: 
18:   it("returns custom name when provided", () => {
19:     const plant = { ...basePlant, name: "My Special Tomato" };
20:     expect(getPlantDisplayName(plant)).toBe("My Special Tomato");
21:   });
22: 
23:   it("returns variety name when no custom name", () => {
24:     const plant = { ...basePlant, name: undefined };
25:     expect(getPlantDisplayName(plant)).toBe("Roma Tomato");
26:   });
27: 
28:   it("returns fallback when no custom name or variety name", () => {
29:     const plant = { ...basePlant, name: undefined, varietyName: "" };
30:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
31:   });
32: 
33:   it("returns fallback when varietyName is empty", () => {
34:     const plant = { ...basePlant, name: undefined, varietyName: "" };
35:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
36:   });
37: 
38:   it("returns fallback when varietyName is whitespace only", () => {
39:     const plant = { ...basePlant, name: undefined, varietyName: "   " };
40:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
41:   });
42: });

================
File: src/__tests__/utils/testHelpers.tsx
================
 1: import { render } from "@testing-library/react";
 2: import { BrowserRouter } from "react-router-dom";
 3: import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 4: 
 5: interface RenderOptions {
 6:   initialEntries?: string[];
 7:   withRouter?: boolean;
 8:   queryClient?: QueryClient;
 9: }
10: 
11: export const renderWithProviders = (
12:   ui: React.ReactElement,
13:   options: RenderOptions = {}
14: ) => {
15:   const {
16:     withRouter = true,
17:     queryClient = new QueryClient({
18:       defaultOptions: {
19:         queries: {
20:           retry: false,
21:         },
22:         mutations: {
23:           retry: false,
24:         },
25:       },
26:     }),
27:   } = options;
28: 
29:   const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {
30:     const content = (
31:       <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
32:     );
33: 
34:     if (withRouter) {
35:       return <BrowserRouter>{content}</BrowserRouter>;
36:     }
37: 
38:     return content;
39:   };
40: 
41:   return render(ui, { wrapper: Wrapper });
42: };
43: 
44: 
45: export const mockPlantData = [
46:   {
47:     id: "plant-1",
48:     varietyId: "tomato-1",
49:     varietyName: "Cherry Tomato",
50:     name: "My Cherry Tomato",
51:     plantedDate: new Date("2024-01-01"),
52:     currentStage: "vegetative" as const,
53:     location: "Indoor",
54:     container: "5 gallon pot",
55:     isActive: true,
56:     notes: [],
57:     createdAt: new Date(),
58:     updatedAt: new Date(),
59:   },
60:   {
61:     id: "plant-2",
62:     varietyId: "basil-1",
63:     varietyName: "Sweet Basil",
64:     name: "My Basil",
65:     plantedDate: new Date("2024-01-15"),
66:     currentStage: "seedling" as const,
67:     location: "Indoor",
68:     container: "3 gallon pot",
69:     isActive: true,
70:     notes: [],
71:     createdAt: new Date(),
72:     updatedAt: new Date(),
73:   },
74: ];
75: 
76: export const mockUser = {
77:   uid: "test-user-id",
78:   email: "test@example.com",
79:   displayName: "Test User",
80: };

================
File: src/components/layouts/EmptyState.tsx
================
 1: import React from "react";
 2: import { Card, CardContent } from "@/components/ui/Card";
 3: import { Button } from "@/components/ui/Button";
 4: import { Link } from "react-router-dom";
 5: 
 6: interface EmptyStateProps {
 7:   title: string;
 8:   description: string;
 9:   icon: string;
10:   actionLabel: string;
11:   actionTo: string;
12:   showWelcome?: boolean;
13: }
14: 
15: const EmptyState: React.FC<EmptyStateProps> = ({
16:   title,
17:   description,
18:   icon,
19:   actionLabel,
20:   actionTo,
21:   showWelcome = false,
22: }) => {
23:   return (
24:     <div className="flex items-center justify-center min-h-96">
25:       <Card className="w-full max-w-md mx-4 shadow-sm border border-border">
26:         <CardContent className="text-center py-12 px-6 space-y-6">
27:           {showWelcome && (
28:             <div className="mb-8">
29:               <h1 className="text-3xl font-bold text-foreground mb-2">
30:                 🌱 Welcome to SmartGarden
31:               </h1>
32:               <p className="text-muted-foreground">
33:                 Your digital gardening companion
34:               </p>
35:             </div>
36:           )}
37: 
38:           <div className="text-6xl mb-4" role="img" aria-label={title}>
39:             {icon}
40:           </div>
41: 
42:           <div className="space-y-3">
43:             <h2 className="text-xl font-semibold text-foreground">{title}</h2>
44:             <p className="text-muted-foreground leading-relaxed">
45:               {description}
46:             </p>
47:           </div>
48: 
49:           <div className="pt-4">
50:             <Link to={actionTo} className="block">
51:               <Button size="lg" className="w-full">
52:                 {actionLabel}
53:               </Button>
54:             </Link>
55:           </div>
56: 
57:           {showWelcome && (
58:             <div className="pt-6 border-t border-gray-100">
59:               <p className="text-sm text-muted-foreground">
60:                 Need help getting started?{" "}
61:                 <button
62:                   className="text-green-700 underline hover:text-green-800"
63:                   onClick={() => {
64:                     console.log("Show tutorial");
65:                   }}
66:                 >
67:                   View quick tutorial
68:                 </button>
69:               </p>
70:             </div>
71:           )}
72:         </CardContent>
73:       </Card>
74:     </div>
75:   );
76: };
77: 
78: export default EmptyState;

================
File: src/components/plant/PlantStageDisplay.tsx
================
 1: import { PlantRecord } from "@/types/database";
 2: import { useDynamicStage } from "@/hooks/useDynamicStage";
 3: 
 4: interface PlantStageDisplayProps {
 5:   plant: PlantRecord;
 6:   showEmoji?: boolean;
 7:   className?: string;
 8: }
 9: 
10: const PlantStageDisplay = ({
11:   plant,
12:   showEmoji = false,
13:   className = "text-sm font-medium text-muted-foreground capitalize",
14: }: PlantStageDisplayProps) => {
15:   const calculatedStage = useDynamicStage(plant);
16: 
17:   return (
18:     <div className={className}>
19:       {showEmoji && <span className="mr-1">🌱</span>}
20:       Stage: {calculatedStage}
21:     </div>
22:   );
23: };
24: 
25: export default PlantStageDisplay;

================
File: src/components/plant/ReminderPreferencesSection.tsx
================
 1: import { Switch } from "@/components/ui/Switch";
 2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
 3: 
 4: 
 5: interface ReminderPreferences {
 6:   watering: boolean;
 7:   fertilizing: boolean;
 8:   observation: boolean;
 9:   lighting: boolean;
10:   pruning: boolean;
11: }
12: 
13: interface ReminderPreferencesProps {
14:   preferences: ReminderPreferences;
15:   onChange: (preferences: ReminderPreferences) => void;
16: }
17: 
18: const ReminderPreferencesSection = ({
19:   preferences,
20:   onChange,
21: }: ReminderPreferencesProps) => {
22:   const handleToggle = (key: keyof ReminderPreferences) => {
23:     onChange({
24:       ...preferences,
25:       [key]: !preferences[key],
26:     });
27:   };
28: 
29:   const reminderTypes = [
30:     {
31:       key: "watering" as const,
32:       label: "Watering",
33:       icon: "💧",
34:       description: "Get notified when watering is due",
35:     },
36:     {
37:       key: "fertilizing" as const,
38:       label: "Fertilizing",
39:       icon: "🌱",
40:       description: "Reminders for feeding schedule",
41:     },
42:     {
43:       key: "observation" as const,
44:       label: "Health Checks",
45:       icon: "👁️",
46:       description: "Regular observation reminders",
47:     },
48:     {
49:       key: "lighting" as const,
50:       label: "Lighting",
51:       icon: "💡",
52:       description: "Light schedule adjustments",
53:     },
54:     {
55:       key: "pruning" as const,
56:       label: "Maintenance",
57:       icon: "✂️",
58:       description: "Pruning and maintenance tasks",
59:     },
60:   ];
61: 
62:   return (
63:     <Card className="border-emerald-200 bg-emerald-50/30">
64:       <CardHeader className="pb-3">
65:         <CardTitle className="text-lg flex items-center gap-2">
66:           <span>🔔</span>
67:           Reminder Preferences
68:         </CardTitle>
69:         <p className="text-sm text-muted-foreground">
70:           Choose which types of care reminders you'd like to receive for this
71:           plant
72:         </p>
73:       </CardHeader>
74:       <CardContent className="space-y-3">
75:         {reminderTypes.map(({ key, label, icon, description }) => (
76:           <div
77:             key={key}
78:             className="flex items-center justify-between p-3 rounded-lg border border-emerald-100 bg-card/50 hover:bg-card/80 transition-colors"
79:           >
80:             <div className="flex-1">
81:               <div className="flex items-center gap-2 mb-1">
82:                 <span className="text-lg">{icon}</span>
83:                 <span className="font-medium text-foreground">{label}</span>
84:               </div>
85:               <p className="text-sm text-muted-foreground">{description}</p>
86:             </div>
87:             <Switch
88:               checked={preferences[key]}
89:               onCheckedChange={() => handleToggle(key)}
90:               className="ml-4"
91:             />
92:           </div>
93:         ))}
94:       </CardContent>
95:     </Card>
96:   );
97: };
98: 
99: export default ReminderPreferencesSection;

================
File: src/components/ui/Card.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface CardProps {
 5:   children: React.ReactNode;
 6:   className?: string;
 7: }
 8: 
 9: interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
10:   children: React.ReactNode;
11:   className?: string;
12: }
13: 
14: interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {
15:   children: React.ReactNode;
16:   className?: string;
17: }
18: 
19: export function Card({ children, className }: CardProps) {
20:   return (
21:     <div
22:       className={cn(
23:         "rounded-lg border bg-card text-card-foreground shadow-sm",
24:         className
25:       )}
26:     >
27:       {children}
28:     </div>
29:   );
30: }
31: 
32: export function CardHeader({
33:   children,
34:   className,
35:   ...props
36: }: CardHeaderProps) {
37:   return (
38:     <div
39:       className={cn("px-6 py-4 border-b border-border", className)}
40:       {...props}
41:     >
42:       {children}
43:     </div>
44:   );
45: }
46: 
47: export function CardContent({
48:   children,
49:   className,
50:   ...props
51: }: CardContentProps) {
52:   return (
53:     <div
54:       className={cn(
55:         "p-6 pt-0 text-card-foreground",
56:         className
57:       )}
58:       {...props}
59:     >
60:       {children}
61:     </div>
62:   );
63: }
64: 
65: export function CardTitle({ children, className }: CardProps) {
66:   return (
67:     <h3
68:       className={cn(
69:         "text-2xl font-semibold leading-none tracking-tight text-card-foreground",
70:         className
71:       )}
72:     >
73:       {children}
74:     </h3>
75:   );
76: }

================
File: src/components/ui/DarkModeToggle.tsx
================
 1: import React from "react";
 2: import { useDarkMode } from "@/hooks/useDarkMode";
 3: import { cn } from "@/utils/cn";
 4: 
 5: interface DarkModeToggleProps {
 6:   size?: "sm" | "md" | "lg";
 7:   className?: string;
 8:   showLabels?: boolean;
 9: }
10: 
11: export const DarkModeToggle: React.FC<DarkModeToggleProps> = ({
12:   size = "md",
13:   className,
14:   showLabels = false,
15: }) => {
16:   const { isDarkMode, toggleDarkMode } = useDarkMode();
17: 
18:   const sizeClasses = {
19:     sm: {
20:       button: "w-12 h-6",
21:       circle: "w-4 h-4",
22:       translate: "translate-x-6",
23:       icon: "text-xs",
24:     },
25:     md: {
26:       button: "w-14 h-7",
27:       circle: "w-5 h-5",
28:       translate: "translate-x-7",
29:       icon: "text-sm",
30:     },
31:     lg: {
32:       button: "w-16 h-8",
33:       circle: "w-6 h-6",
34:       translate: "translate-x-8",
35:       icon: "text-base",
36:     },
37:   };
38: 
39:   const sizes = sizeClasses[size];
40: 
41:   return (
42:     <div className={cn("flex items-center gap-2", className)}>
43:       {showLabels && (
44:         <span
45:           className={cn(
46:             "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
47:             sizes.button,
48:             isDarkMode
49:               ? "bg-emerald-600 hover:bg-emerald-700"
50:               : "bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-background0"
51:           )}
52:         >
53:           ☀️
54:         </span>
55:       )}
56: 
57:       <button
58:         type="button"
59:         onClick={toggleDarkMode}
60:         className={cn(
61:           "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
62:           sizes.button,
63:           isDarkMode
64:             ? "bg-emerald-600 hover:bg-emerald-700"
65:             : "bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-background0"
66:         )}
67:         aria-label={`Switch to ${isDarkMode ? "light" : "dark"} mode`}
68:       >
69:         <span
70:           className={cn(
71:             "pointer-events-none inline-block rounded-full bg-card shadow transform ring-0 transition duration-200 ease-in-out flex items-center justify-center",
72:             sizes.circle,
73:             isDarkMode ? sizes.translate : "translate-x-0"
74:           )}
75:         >
76:           <span className={cn(sizes.icon)}>{isDarkMode ? "🌙" : "☀️"}</span>
77:         </span>
78:       </button>
79: 
80:       {showLabels && (
81:         <span
82:           className={cn(
83:             "text-sm font-medium transition-colors",
84:             isDarkMode
85:               ? "text-emerald-700 dark:text-emerald-500"
86:               : "text-muted-foreground dark:text-muted-foreground"
87:           )}
88:         >
89:           🌙
90:         </span>
91:       )}
92:     </div>
93:   );
94: };

================
File: src/components/ui/LocationToggle.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface LocationToggleProps {
 5:   isOutdoor: boolean;
 6:   onChange: (isOutdoor: boolean) => void;
 7:   disabled?: boolean;
 8:   className?: string;
 9: }
10: 
11: export const LocationToggle: React.FC<LocationToggleProps> = ({
12:   isOutdoor,
13:   onChange,
14:   disabled = false,
15:   className,
16: }) => {
17:   return (
18:     <div
19:       className={cn("relative inline-flex rounded-lg p-1 bg-muted", className)}
20:     >
21:       <button
22:         type="button"
23:         disabled={disabled}
24:         onClick={() => onChange(false)}
25:         className={cn(
26:           "relative flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
27:           !isOutdoor
28:             ? "bg-card text-emerald-700 shadow-sm"
29:             : "text-muted-foreground hover:text-foreground",
30:           disabled && "opacity-50 cursor-not-allowed"
31:         )}
32:       >
33:         <span className="text-lg">🏠</span>
34:         <span>Indoor</span>
35:       </button>
36: 
37:       <button
38:         type="button"
39:         disabled={disabled}
40:         onClick={() => onChange(true)}
41:         className={cn(
42:           "relative flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
43:           isOutdoor
44:             ? "bg-card text-emerald-700 shadow-sm"
45:             : "text-muted-foreground hover:text-foreground",
46:           disabled && "opacity-50 cursor-not-allowed"
47:         )}
48:       >
49:         <span className="text-lg">🌞</span>
50:         <span>Outdoor</span>
51:       </button>
52:     </div>
53:   );
54: };

================
File: src/components/ui/Switch.tsx
================
  1: import React from "react";
  2: import { cn } from "@/utils/cn";
  3: 
  4: interface SwitchProps {
  5:   checked: boolean;
  6:   onCheckedChange: (checked: boolean) => void;
  7:   disabled?: boolean;
  8:   leftLabel?: string;
  9:   rightLabel?: string;
 10:   leftIcon?: React.ReactNode;
 11:   rightIcon?: React.ReactNode;
 12:   size?: "sm" | "md" | "lg";
 13:   className?: string;
 14:   id?: string;
 15:   "aria-label"?: string;
 16:   "aria-labelledby"?: string;
 17: }
 18: 
 19: export const Switch: React.FC<SwitchProps> = ({
 20:   checked,
 21:   onCheckedChange,
 22:   disabled = false,
 23:   leftLabel,
 24:   rightLabel,
 25:   leftIcon,
 26:   rightIcon,
 27:   size = "md",
 28:   className,
 29:   id,
 30:   "aria-label": ariaLabel,
 31:   "aria-labelledby": ariaLabelledBy,
 32: }) => {
 33:   const sizeClasses = {
 34:     sm: {
 35:       track: "w-10 h-5",
 36:       thumb: "w-4 h-4",
 37:       translate: "translate-x-5",
 38:       text: "text-sm",
 39:       gap: "gap-2",
 40:     },
 41:     md: {
 42:       track: "w-12 h-6",
 43:       thumb: "w-5 h-5",
 44:       translate: "translate-x-6",
 45:       text: "text-base",
 46:       gap: "gap-3",
 47:     },
 48:     lg: {
 49:       track: "w-14 h-7",
 50:       thumb: "w-6 h-6",
 51:       translate: "translate-x-7",
 52:       text: "text-lg",
 53:       gap: "gap-4",
 54:     },
 55:   };
 56: 
 57:   const sizes = sizeClasses[size];
 58: 
 59:   return (
 60:     <div className={cn("flex items-center", sizes.gap, className)}>
 61:       {}
 62:       {(leftLabel || leftIcon) && (
 63:         <div
 64:           className={cn(
 65:             "flex items-center gap-2 transition-colors duration-200",
 66:             sizes.text,
 67:             !checked
 68:               ? "text-emerald-700 font-semibold"
 69:               : "text-muted-foreground",
 70:             disabled && "opacity-50"
 71:           )}
 72:         >
 73:           {leftIcon && <span className="flex-shrink-0">{leftIcon}</span>}
 74:           {leftLabel && <span>{leftLabel}</span>}
 75:         </div>
 76:       )}
 77: 
 78:       {}
 79:       <button
 80:         type="button"
 81:         role="switch"
 82:         aria-checked={checked}
 83:         aria-label={ariaLabel}
 84:         aria-labelledby={ariaLabelledBy}
 85:         id={id}
 86:         disabled={disabled}
 87:         onClick={() => onCheckedChange(!checked)}
 88:         className={cn(
 89:           "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
 90:           sizes.track,
 91:           checked
 92:             ? "bg-emerald-600 hover:bg-emerald-700"
 93:             : "bg-gray-300 hover:bg-gray-400",
 94:           disabled && "cursor-not-allowed opacity-50 hover:bg-gray-300"
 95:         )}
 96:       >
 97:         <span
 98:           className={cn(
 99:             "pointer-events-none inline-block rounded-full bg-card shadow transform ring-0 transition duration-200 ease-in-out",
100:             sizes.thumb,
101:             checked ? sizes.translate : "translate-x-0"
102:           )}
103:         />
104:       </button>
105: 
106:       {}
107:       {(rightLabel || rightIcon) && (
108:         <div
109:           className={cn(
110:             "flex items-center gap-2 transition-colors duration-200",
111:             sizes.text,
112:             checked
113:               ? "text-emerald-700 font-semibold"
114:               : "text-muted-foreground",
115:             disabled && "opacity-50"
116:           )}
117:         >
118:           {rightIcon && <span className="flex-shrink-0">{rightIcon}</span>}
119:           {rightLabel && <span>{rightLabel}</span>}
120:         </div>
121:       )}
122:     </div>
123:   );
124: };

================
File: src/data/seedVarieties.ts
================
   1: import { PlantCategory } from "@/types";
   2: 
   3: import {
   4:   StageSpecificWateringProtocol,
   5:   StageSpecificLightingProtocol,
   6:   StageSpecificFertilizationProtocol,
   7:   EnvironmentalProtocol,
   8:   SoilMixture,
   9:   ContainerRequirements,
  10:   SuccessionProtocol,
  11: } from "@/types";
  12: 
  13: export interface ComprehensivePlantProtocols {
  14:   lighting?: StageSpecificLightingProtocol;
  15:   watering?: StageSpecificWateringProtocol;
  16:   fertilization?: StageSpecificFertilizationProtocol;
  17:   environment?: EnvironmentalProtocol;
  18:   soilMixture?: SoilMixture;
  19:   container?: ContainerRequirements;
  20:   succession?: SuccessionProtocol;
  21:   specialRequirements?: string[];
  22: }
  23: 
  24: export interface SeedVariety {
  25:   name: string;
  26:   category: PlantCategory;
  27:   growthTimeline: {
  28:     [stageName: string]: number;
  29:   };
  30:   protocols?: ComprehensivePlantProtocols;
  31:   isEverbearing?: boolean;
  32:   productiveLifespan?: number;
  33: }
  34: 
  35: 
  36: 
  37: 
  38: 
  39: 
  40: 
  41: 
  42: export const seedVarieties: SeedVariety[] = [
  43:   {
  44:     name: "Astro Arugula",
  45:     category: "leafy-greens",
  46:     isEverbearing: true,
  47:     productiveLifespan: 56,
  48:     growthTimeline: {
  49:       germination: 7,
  50:       seedling: 14,
  51:       vegetative: 14,
  52:       maturation: 37,
  53:     },
  54:     protocols: {
  55:       watering: {
  56:         germination: {
  57:           trigger: { moistureLevel: "3-4" },
  58:           target: { moistureLevel: "6-7" },
  59:           volume: { amount: "2-4 fl oz", frequency: "2-3x/week" },
  60:         },
  61:         seedling: {
  62:           trigger: { moistureLevel: "3-4" },
  63:           target: { moistureLevel: "6-7" },
  64:           volume: { amount: "2-4 fl oz", frequency: "2-3x/week" },
  65:         },
  66:         vegetative: {
  67:           trigger: { moistureLevel: "3-4" },
  68:           target: { moistureLevel: "6-7" },
  69:           volume: { amount: "8-12 fl oz", frequency: "2-3x/week" },
  70:         },
  71:       },
  72:       fertilization: {
  73:         seedling: {
  74:           schedule: [
  75:             {
  76:               taskName: "Light Fish Emulsion",
  77:               details: { product: "Fish Emulsion", dilution: "1-2 Tbsp/gal" },
  78:               startDays: 14,
  79:               frequencyDays: 14,
  80:               repeatCount: 1,
  81:             },
  82:           ],
  83:         },
  84:         vegetative: {
  85:           schedule: [
  86:             {
  87:               taskName: "Regular Fish Emulsion",
  88:               details: { product: "Fish Emulsion", dilution: "1-2 Tbsp/gal" },
  89:               startDays: 28,
  90:               frequencyDays: 14,
  91:               repeatCount: 2,
  92:             },
  93:           ],
  94:         },
  95:       },
  96:     },
  97:   },
  98:   {
  99:     name: "Baby's Leaf Spinach",
 100:     category: "leafy-greens",
 101:     isEverbearing: true,
 102:     productiveLifespan: 60,
 103:     growthTimeline: {
 104:       germination: 7,
 105:       seedling: 14,
 106:       vegetative: 9,
 107:       maturation: 30,
 108:     },
 109:     protocols: {
 110:       watering: {
 111:         germination: {
 112:           trigger: { moistureLevel: "<4" },
 113:           target: { moistureLevel: "6" },
 114:           volume: { amount: "Mist as needed", frequency: "Daily" },
 115:         },
 116:         seedling: {
 117:           trigger: { moistureLevel: "<4" },
 118:           target: { moistureLevel: "6" },
 119:           volume: { amount: "Mist as needed", frequency: "As needed" },
 120:         },
 121:         vegetative: {
 122:           trigger: { moistureLevel: "<4" },
 123:           target: { moistureLevel: "6" },
 124:           volume: { amount: "~1 gal/week for bed", frequency: "As needed" },
 125:         },
 126:       },
 127:       fertilization: {
 128:         seedling: {
 129:           schedule: [
 130:             {
 131:               taskName: "Light Fish Emulsion",
 132:               details: { product: "Fish emulsion", dilution: "2 Tbsp/gal" },
 133:               startDays: 14,
 134:               frequencyDays: 14,
 135:               repeatCount: 1,
 136:             },
 137:           ],
 138:         },
 139:         vegetative: {
 140:           schedule: [
 141:             {
 142:               taskName: "Regular Fish Emulsion",
 143:               details: { product: "Fish emulsion", dilution: "2 Tbsp/gal" },
 144:               startDays: 28,
 145:               frequencyDays: 14,
 146:               repeatCount: 2,
 147:             },
 148:           ],
 149:         },
 150:       },
 151:     },
 152:   },
 153:   {
 154:     name: "May Queen Lettuce",
 155:     category: "leafy-greens",
 156:     isEverbearing: true,
 157:     productiveLifespan: 60,
 158:     growthTimeline: {
 159:       germination: 10,
 160:       seedling: 20,
 161:       vegetative: 20,
 162:       maturation: 60,
 163:     },
 164:     protocols: {
 165:       watering: {
 166:         germination: {
 167:           trigger: { moistureLevel: "Keep surface moist" },
 168:           target: { moistureLevel: "7-8" },
 169:           volume: { amount: "16-32 oz", frequency: "Daily/as needed" },
 170:         },
 171:         seedling: {
 172:           trigger: { moistureLevel: "3-4" },
 173:           target: { moistureLevel: "8-10" },
 174:           volume: { amount: "0.5-1 gal", frequency: "Every 1-3 days" },
 175:         },
 176:         vegetative: {
 177:           trigger: { moistureLevel: "3-4" },
 178:           target: { moistureLevel: "8-10" },
 179:           volume: { amount: "0.75-1.5 gal", frequency: "Every 2-3 days" },
 180:         },
 181:       },
 182:       fertilization: {
 183:         seedling: {
 184:           schedule: [
 185:             {
 186:               taskName: "Diluted Fish Emulsion",
 187:               details: {
 188:                 product: "Fish emulsion/fish+kelp blend",
 189:                 dilution: "0.5-1 Tbsp/gal",
 190:               },
 191:               startDays: 25,
 192:               frequencyDays: 14,
 193:               repeatCount: 2,
 194:             },
 195:           ],
 196:         },
 197:       },
 198:     },
 199:   },
 200:   {
 201:     name: "Rasmus Broccoli",
 202:     category: "fruiting-plants",
 203:     productiveLifespan: 95,
 204:     growthTimeline: {
 205:       germination: 7,
 206:       seedling: 17,
 207:       vegetative: 31,
 208:       maturation: 90,
 209:     },
 210:     protocols: {
 211:       fertilization: {
 212:         seedling: {
 213:           schedule: [
 214:             {
 215:               taskName: "Fish + Seaweed Blend",
 216:               details: {
 217:                 product: "Fish + Seaweed blend",
 218:                 dilution: "½ strength",
 219:               },
 220:               startDays: 7,
 221:               frequencyDays: 7,
 222:               repeatCount: 3,
 223:             },
 224:           ],
 225:         },
 226:         vegetative: {
 227:           schedule: [
 228:             {
 229:               taskName: "Fish + Seaweed Blend",
 230:               details: {
 231:                 product: "Fish + Seaweed blend",
 232:                 dilution: "full strength",
 233:               },
 234:               startDays: 28,
 235:               frequencyDays: 7,
 236:               repeatCount: 4,
 237:             },
 238:           ],
 239:         },
 240:       },
 241:     },
 242:   },
 243:   {
 244:     name: "Stuttgarter Onions",
 245:     category: "root-vegetables",
 246:     productiveLifespan: 120,
 247:     growthTimeline: {
 248:       germination: 14,
 249:       seedling: 42,
 250:       vegetative: 42,
 251:       maturation: 120,
 252:     },
 253:     protocols: {},
 254:   },
 255:   {
 256:     name: "White Sweet Spanish Onions",
 257:     category: "root-vegetables",
 258:     productiveLifespan: 120,
 259:     growthTimeline: {
 260:       germination: 14,
 261:       seedling: 42,
 262:       vegetative: 42,
 263:       maturation: 120,
 264:     },
 265:     protocols: {},
 266:   },
 267:   {
 268:     name: "Garlic",
 269:     category: "root-vegetables",
 270:     productiveLifespan: 270,
 271:     growthTimeline: {
 272:       germination: 30,
 273:       seedling: 120,
 274:       vegetative: 90,
 275:       maturation: 270,
 276:     },
 277:     protocols: {},
 278:   },
 279:   {
 280:     name: "Rosemary",
 281:     category: "herbs",
 282:     productiveLifespan: 730,
 283:     growthTimeline: {
 284:       germination: 21,
 285:       seedling: 40,
 286:       vegetative: 180,
 287:       maturation: 365,
 288:     },
 289:     protocols: {},
 290:   },
 291:   {
 292:     name: "Greek Oregano",
 293:     category: "herbs",
 294:     productiveLifespan: 730,
 295:     growthTimeline: {
 296:       germination: 14,
 297:       seedling: 28,
 298:       vegetative: 48,
 299:       maturation: 90,
 300:     },
 301:     protocols: {},
 302:   },
 303:   {
 304:     name: "Italian Flat Leaf Parsley",
 305:     category: "herbs",
 306:     isEverbearing: true,
 307:     productiveLifespan: 90,
 308:     growthTimeline: {
 309:       germination: 28,
 310:       seedling: 21,
 311:       vegetative: 41,
 312:       maturation: 90,
 313:     },
 314:     protocols: {},
 315:   },
 316:   {
 317:     name: "Greek Dwarf Basil",
 318:     category: "herbs",
 319:     isEverbearing: true,
 320:     productiveLifespan: 60,
 321:     growthTimeline: {
 322:       germination: 10,
 323:       seedling: 28,
 324:       vegetative: 42,
 325:       maturation: 60,
 326:     },
 327:     protocols: {},
 328:   },
 329:   {
 330:     name: "English Thyme",
 331:     category: "herbs",
 332:     productiveLifespan: 730,
 333:     growthTimeline: {
 334:       germination: 14,
 335:       seedling: 21,
 336:       vegetative: 84,
 337:       maturation: 120,
 338:     },
 339:     protocols: {},
 340:   },
 341:   {
 342:     name: "Boston Pickling Cucumber",
 343:     category: "fruiting-plants",
 344:     isEverbearing: false,
 345:     productiveLifespan: 70,
 346:     growthTimeline: {
 347:       germination: 7,
 348:       seedling: 14,
 349:       vegetative: 21,
 350:       flowering: 42,
 351:       fruitingHarvesting: 50,
 352:     },
 353:     protocols: {
 354:       lighting: {
 355:         seedling: {
 356:           ppfd: {
 357:             min: 200,
 358:             max: 400,
 359:             unit: "µmol/m²/s",
 360:           },
 361:           photoperiod: {
 362:             hours: 12,
 363:             maxHours: 16,
 364:           },
 365:           dli: {
 366:             min: 8.6,
 367:             max: 23,
 368:             unit: "mol/m²/day",
 369:           },
 370:           notes: [
 371:             "Start feeding 2-3 weeks post-germination with balanced liquid fertilizer",
 372:             "Half strength during establishment to avoid nutrient burn",
 373:           ],
 374:         },
 375:         vegetativeGrowth: {
 376:           ppfd: {
 377:             min: 400,
 378:             max: 600,
 379:             unit: "µmol/m²/s",
 380:           },
 381:           photoperiod: {
 382:             hours: 14,
 383:             maxHours: 16,
 384:           },
 385:           dli: {
 386:             min: 20.2,
 387:             max: 34.6,
 388:             unit: "mol/m²/day",
 389:           },
 390:           notes: [
 391:             "Vigorous vine growth requires high light intensity",
 392:             "Higher nitrogen during this phase supports leaf and vine development",
 393:           ],
 394:         },
 395:         flowering: {
 396:           ppfd: {
 397:             min: 500,
 398:             max: 700,
 399:             unit: "µmol/m²/s",
 400:           },
 401:           photoperiod: {
 402:             hours: 14,
 403:             maxHours: 16,
 404:           },
 405:           dli: {
 406:             min: 28.8,
 407:             max: 40.3,
 408:             unit: "mol/m²/day",
 409:           },
 410:           notes: [
 411:             "Critical phase - flower production determines fruit yield",
 412:             "Hand pollination required daily during flowering period",
 413:           ],
 414:         },
 415:         fruitingHarvesting: {
 416:           ppfd: {
 417:             min: 500,
 418:             max: 700,
 419:             unit: "µmol/m²/s",
 420:           },
 421:           photoperiod: {
 422:             hours: 14,
 423:             maxHours: 16,
 424:           },
 425:           dli: {
 426:             min: 28.8,
 427:             max: 40.3,
 428:             unit: "mol/m²/day",
 429:           },
 430:           notes: [
 431:             "Harvest 8-10 days after fruit set",
 432:             "Regular picking encourages continued production",
 433:           ],
 434:         },
 435:       },
 436:       watering: {
 437:         seedling: {
 438:           trigger: {
 439:             moistureLevel: "consistent moisture",
 440:           },
 441:           target: {
 442:             moistureLevel: "adequate but not waterlogged",
 443:           },
 444:           volume: {
 445:             amount: "as needed for establishment",
 446:             frequency: "daily monitoring",
 447:           },
 448:           notes: ["Heavy feeders require consistent moisture from start"],
 449:         },
 450:         vegetativeGrowth: {
 451:           trigger: {
 452:             moistureLevel: "when top inch dry",
 453:           },
 454:           target: {
 455:             moistureLevel: "thoroughly moist",
 456:           },
 457:           volume: {
 458:             amount: "heavy watering",
 459:             frequency: "as soil indicates",
 460:           },
 461:           notes: [
 462:             "Consistent moisture critical - never allow drought stress",
 463:             "Container growing requires more frequent attention than ground cultivation",
 464:           ],
 465:         },
 466:         flowering: {
 467:           trigger: {
 468:             moistureLevel: "when top inch dry",
 469:           },
 470:           target: {
 471:             moistureLevel: "thoroughly moist",
 472:           },
 473:           volume: {
 474:             amount: "heavy watering",
 475:             frequency: "consistent schedule",
 476:           },
 477:           notes: [
 478:             "Water stress during flowering dramatically reduces fruit set",
 479:             "Morning watering preferred to allow leaves to dry before evening",
 480:           ],
 481:         },
 482:         fruitingHarvesting: {
 483:           trigger: {
 484:             moistureLevel: "when top inch dry",
 485:           },
 486:           target: {
 487:             moistureLevel: "thoroughly moist",
 488:           },
 489:           volume: {
 490:             amount: "heavy watering",
 491:             frequency: "daily during peak production",
 492:           },
 493:           notes: [
 494:             "Fruit development requires enormous water uptake",
 495:             "Inconsistent watering causes bitter or malformed fruit",
 496:           ],
 497:         },
 498:       },
 499:       fertilization: {
 500:         seedling: {
 501:           schedule: [
 502:             {
 503:               taskName: "Initial balanced liquid feed",
 504:               details: {
 505:                 product: "Balanced liquid fertilizer",
 506:                 dilution: "half strength",
 507:               },
 508:               startDays: 14,
 509:               frequencyDays: 0,
 510:               repeatCount: 1,
 511:             },
 512:           ],
 513:         },
 514:         vegetative: {
 515:           schedule: [
 516:             {
 517:               taskName: "Balanced liquid feed",
 518:               details: {
 519:                 product: "Balanced liquid fertilizer",
 520:                 dilution: "full strength",
 521:               },
 522:               startDays: 21,
 523:               frequencyDays: 10,
 524:               repeatCount: 2,
 525:             },
 526:           ],
 527:         },
 528:         flowering: {
 529:           schedule: [
 530:             {
 531:               taskName: "Apply bloom booster fertilizer",
 532:               details: {
 533:                 product: "Higher P-K fertilizer (bloom booster)",
 534:               },
 535:               startDays: 42,
 536:               frequencyDays: 10,
 537:               repeatCount: 2,
 538:             },
 539:           ],
 540:         },
 541:         fruitingHarvesting: {
 542:           schedule: [
 543:             {
 544:               taskName: "Continue bloom booster fertilizer",
 545:               details: {
 546:                 product: "Higher P-K fertilizer",
 547:               },
 548:               startDays: 56,
 549:               frequencyDays: 10,
 550:               repeatCount: 2,
 551:             },
 552:           ],
 553:         },
 554:       },
 555:       environment: {
 556:         pH: {
 557:           min: 5.8,
 558:           max: 6.5,
 559:           optimal: 6.2,
 560:         },
 561:       },
 562:       soilMixture: {
 563:         components: {
 564:           "coco coir": 30,
 565:           perlite: 25,
 566:           vermiculite: 25,
 567:           compost: 20,
 568:         },
 569:         amendments: {
 570:           "well-rotted manure": "3 tbsp per gallon",
 571:           "bone meal": "1 tbsp per gallon",
 572:         },
 573:       },
 574:       container: {
 575:         minSize: "≥2-3 gallons",
 576:         depth: "18-24 inches minimum",
 577:         staging: {
 578:           seedling: "4 inch pot or cell tray with deeper cells",
 579:           final: "Large container or main bed section",
 580:         },
 581:       },
 582:       succession: {
 583:         interval: 21,
 584:         method: "continuous",
 585:         harvestMethod: "selective",
 586:         productiveWeeks: 8,
 587:         notes: [
 588:           "Succession every 3-4 weeks for overlapping production",
 589:           "Each plant produces for 6-8 weeks once fruiting begins",
 590:         ],
 591:       },
 592:       specialRequirements: [
 593:         "A-frame trellis essential for vine support and light exposure",
 594:         "Hand pollination critical - transfer pollen from male to female flowers daily",
 595:         "Female flowers identifiable by tiny cucumber at base",
 596:         "Harvest regularly to encourage continued production",
 597:         "Heavy feeders requiring rich, well-draining soil",
 598:       ],
 599:     },
 600:   },
 601:   {
 602:     name: "Sugar Snap Peas",
 603:     category: "fruiting-plants",
 604:     isEverbearing: true,
 605:     productiveLifespan: 56,
 606:     growthTimeline: {
 607:       germinationEmergence: 10,
 608:       seedling: 14,
 609:       vegetativeVining: 21,
 610:       flowerBudFormation: 50,
 611:       podSetMaturation: 60,
 612:     },
 613:     protocols: {
 614:       lighting: {
 615:         germinationEmergence: {
 616:           ppfd: {
 617:             min: 100,
 618:             max: 250,
 619:             unit: "µmol/m²/s",
 620:           },
 621:           photoperiod: {
 622:             hours: 14,
 623:             maxHours: 16,
 624:           },
 625:           dli: {
 626:             min: 5,
 627:             max: 14.4,
 628:             unit: "mol/m²/day",
 629:           },
 630:           notes: ["Keep soil consistently moist during germination period"],
 631:         },
 632:         seedling: {
 633:           ppfd: {
 634:             min: 200,
 635:             max: 400,
 636:             unit: "µmol/m²/s",
 637:           },
 638:           photoperiod: {
 639:             hours: 14,
 640:             maxHours: 16,
 641:           },
 642:           dli: {
 643:             min: 11.5,
 644:             max: 23,
 645:             unit: "mol/m²/day",
 646:           },
 647:           notes: [
 648:             "First true leaves and tendrils developing - watch for climbing behavior",
 649:           ],
 650:         },
 651:         vegetativeVining: {
 652:           ppfd: {
 653:             min: 400,
 654:             max: 600,
 655:             unit: "µmol/m²/s",
 656:           },
 657:           photoperiod: {
 658:             hours: 14,
 659:             maxHours: 16,
 660:           },
 661:           dli: {
 662:             min: 23,
 663:             max: 34.6,
 664:             unit: "mol/m²/day",
 665:           },
 666:           notes: ["Rapid vine growth - ensure trellis support is adequate"],
 667:         },
 668:         flowerBudFormation: {
 669:           ppfd: {
 670:             min: 500,
 671:             max: 700,
 672:             unit: "µmol/m²/s",
 673:           },
 674:           photoperiod: {
 675:             hours: 12,
 676:             maxHours: 14,
 677:           },
 678:           dli: {
 679:             min: 21.6,
 680:             max: 35.3,
 681:             unit: "mol/m²/day",
 682:           },
 683:           notes: [
 684:             "Slight photoperiod reduction can encourage flowering",
 685:             "Monitor for first flower buds around days 40-50",
 686:           ],
 687:         },
 688:         podSetMaturation: {
 689:           ppfd: {
 690:             min: 500,
 691:             max: 700,
 692:             unit: "µmol/m²/s",
 693:           },
 694:           photoperiod: {
 695:             hours: 12,
 696:           },
 697:           dli: {
 698:             min: 21.6,
 699:             max: 30.2,
 700:             unit: "mol/m²/day",
 701:           },
 702:           notes: [
 703:             "Harvest pods when plump but before peas become starchy",
 704:             "Regular harvesting encourages continued pod production",
 705:           ],
 706:         },
 707:       },
 708:       watering: {
 709:         germinationEmergence: {
 710:           trigger: {
 711:             moistureLevel: "3-4",
 712:           },
 713:           target: {
 714:             moistureLevel: "7-8",
 715:           },
 716:           volume: {
 717:             amount: "16-24 oz (470-710 mL)",
 718:             frequency: "3x/week",
 719:           },
 720:           notes: [
 721:             "Keep consistently moist but not waterlogged during germination",
 722:           ],
 723:         },
 724:         seedling: {
 725:           trigger: {
 726:             moistureLevel: "3-4",
 727:           },
 728:           target: {
 729:             moistureLevel: "7-8",
 730:           },
 731:           volume: {
 732:             amount: "20-32 oz (590-945 mL)",
 733:             frequency: "3x/week",
 734:           },
 735:           notes: ["Establishing root system requires consistent moisture"],
 736:         },
 737:         vegetativeVining: {
 738:           trigger: {
 739:             moistureLevel: "3-4",
 740:           },
 741:           target: {
 742:             moistureLevel: "7-8",
 743:           },
 744:           volume: {
 745:             amount: "32-42 oz (945-1240 mL)",
 746:             frequency: "3-4x/week",
 747:           },
 748:           notes: ["Rapid vine growth increases water demands significantly"],
 749:         },
 750:         flowerBudFormation: {
 751:           trigger: {
 752:             moistureLevel: "3-4",
 753:           },
 754:           target: {
 755:             moistureLevel: "7-8",
 756:           },
 757:           volume: {
 758:             amount: "40-48 oz (1180-1419 mL)",
 759:             frequency: "4x/week",
 760:           },
 761:           notes: [
 762:             "Critical period - water stress reduces flower and pod formation",
 763:           ],
 764:         },
 765:         podSetMaturation: {
 766:           trigger: {
 767:             moistureLevel: "3-4",
 768:           },
 769:           target: {
 770:             moistureLevel: "7-8",
 771:           },
 772:           volume: {
 773:             amount: "40-54 oz (1180-1600 mL)",
 774:             frequency: "3-4x/week",
 775:           },
 776:           notes: ["Pod filling requires substantial water uptake"],
 777:         },
 778:       },
 779:       fertilization: {
 780:         germinationEmergence: {
 781:           schedule: [
 782:             {
 783:               taskName: "Apply Rhizobium inoculant",
 784:               details: {
 785:                 product: "Rhizobium leguminosarum inoculant",
 786:                 method: "soil-drench",
 787:               },
 788:               startDays: 0,
 789:               frequencyDays: 0,
 790:               repeatCount: 1,
 791:             },
 792:           ],
 793:           notes: [
 794:             "Inoculant enables nitrogen fixation - critical for pea nutrition.",
 795:             "Soil pre-amended with gypsum, bone meal, and kelp meal.",
 796:           ],
 797:         },
 798:         seedling: {
 799:           schedule: [
 800:             {
 801:               taskName: "Light container feed",
 802:               details: {
 803:                 product: "5-10-10 fertilizer (light dose)",
 804:               },
 805:               startDays: 14,
 806:               frequencyDays: 0,
 807:               repeatCount: 1,
 808:             },
 809:           ],
 810:           notes: ["Minimal nitrogen needed - peas fix their own nitrogen."],
 811:         },
 812:         vegetativeVining: {
 813:           schedule: [
 814:             {
 815:               taskName: "Optional light feeding",
 816:               details: {
 817:                 product: "Fish emulsion/fish+kelp (optional)",
 818:               },
 819:               startDays: 21,
 820:               frequencyDays: 10,
 821:               repeatCount: 2,
 822:             },
 823:             {
 824:               taskName: "Worm casting top-dress",
 825:               details: {
 826:                 product: "Worm casting",
 827:                 method: "top-dress",
 828:               },
 829:               startDays: 30,
 830:               frequencyDays: 30,
 831:               repeatCount: 1,
 832:             },
 833:           ],
 834:         },
 835:         flowerBudFormation: {
 836:           schedule: [
 837:             {
 838:               taskName: "Boost phosphorus with Bone Meal",
 839:               details: {
 840:                 product: "Bone meal",
 841:                 method: "top-dress",
 842:               },
 843:               startDays: 42,
 844:               frequencyDays: 0,
 845:               repeatCount: 1,
 846:             },
 847:             {
 848:               taskName: "Apply Kelp/sea-mineral",
 849:               details: {
 850:                 product: "Kelp/sea-mineral (if continuing liquid feed)",
 851:               },
 852:               startDays: 49,
 853:               frequencyDays: 0,
 854:               repeatCount: 1,
 855:             },
 856:           ],
 857:           notes: [
 858:             "Reduce nitrogen completely.",
 859:             "Boost phosphorus and potassium for flower and pod development.",
 860:           ],
 861:         },
 862:         podSetMaturation: {
 863:           schedule: [],
 864:           notes: [
 865:             "Minimal feeding during harvest - focus on consistent watering.",
 866:           ],
 867:         },
 868:       },
 869:       environment: {
 870:         pH: {
 871:           min: 6.2,
 872:           max: 6.8,
 873:           optimal: 6.5,
 874:         },
 875:       },
 876:       soilMixture: {
 877:         components: {
 878:           "coco coir": 35,
 879:           perlite: 20,
 880:           vermiculite: 20,
 881:           compost: 15,
 882:           "worm castings": 5,
 883:           biochar: 5,
 884:         },
 885:         amendments: {
 886:           gypsum: "½ cup per 15-gal bag",
 887:           "bone meal": "2-3 Tbsp forked into top 4-6 inches",
 888:           "kelp meal": "2 Tbsp into top 4-6 inches",
 889:           "basalt rock dust (optional)": "¼ cup for additional micronutrients",
 890:         },
 891:       },
 892:       container: {
 893:         minSize: "≥2-3 gallons (15-gallon preferred)",
 894:         depth: "12 inches minimum",
 895:       },
 896:       succession: {
 897:         interval: 14,
 898:         method: "continuous",
 899:         harvestMethod: "selective",
 900:         productiveWeeks: 6,
 901:         notes: [
 902:           "Succession every 2-3 weeks for continuous harvest",
 903:           "Each planting productive for 6-8 weeks once podding begins",
 904:         ],
 905:       },
 906:       specialRequirements: [
 907:         "Rhizobium inoculant essential for nitrogen fixation",
 908:         "A-frame trellis or netting required for climbing support",
 909:         "Self-pollinating but benefits from gentle daily shaking of flowers",
 910:         "Harvest pods when full but before peas become starchy",
 911:         "Cool-season crop - performs best in moderate temperatures",
 912:         "Succession planting every 2-3 weeks extends harvest window",
 913:       ],
 914:     },
 915:   },
 916:   {
 917:     name: "Albion Strawberries",
 918:     category: "berries",
 919:     isEverbearing: true,
 920:     productiveLifespan: 730,
 921:     growthTimeline: {
 922:       germination: 14,
 923:       establishment: 14,
 924:       vegetative: 28,
 925:       flowering: 56,
 926:       fruiting: 91,
 927:       ongoingProduction: 98,
 928:     },
 929:     protocols: {
 930:       lighting: {
 931:         establishment: {
 932:           ppfd: {
 933:             min: 200,
 934:             max: 200,
 935:             optimal: 200,
 936:             unit: "µmol/m²/s",
 937:           },
 938:           photoperiod: {
 939:             hours: 14,
 940:             maxHours: 16,
 941:             constraint: "day-neutral varieties require consistent photoperiod",
 942:           },
 943:           dli: {
 944:             min: 10.1,
 945:             max: 11.5,
 946:             unit: "mol/m²/day",
 947:           },
 948:           notes: [
 949:             "Remove flowers for the first 4-6 weeks to encourage strong plant establishment",
 950:             "Focus energy on root and crown development",
 951:           ],
 952:         },
 953:         vegetative: {
 954:           ppfd: {
 955:             min: 300,
 956:             max: 400,
 957:             unit: "µmol/m²/s",
 958:           },
 959:           photoperiod: {
 960:             hours: 16,
 961:             constraint:
 962:               "consistent 16h photoperiod is critical for continuous production",
 963:           },
 964:           dli: {
 965:             min: 17.3,
 966:             max: 23,
 967:             unit: "mol/m²/day",
 968:           },
 969:           notes: [
 970:             "Remove ALL runners as soon as they are spotted - check weekly",
 971:             "Energy must go to fruit production, not vegetative reproduction",
 972:           ],
 973:         },
 974:         flowering: {
 975:           ppfd: {
 976:             min: 350,
 977:             max: 400,
 978:             unit: "µmol/m²/s",
 979:           },
 980:           photoperiod: {
 981:             hours: 16,
 982:             constraint:
 983:               "critical for continuous flowering in day-neutral types",
 984:           },
 985:           dli: {
 986:             min: 20.2,
 987:             max: 23,
 988:             unit: "mol/m²/day",
 989:           },
 990:           notes: [
 991:             "Hand pollination is critical indoors",
 992:             "Use a small brush to transfer pollen every 1-2 days",
 993:           ],
 994:         },
 995:         fruiting: {
 996:           ppfd: {
 997:             min: 450,
 998:             max: 500,
 999:             unit: "µmol/m²/s",
1000:           },
1001:           photoperiod: {
1002:             hours: 16,
1003:           },
1004:           dli: {
1005:             min: 25.9,
1006:             max: 28.8,
1007:             unit: "mol/m²/day",
1008:           },
1009:           notes: [
1010:             "Higher light intensity supports fruit development and sugar accumulation",
1011:           ],
1012:         },
1013:         ongoingProduction: {
1014:           ppfd: {
1015:             min: 350,
1016:             max: 400,
1017:             unit: "µmol/m²/s",
1018:           },
1019:           photoperiod: {
1020:             hours: 16,
1021:           },
1022:           dli: {
1023:             min: 20.2,
1024:             max: 23,
1025:             unit: "mol/m²/day",
1026:           },
1027:           notes: [
1028:             "Monthly flush with pH-adjusted plain water until 20-30% runoff",
1029:             "Prevents salt buildup from intensive feeding",
1030:           ],
1031:         },
1032:       },
1033:       watering: {
1034:         establishment: {
1035:           trigger: {
1036:             moistureLevel: "3-4",
1037:           },
1038:           target: {
1039:             moistureLevel: "6-7",
1040:           },
1041:           volume: {
1042:             amount:
1043:               "5-gal: 20-30 oz (590-890 mL), 2-gal hanging: 8-10 oz (235-300 mL)",
1044:             frequency: "3-4x/week",
1045:             perPlant: true,
1046:           },
1047:           notes: [
1048:             "Remove flowers for first 4-6 weeks to encourage establishment",
1049:           ],
1050:         },
1051:         vegetative: {
1052:           trigger: {
1053:             moistureLevel: "3-4",
1054:           },
1055:           target: {
1056:             moistureLevel: "6-7",
1057:           },
1058:           volume: {
1059:             amount:
1060:               "5-gal: 25-35 oz (740-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1061:             frequency: "3-5x/week",
1062:             perPlant: true,
1063:           },
1064:           notes: [
1065:             "Remove ALL runners as soon as spotted - weekly checks essential",
1066:           ],
1067:         },
1068:         flowering: {
1069:           trigger: {
1070:             moistureLevel: "3-4",
1071:           },
1072:           target: {
1073:             moistureLevel: "6-7",
1074:           },
1075:           volume: {
1076:             amount:
1077:               "5-gal: 30-35 oz (890-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1078:             frequency: "4-5x/week",
1079:             perPlant: true,
1080:           },
1081:           notes: [
1082:             "Consistent moisture critical during flower and early fruit development",
1083:           ],
1084:         },
1085:         fruiting: {
1086:           trigger: {
1087:             moistureLevel: "3-4",
1088:           },
1089:           target: {
1090:             moistureLevel: "6-7",
1091:           },
1092:           volume: {
1093:             amount:
1094:               "5-gal: 30-35 oz (890-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1095:             frequency: "4-5x/week",
1096:             perPlant: true,
1097:           },
1098:         },
1099:         ongoingProduction: {
1100:           trigger: {
1101:             moistureLevel: "3-4",
1102:           },
1103:           target: {
1104:             moistureLevel: "6-7",
1105:           },
1106:           volume: {
1107:             amount:
1108:               "5-gal: 25-35 oz (740-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1109:             frequency: "3-5x/week",
1110:             perPlant: true,
1111:           },
1112:           notes: [
1113:             "Monthly flush: irrigate with pH-adjusted plain water until 20-30% runoff",
1114:           ],
1115:         },
1116:       },
1117:       fertilization: {
1118:         establishment: {
1119:           schedule: [
1120:             {
1121:               taskName: "Mix in Bone Meal at planting",
1122:               details: {
1123:                 product: "Bone meal",
1124:                 amount: "1 Tbsp/5gal",
1125:                 method: "mix-in-soil",
1126:               },
1127:               startDays: 0,
1128:               frequencyDays: 0,
1129:               repeatCount: 1,
1130:             },
1131:             {
1132:               taskName: "Apply Fish + Seaweed",
1133:               details: {
1134:                 product: "Neptune's Harvest Fish + Seaweed",
1135:                 dilution: "½ strength, 0.5 Tbsp/gal",
1136:               },
1137:               startDays: 14,
1138:               frequencyDays: 0,
1139:               repeatCount: 1,
1140:             },
1141:           ],
1142:         },
1143:         vegetative: {
1144:           schedule: [
1145:             {
1146:               taskName: "Apply Neptune's Harvest (½ strength)",
1147:               details: {
1148:                 product: "Neptune's Harvest",
1149:                 dilution: "½ strength",
1150:               },
1151:               startDays: 28,
1152:               frequencyDays: 14,
1153:               repeatCount: 1,
1154:             },
1155:             {
1156:               taskName: "Apply Neptune's Harvest (full strength)",
1157:               details: {
1158:                 product: "Neptune's Harvest",
1159:                 dilution: "full strength, 1 Tbsp/gal",
1160:               },
1161:               startDays: 35,
1162:               frequencyDays: 14,
1163:               repeatCount: 1,
1164:             },
1165:           ],
1166:         },
1167:         flowering: {
1168:           schedule: [
1169:             {
1170:               taskName: "Top-dress with Espoma Berry-Tone",
1171:               details: {
1172:                 product: "Espoma Berry-Tone",
1173:                 amount: "2 Tbsp/bag",
1174:                 method: "top-dress",
1175:               },
1176:               startDays: 56,
1177:               frequencyDays: 0,
1178:               repeatCount: 1,
1179:             },
1180:             {
1181:               taskName: "Apply Kelp/Sea-Mineral",
1182:               details: {
1183:                 product: "Kelp/sea-mineral",
1184:                 dilution: "1 Tbsp/gal",
1185:               },
1186:               startDays: 63,
1187:               frequencyDays: 14,
1188:               repeatCount: 2,
1189:             },
1190:             {
1191:               taskName: "Top-dress with Bone Meal",
1192:               details: {
1193:                 product: "Bone meal",
1194:                 amount: "½ Tbsp/bag",
1195:                 method: "top-dress",
1196:               },
1197:               startDays: 70,
1198:               frequencyDays: 0,
1199:               repeatCount: 1,
1200:             },
1201:           ],
1202:         },
1203:         fruiting: {
1204:           schedule: [
1205:             {
1206:               taskName: "Apply Kelp/Sea-Mineral",
1207:               details: {
1208:                 product: "Kelp/sea-mineral",
1209:                 dilution: "1 Tbsp/gal",
1210:               },
1211:               startDays: 91,
1212:               frequencyDays: 14,
1213:               repeatCount: 2,
1214:             },
1215:             {
1216:               taskName: "Apply High-K Supplement",
1217:               details: {
1218:                 product: "Fish & Seaweed + high-K supplement",
1219:               },
1220:               startDays: 98,
1221:               frequencyDays: 14,
1222:               repeatCount: 3,
1223:             },
1224:           ],
1225:         },
1226:         ongoingProduction: {
1227:           schedule: [
1228:             {
1229:               taskName: "Apply Kelp",
1230:               details: {
1231:                 product: "Kelp",
1232:                 dilution: "1 Tbsp/gal",
1233:               },
1234:               startDays: 98,
1235:               frequencyDays: 28,
1236:               repeatCount: 26,
1237:             },
1238:             {
1239:               taskName: "Top-dress with Berry-Tone",
1240:               details: {
1241:                 product: "Berry-Tone",
1242:                 amount: "1 Tbsp/bag",
1243:                 method: "top-dress",
1244:               },
1245:               startDays: 112,
1246:               frequencyDays: 28,
1247:               repeatCount: 25,
1248:             },
1249:           ],
1250:         },
1251:       },
1252:       environment: {
1253:         pH: {
1254:           min: 5.8,
1255:           max: 6.5,
1256:           optimal: 6.2,
1257:         },
1258:       },
1259:       soilMixture: {
1260:         components: {
1261:           "coco coir": 35,
1262:           perlite: 25,
1263:           compost: 20,
1264:           "worm castings": 15,
1265:           vermiculite: 5,
1266:         },
1267:         amendments: {
1268:           "bone meal": "1 Tbsp per gallon of mix at planting",
1269:           "rock dust": "¼ cup per 5-gal bag",
1270:         },
1271:       },
1272:       specialRequirements: [
1273:         "Day-neutral varieties require consistent 16-hour photoperiod for continuous production",
1274:         "Hand pollination essential indoors - use small brush every 1-2 days during flowering",
1275:         "Remove ALL runners immediately to focus energy on fruit production",
1276:         "Remove flowers for first 4-6 weeks to establish strong root system",
1277:         "Monthly salt flush prevents nutrient lockout from intensive feeding",
1278:         "Replace plants every 2 years when productivity declines",
1279:       ],
1280:     },
1281:   },
1282:   {
1283:     name: "Caroline Raspberries",
1284:     category: "berries",
1285:     isEverbearing: true,
1286:     productiveLifespan: 1095,
1287:     growthTimeline: {
1288:       caneEstablishment: 0,
1289:       vegetative: 21,
1290:       floweringFruiting: 63,
1291:       ongoing: 120,
1292:     },
1293:     protocols: {
1294:       lighting: {
1295:         caneEstablishment: {
1296:           ppfd: {
1297:             min: 200,
1298:             max: 300,
1299:             unit: "µmol/m²/s",
1300:           },
1301:           photoperiod: {
1302:             hours: 16,
1303:             maxHours: 18,
1304:           },
1305:           dli: {
1306:             min: 11.5,
1307:             max: 19.4,
1308:             unit: "mol/m²/day",
1309:           },
1310:           notes: [
1311:             "Focus on establishing strong root system and cane structure",
1312:           ],
1313:         },
1314:         vegetative: {
1315:           ppfd: {
1316:             min: 300,
1317:             max: 400,
1318:             unit: "µmol/m²/s",
1319:           },
1320:           photoperiod: {
1321:             hours: 16,
1322:           },
1323:           dli: {
1324:             min: 17.3,
1325:             max: 23,
1326:             unit: "mol/m²/day",
1327:           },
1328:         },
1329:         floweringFruiting: {
1330:           ppfd: {
1331:             min: 400,
1332:             max: 600,
1333:             unit: "µmol/m²/s",
1334:           },
1335:           photoperiod: {
1336:             hours: 14,
1337:             maxHours: 16,
1338:           },
1339:           dli: {
1340:             min: 22.7,
1341:             max: 34.6,
1342:             unit: "mol/m²/day",
1343:           },
1344:           notes: [
1345:             "Higher light intensity supports fruit development and sugar content",
1346:           ],
1347:         },
1348:         ongoing: {
1349:           ppfd: {
1350:             min: 350,
1351:             max: 500,
1352:             unit: "µmol/m²/s",
1353:           },
1354:           photoperiod: {
1355:             hours: 16,
1356:           },
1357:           dli: {
1358:             min: 20.2,
1359:             max: 28.8,
1360:             unit: "mol/m²/day",
1361:           },
1362:         },
1363:       },
1364:       watering: {
1365:         caneEstablishment: {
1366:           trigger: {
1367:             moistureLevel: "3-4",
1368:           },
1369:           target: {
1370:             moistureLevel: "6-7",
1371:           },
1372:           volume: {
1373:             amount: "monitor with soil moisture meter",
1374:             frequency: "as needed",
1375:           },
1376:           notes: ["Always water until slight drainage occurs"],
1377:         },
1378:         vegetative: {
1379:           trigger: {
1380:             moistureLevel: "3-4",
1381:           },
1382:           target: {
1383:             moistureLevel: "6-7",
1384:           },
1385:           volume: {
1386:             amount: "monitor with soil moisture meter",
1387:             frequency: "as needed",
1388:           },
1389:         },
1390:         floweringFruiting: {
1391:           trigger: {
1392:             moistureLevel: "3-4",
1393:           },
1394:           target: {
1395:             moistureLevel: "7-8",
1396:           },
1397:           volume: {
1398:             amount: "monitor with soil moisture meter",
1399:             frequency: "as needed",
1400:           },
1401:           notes: ["Higher moisture during fruit development"],
1402:         },
1403:         ongoing: {
1404:           trigger: {
1405:             moistureLevel: "3-4",
1406:           },
1407:           target: {
1408:             moistureLevel: "6-7",
1409:           },
1410:           volume: {
1411:             amount: "monitor with soil moisture meter",
1412:             frequency: "as needed",
1413:           },
1414:         },
1415:       },
1416:       fertilization: {
1417:         caneEstablishment: {
1418:           schedule: [
1419:             {
1420:               taskName: "Top-dress with Compost",
1421:               details: {
1422:                 product: "Compost",
1423:                 amount: "1-2 inches",
1424:                 method: "top-dress",
1425:               },
1426:               startDays: 0,
1427:               frequencyDays: 0,
1428:               repeatCount: 1,
1429:             },
1430:           ],
1431:         },
1432:         vegetative: {
1433:           schedule: [
1434:             {
1435:               taskName: "Apply Fish Emulsion",
1436:               details: {
1437:                 product: "Fish Emulsion",
1438:                 dilution: "1-2 tbsp/gallon",
1439:               },
1440:               startDays: 21,
1441:               frequencyDays: 21,
1442:               repeatCount: 2,
1443:             },
1444:           ],
1445:         },
1446:         floweringFruiting: {
1447:           schedule: [
1448:             {
1449:               taskName: "Apply Liquid Kelp & Balanced Fertilizer",
1450:               details: {
1451:                 product: "Liquid Kelp + balanced organic fertilizer",
1452:               },
1453:               startDays: 63,
1454:               frequencyDays: 21,
1455:               repeatCount: 2,
1456:             },
1457:             {
1458:               taskName: "Apply K-Rich Formula",
1459:               details: {
1460:                 product: "Kelp Extract + K-rich formula",
1461:               },
1462:               startDays: 70,
1463:               frequencyDays: 10,
1464:               repeatCount: 5,
1465:             },
1466:           ],
1467:         },
1468:         ongoing: {
1469:           schedule: [
1470:             {
1471:               taskName: "Apply Compost Tea",
1472:               details: {
1473:                 product: "Aerobically brewed compost tea",
1474:               },
1475:               startDays: 120,
1476:               frequencyDays: 30,
1477:               repeatCount: 12,
1478:             },
1479:           ],
1480:         },
1481:       },
1482:       environment: {
1483:         pH: {
1484:           min: 5.8,
1485:           max: 6.5,
1486:           optimal: 6,
1487:         },
1488:       },
1489:       soilMixture: {
1490:         components: {
1491:           "compost (equal parts worm castings and composted manure)": 50,
1492:           "peat moss": 20,
1493:           perlite: 20,
1494:           "pine bark fines": 10,
1495:         },
1496:         amendments: {
1497:           "bone meal": "2.7 tbsp per 10-gallon container",
1498:           "dried blood meal": "1.3 tbsp per 10-gallon container",
1499:         },
1500:       },
1501:       container: {
1502:         minSize: "2 × 10-gallon containers per plant",
1503:         depth: "12 inches minimum",
1504:       },
1505:       specialRequirements: [
1506:         "Primocane-fruiting variety produces on current year's canes",
1507:         "Requires strong trellis system for support",
1508:         "Prune spent canes after harvest to encourage new growth",
1509:         "Benefits from good air circulation to prevent fungal issues",
1510:         "Hand pollination by gently shaking plants during flowering",
1511:       ],
1512:     },
1513:   },
1514:   {
1515:     name: "Little Finger Carrots",
1516:     category: "root-vegetables",
1517:     isEverbearing: false,
1518:     growthTimeline: {
1519:       germination: 14,
1520:       seedling: 14,
1521:       vegetative: 28,
1522:       rootDevelopment: 42,
1523:     },
1524:     protocols: {
1525:       lighting: {
1526:         germination: {
1527:           ppfd: {
1528:             min: 100,
1529:             max: 150,
1530:             unit: "µmol/m²/s",
1531:           },
1532:           photoperiod: {
1533:             hours: 12,
1534:             maxHours: 12,
1535:             constraint: "strict maximum to prevent bolting",
1536:           },
1537:           dli: {
1538:             min: 4.3,
1539:             max: 6.5,
1540:             unit: "mol/m²/day",
1541:           },
1542:           notes: [
1543:             "Maintain consistent moisture",
1544:             "Critical photoperiod control",
1545:           ],
1546:         },
1547:         seedling: {
1548:           ppfd: {
1549:             min: 150,
1550:             max: 300,
1551:             unit: "µmol/m²/s",
1552:           },
1553:           photoperiod: {
1554:             hours: 12,
1555:             maxHours: 12,
1556:             constraint: "photoperiods >12h may trigger premature bolting",
1557:           },
1558:           dli: {
1559:             min: 6.5,
1560:             max: 13,
1561:             unit: "mol/m²/day",
1562:           },
1563:           notes: ["Critical photoperiod - max 12 hours"],
1564:         },
1565:         vegetative: {
1566:           ppfd: {
1567:             min: 200,
1568:             max: 200,
1569:             optimal: 200,
1570:             unit: "µmol/m²/s",
1571:           },
1572:           photoperiod: {
1573:             hours: 12,
1574:             maxHours: 12,
1575:             constraint:
1576:               "photoperiods >12h may trigger premature bolting, especially if warm",
1577:           },
1578:           dli: {
1579:             min: 8.6,
1580:             max: 8.6,
1581:             unit: "mol/m²/day",
1582:           },
1583:           notes: ["Strict 12-hour maximum", "Especially critical if warm"],
1584:         },
1585:         rootDevelopment: {
1586:           ppfd: {
1587:             min: 300,
1588:             max: 600,
1589:             unit: "µmol/m²/s",
1590:           },
1591:           photoperiod: {
1592:             hours: 12,
1593:             maxHours: 12,
1594:             constraint: "maintain strict limit",
1595:           },
1596:           dli: {
1597:             min: 13,
1598:             max: 25.9,
1599:             unit: "mol/m²/day",
1600:           },
1601:           notes: [
1602:             "Consistent moisture prevents splitting",
1603:             "21-day succession",
1604:           ],
1605:         },
1606:       },
1607:       watering: {
1608:         germination: {
1609:           trigger: {
1610:             moistureLevel: "surface dry",
1611:             description: "Keep surface moist",
1612:           },
1613:           target: {
1614:             moistureLevel: "6-7",
1615:             description: "top inch",
1616:           },
1617:           volume: {
1618:             amount: "8-12 oz",
1619:             frequency: "daily",
1620:           },
1621:           notes: ["Maintain consistent moisture"],
1622:         },
1623:         seedling: {
1624:           trigger: {
1625:             moistureLevel: "4-5",
1626:           },
1627:           target: {
1628:             moistureLevel: "6-7",
1629:           },
1630:           volume: {
1631:             amount: "16-24 oz",
1632:             frequency: "every 2-3 days",
1633:           },
1634:         },
1635:         vegetative: {
1636:           trigger: {
1637:             moistureLevel: "3-4",
1638:           },
1639:           target: {
1640:             moistureLevel: "6-7",
1641:           },
1642:           volume: {
1643:             amount: "24-32 oz",
1644:             frequency: "every 2-4 days",
1645:           },
1646:           notes: [
1647:             "Photoperiods >12h may trigger premature bolting, especially if warm",
1648:           ],
1649:         },
1650:         rootDevelopment: {
1651:           trigger: {
1652:             moistureLevel: "3-4",
1653:           },
1654:           target: {
1655:             moistureLevel: "6-7",
1656:           },
1657:           volume: {
1658:             amount: "32-40 oz",
1659:             frequency: "every 3-4 days",
1660:           },
1661:           notes: [
1662:             "Consistent moisture prevents splitting",
1663:             "21-day succession",
1664:           ],
1665:         },
1666:       },
1667:       fertilization: {
1668:         seedling: {
1669:           schedule: [
1670:             {
1671:               taskName: "Apply Worm Casting Tea",
1672:               details: {
1673:                 product: "Worm Casting Tea",
1674:                 dilution: "1 part castings:10 parts water",
1675:               },
1676:               startDays: 21,
1677:               frequencyDays: 10,
1678:               repeatCount: 2,
1679:             },
1680:           ],
1681:         },
1682:         vegetative: {
1683:           schedule: [
1684:             {
1685:               taskName: "Apply Lower-N Fish Emulsion",
1686:               details: {
1687:                 product: "Lower-N Fish Emulsion",
1688:                 dilution: "1 Tbsp/gal",
1689:               },
1690:               startDays: 35,
1691:               frequencyDays: 21,
1692:               repeatCount: 2,
1693:             },
1694:           ],
1695:         },
1696:         rootDevelopment: {
1697:           schedule: [],
1698:         },
1699:       },
1700:       environment: {
1701:         pH: {
1702:           min: 6,
1703:           max: 6.8,
1704:           optimal: 6.5,
1705:         },
1706:       },
1707:       soilMixture: {
1708:         components: {
1709:           "coco coir": 40,
1710:           perlite: 30,
1711:           vermiculite: 25,
1712:           "coarse sand (2-4mm)": 5,
1713:         },
1714:       },
1715:       container: {
1716:         depth: "12 inches minimum",
1717:         staging: {
1718:           final:
1719:             "Direct sow only - avoid transplanting to prevent root deformities",
1720:         },
1721:       },
1722:       succession: {
1723:         interval: 21,
1724:         method: "zoned",
1725:         harvestMethod: "single-harvest",
1726:         notes: ["Divide bed into zones", "Sow new zone every 3 weeks"],
1727:       },
1728:       specialRequirements: [
1729:         "Strict 12-hour photoperiod maximum",
1730:         "Direct sow only - no transplanting",
1731:         "Stone-free soil essential for straight roots",
1732:         "Fresh manure causes forking - avoid",
1733:       ],
1734:     },
1735:   },
1736:   {
1737:     name: "Detroit Dark Red Beets",
1738:     category: "root-vegetables",
1739:     isEverbearing: false,
1740:     growthTimeline: {
1741:       germination: 7,
1742:       seedling: 14,
1743:       vegetative: 21,
1744:       rootDevelopment: 42,
1745:       maturation: 60,
1746:     },
1747:     protocols: {
1748:       lighting: {
1749:         germination: {
1750:           ppfd: { min: 100, max: 200, unit: "µmol/m²/s" },
1751:           photoperiod: { hours: 12, maxHours: 14 },
1752:           dli: { min: 4.3, max: 10.1, unit: "mol/m²/day" },
1753:           notes: ["Ideal temp: 70-85°F for germination"],
1754:         },
1755:         vegetative: {
1756:           ppfd: { min: 250, max: 400, unit: "µmol/m²/s" },
1757:           photoperiod: { hours: 12, maxHours: 14 },
1758:           dli: { min: 10.8, max: 20.2, unit: "mol/m²/day" },
1759:           notes: ["Temperatures >75°F can cause bolting"],
1760:         },
1761:         rootDevelopment: {
1762:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
1763:           photoperiod: { hours: 12, maxHours: 14 },
1764:           dli: { min: 17.3, max: 30.2, unit: "mol/m²/day" },
1765:           notes: ["Maintain consistent moisture"],
1766:         },
1767:         maturation: {
1768:           ppfd: { min: 300, max: 450, unit: "µmol/m²/s" },
1769:           photoperiod: { hours: 12, maxHours: 14 },
1770:           dli: { min: 13, max: 22.7, unit: "mol/m²/day" },
1771:           notes: ["21-day succession"],
1772:         },
1773:       },
1774:       watering: {
1775:         germination: {
1776:           trigger: { moistureLevel: "surface dry" },
1777:           target: { moistureLevel: "7-8" },
1778:           volume: { amount: "8-12 oz per session", frequency: "daily misting" },
1779:           notes: ["Ideal temp: 70-85°F (21-29°C) for germination"],
1780:         },
1781:         vegetative: {
1782:           trigger: { moistureLevel: "4-5 (weeks 1-3), 3-4 (weeks 3-6)" },
1783:           target: { moistureLevel: "7-8 (weeks 1-3), 6-7 (weeks 3-6)" },
1784:           volume: {
1785:             amount: "16-20 oz (weeks 1-3), 20-24 oz (weeks 3-6)",
1786:             frequency: "every 2-3 days (weeks 1-3), every 3-4 days (weeks 3-6)",
1787:           },
1788:           notes: ["Temperatures >75°F (24°C) can cause bolting"],
1789:         },
1790:         rootDevelopment: {
1791:           trigger: { moistureLevel: "3-4" },
1792:           target: { moistureLevel: "6-7" },
1793:           volume: { amount: "24-28 oz", frequency: "every 3-4 days" },
1794:           notes: ["Maintain consistent moisture"],
1795:         },
1796:         maturation: {
1797:           trigger: { moistureLevel: "2-3" },
1798:           target: { moistureLevel: "5-6" },
1799:           volume: { amount: "20-24 oz", frequency: "every 4-5 days" },
1800:           notes: ["21-day succession"],
1801:         },
1802:       },
1803:       fertilization: {
1804:         vegetative: {
1805:           schedule: [
1806:             {
1807:               taskName: "Apply diluted Fish/Kelp Tea",
1808:               details: { product: "Fish/Kelp Tea", dilution: "¼ strength" },
1809:               startDays: 14,
1810:               frequencyDays: 0,
1811:               repeatCount: 1,
1812:             },
1813:             {
1814:               taskName: "Top-dress with Worm Castings & Bone Meal",
1815:               details: {
1816:                 product: "Worm Castings & Bone Meal",
1817:                 amount: "1 tbsp each",
1818:                 method: "top-dress",
1819:               },
1820:               startDays: 21,
1821:               frequencyDays: 0,
1822:               repeatCount: 1,
1823:             },
1824:           ],
1825:         },
1826:         rootDevelopment: {
1827:           schedule: [
1828:             {
1829:               taskName: "Apply Liquid Kelp",
1830:               details: {
1831:                 product: "Liquid kelp or fish + seaweed",
1832:                 dilution: "1 tbsp/gal",
1833:               },
1834:               startDays: 42,
1835:               frequencyDays: 14,
1836:               repeatCount: 2,
1837:             },
1838:           ],
1839:         },
1840:       },
1841:       environment: {
1842:         temperature: { min: 65, max: 75, optimal: 70, unit: "F" },
1843:         pH: { min: 6.5, max: 7, optimal: 6.8 },
1844:       },
1845:       soilMixture: {
1846:         components: {
1847:           "coco coir": 40,
1848:           perlite: 30,
1849:           vermiculite: 25,
1850:           "compost (or worm castings)": 5,
1851:         },
1852:         amendments: {
1853:           "compost or worm castings": "2 tbsp per gallon",
1854:           "Epsom salts": "1 tsp per gallon",
1855:           "bone meal": "1 tbsp per gallon",
1856:         },
1857:       },
1858:       container: { depth: "10 inches minimum" },
1859:       succession: {
1860:         interval: 21,
1861:         method: "zoned",
1862:         harvestMethod: "selective",
1863:         notes: ["Can harvest greens at 30-40 days", "Roots ready 50-70 days"],
1864:       },
1865:       specialRequirements: [
1866:         "Sensitive to boron deficiency",
1867:         "Avoid high nitrogen after seedling stage",
1868:         "Can be direct sown or carefully transplanted",
1869:       ],
1870:     },
1871:   },
1872:   {
1873:     name: "Beauregard Sweet Potatoes",
1874:     category: "root-vegetables",
1875:     isEverbearing: false,
1876:     growthTimeline: {
1877:       slipProduction: 14,
1878:       vegetativeGrowth: 21,
1879:       tuberDevelopment: 56,
1880:       maturation: 100,
1881:     },
1882:     protocols: {
1883:       lighting: {
1884:         slipProduction: {
1885:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1886:           photoperiod: { hours: 14, maxHours: 16 },
1887:           dli: { min: 10.1, max: 11.5, unit: "mol/m²/day" },
1888:           notes: ["High humidity 85-90%", "Temp: 75-80°F"],
1889:         },
1890:         vegetativeGrowth: {
1891:           ppfd: { min: 350, max: 600, unit: "µmol/m²/s" },
1892:           photoperiod: { hours: 14, maxHours: 16 },
1893:           dli: { min: 17.6, max: 34.6, unit: "mol/m²/day" },
1894:           notes: ["Vigorous vine growth phase"],
1895:         },
1896:         tuberDevelopment: {
1897:           ppfd: { min: 600, max: 800, unit: "µmol/m²/s" },
1898:           photoperiod: {
1899:             hours: 10,
1900:             maxHours: 12,
1901:             constraint: "reduce photoperiod to trigger tuber formation",
1902:           },
1903:           dli: { min: 21.6, max: 34.6, unit: "mol/m²/day" },
1904:           notes: ["Critical photoperiod reduction for tuberization"],
1905:         },
1906:         maturation: {
1907:           ppfd: { min: 500, max: 600, unit: "µmol/m²/s" },
1908:           photoperiod: { hours: 8, maxHours: 10 },
1909:           dli: { min: 14.4, max: 21.6, unit: "mol/m²/day" },
1910:           notes: ["Further photoperiod reduction"],
1911:         },
1912:       },
1913:       watering: {
1914:         slipProduction: {
1915:           trigger: { moistureLevel: "top 1 inch dry (~4-5)" },
1916:           target: { moistureLevel: "adequate moisture" },
1917:           volume: {
1918:             amount: "16-20 oz (470-590 mL)/plant",
1919:             frequency: "daily for first week, then every 1-2 days",
1920:           },
1921:           notes: ["High humidity (85-90%)", "Temp: 75-80°F (24-27°C)"],
1922:         },
1923:         vegetativeGrowth: {
1924:           trigger: { moistureLevel: "top 1-2 inches dry (~4)" },
1925:           target: { moistureLevel: "adequate moisture" },
1926:           volume: {
1927:             amount: "30-40 oz (890-1200 mL)/plant",
1928:             frequency: "2x per week",
1929:           },
1930:           notes: ["Vigorous vine growth phase"],
1931:         },
1932:         tuberDevelopment: {
1933:           trigger: { moistureLevel: "top 2 inches dry (~3-4)" },
1934:           target: { moistureLevel: "adequate moisture" },
1935:           volume: { amount: "40-48 oz (1200-1400 mL)", frequency: "2x/week" },
1936:           notes: ["Reduce photoperiod to trigger tuber formation"],
1937:         },
1938:         maturation: {
1939:           trigger: { moistureLevel: "top 2-3 inches dry (~3)" },
1940:           target: { moistureLevel: "minimal" },
1941:           volume: {
1942:             amount: "12-20 oz (350-590 mL)/plant",
1943:             frequency: "1x/week then stop completely 3-7 days pre-harvest",
1944:           },
1945:           notes: ["Final phase preparation"],
1946:         },
1947:       },
1948:       fertilization: {
1949:         slipProduction: { schedule: [] },
1950:         vegetativeGrowth: {
1951:           schedule: [
1952:             {
1953:               taskName: "Apply Blood Meal",
1954:               details: {
1955:                 product: "Blood Meal",
1956:                 amount: "0.5c bed / 5 Tbsp bag",
1957:               },
1958:               startDays: 28,
1959:               frequencyDays: 0,
1960:               repeatCount: 1,
1961:             },
1962:           ],
1963:         },
1964:         tuberDevelopment: {
1965:           schedule: [
1966:             {
1967:               taskName: "Apply Kelp Meal",
1968:               details: {
1969:                 product: "Kelp Meal",
1970:                 amount: "0.75c bed / 7.5 Tbsp bag",
1971:               },
1972:               startDays: 56,
1973:               frequencyDays: 28,
1974:               repeatCount: 2,
1975:             },
1976:             {
1977:               taskName: "Foliar spray with K₂SO₄",
1978:               details: {
1979:                 product: "K₂SO₄",
1980:                 dilution: "1-2 Tbsp/gal",
1981:                 method: "foliar-spray",
1982:               },
1983:               startDays: 70,
1984:               frequencyDays: 0,
1985:               repeatCount: 1,
1986:             },
1987:           ],
1988:         },
1989:         maturation: {
1990:           schedule: [
1991:             {
1992:               taskName: "Apply K₂SO₄/KNO₃ for skin set",
1993:               details: { product: "K₂SO₄/KNO₃" },
1994:               startDays: 80,
1995:               frequencyDays: 0,
1996:               repeatCount: 1,
1997:             },
1998:           ],
1999:           notes: ["Cease all feeding 3-4 wks pre-harvest"],
2000:         },
2001:       },
2002:       environment: {
2003:         temperature: {
2004:           min: 75,
2005:           max: 85,
2006:           optimal: 80,
2007:           unit: "F",
2008:           stage: "tuber development",
2009:         },
2010:         humidity: { min: 85, max: 90, optimal: 87 },
2011:         pH: { min: 5.8, max: 6.2, optimal: 6 },
2012:       },
2013:       soilMixture: {
2014:         components: {
2015:           "coco coir": 40,
2016:           perlite: 30,
2017:           vermiculite: 25,
2018:           "sandy loam": 5,
2019:         },
2020:         amendments: { "well-rotted manure": "3 tbsp per gallon" },
2021:       },
2022:       container: {
2023:         depth: "18-24 inches",
2024:         staging: { final: "Large containers for extensive root system" },
2025:       },
2026:       succession: {
2027:         interval: 0,
2028:         method: "single",
2029:         harvestMethod: "single-harvest",
2030:         notes: ["Long cycle (90-120 days) best for single large harvest"],
2031:       },
2032:       specialRequirements: [
2033:         "Post-harvest curing at 80-85°F with high humidity for 5-10 days",
2034:         "Critical photoperiod reduction for tuberization",
2035:         "Soil temperature 75-85°F optimal for tuber development",
2036:       ],
2037:     },
2038:   },
2039: ];

================
File: src/hooks/useAppInitialization.ts
================
 1: import { useEffect } from "react";
 2: import { initializeDatabase } from "@/db/seedData";
 3: 
 4: export function useAppInitialization() {
 5:   useEffect(() => {
 6:     const initializeApp = async () => {
 7:       try {
 8:         console.log("🌱 Initializing database...");
 9:         await initializeDatabase();
10:         console.log("✅ Database initialization complete");
11:       } catch (error) {
12:         console.error("❌ Error during app initialization:", error);
13:       }
14:     };
15: 
16:     initializeApp();
17:   }, []);
18: }

================
File: src/pages/care/PhotoCapture.tsx
================
  1: import React, { useState, useRef } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: 
  4: interface PhotoCaptureProps {
  5:   photos: string[];
  6:   onPhotosChange: (photos: string[]) => void;
  7:   maxPhotos?: number;
  8: }
  9: 
 10: export function PhotoCapture({
 11:   photos,
 12:   onPhotosChange,
 13:   maxPhotos = 5,
 14: }: PhotoCaptureProps) {
 15:   const [isCapturing, setIsCapturing] = useState(false);
 16:   const [error, setError] = useState<string | null>(null);
 17:   const videoRef = useRef<HTMLVideoElement>(null);
 18:   const canvasRef = useRef<HTMLCanvasElement>(null);
 19:   const streamRef = useRef<MediaStream | null>(null);
 20: 
 21: 
 22:   async function startCamera() {
 23:     setError(null);
 24:     setIsCapturing(true);
 25: 
 26:     try {
 27: 
 28:       const stream = await navigator.mediaDevices.getUserMedia({
 29:         video: {
 30:           facingMode: "environment",
 31:           width: { ideal: 1280 },
 32:           height: { ideal: 720 },
 33:         },
 34:       });
 35: 
 36:       if (videoRef.current) {
 37:         videoRef.current.srcObject = stream;
 38:         streamRef.current = stream;
 39:       }
 40:     } catch (err) {
 41:       console.error("Failed to start camera:", err);
 42:       setError("Unable to access camera. Please check permissions.");
 43:       setIsCapturing(false);
 44:     }
 45:   }
 46: 
 47: 
 48:   function stopCamera() {
 49:     if (streamRef.current) {
 50:       streamRef.current.getTracks().forEach((track) => track.stop());
 51:       streamRef.current = null;
 52:     }
 53:     setIsCapturing(false);
 54:   }
 55: 
 56: 
 57:   function capturePhoto() {
 58:     if (!videoRef.current || !canvasRef.current) return;
 59: 
 60:     const video = videoRef.current;
 61:     const canvas = canvasRef.current;
 62:     const context = canvas.getContext("2d");
 63: 
 64:     if (!context) return;
 65: 
 66: 
 67:     canvas.width = video.videoWidth;
 68:     canvas.height = video.videoHeight;
 69: 
 70: 
 71:     context.drawImage(video, 0, 0, canvas.width, canvas.height);
 72: 
 73: 
 74:     canvas.toBlob(
 75:       (blob) => {
 76:         if (blob) {
 77:           const photoUrl = URL.createObjectURL(blob);
 78:           onPhotosChange([...photos, photoUrl]);
 79:         }
 80:       },
 81:       "image/jpeg",
 82:       0.8
 83:     );
 84: 
 85:     stopCamera();
 86:   }
 87: 
 88: 
 89:   function removePhoto(index: number) {
 90:     const newPhotos = photos.filter((_, i) => i !== index);
 91:     onPhotosChange(newPhotos);
 92:   }
 93: 
 94: 
 95:   function handleFileInput(event: React.ChangeEvent<HTMLInputElement>) {
 96:     const files = event.target.files;
 97:     if (!files) return;
 98: 
 99:     Array.from(files).forEach((file) => {
100:       if (file.type.startsWith("image/")) {
101:         const photoUrl = URL.createObjectURL(file);
102:         onPhotosChange([...photos, photoUrl]);
103:       }
104:     });
105: 
106: 
107:     event.target.value = "";
108:   }
109: 
110:   const canAddMore = photos.length < maxPhotos;
111: 
112:   return (
113:     <div className="space-y-4">
114:       {}
115:       {isCapturing ? (
116:         <div className="space-y-4">
117:           <div className="relative bg-black rounded-lg overflow-hidden">
118:             <video
119:               ref={videoRef}
120:               autoPlay
121:               playsInline
122:               className="w-full h-64 object-cover"
123:             />
124:             <canvas ref={canvasRef} className="hidden" />
125:           </div>
126: 
127:           <div className="flex gap-2">
128:             <Button
129:               type="button"
130:               variant="primary"
131:               onClick={capturePhoto}
132:               className="flex-1"
133:             >
134:               📸 Capture Photo
135:             </Button>
136:             <Button type="button" variant="outline" onClick={stopCamera}>
137:               Cancel
138:             </Button>
139:           </div>
140:         </div>
141:       ) : (
142: 
143:         <div className="space-y-4">
144:           {}
145:           <div className="flex gap-2">
146:             {canAddMore && (
147:               <>
148:                 <Button
149:                   type="button"
150:                   variant="outline"
151:                   onClick={startCamera}
152:                   className="flex-1"
153:                 >
154:                   📷 Take Photo
155:                 </Button>
156: 
157:                 {}
158:                 <label className="flex-1">
159:                   <Button
160:                     type="button"
161:                     variant="outline"
162:                     className="w-full"
163:                     onClick={() => {}}
164:                   >
165:                     📁 Choose File
166:                   </Button>
167:                   <input
168:                     type="file"
169:                     accept="image/*"
170:                     multiple
171:                     onChange={handleFileInput}
172:                     className="hidden"
173:                   />
174:                 </label>
175:               </>
176:             )}
177:           </div>
178: 
179:           {}
180:           {error && (
181:             <div className="p-3 bg-red-50 border border-red-200 rounded-md">
182:               <p className="text-sm text-red-600">{error}</p>
183:             </div>
184:           )}
185: 
186:           {}
187:           {photos.length > 0 && (
188:             <p className="text-sm text-muted-foreground">
189:               {photos.length} of {maxPhotos} photos added
190:             </p>
191:           )}
192:         </div>
193:       )}
194: 
195:       {}
196:       {photos.length > 0 && (
197:         <div className="grid grid-cols-2 gap-2">
198:           {photos.map((photo, index) => (
199:             <div key={index} className="relative">
200:               <img
201:                 src={photo}
202:                 alt={`Captured photo ${index + 1}`}
203:                 className="w-full h-24 object-cover rounded-md border border-border"
204:               />
205:               <button
206:                 type="button"
207:                 onClick={() => removePhoto(index)}
208:                 className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600"
209:               >
210:                 ×
211:               </button>
212:             </div>
213:           ))}
214:         </div>
215:       )}
216:     </div>
217:   );
218: }

================
File: src/pages/settings/index.tsx
================
 1: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
 2: 
 3: const Settings = () => {
 4:   return (
 5:     <div className="space-y-6">
 6:       <h1 className="text-2xl font-bold">Settings</h1>
 7: 
 8:       <Card>
 9:         <CardHeader>
10:           <CardTitle>Sync Settings</CardTitle>
11:         </CardHeader>
12:       </Card>
13: 
14:       <Card>
15:         <CardHeader>
16:           <CardTitle>App Information</CardTitle>
17:         </CardHeader>
18:         <CardContent className="space-y-2">
19:           <div className="flex justify-between">
20:             <span>Version:</span>
21:             <span>1.0.0</span>
22:           </div>
23:           <div className="flex justify-between">
24:             <span>Build:</span>
25:             <span>Development</span>
26:           </div>
27:         </CardContent>
28:       </Card>
29:     </div>
30:   );
31: };
32: 
33: export default Settings;

================
File: src/styles/globals.css
================
 1: @tailwind base;
 2: @tailwind components;
 3: @tailwind utilities;
 4: 
 5: @layer base {
 6:   :root {
 7: 
 8:     --background: 249 250 251;
 9:     --foreground: 17 24 39;
10:     --card: 255 255 255;
11:     --card-foreground: 17 24 39;
12:     --primary: 52 211 153;
13:     --primary-foreground: 17 24 39;
14:     --secondary: 156 163 175;
15:     --secondary-foreground: 17 24 39;
16:     --muted: 243 244 246;
17:     --muted-foreground: 107 114 128;
18:     --accent: 52 211 153;
19:     --accent-foreground: 17 24 39;
20:     --border: 229 231 235;
21:     --ring: 52 211 153;
22:     --input: 255 255 255;
23:     --input-foreground: 17 24 39;
24:   }
25: 
26:   .dark {
27: 
28:     --background: 17 24 39;
29:     --foreground: 243 244 246;
30:     --card: 31 41 55;
31:     --card-foreground: 243 244 246;
32:     --primary: 34 197 94;
33:     --primary-foreground: 243 244 246;
34:     --secondary: 75 85 99;
35:     --secondary-foreground: 243 244 246;
36:     --muted: 55 65 81;
37:     --muted-foreground: 156 163 175;
38:     --accent: 34 197 94;
39:     --accent-foreground: 243 244 246;
40:     --border: 75 85 99;
41:     --ring: 34 197 94;
42:     --input: 31 41 55;
43:     --input-foreground: 243 244 246;
44:   }
45: }
46: 
47: 
48: * {
49:   -webkit-tap-highlight-color: transparent;
50: }
51: 
52: html {
53:   scroll-behavior: smooth;
54: }
55: 
56: body {
57:   background-color: rgb(var(--background));
58:   color: rgb(var(--foreground));
59:   font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
60:     "Helvetica Neue", Arial, sans-serif;
61:   -webkit-font-smoothing: antialiased;
62:   -moz-osx-font-smoothing: grayscale;
63: }
64: 
65: #root {
66:   background-color: rgb(var(--background));
67:   min-height: 100vh;
68: }
69: 
70: 
71: button {
72:   -webkit-appearance: none;
73:   appearance: none;
74: }
75: 
76: 
77: button:focus-visible {
78:   outline: 2px solid #3b82f6;
79:   outline-offset: 2px;
80: }

================
File: src/types/core.ts
================
 1: export type GrowthStage =
 2:   | "germination"
 3:   | "seedling"
 4:   | "vegetative"
 5:   | "flowering"
 6:   | "fruiting"
 7:   | "maturation"
 8:   | "harvest"
 9:   | "ongoing-production";
10: 
11: export type PlantCategory =
12:   | "root-vegetables"
13:   | "leafy-greens"
14:   | "herbs"
15:   | "berries"
16:   | "fruiting-plants";
17: 
18: export type CareActivityType =
19:   | "water"
20:   | "fertilize"
21:   | "observe"
22:   | "harvest"
23:   | "transplant"
24:   | "photo"
25:   | "note";
26: 
27: export type QualityRating =
28:   | "excellent"
29:   | "good"
30:   | "fair"
31:   | "poor"
32:   | "unsaleable";
33: 
34: export type HealthAssessment =
35:   | "excellent"
36:   | "good"
37:   | "fair"
38:   | "concerning"
39:   | "critical";
40: 
41: 
42: export type VolumeUnit = "oz" | "ml" | "gal" | "L" | "cups";
43: export type WeightUnit = "oz" | "lbs" | "g" | "kg";
44: export type LengthUnit = "inches" | "cm" | "ft" | "m";
45: export type TemperatureUnit = "F" | "C";
46: 
47: 
48: export type ApplicationMethod =
49:   | "soil-drench"
50:   | "foliar-spray"
51:   | "top-dress"
52:   | "mix-in-soil";
53: 
54: export type WateringMethod =
55:   | "top-watering"
56:   | "bottom-watering"
57:   | "drip"
58:   | "misting";
59: 
60: 
61: export interface Volume {
62:   amount: number;
63:   unit: VolumeUnit;
64: }
65: 
66: export interface Weight {
67:   amount: number;
68:   unit: WeightUnit;
69: }
70: 
71: export interface MoistureReading {
72:   before: number;
73:   after: number;
74:   scale: "1-10" | "visual";
75: }

================
File: src/types/index.ts
================
 1: export * from "./core";
 2: export * from "./protocols";
 3: export * from "./database";
 4: export * from "./scheduling";
 5: export * from "./firebase";
 6: export * from "./user";
 7: 
 8: 
 9: export { plantService, varietyService, careService, db } from "./database";
10: 
11: 
12: export type {
13:   PlantRecord as Plant,
14:   VarietyRecord as Variety,
15:   CareActivityRecord as CareActivity,
16: } from "./database";

================
File: src/jest.polyfills.ts
================
 1: import { TextDecoder, TextEncoder } from "util";
 2: 
 3: Object.assign(global, { TextDecoder, TextEncoder });
 4: 
 5: 
 6: Object.defineProperty(global, "importMeta", {
 7:   value: {
 8:     env: {
 9:       VITE_FIREBASE_API_KEY: "test-api-key",
10:       VITE_FIREBASE_AUTH_DOMAIN: "test-project.firebaseapp.com",
11:       VITE_FIREBASE_PROJECT_ID: "test-project",
12:       VITE_FIREBASE_STORAGE_BUCKET: "test-project.appspot.com",
13:       VITE_FIREBASE_MESSAGING_SENDER_ID: "123456789",
14:       VITE_FIREBASE_APP_ID: "test-app-id",
15:     },
16:   },
17: });
18: 
19: 
20: declare global {
21:   const importMeta: {
22:     env: {
23:       VITE_FIREBASE_API_KEY: string;
24:       VITE_FIREBASE_AUTH_DOMAIN: string;
25:       VITE_FIREBASE_PROJECT_ID: string;
26:       VITE_FIREBASE_STORAGE_BUCKET: string;
27:       VITE_FIREBASE_MESSAGING_SENDER_ID: string;
28:       VITE_FIREBASE_APP_ID: string;
29:     };
30:   };
31: }

================
File: src/vite-env.d.ts
================
 1: interface ImportMetaEnv {
 2:   readonly VITE_FIREBASE_API_KEY: string;
 3:   readonly VITE_FIREBASE_AUTH_DOMAIN: string;
 4:   readonly VITE_FIREBASE_PROJECT_ID: string;
 5:   readonly VITE_FIREBASE_STORAGE_BUCKET: string;
 6:   readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string;
 7:   readonly VITE_FIREBASE_APP_ID: string;
 8: }
 9: 
10: interface ImportMeta {
11:   readonly env: ImportMetaEnv;
12: }

================
File: index.html
================
 1: <!DOCTYPE html>
 2: <html lang="en">
 3:   <head>
 4:     <meta charset="UTF-8" />
 5:     <meta name="darkreader-lock" />
 6:     <link rel="icon" type="image/svg+xml" href="/vite.svg" />
 7:     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 8:     <title>Vite + React + TS</title>
 9:   </head>
10:   <body>
11:     <div id="root"></div>
12:     <script type="module" src="/src/main.tsx"></script>
13:   </body>
14: </html>

================
File: print_structure.py
================
 1: import os
 2: 
 3: def print_directory_structure(root_dir, prefix=""):
 4:     for item in os.listdir(root_dir):
 5:         path = os.path.join(root_dir, item)
 6:         if os.path.isdir(path):
 7: 
 8:             if item == "node_modules":
 9:                 continue
10:             if item == "__pycache__":
11:                 continue
12:             if item == ".git":
13:                 continue
14:             if item == ".vscode":
15:                 continue
16:             if item == ".idea":
17:                 continue
18:             if item == ".DS_Store":
19:                 continue
20:             print(f"{prefix}├── {item}/")
21:             print_directory_structure(path, prefix + "│   ")
22:         else:
23:             print(f"{prefix}├── {item}")
24: 
25: if __name__ == "__main__":
26:     project_root = "."
27:     print_directory_structure(project_root)

================
File: README.md
================
 1: # 🌱 SmartGarden PWA
 2: 
 3: A Progressive Web Application for managing indoor gardening with scientifically-backed growing protocols, offline-first plant tracking, and intelligent care scheduling.
 4: 
 5: ## ✨ Features
 6: 
 7: - **Plant Registration**: Track varieties with custom container configurations
 8: - **Growth Stage Tracking**: Automated stage progression based on planting dates
 9: - **Care Scheduling**: Protocol-driven watering, fertilizing, and observation reminders
10: - **Offline-First**: Full functionality without internet connection
11: - **Mobile Optimized**: Touch-friendly interface designed for gloved hands
12: - **PWA**: Installable app experience on mobile and desktop
13: 
14: ## 🛠️ Tech Stack
15: 
16: - **Frontend**: React 18 + TypeScript
17: - **Styling**: TailwindCSS + shadcn/ui components
18: - **State**: Zustand for global state management
19: - **Database**: IndexedDB via Dexie.js (offline-first)
20: - **Testing**: Jest + React Testing Library + Cypress
21: - **PWA**: Service Worker + Web App Manifest
22: 
23: ## 🚀 Quick Start
24: 
25: ```bash
26: # Install dependencies
27: npm install
28: 
29: # Start development server
30: npm run dev
31: 
32: # Run tests
33: npm test
34: 
35: # Build for production
36: npm run build
37: ```

================
File: tailwind.config.js
================
 1: module.exports = {
 2:   content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
 3:   theme: {
 4:     extend: {
 5:       colors: {
 6: 
 7:         background: "rgb(var(--background) / <alpha-value>)",
 8:         foreground: "rgb(var(--foreground) / <alpha-value>)",
 9:         card: {
10:           DEFAULT: "rgb(var(--card) / <alpha-value>)",
11:           foreground: "rgb(var(--card-foreground) / <alpha-value>)",
12:         },
13:         primary: {
14:           DEFAULT: "rgb(var(--primary) / <alpha-value>)",
15:           foreground: "rgb(var(--primary-foreground) / <alpha-value>)",
16:         },
17:         secondary: {
18:           DEFAULT: "rgb(var(--secondary) / <alpha-value>)",
19:           foreground: "rgb(var(--secondary-foreground) / <alpha-value>)",
20:         },
21:         muted: {
22:           DEFAULT: "rgb(var(--muted) / <alpha-value>)",
23:           foreground: "rgb(var(--muted-foreground) / <alpha-value>)",
24:         },
25:         accent: {
26:           DEFAULT: "rgb(var(--accent) / <alpha-value>)",
27:           foreground: "rgb(var(--accent-foreground) / <alpha-value>)",
28:         },
29:         border: "rgb(var(--border) / <alpha-value>)",
30:         ring: "rgb(var(--ring) / <alpha-value>)",
31: 
32: 
33:         garden: {
34:           50: "#f0f9f4",
35:           100: "#dcf2e4",
36:           200: "#bce5cd",
37:           300: "#8dd0aa",
38:           400: "#57b380",
39:           500: "#349960",
40:           600: "#2F6F4E",
41:           700: "#1e5a3a",
42:           800: "#1a4a31",
43:           900: "#163d29",
44:         },
45: 
46: 
47:         success: "#38A169",
48:         warning: "#DD6B20",
49:         error: "#E53E3E",
50: 
51:         input: {
52:           DEFAULT: "rgb(var(--input) / <alpha-value>)",
53:           foreground: "rgb(var(--input-foreground) / <alpha-value>)",
54:         },
55:       },
56:       boxShadow: {
57:         sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
58:         md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
59:         lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
60:       },
61:     },
62:   },
63:   darkMode: "class",
64:   plugins: [],
65: };

================
File: tsconfig.tsbuildinfo
================
1: {"root":["./src/app.tsx","./src/jest.polyfills.ts","./src/main.tsx","./src/setuptests.ts","./src/vite-env.d.ts","./src/__tests__/components/addplant.test.tsx","./src/__tests__/components/bulkactivitymodal.test.tsx","./src/__tests__/components/carelogform.test.tsx","./src/__tests__/components/dashboard.test.tsx","./src/__tests__/components/logcare.test.tsx","./src/__tests__/components/plantregistrationform.test.tsx","./src/__tests__/components/plantremindersettings.test.tsx","./src/__tests__/components/plantstagedisplay.test.tsx","./src/__tests__/components/reminderpreferencessection.test.tsx","./src/__tests__/components/soilmixtureselector.test.tsx","./src/__tests__/database/plantservice.test.ts","./src/__tests__/database/varietyservice.test.ts","./src/__tests__/e2e/plant-registration.spec.ts","./src/__tests__/integration/plantdetailremindersettings.test.tsx","./src/__tests__/integration/plantregistrationflow.test.tsx","./src/__tests__/integration/smartdefaultsintegration.test.tsx","./src/__tests__/integration/stagecalculationdisplay.test.tsx","./src/__tests__/services/careschedulingservice.test.ts","./src/__tests__/services/smartdefaultsservice.test.ts","./src/__tests__/setup/mockfirebase.ts","./src/__tests__/utils/growthstage.test.ts","./src/__tests__/utils/plantdisplay.test.ts","./src/__tests__/utils/plantgrouping.test.ts","./src/__tests__/utils/plantregistration.test.ts","./src/__tests__/utils/testhelpers.tsx","./src/__tests__/utils/varietygrowthstages.test.ts","./src/components/authform.tsx","./src/components/navigation.tsx","./src/components/fertilization/fertilizationdashboardsection.tsx","./src/components/fertilization/fertilizationtaskcard.tsx","./src/components/layouts/emptystate.tsx","./src/components/layouts/welcome.tsx","./src/components/plant/bulkactivitymodal.tsx","./src/components/plant/careactivityitem.tsx","./src/components/plant/carehistory.tsx","./src/components/plant/customvarietyform.tsx","./src/components/plant/nextactivitycard.tsx","./src/components/plant/plantgroupcard.tsx","./src/components/plant/plantinfocard.tsx","./src/components/plant/plantregistrationform.tsx","./src/components/plant/plantremindersettings.tsx","./src/components/plant/plantstagedisplay.tsx","./src/components/plant/reminderpreferencessection.tsx","./src/components/plant/soilmixtureselector.tsx","./src/components/ui/badge.tsx","./src/components/ui/button.tsx","./src/components/ui/card.tsx","./src/components/ui/darkmodetoggle.tsx","./src/components/ui/input.tsx","./src/components/ui/loadingspinner.tsx","./src/components/ui/locationtoggle.tsx","./src/components/ui/offlineindicator.tsx","./src/components/ui/statusbadge.tsx","./src/components/ui/switch.tsx","./src/data/seedvarieties.ts","./src/db/seeddata.ts","./src/hooks/useappinitialization.ts","./src/hooks/usedarkmode.ts","./src/hooks/usedynamicstage.ts","./src/hooks/usefirebaseauth.ts","./src/hooks/usefirebasecareactivities.ts","./src/hooks/usefirebaseplants.ts","./src/hooks/usefirsttimeuser.ts","./src/hooks/usenextplanttask.ts","./src/hooks/usescheduledtasks.ts","./src/pages/analytics/index.tsx","./src/pages/care/carelogform.tsx","./src/pages/care/logcare.tsx","./src/pages/care/photocapture.tsx","./src/pages/care/quickcompletionbuttons.tsx","./src/pages/care/index.tsx","./src/pages/dashboard/taskgroup.tsx","./src/pages/dashboard/taskitem.tsx","./src/pages/dashboard/index.tsx","./src/pages/plants/addplant.tsx","./src/pages/plants/plantdetail.tsx","./src/pages/plants/plants.tsx","./src/pages/settings/index.tsx","./src/services/plantregistrationservice.ts","./src/services/protocoltranspilerservice.ts","./src/services/bulkactivityservice.ts","./src/services/careschedulingservice.ts","./src/services/dynamicschedulingservice.ts","./src/services/index.ts","./src/services/smartdefaultsservice.ts","./src/services/firebase/authservice.ts","./src/services/firebase/careactivityservice.ts","./src/services/firebase/config.ts","./src/services/firebase/plantservice.ts","./src/services/firebase/scheduledtaskservice.ts","./src/services/firebase/__mocks__/config.ts","./src/types/core.ts","./src/types/database.ts","./src/types/firebase.ts","./src/types/index.ts","./src/types/protocols.ts","./src/types/scheduling.ts","./src/types/user.ts","./src/utils/cn.ts","./src/utils/dateutils.ts","./src/utils/fertilizationutils.ts","./src/utils/growthstage.ts","./src/utils/plantdisplay.ts","./src/utils/plantgrouping.ts","./src/utils/plantstage.ts","./vite.config.ts"],"errors":true,"version":"5.8.3"}

================
File: vite.config.ts
================
 1: import { defineConfig } from "vite";
 2: import react from "@vitejs/plugin-react";
 3: import { VitePWA } from "vite-plugin-pwa";
 4: import path from "path";
 5: 
 6: export default defineConfig({
 7:   plugins: [
 8:     react(),
 9:     VitePWA({
10:       registerType: "autoUpdate",
11:       workbox: {
12:         globPatterns: ["**/*.{js,css,html,ico,png,svg,jpg,jpeg}"],
13:         runtimeCaching: [
14:           {
15:             urlPattern: /^https:\/\/.*\.(png|jpg|jpeg|svg|gif)$/,
16:             handler: "CacheFirst",
17:             options: {
18:               cacheName: "images",
19:               expiration: {
20:                 maxEntries: 100,
21:                 maxAgeSeconds: 60 * 60 * 24 * 30,
22:               },
23:             },
24:           },
25:         ],
26:       },
27:     }),
28:   ],
29:   resolve: {
30:     alias: {
31:       "@": path.resolve(__dirname, "./src"),
32:     },
33:   },
34:   server: {
35:     host: "0.0.0.0",
36:     port: 5173,
37:   },
38: });

================
File: src/__tests__/components/CareLogForm.test.tsx
================
  1: import { describe, it, expect, beforeEach } from "@jest/globals";
  2: import { render, screen, waitFor } from "@testing-library/react";
  3: import userEvent from "@testing-library/user-event";
  4: import { MemoryRouter } from "react-router-dom";
  5: import { CareLogForm } from "@/pages/care/CareLogForm";
  6: import { initializeDatabase } from "@/db/seedData";
  7: import { plantService } from "@/types/database";
  8: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  9: 
 10: jest.mock("@/hooks/useFirebasePlants");
 11: const mockUseFirebasePlants = useFirebasePlants as jest.Mock;
 12: 
 13: const renderWithRouter = (
 14:   component: React.ReactElement,
 15:   initialEntries: string[] = ["/log-care"]
 16: ) => {
 17:   return render(
 18:     <MemoryRouter initialEntries={initialEntries}>{component}</MemoryRouter>
 19:   );
 20: };
 21: 
 22: describe("CareLogForm Pre-Selection", () => {
 23:   const mockOnSuccess = jest.fn();
 24: 
 25:   beforeEach(async () => {
 26:     await initializeDatabase();
 27:     const { db } = await import("@/types/database");
 28:     await db.plants.clear();
 29: 
 30: 
 31:     mockUseFirebasePlants.mockReturnValue({
 32:       plants: [],
 33:       loading: false,
 34:       error: null,
 35:     });
 36:   });
 37: 
 38:   it("pre-selects plant when preselectedPlantId is provided", async () => {
 39: 
 40:     const plantId = await plantService.addPlant({
 41:       varietyId: "test-variety",
 42:       varietyName: "Test Variety",
 43:       name: "Test Plant",
 44:       plantedDate: new Date(),
 45:       location: "Location 1",
 46:       container: "Container 1",
 47:       isActive: true,
 48:     });
 49: 
 50: 
 51:     const createdPlant = await plantService.getPlant(plantId);
 52: 
 53: 
 54:     mockUseFirebasePlants.mockReturnValue({
 55:       plants: [createdPlant],
 56:       loading: false,
 57:       error: null,
 58:     });
 59: 
 60:     const mockOnSuccess = jest.fn();
 61: 
 62: 
 63:     renderWithRouter(
 64:       <CareLogForm onSuccess={mockOnSuccess} preselectedPlantId={plantId} />
 65:     );
 66: 
 67: 
 68:     await waitFor(() => {
 69:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
 70:       expect(plantSelect.value).toBe(plantId);
 71:     });
 72:   });
 73: 
 74:   it("shows normal plant selection when no preselectedPlantId is provided", async () => {
 75: 
 76:     const plantId = await plantService.addPlant({
 77:       varietyId: "test-variety",
 78:       varietyName: "Test Variety",
 79:       name: "Test Plant",
 80:       plantedDate: new Date(),
 81:       location: "Location 1",
 82:       container: "Container 1",
 83:       isActive: true,
 84:     });
 85: 
 86: 
 87:     const createdPlant = await plantService.getPlant(plantId);
 88: 
 89: 
 90:     mockUseFirebasePlants.mockReturnValue({
 91:       plants: [createdPlant],
 92:       loading: false,
 93:       error: null,
 94:     });
 95: 
 96:     const mockOnSuccess = jest.fn();
 97:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
 98: 
 99: 
100:     await waitFor(() => {
101:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
102:       expect(plantSelect.value).toBe("");
103:     });
104: 
105:     // 5. **CRITICAL FIX**: Assert using the correct text format
106:     await waitFor(() => {
107:       expect(
108:         screen.getByText("Test Plant (Test Variety) - Location 1")
109:       ).toBeInTheDocument();
110:     });
111:   });
112: 
113:   it("allows user to change pre-selected plant", async () => {
114: 
115:     const plant1Id = await plantService.addPlant({
116:       varietyId: "test-variety-1",
117:       varietyName: "Plant One",
118:       name: "Plant One",
119:       plantedDate: new Date(),
120:       location: "Location 1",
121:       container: "Container 1",
122:       isActive: true,
123:     });
124: 
125:     const plant2Id = await plantService.addPlant({
126:       varietyId: "test-variety-2",
127:       varietyName: "Plant Two",
128:       name: "Plant Two",
129:       plantedDate: new Date(),
130:       location: "Location 2",
131:       container: "Container 2",
132:       isActive: true,
133:     });
134: 
135: 
136:     const createdPlant1 = await plantService.getPlant(plant1Id);
137:     const createdPlant2 = await plantService.getPlant(plant2Id);
138: 
139: 
140:     mockUseFirebasePlants.mockReturnValue({
141:       plants: [createdPlant1, createdPlant2],
142:       loading: false,
143:       error: null,
144:     });
145: 
146:     const mockOnSuccess = jest.fn();
147:     const user = userEvent.setup();
148: 
149: 
150:     renderWithRouter(
151:       <CareLogForm onSuccess={mockOnSuccess} preselectedPlantId={plant1Id} />
152:     );
153: 
154: 
155:     await waitFor(() => {
156: 
157:       expect(
158:         screen.getByText("Plant One (Plant One) - Location 1")
159:       ).toBeInTheDocument();
160:       expect(
161:         screen.getByText("Plant Two (Plant Two) - Location 2")
162:       ).toBeInTheDocument();
163:     });
164: 
165: 
166:     await waitFor(() => {
167:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
168:       expect(plantSelect.value).toBe(plant1Id);
169:     });
170: 
171:     const plantSelect = screen.getByLabelText(/Plant/i);
172:     await user.selectOptions(plantSelect, plant2Id);
173: 
174:     expect((plantSelect as HTMLSelectElement).value).toBe(plant2Id);
175:   });
176: 
177:   it("shows watering fields when water activity is selected", async () => {
178:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
179: 
180:     await waitFor(() => {
181:       expect(screen.getByText("Water Amount *")).toBeInTheDocument();
182:     });
183:     expect(screen.getByText(/Watering Log/i)).toBeInTheDocument();
184:     expect(screen.getByPlaceholderText("Amount")).toBeInTheDocument();
185: 
186:     expect(screen.getByText("oz")).toBeInTheDocument();
187:     expect(screen.getByText("ml")).toBeInTheDocument();
188:     expect(screen.getByText("cups")).toBeInTheDocument();
189:   });
190: 
191: 
192:   it.skip("handles plant without custom name correctly", async () => {
193:     await plantService.addPlant({
194:       varietyId: "test-variety",
195:       varietyName: "Roma Tomato",
196:       plantedDate: new Date(),
197:       location: "Greenhouse",
198:       container: "3 gallon pot",
199:       isActive: true,
200:     });
201: 
202:     const mockOnSuccess = jest.fn();
203: 
204:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
205: 
206:     await waitFor(() => {
207:       const expectedText = "Roma Tomato - Greenhouse";
208:       expect(screen.getByText(expectedText)).toBeInTheDocument();
209:     });
210:   });
211: });

================
File: src/__tests__/database/varietyService.test.ts
================
  1: import { varietyService } from "../../types/database";
  2: import { initializeDatabase } from "../../db/seedData";
  3: import { seedVarieties } from "../../data/seedVarieties";
  4: import { db, PlantCategory } from "@/types";
  5: 
  6: describe("varietyService", () => {
  7: 
  8: 
  9:   beforeEach(async () => {
 10:     await db.varieties.clear();
 11:     await initializeDatabase();
 12:   });
 13: 
 14:   describe("Data Seeding and Integrity", () => {
 15:     it("should seed all varieties from the data file without duplicates", async () => {
 16:       const allVarieties = await varietyService.getAllVarieties();
 17: 
 18: 
 19:       expect(allVarieties.length).toBe(seedVarieties.length);
 20: 
 21: 
 22:       const varietyNames = allVarieties.map((v) => v.name);
 23:       const uniqueNames = new Set(varietyNames);
 24:       expect(uniqueNames.size).toBe(varietyNames.length);
 25:     });
 26: 
 27:     it("should prevent adding a variety with a duplicate name", async () => {
 28:       const existingVariety = await varietyService.getVarietyByName(
 29:         "Sugar Snap Peas"
 30:       );
 31:       expect(existingVariety).toBeDefined();
 32: 
 33:       const newId = await varietyService.addVariety({
 34:         name: "Sugar Snap Peas",
 35:         category: "fruiting-plants",
 36:         growthTimeline: {
 37:           germination: 1,
 38:           seedling: 1,
 39:           vegetative: 1,
 40:           maturation: 1,
 41:           rootDevelopment: 1,
 42:         },
 43:       });
 44: 
 45: 
 46:       expect(newId).toBe(existingVariety!.id);
 47: 
 48: 
 49:       const allVarieties = await varietyService.getAllVarieties();
 50:       expect(allVarieties.length).toBe(seedVarieties.length);
 51:     });
 52:   });
 53: 
 54:   describe("Service Functionality", () => {
 55:     it("should retrieve a specific variety by name", async () => {
 56:       const variety = await varietyService.getVarietyByName(
 57:         "Baby's Leaf Spinach"
 58:       );
 59:       expect(variety).toBeDefined();
 60:       expect(variety?.name).toBe("Baby's Leaf Spinach");
 61:       expect(variety?.category).toBe("leafy-greens");
 62:     });
 63: 
 64:     it("should retrieve all varieties for a specific category", async () => {
 65:       const herbs = await varietyService.getVarietiesByCategory("herbs");
 66:       const herbNames = herbs.map((v) => v.name);
 67: 
 68:       expect(herbs.length).toBeGreaterThan(0);
 69:       expect(herbNames).toContain("Rosemary");
 70:       expect(herbNames).toContain("English Thyme");
 71: 
 72: 
 73:       herbs.forEach((herb) => {
 74:         expect(herb.category).toBe("herbs");
 75:       });
 76:     });
 77: 
 78:     it("should return an empty array for a category with no varieties", async () => {
 79: 
 80:       const flowers = await varietyService.getVarietiesByCategory(
 81:         "flowers" as PlantCategory
 82:       );
 83:       expect(flowers).toEqual([]);
 84:     });
 85:   });
 86: 
 87:   describe("Protocol and Timeline Validation", () => {
 88:     it("should have valid growth timelines for all seeded varieties", async () => {
 89:       const allVarieties = await varietyService.getAllVarieties();
 90:       expect(allVarieties.length).toBeGreaterThan(0);
 91: 
 92:       allVarieties.forEach((variety) => {
 93:         expect(variety.growthTimeline).toBeDefined();
 94:         expect(variety.growthTimeline.germination).toBeGreaterThanOrEqual(0);
 95:         expect(variety.growthTimeline.seedling).toBeGreaterThanOrEqual(0);
 96:         expect(variety.growthTimeline.vegetative).toBeGreaterThanOrEqual(0);
 97:         expect(variety.growthTimeline.maturation).toBeGreaterThan(0);
 98:       });
 99:     });
100: 
101:     it("should have a productiveLifespan for all everbearing varieties", async () => {
102:       const allVarieties = await varietyService.getAllVarieties();
103:       const everbearingVarieties = allVarieties.filter((v) => v.isEverbearing);
104: 
105:       expect(everbearingVarieties.length).toBeGreaterThan(0);
106: 
107:       everbearingVarieties.forEach((variety) => {
108:         expect(variety.productiveLifespan).toBeDefined();
109:         expect(variety.productiveLifespan!).toBeGreaterThan(0);
110:       });
111:     });
112: 
113:     it("should have comprehensive protocols for complex plants like Albion Strawberries", async () => {
114:       const strawberries = await varietyService.getVarietyByName(
115:         "Albion Strawberries"
116:       );
117:       expect(strawberries?.protocols?.lighting).toBeDefined();
118:       expect(strawberries?.protocols?.watering).toBeDefined();
119:       expect(strawberries?.protocols?.fertilization).toBeDefined();
120:       expect(strawberries?.protocols?.environment).toBeDefined();
121:       expect(strawberries?.protocols?.soilMixture).toBeDefined();
122:       expect(strawberries?.protocols?.specialRequirements).toBeDefined();
123:       expect(
124:         strawberries?.protocols?.specialRequirements?.length
125:       ).toBeGreaterThan(0);
126:     });
127: 
128:     it("should have valid soil mixture percentages for varieties with soil protocols", async () => {
129:       const allVarieties = await varietyService.getAllVarieties();
130:       const varietiesWithSoilMix = allVarieties.filter(
131:         (v) => v.protocols?.soilMixture?.components
132:       );
133: 
134:       expect(varietiesWithSoilMix.length).toBeGreaterThan(0);
135: 
136:       varietiesWithSoilMix.forEach((variety) => {
137:         const components = variety.protocols!.soilMixture!.components!;
138:         const totalPercentage = Object.values(components).reduce(
139:           (sum, pct) => sum + pct,
140:           0
141:         );
142:         expect(totalPercentage).toBeCloseTo(100, 1);
143:       });
144:     });
145:   });
146: });

================
File: src/__tests__/integration/smartDefaultsIntegration.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { MemoryRouter } from "react-router-dom";
  4: import { CareLogForm } from "@/pages/care/CareLogForm";
  5: import { initializeDatabase } from "@/db/seedData";
  6: import { varietyService, PlantRecord } from "@/types/database";
  7: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  8: 
  9: 
 10: jest.mock("@/hooks/useFirebasePlants");
 11: const mockUseFirebasePlants = useFirebasePlants as jest.Mock;
 12: 
 13: const renderWithRouter = (
 14:   component: React.ReactElement,
 15:   initialEntries: string[] = ["/log-care"]
 16: ) => {
 17:   return render(
 18:     <MemoryRouter initialEntries={initialEntries}>{component}</MemoryRouter>
 19:   );
 20: };
 21: 
 22: 
 23: const setupTest = async () => {
 24:   const varieties = await varietyService.getAllVarieties();
 25: 
 26: 
 27:   const testVariety = varieties.find((v) => v.name === "Sugar Snap Peas");
 28: 
 29:   const plant: PlantRecord = {
 30:     id: "plant-123",
 31:     varietyId: testVariety!.id,
 32:     varietyName: testVariety!.name,
 33:     name: "Test Plant",
 34:     plantedDate: new Date(),
 35:     location: "Indoor",
 36:     container: "5 gallon pot",
 37:     isActive: true,
 38:     createdAt: new Date(),
 39:     updatedAt: new Date(),
 40:   };
 41: 
 42:   mockUseFirebasePlants.mockReturnValue({
 43:     plants: [plant],
 44:     loading: false,
 45:     error: null,
 46:   });
 47: 
 48:   const user = userEvent.setup();
 49:   renderWithRouter(<CareLogForm onSuccess={jest.fn()} />);
 50: 
 51: 
 52:   const plantSelect = (await screen.findByLabelText(
 53:     /Plant \*/i
 54:   )) as HTMLSelectElement;
 55: 
 56:   return { user, plant, plantSelect };
 57: };
 58: 
 59: describe("Smart Defaults Integration", () => {
 60:   beforeAll(async () => {
 61: 
 62:     await initializeDatabase();
 63:   });
 64: 
 65:   beforeEach(() => {
 66: 
 67:     jest.clearAllMocks();
 68:   });
 69: 
 70:   it("should show smart watering suggestions when a plant is selected", async () => {
 71:     const { user, plant, plantSelect } = await setupTest();
 72: 
 73:     await user.selectOptions(plantSelect, plant.id);
 74: 
 75:     await waitFor(() => {
 76: 
 77: 
 78:       const protocolInfo = screen.getByText(/Protocol for/i);
 79:       expect(protocolInfo).toHaveTextContent("Protocol for germination stage:");
 80:     });
 81:   });
 82: 
 83:   it("should auto-fill water amount when using smart suggestions", async () => {
 84:     const { user, plant, plantSelect } = await setupTest();
 85: 
 86:     await user.selectOptions(plantSelect, plant.id);
 87: 
 88:     await waitFor(() => {
 89:       const waterAmountInput = screen.getByLabelText(
 90:         /Water Amount \*/i
 91:       ) as HTMLInputElement;
 92:       expect(waterAmountInput).toBeInTheDocument();
 93:     });
 94:   });
 95: 
 96: 
 97: 
 98:   it("should show quick completion buttons", async () => {
 99:     const { user, plant, plantSelect } = await setupTest();
100: 
101:     await user.selectOptions(plantSelect, plant.id);
102: 
103: 
104:     const activitySelect = screen.getByLabelText(/Activity Type \*/i);
105:     await user.selectOptions(activitySelect, "fertilize");
106: 
107:     await waitFor(() => {
108:       expect(screen.getByLabelText(/Amount \*/i)).toBeInTheDocument();
109:     });
110:   });
111: 
112:   it("should show fertilizer suggestions when fertilizer activity is selected", async () => {
113:     const { user, plant, plantSelect } = await setupTest();
114: 
115:     await user.selectOptions(plantSelect, plant.id);
116: 
117:     const activitySelect = screen.getByLabelText(/Activity Type \*/i);
118:     await user.selectOptions(activitySelect, "fertilize");
119: 
120:     await waitFor(() => {
121:       expect(
122:         screen.getByLabelText(/Fertilizer Product \*/i)
123:       ).toBeInTheDocument();
124:       expect(screen.getByLabelText(/Dilution/i)).toBeInTheDocument();
125:       expect(screen.getByLabelText(/Amount \*/i)).toBeInTheDocument();
126:     });
127:   });
128: });

================
File: src/__tests__/services/smartDefaultsService.test.ts
================
  1: import { SmartDefaultsService } from "@/services/smartDefaultsService";
  2: import { varietyService } from "@/types/database";
  3: import { GrowthStage } from "@/types/core";
  4: 
  5: 
  6: jest.mock("@/types/database", () => ({
  7:   varietyService: {
  8:     getAllVarieties: jest.fn(),
  9:     getVariety: jest.fn(),
 10:     getVarietyByName: jest.fn(),
 11:     addVariety: jest.fn(),
 12:   },
 13:   careService: {
 14:     getLastCareActivityByType: jest.fn(),
 15:   },
 16:   db: {
 17:     careActivities: {
 18:       where: jest.fn(() => ({
 19:         equals: jest.fn(() => ({
 20:           toArray: jest.fn(),
 21:         })),
 22:       })),
 23:     },
 24:   },
 25: }));
 26: 
 27: describe("SmartDefaultsService", () => {
 28:   beforeEach(async () => {
 29:     jest.clearAllMocks();
 30:   });
 31: 
 32:   describe("error handling and edge cases", () => {
 33:     it("handles corrupted care log data without crashing", async () => {
 34:       const varieties = [
 35:         {
 36:           id: "test-variety",
 37:           name: "Test Variety",
 38:           category: "leafy-greens" as const,
 39:           growthTimeline: {
 40:             germination: { min: 3, max: 7 },
 41:             seedling: { min: 14, max: 21 },
 42:             vegetative: { min: 21, max: 35 },
 43:             mature: { min: 35, max: 50 },
 44:             flowering: { min: 50, max: 70 },
 45:             fruiting: { min: 70, max: 90 },
 46:           },
 47:           createdAt: new Date(),
 48:         },
 49:       ];
 50: 
 51: 
 52:       const mockPlant = {
 53:         id: "test-plant",
 54:         varietyId: "test-variety",
 55:         varietyName: "Test Variety",
 56:         name: "Test Plant",
 57:         plantedDate: new Date(),
 58:         currentStage: "vegetative" as GrowthStage,
 59:         location: "Indoor",
 60:         container: "4-inch pot",
 61:         isActive: true,
 62:         createdAt: new Date(),
 63:         updatedAt: new Date(),
 64:       };
 65: 
 66:       (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
 67:         varieties
 68:       );
 69:       (varietyService.getVariety as jest.Mock).mockResolvedValue(varieties[0]);
 70: 
 71:       const result = await SmartDefaultsService.getDefaultsForPlant(mockPlant);
 72: 
 73: 
 74:       expect(result).toBeDefined();
 75: 
 76: 
 77:       if (result) {
 78:         expect(result).toHaveProperty("watering");
 79:         expect(result).toHaveProperty("fertilizer");
 80:       }
 81:     });
 82: 
 83:     it("returns null for invalid plant data", async () => {
 84:       const invalidPlant = {
 85:         id: "invalid-plant",
 86:         varietyId: "non-existent-variety",
 87:         varietyName: "Non-existent",
 88:         name: "Invalid Plant",
 89:         plantedDate: new Date(),
 90:         currentStage: "vegetative" as GrowthStage,
 91:         location: "Indoor",
 92:         container: "4-inch pot",
 93:         isActive: true,
 94:         createdAt: new Date(),
 95:         updatedAt: new Date(),
 96:       };
 97: 
 98:       (varietyService.getVariety as jest.Mock).mockResolvedValue(null);
 99: 
100:       const result = await SmartDefaultsService.getDefaultsForPlant(
101:         invalidPlant
102:       );
103: 
104:       expect(result).toBeNull();
105:     });
106: 
107:     it("handles missing growth timeline gracefully", async () => {
108:       const varietyWithoutTimeline = {
109:         id: "test-variety",
110:         name: "Test Variety",
111:         category: "leafy-greens" as const,
112:         createdAt: new Date(),
113: 
114:       };
115: 
116:       const mockPlant = {
117:         id: "test-plant",
118:         varietyId: "test-variety",
119:         varietyName: "Test Variety",
120:         name: "Test Plant",
121:         plantedDate: new Date(),
122:         currentStage: "vegetative" as GrowthStage,
123:         location: "Indoor",
124:         container: "4-inch pot",
125:         isActive: true,
126:         createdAt: new Date(),
127:         updatedAt: new Date(),
128:       };
129: 
130:       (varietyService.getVariety as jest.Mock).mockResolvedValue(
131:         varietyWithoutTimeline
132:       );
133: 
134:       const result = await SmartDefaultsService.getDefaultsForPlant(mockPlant);
135: 
136: 
137:       expect(result).toBeDefined();
138:     });
139:   });
140: 
141:   describe("quick completion options", () => {
142:     it("generates appropriate options for watering", async () => {
143:       const mockPlant = {
144:         id: "test-plant",
145:         varietyId: "test-variety",
146:         varietyName: "Test Variety",
147:         name: "Test Plant",
148:         plantedDate: new Date(),
149:         currentStage: "vegetative" as GrowthStage,
150:         location: "Indoor",
151:         container: "4-inch pot",
152:         isActive: true,
153:         createdAt: new Date(),
154:         updatedAt: new Date(),
155:       };
156: 
157: 
158:       const mockVariety = {
159:         id: "test-variety",
160:         name: "Test Variety",
161:         category: "leafy-greens" as const,
162:         growthTimeline: {
163:           germination: { min: 3, max: 7 },
164:           seedling: { min: 14, max: 21 },
165:           vegetative: { min: 21, max: 35 },
166:           mature: { min: 35, max: 50 },
167:           flowering: { min: 50, max: 70 },
168:           fruiting: { min: 70, max: 90 },
169:         },
170:         createdAt: new Date(),
171:       };
172: 
173:       (varietyService.getVariety as jest.Mock).mockResolvedValue(mockVariety);
174: 
175:       const options = await SmartDefaultsService.getQuickCompletionOptions(
176:         mockPlant,
177:         "water"
178:       );
179: 
180: 
181:       expect(options).not.toBeNull();
182:       if (options) {
183:         expect(Array.isArray(options)).toBe(true);
184:         expect(options.length).toBeGreaterThanOrEqual(0);
185:       }
186:     });
187:   });
188: });

================
File: src/__tests__/utils/growthStage.test.ts
================
  1: import {
  2:   calculateCurrentStage,
  3:   calculateCurrentStageWithVariety,
  4:   getStageProgress,
  5:   estimateStageTransition,
  6:   getNextStage,
  7: } from "../../utils/growthStage";
  8: import { restoreDate } from "../../setupTests";
  9: import { VarietyRecord } from "../../types/database";
 10: import { GrowthStage } from "@/types";
 11: 
 12: describe("Growth Stage Utilities", () => {
 13:   const mockTimeline = {
 14:     germination: 7,
 15:     seedling: 14,
 16:     vegetative: 21,
 17:     maturation: 60,
 18:   };
 19: 
 20: 
 21:   const mockEverbearingVariety: VarietyRecord = {
 22:     id: "albion-strawberry",
 23:     name: "Albion Strawberries",
 24:     category: "berries",
 25:     growthTimeline: {
 26:       germination: 14,
 27:       seedling: 28,
 28:       vegetative: 42,
 29:       maturation: 90,
 30:     },
 31:     isEverbearing: true,
 32:     productiveLifespan: 730,
 33:     createdAt: new Date(),
 34:   };
 35: 
 36:   const mockNonEverbearingVariety: VarietyRecord = {
 37:     id: "little-finger-carrots",
 38:     name: "Little Finger Carrots",
 39:     category: "root-vegetables",
 40:     growthTimeline: {
 41:       germination: 10,
 42:       seedling: 14,
 43:       vegetative: 21,
 44:       maturation: 65,
 45:     },
 46:     isEverbearing: false,
 47:     createdAt: new Date(),
 48:   };
 49: 
 50:   beforeEach(() => {
 51:     restoreDate();
 52:   });
 53: 
 54:   describe("calculateCurrentStage (basic function)", () => {
 55:     it("returns germination for early days", () => {
 56:       const plantedDate = new Date("2024-01-01");
 57:       const currentDate = new Date("2024-01-05");
 58: 
 59:       const stage = calculateCurrentStage(
 60:         plantedDate,
 61:         mockTimeline,
 62:         currentDate
 63:       );
 64:       expect(stage).toBe("germination");
 65:     });
 66: 
 67:     it("transitions to seedling correctly", () => {
 68:       const plantedDate = new Date("2024-01-01");
 69:       const currentDate = new Date("2024-01-08");
 70: 
 71:       const stage = calculateCurrentStage(
 72:         plantedDate,
 73:         mockTimeline,
 74:         currentDate
 75:       );
 76:       expect(stage).toBe("seedling");
 77:     });
 78: 
 79:     it("transitions to vegetative correctly", () => {
 80:       const plantedDate = new Date("2024-01-01");
 81:       const currentDate = new Date("2024-01-22");
 82: 
 83:       const stage = calculateCurrentStage(
 84:         plantedDate,
 85:         mockTimeline,
 86:         currentDate
 87:       );
 88:       expect(stage).toBe("vegetative");
 89:     });
 90: 
 91:     it("transitions to flowering correctly", () => {
 92:       const plantedDate = new Date("2024-01-01");
 93:       const currentDate = new Date("2024-02-12");
 94: 
 95:       const stage = calculateCurrentStage(
 96:         plantedDate,
 97:         mockTimeline,
 98:         currentDate
 99:       );
100:       expect(stage).toBe("flowering");
101:     });
102: 
103:     it("returns harvest for plants past maturation date", () => {
104: 
105:       const plantedDate = new Date("2024-01-01");
106:       const currentDate = new Date("2024-03-05");
107: 
108:       const stage = calculateCurrentStage(
109:         plantedDate,
110:         mockTimeline,
111:         currentDate
112:       );
113:       expect(stage).toBe("harvest");
114:     });
115: 
116:     it("handles future planting dates gracefully", () => {
117:       const plantedDate = new Date("2024-12-31");
118:       const currentDate = new Date("2024-01-01");
119: 
120:       const stage = calculateCurrentStage(
121:         plantedDate,
122:         mockTimeline,
123:         currentDate
124:       );
125:       expect(stage).toBe("germination");
126:     });
127: 
128:     it("handles leap year edge cases", () => {
129:       const plantedDate = new Date("2024-02-28");
130:       const currentDate = new Date("2024-03-01");
131: 
132:       const stage = calculateCurrentStage(
133:         plantedDate,
134:         mockTimeline,
135:         currentDate
136:       );
137:       expect(stage).toBe("germination");
138:     });
139: 
140:     it("handles timezone DST transitions", () => {
141: 
142:       const plantedDate = new Date("2024-03-09T12:00:00");
143:       const currentDate = new Date("2024-03-11T12:00:00");
144: 
145:       const stage = calculateCurrentStage(
146:         plantedDate,
147:         mockTimeline,
148:         currentDate
149:       );
150:       expect(stage).toBe("germination");
151:     });
152:   });
153: 
154:   describe("calculateCurrentStageWithVariety (enhanced function)", () => {
155:     describe("everbearing plants", () => {
156:       it("returns ongoing-production for everbearing plants after maturation", () => {
157:         const plantedDate = new Date("2024-01-01");
158:         const currentDate = new Date("2024-04-05");
159: 
160:         const stage = calculateCurrentStageWithVariety(
161:           plantedDate,
162:           mockEverbearingVariety,
163:           currentDate
164:         );
165:         expect(stage).toBe("ongoing-production");
166:       });
167: 
168:       it("handles the exact strawberry scenario (103 days)", () => {
169:         const plantedDate = new Date("2024-01-01");
170:         const currentDate = new Date("2024-04-14");
171: 
172:         const stage = calculateCurrentStageWithVariety(
173:           plantedDate,
174:           mockEverbearingVariety,
175:           currentDate
176:         );
177:         expect(stage).toBe("ongoing-production");
178:       });
179: 
180:       it("returns harvest when past productive lifespan", () => {
181:         const plantedDate = new Date("2022-01-01");
182:         const currentDate = new Date("2024-02-01");
183: 
184:         const stage = calculateCurrentStageWithVariety(
185:           plantedDate,
186:           mockEverbearingVariety,
187:           currentDate
188:         );
189:         expect(stage).toBe("harvest");
190:       });
191: 
192:       it("follows normal growth stages before maturation", () => {
193:         const testCases = [
194:           { days: 5, expected: "germination" },
195:           { days: 20, expected: "seedling" },
196:           { days: 50, expected: "vegetative" },
197:           { days: 87, expected: "flowering" },
198:         ];
199: 
200:         testCases.forEach(({ days, expected }) => {
201:           const plantedDate = new Date("2024-01-01");
202:           const currentDate = new Date(plantedDate);
203:           currentDate.setDate(currentDate.getDate() + days);
204: 
205:           const stage = calculateCurrentStageWithVariety(
206:             plantedDate,
207:             mockEverbearingVariety,
208:             currentDate
209:           );
210:           expect(stage).toBe(expected);
211:         });
212:       });
213:     });
214: 
215:     describe("non-everbearing plants", () => {
216:       it("returns harvest for non-everbearing plants after maturation", () => {
217:         const plantedDate = new Date("2024-01-01");
218:         const currentDate = new Date("2024-03-10");
219: 
220:         const stage = calculateCurrentStageWithVariety(
221:           plantedDate,
222:           mockNonEverbearingVariety,
223:           currentDate
224:         );
225:         expect(stage).toBe("harvest");
226:       });
227: 
228:       it("follows normal growth stages before maturation", () => {
229:         const testCases = [
230:           { days: 5, expected: "germination" },
231:           { days: 15, expected: "seedling" },
232:           { days: 30, expected: "vegetative" },
233:           { days: 60, expected: "flowering" },
234:         ];
235: 
236:         testCases.forEach(({ days, expected }) => {
237:           const plantedDate = new Date("2024-01-01");
238:           const currentDate = new Date(plantedDate);
239:           currentDate.setDate(currentDate.getDate() + days);
240: 
241:           const stage = calculateCurrentStageWithVariety(
242:             plantedDate,
243:             mockNonEverbearingVariety,
244:             currentDate
245:           );
246:           expect(stage).toBe(expected);
247:         });
248:       });
249:     });
250: 
251:     describe("edge cases", () => {
252:       it("handles everbearing plants without productiveLifespan", () => {
253:         const varietyWithoutLifespan: VarietyRecord = {
254:           ...mockEverbearingVariety,
255:           productiveLifespan: undefined,
256:         };
257: 
258:         const plantedDate = new Date("2022-01-01");
259:         const currentDate = new Date("2024-01-01");
260: 
261:         const stage = calculateCurrentStageWithVariety(
262:           plantedDate,
263:           varietyWithoutLifespan,
264:           currentDate
265:         );
266:         expect(stage).toBe("harvest");
267:       });
268: 
269:       it("handles future planting dates gracefully", () => {
270:         const plantedDate = new Date("2024-12-31");
271:         const currentDate = new Date("2024-01-01");
272: 
273:         const stage = calculateCurrentStageWithVariety(
274:           plantedDate,
275:           mockEverbearingVariety,
276:           currentDate
277:         );
278:         expect(stage).toBe("germination");
279:       });
280:     });
281:   });
282: 
283:   describe("getStageProgress", () => {
284:     it("calculates progress correctly mid-stage", () => {
285:       const plantedDate = new Date("2024-01-01");
286:       const currentDate = new Date("2024-01-11");
287: 
288:       const progress = getStageProgress(plantedDate, mockTimeline, currentDate);
289: 
290:       expect(progress).toBeCloseTo(21, 0);
291:     });
292: 
293:     it("returns 100% for completed stages", () => {
294:       const plantedDate = new Date("2024-01-01");
295:       const currentDate = new Date("2024-03-01");
296: 
297:       const progress = getStageProgress(plantedDate, mockTimeline, currentDate);
298:       expect(progress).toBe(100);
299:     });
300: 
301:     it("handles all new stage types", () => {
302:       const plantedDate = new Date("2024-01-01");
303:       const currentDate = new Date("2024-03-01");
304: 
305: 
306:       const timeline = { ...mockTimeline };
307:       const progress = getStageProgress(plantedDate, timeline, currentDate);
308:       expect(progress).toBe(100);
309:     });
310:   });
311: 
312:   describe("getNextStage", () => {
313:     it("returns correct next stages for basic progression", () => {
314:       expect(getNextStage("germination")).toBe("seedling");
315:       expect(getNextStage("seedling")).toBe("vegetative");
316:       expect(getNextStage("vegetative")).toBe("flowering");
317:       expect(getNextStage("flowering")).toBe("maturation");
318:       expect(getNextStage("maturation")).toBe("ongoing-production");
319:       expect(getNextStage("ongoing-production")).toBe("harvest");
320:     });
321: 
322:     it("returns null for the final stage", () => {
323:       expect(getNextStage("harvest")).toBe(null);
324:     });
325: 
326:     it("handles invalid stages gracefully", () => {
327: 
328:       expect(getNextStage(undefined as unknown as GrowthStage)).toBe(null);
329: 
330: 
331:       const invalidStage = "not-a-real-stage" as unknown as GrowthStage;
332:       expect(getNextStage(invalidStage)).toBe(null);
333:     });
334:   });
335: 
336:   describe("estimateStageTransition", () => {
337:     it("estimates correct transition dates", () => {
338:       const plantedDate = new Date("2024-01-01");
339: 
340:       const floweringDate = estimateStageTransition(
341:         plantedDate,
342:         mockTimeline,
343:         "flowering"
344:       );
345:       expect(floweringDate).toEqual(new Date("2024-02-12"));
346:     });
347: 
348:     it("handles new stage types", () => {
349:       const plantedDate = new Date("2024-01-01");
350: 
351:       const ongoingProductionDate = estimateStageTransition(
352:         plantedDate,
353:         mockTimeline,
354:         "ongoing-production"
355:       );
356:       expect(ongoingProductionDate).toEqual(new Date("2024-03-01"));
357: 
358:       const harvestDate = estimateStageTransition(
359:         plantedDate,
360:         mockTimeline,
361:         "harvest"
362:       );
363:       expect(harvestDate).toEqual(new Date("2024-03-01"));
364:     });
365:   });
366: 
367:   describe("integration tests with real variety data", () => {
368:     it("correctly handles Albion strawberry timeline", () => {
369:       const plantedDate = new Date("2024-01-01");
370: 
371: 
372:       const testCases = [
373:         { days: 10, expected: "germination" },
374:         { days: 20, expected: "seedling" },
375:         { days: 50, expected: "vegetative" },
376:         { days: 87, expected: "flowering" },
377:         { days: 103, expected: "ongoing-production" },
378:         { days: 365, expected: "ongoing-production" },
379:         { days: 731, expected: "harvest" },
380:       ];
381: 
382:       testCases.forEach(({ days, expected }) => {
383:         const currentDate = new Date(plantedDate);
384:         currentDate.setDate(currentDate.getDate() + days);
385: 
386:         const stage = calculateCurrentStageWithVariety(
387:           plantedDate,
388:           mockEverbearingVariety,
389:           currentDate
390:         );
391: 
392:         expect(stage).toBe(expected);
393:       });
394:     });
395: 
396:     it("correctly handles Caroline raspberry timeline", () => {
397:       const raspberryVariety: VarietyRecord = {
398:         id: "caroline-raspberry",
399:         name: "Caroline Raspberries",
400:         category: "berries",
401:         growthTimeline: {
402:           germination: 0,
403:           seedling: 21,
404:           vegetative: 42,
405:           maturation: 120,
406:         },
407:         isEverbearing: true,
408:         productiveLifespan: 1095,
409:         createdAt: new Date(),
410:       };
411: 
412:       const plantedDate = new Date("2024-01-01");
413:       const testCases = [
414:         { days: 10, expected: "seedling" },
415:         { days: 30, expected: "vegetative" },
416:         { days: 60, expected: "vegetative" },
417:         { days: 110, expected: "flowering" },
418:         { days: 130, expected: "ongoing-production" },
419:         { days: 1000, expected: "ongoing-production" },
420:         { days: 1100, expected: "harvest" },
421:       ];
422: 
423:       testCases.forEach(({ days, expected }) => {
424:         const currentDate = new Date(plantedDate);
425:         currentDate.setDate(currentDate.getDate() + days);
426: 
427:         const stage = calculateCurrentStageWithVariety(
428:           plantedDate,
429:           raspberryVariety,
430:           currentDate
431:         );
432: 
433:         expect(stage).toBe(expected);
434:       });
435:     });
436:   });
437: });

================
File: src/components/layouts/Welcome.tsx
================
  1: import React, { useState } from "react";
  2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { Link } from "react-router-dom";
  5: 
  6: const Welcome: React.FC = () => {
  7:   const [currentStep, setCurrentStep] = useState(0);
  8: 
  9:   const onboardingSteps = [
 10:     {
 11:       title: "Welcome to SmartGarden",
 12:       content: (
 13:         <div className="text-center space-y-6">
 14:           <div className="text-7xl mb-6 animate-bounce">🌿</div>
 15:           <div className="space-y-4">
 16:             <h2 className="text-3xl font-black text-foreground leading-tight">
 17:               Your digital gardening companion
 18:             </h2>
 19:             <p className="text-muted-foreground leading-relaxed text-lg">
 20:               Track your plants, schedule care tasks, and grow healthier gardens
 21:               with science-backed protocols.
 22:             </p>
 23:           </div>
 24:         </div>
 25:       ),
 26:     },
 27:     {
 28:       title: "Smart Care Scheduling",
 29:       content: (
 30:         <div className="text-center space-y-6">
 31:           <div className="text-7xl mb-6 animate-pulse">📅</div>
 32:           <div className="space-y-4">
 33:             <h2 className="text-3xl font-black text-foreground leading-tight">
 34:               Never miss a watering
 35:             </h2>
 36:             <p className="text-muted-foreground leading-relaxed text-lg">
 37:               Get personalized care reminders based on your plants' growth
 38:               stages and your logging history.
 39:             </p>
 40:           </div>
 41:         </div>
 42:       ),
 43:     },
 44:     {
 45:       title: "Photo & Progress Tracking",
 46:       content: (
 47:         <div className="text-center space-y-6">
 48:           <div className="text-7xl mb-6">📸</div>
 49:           <div className="space-y-4">
 50:             <h2 className="text-3xl font-black text-foreground leading-tight">
 51:               Document your garden's journey
 52:             </h2>
 53:             <p className="text-muted-foreground leading-relaxed text-lg">
 54:               Capture photos, log activities, and watch your plants thrive with
 55:               detailed growth tracking.
 56:             </p>
 57:           </div>
 58:         </div>
 59:       ),
 60:     },
 61:     {
 62:       title: "Ready to Start?",
 63:       content: (
 64:         <div className="text-center space-y-6">
 65:           <div className="text-7xl mb-6">🚀</div>
 66:           <div className="space-y-4">
 67:             <h2 className="text-3xl font-black text-foreground leading-tight">
 68:               Let's add your first plant
 69:             </h2>
 70:             <p className="text-muted-foreground leading-relaxed text-lg">
 71:               Start your digital garden by registering your first plant. We'll
 72:               guide you through the process.
 73:             </p>
 74:           </div>
 75:         </div>
 76:       ),
 77:     },
 78:   ];
 79: 
 80:   const nextStep = () => {
 81:     if (currentStep < onboardingSteps.length - 1) {
 82:       setCurrentStep(currentStep + 1);
 83:     }
 84:   };
 85: 
 86:   const previousStep = () => {
 87:     if (currentStep > 0) {
 88:       setCurrentStep(currentStep - 1);
 89:     }
 90:   };
 91: 
 92:   const currentStepData = onboardingSteps[currentStep];
 93:   const isLastStep = currentStep === onboardingSteps.length - 1;
 94:   const isFirstStep = currentStep === 0;
 95: 
 96:   return (
 97:     <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-blue-50 flex items-center justify-center p-4">
 98:       <div className="w-full max-w-sm">
 99:         <Card className="shadow-2xl border-0 bg-card/95 backdrop-blur-lg rounded-3xl overflow-hidden">
100:           <CardHeader className="text-center pb-6 bg-gradient-to-r from-emerald-500/5 to-green-500/5">
101:             <CardTitle className="text-xs font-bold text-muted-foreground uppercase tracking-widest">
102:               {currentStepData.title}
103:             </CardTitle>
104: 
105:             {}
106:             <div className="flex justify-center mt-8 space-x-2">
107:               {onboardingSteps.map((_, index) => (
108:                 <div
109:                   key={index}
110:                   className={`h-3 rounded-full transition-all duration-500 ease-out ${
111:                     index === currentStep
112:                       ? "w-8 bg-gradient-to-r from-emerald-500 to-green-600 shadow-lg shadow-emerald-500/40"
113:                       : index < currentStep
114:                       ? "w-3 bg-emerald-400"
115:                       : "w-3 bg-gray-200"
116:                   }`}
117:                 />
118:               ))}
119:             </div>
120:           </CardHeader>
121: 
122:           <CardContent className="pb-8 px-6">
123:             {}
124:             <div className="min-h-80 flex items-center justify-center mb-8">
125:               {currentStepData.content}
126:             </div>
127: 
128:             {}
129:             <div className="space-y-4">
130:               {}
131:               <div className="w-full">
132:                 {isLastStep ? (
133:                   <Link to="/add-plant" className="block">
134:                     <Button
135:                       size="lg"
136:                       className="w-full group"
137:                       rightIcon={
138:                         <span className="text-2xl group-hover:scale-110 transition-transform duration-200">
139:                           🌱
140:                         </span>
141:                       }
142:                     >
143:                       Add My First Plant
144:                     </Button>
145:                   </Link>
146:                 ) : (
147:                   <Button
148:                     onClick={nextStep}
149:                     size="lg"
150:                     className="w-full group"
151:                     rightIcon={
152:                       <svg
153:                         className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-200"
154:                         fill="none"
155:                         stroke="currentColor"
156:                         viewBox="0 0 24 24"
157:                       >
158:                         <path
159:                           strokeLinecap="round"
160:                           strokeLinejoin="round"
161:                           strokeWidth={3}
162:                           d="M9 5l7 7-7 7"
163:                         />
164:                       </svg>
165:                     }
166:                   >
167:                     Continue
168:                   </Button>
169:                 )}
170:               </div>
171: 
172:               {}
173:               <div className="flex gap-3">
174:                 <div className="flex-1">
175:                   {!isFirstStep && (
176:                     <Button
177:                       variant="ghost"
178:                       onClick={previousStep}
179:                       className="w-full"
180:                       leftIcon={
181:                         <svg
182:                           className="w-4 h-4"
183:                           fill="none"
184:                           stroke="currentColor"
185:                           viewBox="0 0 24 24"
186:                         >
187:                           <path
188:                             strokeLinecap="round"
189:                             strokeLinejoin="round"
190:                             strokeWidth={2}
191:                             d="M15 19l-7-7 7-7"
192:                           />
193:                         </svg>
194:                       }
195:                     >
196:                       Back
197:                     </Button>
198:                   )}
199:                 </div>
200:                 <div className="flex-1">
201:                   {!isLastStep && (
202:                     <Link to="/add-plant" className="block">
203:                       <Button
204:                         variant="ghost"
205:                         className="w-full"
206:                         rightIcon={
207:                           <svg
208:                             className="w-4 h-4"
209:                             fill="none"
210:                             stroke="currentColor"
211:                             viewBox="0 0 24 24"
212:                           >
213:                             <path
214:                               strokeLinecap="round"
215:                               strokeLinejoin="round"
216:                               strokeWidth={2}
217:                               d="M9 5l7 7-7 7"
218:                             />
219:                           </svg>
220:                         }
221:                       >
222:                         Skip
223:                       </Button>
224:                     </Link>
225:                   )}
226:                 </div>
227:               </div>
228:             </div>
229:           </CardContent>
230:         </Card>
231:       </div>
232:     </div>
233:   );
234: };
235: 
236: export default Welcome;

================
File: src/components/plant/CareActivityItem.tsx
================
  1: import React, { useState } from "react";
  2: import { CareRecord } from "@/types";
  3: import { formatDateTime } from "@/utils/dateUtils";
  4: 
  5: interface CareActivityItemProps {
  6:   activity: CareRecord;
  7: }
  8: 
  9: const CareActivityItem: React.FC<CareActivityItemProps> = ({ activity }) => {
 10:   const [isExpanded, setIsExpanded] = useState(false);
 11: 
 12:   const getActivityIcon = (type: string): string => {
 13:     switch (type) {
 14:       case "water":
 15:         return "💧";
 16:       case "fertilize":
 17:         return "🌱";
 18:       case "observe":
 19:         return "👁️";
 20:       case "harvest":
 21:         return "🌾";
 22:       case "transplant":
 23:         return "🏺";
 24:       default:
 25:         return "📋";
 26:     }
 27:   };
 28: 
 29:   const getActivityTitle = (activity: CareRecord): string => {
 30:     const details = activity.details;
 31: 
 32:     switch (activity.type) {
 33:       case "water": {
 34: 
 35:         let amountDisplay = "unknown amount";
 36:         if (typeof details.amount === "object" && details.amount?.value) {
 37:           amountDisplay = `${details.amount.value} ${details.amount.unit}`;
 38:         } else if (details.waterAmount && details.waterUnit) {
 39:           amountDisplay = `${details.waterAmount} ${details.waterUnit}`;
 40:         }
 41:         return `Watering (${amountDisplay})`;
 42:       }
 43:       case "fertilize": {
 44:         return `Fertilized with ${details.product || "fertilizer"}`;
 45:       }
 46:       case "observe": {
 47:         return `Health Check (${details.healthAssessment || "unknown"})`;
 48:       }
 49:       case "harvest": {
 50:         const amount =
 51:           typeof details.amount === "string"
 52:             ? details.amount
 53:             : "unknown amount";
 54:         return `Harvested ${amount}`;
 55:       }
 56:       case "transplant": {
 57:         return `Transplanted to ${details.toContainer || "new container"}`;
 58:       }
 59:       default:
 60:         return "Care Activity";
 61:     }
 62:   };
 63: 
 64:   const renderActivityDetails = (activity: CareRecord) => {
 65:     const details = activity.details;
 66: 
 67:     switch (activity.type) {
 68:       case "water": {
 69:         return (
 70:           <div className="space-y-2">
 71:             <div className="grid grid-cols-2 gap-4 text-sm">
 72:               <div>
 73:                 <span className="font-medium text-muted-foreground">
 74:                   Amount:
 75:                 </span>
 76:                 <div>
 77:                   {typeof details.amount === "object" && details.amount?.value
 78:                     ? `${details.amount.value} ${details.amount.unit}`
 79:                     : details.waterAmount && details.waterUnit
 80:                     ? `${details.waterAmount} ${details.waterUnit}`
 81:                     : "Not specified"}
 82:                 </div>
 83:               </div>
 84:               {details.method && (
 85:                 <div>
 86:                   <span className="font-medium text-muted-foreground">
 87:                     Method:
 88:                   </span>
 89:                   <div>{details.method.replace("-", " ")}</div>
 90:                 </div>
 91:               )}
 92:             </div>
 93:             {details.moistureLevel && (
 94:               <div>
 95:                 <span className="font-medium text-muted-foreground">
 96:                   Moisture Reading:
 97:                 </span>
 98:                 <div className="text-sm">
 99:                   Before: {details.moistureLevel.before}/10 → After:{" "}
100:                   {details.moistureLevel.after}/10
101:                 </div>
102:               </div>
103:             )}
104:             {details.runoffObserved !== undefined && (
105:               <div>
106:                 <span className="font-medium text-muted-foreground">
107:                   Runoff:
108:                 </span>
109:                 <div className="text-sm">
110:                   {details.runoffObserved ? "Yes" : "No"}
111:                 </div>
112:               </div>
113:             )}
114:           </div>
115:         );
116:       }
117: 
118:       case "fertilize": {
119:         return (
120:           <div className="space-y-2">
121:             <div className="grid grid-cols-2 gap-4 text-sm">
122:               <div>
123:                 <span className="font-medium text-muted-foreground">
124:                   Product:
125:                 </span>
126:                 <div>{details.product || "Not specified"}</div>
127:               </div>
128:               <div>
129:                 <span className="font-medium text-muted-foreground">
130:                   Dilution:
131:                 </span>
132:                 <div>{details.dilution || "Not specified"}</div>
133:               </div>
134:               <div>
135:                 <span className="font-medium text-muted-foreground">
136:                   Amount:
137:                 </span>
138:                 <div>
139:                   {typeof details.amount === "string"
140:                     ? details.amount
141:                     : "Not specified"}
142:                 </div>
143:               </div>
144:             </div>
145:           </div>
146:         );
147:       }
148: 
149:       case "observe": {
150:         return (
151:           <div className="space-y-2">
152:             <div>
153:               <span className="font-medium text-muted-foreground">
154:                 Health Assessment:
155:               </span>
156:               <div className="text-sm capitalize">
157:                 {details.healthAssessment || "Not specified"}
158:               </div>
159:             </div>
160:             <div>
161:               <span className="font-medium text-muted-foreground">
162:                 Observations:
163:               </span>
164:               <div className="text-sm">{details.observations || "None"}</div>
165:             </div>
166:             {details.photos && details.photos.length > 0 && (
167:               <div>
168:                 <span className="font-medium text-muted-foreground">
169:                   Photos:
170:                 </span>
171:                 <div className="text-sm">
172:                   {details.photos.length} photo(s) attached
173:                 </div>
174:               </div>
175:             )}
176:           </div>
177:         );
178:       }
179: 
180:       case "harvest": {
181:         return (
182:           <div className="space-y-2">
183:             <div className="grid grid-cols-2 gap-4 text-sm">
184:               <div>
185:                 <span className="font-medium text-muted-foreground">
186:                   Amount:
187:                 </span>
188:                 <div>
189:                   {typeof details.amount === "string"
190:                     ? details.amount
191:                     : "Not specified"}
192:                 </div>
193:               </div>
194:               <div>
195:                 <span className="font-medium text-muted-foreground">
196:                   Quality:
197:                 </span>
198:                 <div className="capitalize">
199:                   {details.quality || "Not specified"}
200:                 </div>
201:               </div>
202:             </div>
203:             {details.harvestMethod && (
204:               <div>
205:                 <span className="font-medium text-muted-foreground">
206:                   Method:
207:                 </span>
208:                 <div className="text-sm">{details.harvestMethod}</div>
209:               </div>
210:             )}
211:           </div>
212:         );
213:       }
214: 
215:       case "transplant": {
216:         return (
217:           <div className="space-y-2">
218:             <div className="grid grid-cols-2 gap-4 text-sm">
219:               <div>
220:                 <span className="font-medium text-muted-foreground">From:</span>
221:                 <div>{details.fromContainer || "Not specified"}</div>
222:               </div>
223:               <div>
224:                 <span className="font-medium text-muted-foreground">To:</span>
225:                 <div>{details.toContainer || "Not specified"}</div>
226:               </div>
227:             </div>
228:             <div>
229:               <span className="font-medium text-muted-foreground">Reason:</span>
230:               <div className="text-sm">{details.reason || "Not specified"}</div>
231:             </div>
232:           </div>
233:         );
234:       }
235: 
236:       default:
237:         return null;
238:     }
239:   };
240: 
241:   return (
242:     <div className="border border-border rounded-lg">
243:       <div
244:         className="p-4 cursor-pointer hover:bg-background transition-colors"
245:         onClick={() => setIsExpanded(!isExpanded)}
246:       >
247:         <div className="flex items-start gap-3">
248:           <div className="text-xl">{getActivityIcon(activity.type)}</div>
249:           <div className="flex-1 min-w-0">
250:             <div className="flex items-start justify-between">
251:               <div>
252:                 <h4 className="font-medium text-foreground text-sm">
253:                   {getActivityTitle(activity)}
254:                 </h4>
255:                 <p className="text-xs text-muted-foreground mt-1">
256:                   {formatDateTime(activity.date)}
257:                 </p>
258:               </div>
259:               <svg
260:                 className={`w-4 h-4 text-muted-foreground transition-transform ${
261:                   isExpanded ? "rotate-180" : ""
262:                 }`}
263:                 fill="none"
264:                 stroke="currentColor"
265:                 viewBox="0 0 24 24"
266:               >
267:                 <path
268:                   strokeLinecap="round"
269:                   strokeLinejoin="round"
270:                   strokeWidth={2}
271:                   d="M19 9l-7 7-7-7"
272:                 />
273:               </svg>
274:             </div>
275:           </div>
276:         </div>
277:       </div>
278: 
279:       {isExpanded && (
280:         <div className="px-4 pb-4 border-t border-gray-100 bg-background">
281:           <div className="pt-3">
282:             {renderActivityDetails(activity)}
283: 
284:             {activity.details.notes && (
285:               <div className="mt-3 pt-3 border-t border-border">
286:                 <span className="font-medium text-muted-foreground">
287:                   Notes:
288:                 </span>
289:                 <div className="text-sm text-foreground mt-1">
290:                   {activity.details.notes}
291:                 </div>
292:               </div>
293:             )}
294:           </div>
295:         </div>
296:       )}
297:     </div>
298:   );
299: };
300: 
301: export default CareActivityItem;

================
File: src/components/plant/CustomVarietyForm.tsx
================
  1: import { useState } from "react";
  2: import { useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { Button } from "@/components/ui/Button";
  6: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  7: import { varietyService } from "@/types/database";
  8: import toast from "react-hot-toast";
  9: 
 10: const customVarietySchema = z.object({
 11:   name: z.string().min(1, "Variety name is required"),
 12:   category: z.enum([
 13:     "root-vegetables",
 14:     "leafy-greens",
 15:     "herbs",
 16:     "berries",
 17:     "fruiting-plants",
 18:   ]),
 19:   growthTimeline: z.object({
 20:     germination: z.number().min(1).max(90),
 21:     seedling: z.number().min(1).max(90),
 22:     vegetative: z.number().min(1).max(180),
 23:     rootDevelopment: z.number().min(1).max(180),
 24:     maturation: z.number().min(1).max(365),
 25:   }),
 26:   customMoistureRanges: z.boolean().optional(),
 27:   triggerMin: z.number().min(1).max(10).optional(),
 28:   triggerMax: z.number().min(1).max(10).optional(),
 29:   targetMin: z.number().min(1).max(10).optional(),
 30:   targetMax: z.number().min(1).max(10).optional(),
 31: });
 32: 
 33: type CustomVarietyData = z.infer<typeof customVarietySchema>;
 34: 
 35: interface CustomVarietyFormProps {
 36:   onSuccess?: (varietyId: string) => void;
 37:   onCancel?: () => void;
 38: }
 39: 
 40: export function CustomVarietyForm({
 41:   onSuccess,
 42:   onCancel,
 43: }: CustomVarietyFormProps) {
 44:   const [isLoading, setIsLoading] = useState(false);
 45:   const [showMoistureCustomization, setShowMoistureCustomization] =
 46:     useState(false);
 47: 
 48:   const {
 49:     register,
 50:     handleSubmit,
 51:     formState: { errors },
 52:     reset,
 53:   } = useForm<CustomVarietyData>({
 54:     resolver: zodResolver(customVarietySchema),
 55:     defaultValues: {
 56:       triggerMin: 3,
 57:       triggerMax: 4,
 58:       targetMin: 6,
 59:       targetMax: 7,
 60:     },
 61:   });
 62: 
 63:   async function onSubmit(data: CustomVarietyData) {
 64:     setIsLoading(true);
 65:     try {
 66: 
 67:       let protocols = undefined;
 68:       if (
 69:         data.customMoistureRanges &&
 70:         data.triggerMin &&
 71:         data.triggerMax &&
 72:         data.targetMin &&
 73:         data.targetMax
 74:       ) {
 75:         const wateringRanges = {
 76:           trigger: { moistureLevel: `${data.triggerMin}-${data.triggerMax}` },
 77:           target: { moistureLevel: `${data.targetMin}-${data.targetMax}` },
 78:         };
 79: 
 80: 
 81:         protocols = {
 82:           watering: {
 83:             germination: wateringRanges,
 84:             seedling: wateringRanges,
 85:             vegetative: wateringRanges,
 86:             flowering: wateringRanges,
 87:             fruiting: wateringRanges,
 88:             maturation: wateringRanges,
 89:             harvest: wateringRanges,
 90:             "ongoing-production": wateringRanges,
 91:           },
 92:         };
 93:       }
 94: 
 95:       const varietyId = await varietyService.addVariety({
 96:         name: data.name,
 97:         category: data.category,
 98:         growthTimeline: {
 99:           ...data.growthTimeline,
100:           rootDevelopment: data.growthTimeline.rootDevelopment,
101:         },
102:         protocols,
103:         isCustom: true,
104:       });
105: 
106:       toast.success(`Created custom variety: ${data.name}!`);
107:       reset();
108:       onSuccess?.(varietyId);
109:     } catch (error) {
110:       console.error("Failed to create variety:", error);
111:       toast.error("Failed to create variety. Please try again.");
112:     } finally {
113:       setIsLoading(false);
114:     }
115:   }
116: 
117:   return (
118:     <Card className="max-w-2xl mx-auto">
119:       <CardHeader>
120:         <CardTitle>Create Custom Plant Variety</CardTitle>
121:         <p className="text-sm text-muted-foreground mt-1">
122:           Add your own plant varieties like pumpkins, exotic herbs, or local
123:           cultivars
124:         </p>
125:       </CardHeader>
126:       <CardContent>
127:         <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
128:           <div>
129:             <label className="block text-sm font-medium text-foreground mb-2">
130:               Variety Name *
131:             </label>
132:             <input
133:               {...register("name")}
134:               placeholder="e.g., Jack-o'-lantern Pumpkins, Cherokee Purple Tomatoes"
135:               className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
136:             />
137:             {errors.name && (
138:               <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
139:             )}
140:           </div>
141: 
142:           <div>
143:             <label className="block text-sm font-medium text-foreground mb-2">
144:               Category *
145:             </label>
146:             <select
147:               {...register("category")}
148:               className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
149:             >
150:               <option value="fruiting-plants">
151:                 🎃 Fruiting Plants (pumpkins, squash, melons, etc.)
152:               </option>
153:               <option value="leafy-greens">
154:                 🥬 Leafy Greens (lettuce, spinach, kale, etc.)
155:               </option>
156:               <option value="root-vegetables">
157:                 🥕 Root Vegetables (carrots, beets, radishes, etc.)
158:               </option>
159:               <option value="herbs">
160:                 🌿 Herbs (basil, cilantro, sage, etc.)
161:               </option>
162:               <option value="berries">
163:                 🫐 Berries (strawberries, raspberries, etc.)
164:               </option>
165:             </select>
166:             <p className="mt-1 text-xs text-muted-foreground">
167:               This determines default care guidelines and protocols
168:             </p>
169:           </div>
170: 
171:           {}
172:           <div>
173:             <h3 className="text-lg font-medium text-foreground mb-4">
174:               Growth Timeline (days)
175:             </h3>
176:             <p className="text-sm text-muted-foreground mb-4">
177:               How long does each growth stage typically last? These help predict
178:               care needs.
179:             </p>
180:             <div className="grid grid-cols-2 gap-4">
181:               <div>
182:                 <label className="block text-sm font-medium text-foreground mb-2">
183:                   Germination Days
184:                 </label>
185:                 <input
186:                   type="number"
187:                   {...register("growthTimeline.germination", {
188:                     valueAsNumber: true,
189:                   })}
190:                   placeholder="7"
191:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
192:                 />
193:                 <p className="text-xs text-muted-foreground mt-1">
194:                   Days to sprout
195:                 </p>
196:               </div>
197:               <div>
198:                 <label className="block text-sm font-medium text-foreground mb-2">
199:                   Seedling Stage Days
200:                 </label>
201:                 <input
202:                   type="number"
203:                   {...register("growthTimeline.seedling", {
204:                     valueAsNumber: true,
205:                   })}
206:                   placeholder="14"
207:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
208:                 />
209:                 <p className="text-xs text-muted-foreground mt-1">
210:                   Early growth period
211:                 </p>
212:               </div>
213:               <div>
214:                 <label className="block text-sm font-medium text-foreground mb-2">
215:                   Vegetative Growth Days
216:                 </label>
217:                 <input
218:                   type="number"
219:                   {...register("growthTimeline.vegetative", {
220:                     valueAsNumber: true,
221:                   })}
222:                   placeholder="30"
223:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
224:                 />
225:                 <p className="text-xs text-muted-foreground mt-1">
226:                   Leaf and stem development
227:                 </p>
228:               </div>
229:               <div>
230:                 <label className="block text-sm font-medium text-foreground mb-2">
231:                   Root Development Days
232:                 </label>
233:                 <input
234:                   type="number"
235:                   {...register("growthTimeline.rootDevelopment", {
236:                     valueAsNumber: true,
237:                   })}
238:                   placeholder="42"
239:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
240:                 />
241:                 <p className="text-xs text-muted-foreground mt-1">
242:                   Root system establishment
243:                 </p>
244:               </div>
245:               <div>
246:                 <label className="block text-sm font-medium text-foreground mb-2">
247:                   Total Days to Maturity
248:                 </label>
249:                 <input
250:                   type="number"
251:                   {...register("growthTimeline.maturation", {
252:                     valueAsNumber: true,
253:                   })}
254:                   placeholder="60"
255:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
256:                 />
257:                 <p className="text-xs text-muted-foreground mt-1">
258:                   Ready for harvest
259:                 </p>
260:               </div>
261:             </div>
262:           </div>
263: 
264:           {}
265:           <div className="border-t pt-6">
266:             <div className="flex items-center justify-between mb-4">
267:               <div>
268:                 <h3 className="text-lg font-medium text-foreground">
269:                   Custom Moisture Protocol
270:                 </h3>
271:                 <p className="text-sm text-muted-foreground">
272:                   Set specific watering ranges, or use category defaults
273:                 </p>
274:               </div>
275:               <button
276:                 type="button"
277:                 onClick={() =>
278:                   setShowMoistureCustomization(!showMoistureCustomization)
279:                 }
280:                 className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
281:                   showMoistureCustomization ? "bg-garden-600" : "bg-gray-300"
282:                 }`}
283:               >
284:                 <span
285:                   className={`inline-block h-4 w-4 transform rounded-full bg-card transition-transform ${
286:                     showMoistureCustomization
287:                       ? "translate-x-6"
288:                       : "translate-x-1"
289:                   }`}
290:                 />
291:               </button>
292:             </div>
293: 
294:             {showMoistureCustomization && (
295:               <div className="space-y-4 bg-blue-50 p-4 rounded-lg">
296:                 <input
297:                   type="hidden"
298:                   {...register("customMoistureRanges")}
299:                   checked={showMoistureCustomization}
300:                 />
301: 
302:                 <div className="text-sm text-blue-800 mb-3">
303:                   💡 <strong>Moisture Meter Guide:</strong> Most plants prefer
304:                   watering when moisture drops to 3-4, then watered until
305:                   reaching 6-8. Adjust based on your specific variety's needs.
306:                 </div>
307: 
308:                 <div className="grid grid-cols-2 gap-4">
309:                   <div>
310:                     <label className="block text-sm font-medium text-foreground mb-2">
311:                       Water When (Min Level)
312:                     </label>
313:                     <input
314:                       type="number"
315:                       min="1"
316:                       max="10"
317:                       step="0.5"
318:                       {...register("triggerMin", { valueAsNumber: true })}
319:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
320:                     />
321:                     <p className="text-xs text-muted-foreground mt-1">
322:                       Lowest moisture before watering
323:                     </p>
324:                   </div>
325:                   <div>
326:                     <label className="block text-sm font-medium text-foreground mb-2">
327:                       Water When (Max Level)
328:                     </label>
329:                     <input
330:                       type="number"
331:                       min="1"
332:                       max="10"
333:                       step="0.5"
334:                       {...register("triggerMax", { valueAsNumber: true })}
335:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
336:                     />
337:                     <p className="text-xs text-muted-foreground mt-1">
338:                       Highest moisture before watering
339:                     </p>
340:                   </div>
341:                   <div>
342:                     <label className="block text-sm font-medium text-foreground mb-2">
343:                       Target After (Min Level)
344:                     </label>
345:                     <input
346:                       type="number"
347:                       min="1"
348:                       max="10"
349:                       step="0.5"
350:                       {...register("targetMin", { valueAsNumber: true })}
351:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
352:                     />
353:                     <p className="text-xs text-muted-foreground mt-1">
354:                       Minimum moisture after watering
355:                     </p>
356:                   </div>
357:                   <div>
358:                     <label className="block text-sm font-medium text-foreground mb-2">
359:                       Target After (Max Level)
360:                     </label>
361:                     <input
362:                       type="number"
363:                       min="1"
364:                       max="10"
365:                       step="0.5"
366:                       {...register("targetMax", { valueAsNumber: true })}
367:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
368:                     />
369:                     <p className="text-xs text-muted-foreground mt-1">
370:                       Maximum moisture after watering
371:                     </p>
372:                   </div>
373:                 </div>
374:                 <p className="text-xs text-blue-700">
375:                   💡 These ranges will apply to all growth stages initially. You
376:                   can refine them later as you learn your plant's specific needs
377:                   through the care logging system.
378:                 </p>
379:               </div>
380:             )}
381:           </div>
382: 
383:           <div className="flex gap-4 pt-4">
384:             <Button
385:               type="submit"
386:               variant="primary"
387:               disabled={isLoading}
388:               className="flex-1"
389:             >
390:               {isLoading ? "Creating..." : "Create Variety"}
391:             </Button>
392:             {onCancel && (
393:               <Button type="button" variant="outline" onClick={onCancel}>
394:                 Cancel
395:               </Button>
396:             )}
397:           </div>
398:         </form>
399:       </CardContent>
400:     </Card>
401:   );
402: }

================
File: src/components/plant/PlantReminderSettings.tsx
================
  1: import { useState } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: import { plantService, PlantRecord } from "@/types/database";
  4: import ReminderPreferencesSection from "./ReminderPreferencesSection";
  5: import toast from "react-hot-toast";
  6: 
  7: interface PlantReminderSettingsProps {
  8:   plant: PlantRecord;
  9:   onUpdate: (updatedPlant: PlantRecord) => void;
 10: }
 11: 
 12: 
 13: interface ReminderPreferences {
 14:   watering: boolean;
 15:   fertilizing: boolean;
 16:   observation: boolean;
 17:   lighting: boolean;
 18:   pruning: boolean;
 19: }
 20: 
 21: const PlantReminderSettings = ({
 22:   plant,
 23:   onUpdate,
 24: }: PlantReminderSettingsProps) => {
 25: 
 26:   const [preferences, setPreferences] = useState<ReminderPreferences>({
 27:     watering: plant.reminderPreferences?.watering ?? true,
 28:     fertilizing: plant.reminderPreferences?.fertilizing ?? true,
 29:     observation: plant.reminderPreferences?.observation ?? true,
 30:     lighting: plant.reminderPreferences?.lighting ?? true,
 31:     pruning: plant.reminderPreferences?.pruning ?? true,
 32:   });
 33: 
 34:   const [isLoading, setIsLoading] = useState(false);
 35:   const [saveStatus, setSaveStatus] = useState<"idle" | "success" | "error">(
 36:     "idle"
 37:   );
 38: 
 39:   const handleSave = async () => {
 40:     try {
 41:       setIsLoading(true);
 42:       setSaveStatus("idle");
 43: 
 44:       await plantService.updatePlant(plant.id, {
 45:         reminderPreferences: preferences,
 46:         updatedAt: new Date(),
 47:       });
 48: 
 49:       const updatedPlant = {
 50:         ...plant,
 51:         reminderPreferences: preferences,
 52:       };
 53: 
 54:       onUpdate(updatedPlant);
 55:       setSaveStatus("success");
 56:       toast.success("Reminder preferences updated!");
 57:     } catch (error) {
 58:       console.error("Failed to update preferences:", error);
 59:       setSaveStatus("error");
 60:       toast.error("Failed to update preferences");
 61:     } finally {
 62:       setIsLoading(false);
 63:     }
 64:   };
 65: 
 66: 
 67:   const hasChanges =
 68:     preferences.watering !== (plant.reminderPreferences?.watering ?? true) ||
 69:     preferences.fertilizing !==
 70:       (plant.reminderPreferences?.fertilizing ?? true) ||
 71:     preferences.observation !==
 72:       (plant.reminderPreferences?.observation ?? true) ||
 73:     preferences.lighting !== (plant.reminderPreferences?.lighting ?? true) ||
 74:     preferences.pruning !== (plant.reminderPreferences?.pruning ?? true);
 75: 
 76:   return (
 77:     <div className="space-y-6">
 78:       <ReminderPreferencesSection
 79:         preferences={preferences}
 80:         onChange={setPreferences}
 81:       />
 82: 
 83:       <div className="flex gap-4 pt-4">
 84:         <Button
 85:           onClick={handleSave}
 86:           disabled={!hasChanges || isLoading}
 87:           variant={hasChanges ? "primary" : "outline"}
 88:           className="flex-1"
 89:         >
 90:           {isLoading ? "Saving..." : hasChanges ? "Save Changes" : "No Changes"}
 91:         </Button>
 92:       </div>
 93: 
 94:       {saveStatus === "success" && (
 95:         <p className="text-sm text-emerald-600">
 96:           ✓ Preferences saved successfully
 97:         </p>
 98:       )}
 99:       {saveStatus === "error" && (
100:         <p className="text-sm text-red-600">✗ Failed to save preferences</p>
101:       )}
102:     </div>
103:   );
104: };
105: 
106: export default PlantReminderSettings;

================
File: src/components/ui/Button.tsx
================
  1: import React from "react";
  2: import { cn } from "@/utils/cn";
  3: 
  4: interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  5:   variant?: "primary" | "secondary" | "outline" | "ghost" | "destructive";
  6:   size?: "sm" | "md" | "lg" | "xl";
  7:   children: React.ReactNode;
  8:   loading?: boolean;
  9:   leftIcon?: React.ReactNode;
 10:   rightIcon?: React.ReactNode;
 11: }
 12: 
 13: export const Button: React.FC<ButtonProps> = ({
 14:   variant = "primary",
 15:   size = "md",
 16:   className,
 17:   children,
 18:   loading = false,
 19:   leftIcon,
 20:   rightIcon,
 21:   disabled,
 22:   ...props
 23: }) => {
 24:   const baseClasses = [
 25:     "inline-flex items-center justify-center",
 26:     "font-bold tracking-wide",
 27:     "rounded-2xl",
 28:     "transition-all duration-200 ease-out",
 29:     "focus:outline-none focus:ring-4 focus:ring-offset-0",
 30:     "active:scale-95",
 31:     "disabled:opacity-50 disabled:cursor-not-allowed disabled:active:scale-100",
 32:     "select-none",
 33:     "relative overflow-hidden",
 34:   ].join(" ");
 35: 
 36:   const variantClasses = {
 37:     primary: [
 38:       "bg-gradient-to-r from-emerald-500 to-green-600",
 39:       "text-white",
 40:       "hover:from-emerald-600 hover:to-green-700",
 41:       "active:from-emerald-700 active:to-green-800",
 42:       "focus:ring-emerald-400/50",
 43:       "shadow-lg shadow-emerald-500/25",
 44:       "hover:shadow-xl hover:shadow-emerald-500/30",
 45:       "border-0",
 46:     ].join(" "),
 47: 
 48:     secondary: [
 49:       "bg-gradient-to-r from-amber-400 to-orange-500",
 50:       "text-white",
 51:       "hover:from-amber-500 hover:to-orange-600",
 52:       "focus:ring-amber-400/50",
 53:       "shadow-lg shadow-amber-400/25",
 54:       "border-0",
 55:     ].join(" "),
 56: 
 57:     outline: [
 58:       "bg-card text-primary",
 59:       "hover:bg-muted hover:text-primary",
 60:       "active:bg-muted",
 61:       "focus:ring-ring/50",
 62:       "border-2 border-border",
 63:       "hover:border-ring",
 64:       "shadow-sm hover:shadow-md",
 65:     ].join(" "),
 66: 
 67:     ghost: [
 68:       "bg-transparent text-muted-foreground",
 69:       "hover:bg-muted hover:text-foreground",
 70:       "active:bg-muted",
 71:       "focus:ring-ring/50",
 72:       "border-0",
 73:       "shadow-none",
 74:     ].join(" "),
 75: 
 76:     destructive: [
 77:       "bg-gradient-to-r from-red-500 to-red-600",
 78:       "text-white",
 79:       "hover:from-red-600 hover:to-red-700",
 80:       "active:from-red-700 active:to-red-800",
 81:       "focus:ring-red-400/50",
 82:       "shadow-lg shadow-red-500/25",
 83:       "hover:shadow-xl hover:shadow-red-500/30",
 84:       "border-0",
 85:     ].join(" "),
 86:   };
 87: 
 88:   const sizeClasses = {
 89:     sm: "px-3 py-1.5 text-sm gap-1.5",
 90:     md: "px-4 py-2 text-base gap-2",
 91:     lg: "px-6 py-3 text-lg gap-2.5",
 92:     xl: "px-8 py-4 text-xl gap-3",
 93:   };
 94: 
 95:   const isDisabled = disabled || loading;
 96: 
 97:   return (
 98:     <button
 99:       className={cn(
100:         baseClasses,
101:         variantClasses[variant],
102:         sizeClasses[size],
103:         className
104:       )}
105:       disabled={isDisabled}
106:       {...props}
107:     >
108:       {loading && (
109:         <div className="absolute inset-0 flex items-center justify-center">
110:           <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
111:         </div>
112:       )}
113: 
114:       <div className={cn("flex items-center gap-2", loading && "opacity-0")}>
115:         {leftIcon && <span className="flex-shrink-0">{leftIcon}</span>}
116:         <span>{children}</span>
117:         {rightIcon && <span className="flex-shrink-0">{rightIcon}</span>}
118:       </div>
119:     </button>
120:   );
121: };

================
File: src/components/Navigation.tsx
================
 1: import React from "react";
 2: import { Link, useLocation } from "react-router-dom";
 3: import { cn } from "@/utils/cn";
 4: import { DarkModeToggle } from "@/components/ui/DarkModeToggle";
 5: 
 6: const Navigation: React.FC = () => {
 7:   const location = useLocation();
 8: 
 9:   const navItems = [
10:     { path: "/", label: "Dashboard", icon: "🏠" },
11:     { path: "/plants", label: "Plants", icon: "🌱" },
12:     { path: "/add-plant", label: "Add Plant", icon: "➕" },
13:   ];
14: 
15:   return (
16:     <nav className="fixed bottom-0 left-0 right-0 bg-card dark:bg-background border-t border-border z-50">
17:       <div className="flex justify-around items-center h-16 px-4">
18:         {navItems.map((item) => (
19:           <Link
20:             key={item.path}
21:             to={item.path}
22:             className={cn(
23:               "flex flex-col items-center justify-center min-w-touch h-full px-2",
24:               "text-xs font-medium transition-colors",
25:               location.pathname === item.path
26:                 ? "text-garden-600 dark:text-emerald-500 bg-garden-50 dark:bg-card"
27:                 : "text-muted-foreground dark:text-muted-foreground hover:text-garden-500 dark:hover:text-emerald-500"
28:             )}
29:           >
30:             <span className="text-xl mb-1">{item.icon}</span>
31:             <span className="text-xs">{item.label}</span>
32:           </Link>
33:         ))}
34: 
35:         {}
36:         <div className="flex flex-col items-center justify-center h-full px-2">
37:           <DarkModeToggle size="sm" />
38:           <span className="text-xs text-muted-foreground dark:text-muted-foreground mt-1">
39:             Theme
40:           </span>
41:         </div>
42:       </div>
43:     </nav>
44:   );
45: };
46: 
47: export default Navigation;

================
File: src/hooks/useDynamicStage.ts
================
 1: import { useEffect, useState } from "react";
 2: import { PlantRecord, varietyService } from "@/types/database";
 3: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 4: import { GrowthStage } from "@/types";
 5: 
 6: export function useDynamicStage(plant: PlantRecord): GrowthStage {
 7:   const [calculatedStage, setCalculatedStage] =
 8:     useState<GrowthStage>("germination");
 9: 
10:   useEffect(() => {
11:     const calculateStage = async () => {
12:       try {
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23:         const variety = await varietyService.getVariety(plant.varietyId);
24: 
25:         if (!variety) {
26: 
27:           const allVarieties = await varietyService.getAllVarieties();
28: 
29:           const varietyByName = allVarieties.find(
30:             (v) => v.name === plant.varietyName
31:           );
32: 
33:           if (varietyByName) {
34:             const stage = calculateCurrentStageWithVariety(
35:               plant.plantedDate,
36:               varietyByName
37:             );
38:             setCalculatedStage(stage);
39:             return;
40:           }
41:           setCalculatedStage("germination");
42:           return;
43:         }
44: 
45:         const stage = calculateCurrentStageWithVariety(
46:           plant.plantedDate,
47:           variety
48:         );
49:         setCalculatedStage(stage);
50:       } catch (error) {
51:         console.error("❌ Error calculating stage:", error);
52:         setCalculatedStage("germination");
53:       }
54:     };
55: 
56:     calculateStage();
57:   }, [
58:     plant.varietyId,
59:     plant.plantedDate,
60:     plant.varietyName,
61: 
62:   ]);
63: 
64:   return calculatedStage;
65: }

================
File: src/pages/care/LogCare.tsx
================
 1: import React from "react";
 2: import { CareLogForm } from "@/pages/care/CareLogForm";
 3: import { useNavigate, useSearchParams } from "react-router-dom";
 4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
 5: import { BookOpen } from "lucide-react";
 6: 
 7: const LogCare: React.FC = () => {
 8:   const navigate = useNavigate();
 9:   const [searchParams] = useSearchParams();
10:   const preSelectedPlantId = searchParams.get("plantId");
11: 
12:   const handleSuccess = () => {
13:     navigate(-1);
14:   };
15: 
16:   const handleCancel = () => {
17:     navigate(-1);
18:   };
19: 
20:   return (
21:     <div className="min-h-screen bg-background p-4 space-y-4">
22:       <Card className="border-border shadow-sm">
23:         <CardHeader className="pb-3">
24:           <CardTitle className="flex items-center gap-2 text-base">
25:             <BookOpen className="h-4 w-4" />
26:             Log Care Activity
27:           </CardTitle>
28:         </CardHeader>
29:         <CardContent className="pt-0">
30:           <p className="text-sm text-muted-foreground">
31:             Record care activities for your plants to track their health and
32:             growth progress.
33:           </p>
34:         </CardContent>
35:       </Card>
36: 
37:       <CareLogForm
38:         onSuccess={handleSuccess}
39:         onCancel={handleCancel}
40:         preselectedPlantId={preSelectedPlantId || undefined}
41:       />
42:     </div>
43:   );
44: };
45: 
46: export default LogCare;

================
File: src/pages/care/QuickCompletionButtons.tsx
================
 1: import { useState, useEffect } from "react";
 2: import { Button } from "@/components/ui/Button";
 3: import {
 4:   SmartDefaultsService,
 5:   QuickCompletionValues,
 6: } from "@/services/smartDefaultsService";
 7: import { PlantRecord } from "@/types/database";
 8: 
 9: interface QuickCompletionButtonsProps {
10:   plant: PlantRecord;
11:   activityType: "water" | "fertilize";
12:   onQuickComplete: (values: QuickCompletionValues) => void;
13:   className?: string;
14: }
15: 
16: const QuickCompletionButtons = ({
17:   plant,
18:   activityType,
19:   onQuickComplete,
20:   className = "",
21: }: QuickCompletionButtonsProps) => {
22:   const [options, setOptions] = useState<Array<{
23:     label: string;
24:     values: QuickCompletionValues;
25:   }> | null>(null);
26:   const [isLoading, setIsLoading] = useState(false);
27: 
28:   useEffect(() => {
29:     const loadOptions = async () => {
30:       try {
31:         setIsLoading(true);
32:         const completionOptions =
33:           await SmartDefaultsService.getQuickCompletionOptions(
34:             plant,
35:             activityType
36:           );
37:         setOptions(completionOptions);
38:       } catch (error) {
39:         console.error("Error loading quick completion options:", error);
40:         setOptions(null);
41:       } finally {
42:         setIsLoading(false);
43:       }
44:     };
45: 
46:     if (plant) {
47:       loadOptions();
48:     }
49:   }, [plant, activityType]);
50: 
51:   if (isLoading) {
52:     return (
53:       <div className={`flex gap-2 ${className}`}>
54:         <div className="animate-pulse bg-gray-200 rounded-full h-8 w-20"></div>
55:         <div className="animate-pulse bg-gray-200 rounded-full h-8 w-20"></div>
56:       </div>
57:     );
58:   }
59: 
60:   if (!options || options.length === 0) {
61:     return null;
62:   }
63: 
64:   return (
65:     <div className={`flex gap-2 flex-wrap ${className}`}>
66:       <span className="text-xs text-muted-foreground self-center">
67:         Quick actions:
68:       </span>
69:       {options.map((option, index) => (
70:         <Button
71:           key={index}
72:           type="button"
73:           variant="outline"
74:           size="sm"
75:           onClick={() => onQuickComplete(option.values)}
76:         >
77:           {option.label}
78:         </Button>
79:       ))}
80:     </div>
81:   );
82: };
83: 
84: export default QuickCompletionButtons;

================
File: src/pages/plants/AddPlant.tsx
================
 1: import React from "react";
 2: import { useNavigate } from "react-router-dom";
 3: import { Button } from "@/components/ui/Button";
 4: import { OfflineIndicator } from "@/components/ui/OfflineIndicator";
 5: import Navigation from "@/components/Navigation";
 6: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
 7: import { ArrowLeft } from "lucide-react";
 8: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
 9: 
10: const AddPlant: React.FC = () => {
11:   const navigate = useNavigate();
12:   const { user, signOut } = useFirebaseAuth();
13: 
14:   const handleSuccess = () => {
15:     navigate("/");
16:   };
17: 
18:   const handleCancel = () => {
19:     navigate("/");
20:   };
21: 
22:   return (
23:     <>
24:       <OfflineIndicator />
25:       <div className="min-h-screen bg-background pb-20">
26:         {}
27:         <div className="bg-card border-b border-border sticky top-0 z-40">
28:           <div className="max-w-6xl mx-auto px-4 py-4">
29:             <div className="flex justify-between items-center">
30:               <div className="flex items-center gap-3">
31:                 <Button
32:                   variant="ghost"
33:                   size="sm"
34:                   onClick={() => navigate("/")}
35:                   className="p-2"
36:                   aria-label="Go back"
37:                 >
38:                   <ArrowLeft className="h-4 w-4" />
39:                 </Button>
40:                 <span className="text-2xl">🌱</span>
41:                 <div>
42:                   <h1 className="text-xl font-bold text-foreground">
43:                     Add New Plant
44:                   </h1>
45:                   <p className="text-sm text-muted-foreground hidden sm:block">
46:                     Register a new plant to start tracking its growth
47:                   </p>
48:                 </div>
49:               </div>
50:               <div className="flex items-center gap-3">
51:                 <div className="hidden sm:block">
52:                   <span className="text-sm text-muted-foreground">
53:                     Welcome, {user?.displayName || user?.email}
54:                   </span>
55:                 </div>
56:                 <Button variant="outline" size="sm" onClick={signOut}>
57:                   Sign Out
58:                 </Button>
59:               </div>
60:             </div>
61:           </div>
62:         </div>
63: 
64:         {}
65:         <div className="max-w-6xl mx-auto p-4">
66:           <div className="flex justify-center">
67:             <div className="w-full max-w-2xl">
68:               <PlantRegistrationForm
69:                 onSuccess={handleSuccess}
70:                 onCancel={handleCancel}
71:               />
72:             </div>
73:           </div>
74:         </div>
75:       </div>
76:       <Navigation />
77:     </>
78:   );
79: };
80: 
81: export default AddPlant;

================
File: src/App.css
================
 1: #root {
 2:   max-width: 1280px;
 3:   margin: 0 auto;
 4:   padding: 2rem;
 5:   text-align: center;
 6:   @apply bg-background;
 7: }
 8: 
 9: .logo {
10:   height: 6em;
11:   padding: 1.5em;
12:   will-change: filter;
13:   transition: filter 300ms;
14: }
15: .logo:hover {
16:   filter: drop-shadow(0 0 2em #646cffaa);
17: }
18: .logo.react:hover {
19:   filter: drop-shadow(0 0 2em #61dafbaa);
20: }
21: 
22: @keyframes logo-spin {
23:   from {
24:     transform: rotate(0deg);
25:   }
26:   to {
27:     transform: rotate(360deg);
28:   }
29: }
30: 
31: @media (prefers-reduced-motion: no-preference) {
32:   a:nth-of-type(2) .logo {
33:     animation: logo-spin infinite 20s linear;
34:   }
35: }
36: 
37: .card {
38:   padding: 2em;
39: }
40: 
41: .read-the-docs {
42:   color: #888;
43: }

================
File: tsconfig.json
================
 1: {
 2:   "compilerOptions": {
 3:     "target": "ES2020",
 4:     "useDefineForClassFields": true,
 5:     "lib": ["ES2020", "DOM", "DOM.Iterable"],
 6:     "module": "ESNext",
 7:     "skipLibCheck": true,
 8:     "moduleResolution": "bundler",
 9:     "allowImportingTsExtensions": true,
10:     "resolveJsonModule": true,
11:     "isolatedModules": true,
12:     "noEmit": true,
13:     "jsx": "react-jsx",
14:     "strict": true,
15:     "noUnusedLocals": true,
16:     "noUnusedParameters": true,
17:     "noFallthroughCasesInSwitch": true,
18:     "baseUrl": ".",
19:     "paths": {
20:       "@/*": ["./src/*"],
21:       "@/components/*": ["./src/components/*"],
22:       "@/pages/*": ["./src/pages/*"],
23:       "@/hooks/*": ["./src/hooks/*"],
24:       "@/services/*": ["./src/services/*"],
25:       "@/types/*": ["./src/types/*"],
26:       "@/utils/*": ["./src/utils/*"]
27:     },
28:     "types": ["node", "jest", "@testing-library/jest-dom"]
29:   },
30:   "include": ["src", "vite.config.ts"],
31:   "setupFilesAfterEnv": ["<rootDir>/support/setupTests.js"]
32: }

================
File: src/__tests__/components/PlantRegistrationForm.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
  4: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  5: import { varietyService } from "@/types/database";
  6: import toast from "react-hot-toast";
  7: 
  8: 
  9: jest.mock("@/hooks/useFirebasePlants");
 10: jest.mock("@/types/database");
 11: jest.mock("react-hot-toast");
 12: 
 13: 
 14: jest.mock("@/components/plant/SoilMixtureSelector", () => ({
 15:   __esModule: true,
 16:   default: ({
 17:     onMixtureChange,
 18:     selectedMixture,
 19:   }: {
 20:     onMixtureChange: (mixture: string) => void;
 21:     selectedMixture?: string;
 22:   }) => (
 23:     <div data-testid="soil-mixture-selector">
 24:       <button
 25:         onClick={() => onMixtureChange("test-mixture")}
 26:         data-testid="select-soil-mixture"
 27:       >
 28:         Select Soil Mixture
 29:       </button>
 30:       {selectedMixture && (
 31:         <span data-testid="selected-mixture">{selectedMixture}</span>
 32:       )}
 33:     </div>
 34:   ),
 35: }));
 36: 
 37: jest.mock("@/components/plant/ReminderPreferencesSection", () => ({
 38:   __esModule: true,
 39:   default: ({
 40:     onChange,
 41:     preferences,
 42:   }: {
 43:     onChange: (preferences: Record<string, boolean>) => void;
 44:     preferences: Record<string, boolean>;
 45:   }) => (
 46:     <div data-testid="reminder-preferences">
 47:       <button
 48:         onClick={() =>
 49:           onChange({ ...preferences, watering: !preferences.watering })
 50:         }
 51:         data-testid="toggle-watering"
 52:       >
 53:         Toggle Watering
 54:       </button>
 55:     </div>
 56:   ),
 57: }));
 58: 
 59: jest.mock("@/components/plant/CustomVarietyForm", () => ({
 60:   CustomVarietyForm: ({
 61:     onSuccess,
 62:     onCancel,
 63:   }: {
 64:     onSuccess: (varietyId: string) => void;
 65:     onCancel: () => void;
 66:   }) => (
 67:     <div data-testid="custom-variety-form">
 68:       <button
 69:         onClick={() => onSuccess("new-variety-id")}
 70:         data-testid="save-custom-variety"
 71:       >
 72:         Save Custom Variety
 73:       </button>
 74:       <button onClick={onCancel} data-testid="cancel-custom-variety">
 75:         Cancel
 76:       </button>
 77:     </div>
 78:   ),
 79: }));
 80: 
 81: jest.mock("@/components/ui/LoadingSpinner", () => ({
 82:   LoadingSpinner: () => <div data-testid="loading-spinner">Loading...</div>,
 83: }));
 84: 
 85: jest.mock("react-router-dom", () => ({
 86:   ...jest.requireActual("react-router-dom"),
 87:   useNavigate: () => jest.fn(),
 88: }));
 89: 
 90: const mockCreatePlant = jest.fn();
 91: const mockVarieties = [
 92:   {
 93:     id: "tomato-1",
 94:     name: "Cherry Tomato",
 95:     category: "fruiting-plants" as const,
 96:     growthTimeline: {
 97:       germination: 7,
 98:       seedling: 14,
 99:       vegetative: 28,
100:       maturation: 60,
101:     },
102:     isCustom: false,
103:     createdAt: new Date(),
104:   },
105:   {
106:     id: "basil-1",
107:     name: "Sweet Basil",
108:     category: "herbs" as const,
109:     growthTimeline: {
110:       germination: 5,
111:       seedling: 10,
112:       vegetative: 21,
113:       maturation: 45,
114:     },
115:     isCustom: false,
116:     createdAt: new Date(),
117:   },
118: ];
119: 
120: describe("PlantRegistrationForm", () => {
121:   const user = userEvent.setup();
122: 
123:   beforeEach(() => {
124:     jest.clearAllMocks();
125: 
126:     (useFirebasePlants as jest.Mock).mockReturnValue({
127:       createPlant: mockCreatePlant,
128:     });
129: 
130:     (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
131:       mockVarieties
132:     );
133:     mockCreatePlant.mockResolvedValue("new-plant-id");
134: 
135:     (toast.success as jest.Mock).mockImplementation(() => {});
136:     (toast.error as jest.Mock).mockImplementation(() => {});
137:   });
138: 
139:   const renderForm = (props = {}) => {
140:     return render(<PlantRegistrationForm {...props} />);
141:   };
142: 
143:   describe("Initial Rendering", () => {
144:     it("renders loading state initially", () => {
145:       renderForm();
146:       expect(
147:         screen.getByText("Loading plant varieties...")
148:       ).toBeInTheDocument();
149:     });
150: 
151:     it("renders form after varieties load", async () => {
152:       renderForm();
153: 
154:       await waitFor(() => {
155:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
156:       });
157: 
158:       expect(screen.getByLabelText(/plant variety/i)).toBeInTheDocument();
159:       expect(screen.getByLabelText(/planting date/i)).toBeInTheDocument();
160:     });
161:   });
162: 
163:   describe("Quantity Management", () => {
164:     beforeEach(async () => {
165:       renderForm();
166:       await waitFor(() => {
167:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
168:       });
169: 
170: 
171:       const growBagButton = screen.getByTestId("container-type-grow-bag");
172:       await user.click(growBagButton);
173:     });
174: 
175:     it("allows increasing and decreasing quantity", async () => {
176:       await waitFor(() => {
177:         expect(screen.getByTestId("quantity-input")).toBeInTheDocument();
178:       });
179: 
180:       const quantityInput = screen.getByTestId("quantity-input");
181:       const incrementButton = screen.getByLabelText("Increase quantity");
182:       const decrementButton = screen.getByLabelText("Decrease quantity");
183: 
184:       expect(quantityInput).toHaveValue(1);
185:       expect(decrementButton).toBeDisabled();
186: 
187:       await user.click(incrementButton);
188:       expect(quantityInput).toHaveValue(2);
189:       expect(decrementButton).not.toBeDisabled();
190: 
191:       await user.click(decrementButton);
192:       expect(quantityInput).toHaveValue(1);
193:       expect(decrementButton).toBeDisabled();
194:     });
195:   });
196: 
197: 
198: 
199: 
200:   describe("Container Selection", () => {
201:     beforeEach(async () => {
202:       renderForm();
203:       await waitFor(() => {
204:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
205:       });
206:     });
207: 
208:     it("shows container type options", () => {
209:       expect(screen.getByTestId("container-type-grow-bag")).toBeInTheDocument();
210:       expect(screen.getByTestId("container-type-pot")).toBeInTheDocument();
211:       expect(
212:         screen.getByTestId("container-type-cell-tray")
213:       ).toBeInTheDocument();
214:       expect(
215:         screen.getByTestId("container-type-raised-bed")
216:       ).toBeInTheDocument();
217:     });
218: 
219:     it("auto-selects container size when container type is selected", async () => {
220:       const growBagButton = screen.getByTestId("container-type-grow-bag");
221:       await user.click(growBagButton);
222: 
223:       await waitFor(() => {
224:         expect(screen.getByText("Container Size *")).toBeInTheDocument();
225:       });
226: 
227: 
228:       await waitFor(() => {
229:         const sizeSelect = screen.getByDisplayValue(
230:           "1 Gallon"
231:         ) as HTMLSelectElement;
232:         expect(sizeSelect).toBeInTheDocument();
233:         expect(sizeSelect.value).toBe("1-gallon");
234:       });
235:     });
236:   });
237: 
238:   describe("Form Validation", () => {
239:     beforeEach(async () => {
240:       renderForm();
241:       await waitFor(() => {
242:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
243:       });
244:     });
245: 
246:     it("enables form submission when all required fields are filled", async () => {
247: 
248:       const varietySelect = screen.getByLabelText(/plant variety/i);
249:       await user.selectOptions(varietySelect, "tomato-1");
250: 
251: 
252:       const growBagButton = screen.getByTestId("container-type-grow-bag");
253:       await user.click(growBagButton);
254: 
255: 
256:       await waitFor(() => {
257:         const sizeSelect = screen.getByDisplayValue("1 Gallon");
258:         expect(sizeSelect).toBeInTheDocument();
259: 
260:         expect((sizeSelect as HTMLSelectElement).value).toBe("1-gallon");
261:       });
262: 
263: 
264:       const selectSoilButton = screen.getByTestId("select-soil-mixture");
265:       await user.click(selectSoilButton);
266: 
267: 
268:       await waitFor(() => {
269:         const submitButton = screen.getByRole("button", {
270:           name: /register plant/i,
271:         });
272:         expect(submitButton).toBeEnabled();
273:       });
274:     });
275:   });
276: 
277:   describe("Form Submission", () => {
278: 
279:     const fillForm = async () => {
280:       await user.selectOptions(
281:         screen.getByLabelText(/plant variety/i),
282:         "tomato-1"
283:       );
284:       await user.click(screen.getByTestId("container-type-grow-bag"));
285:       await waitFor(() => {
286:         expect(screen.getByDisplayValue("1 Gallon")).toBeInTheDocument();
287:       });
288:       await user.click(screen.getByTestId("select-soil-mixture"));
289:     };
290: 
291: 
292:     beforeEach(async () => {
293:       renderForm();
294:       await waitFor(() => {
295:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
296:       });
297:     });
298: 
299:     it.skip("handles submission errors gracefully", async () => {});
300: 
301:     it("shows loading state during submission", async () => {
302: 
303:       let resolveCreatePlant: (value: string) => void;
304:       const createPlantPromise = new Promise<string>((resolve) => {
305:         resolveCreatePlant = resolve;
306:       });
307:       mockCreatePlant.mockReturnValueOnce(createPlantPromise);
308: 
309:       await fillForm();
310:       const submitButton = screen.getByRole("button", {
311:         name: /Register Plant/i,
312:       });
313:       await user.click(submitButton);
314: 
315: 
316:       expect(screen.getByText(/registering.../i)).toBeInTheDocument();
317:       expect(submitButton).toBeDisabled();
318: 
319: 
320:       resolveCreatePlant!("plant-id");
321: 
322: 
323:       await waitFor(() => {
324:         expect(screen.queryByText(/registering.../i)).not.toBeInTheDocument();
325:       });
326:     });
327:   });
328: 
329:   describe("Accessibility", () => {
330:     beforeEach(async () => {
331:       renderForm();
332:       await waitFor(() => {
333:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
334:       });
335:     });
336: 
337:     it("has proper form labels", () => {
338:       expect(screen.getByLabelText(/plant variety/i)).toBeInTheDocument();
339:       expect(screen.getByLabelText(/planting date/i)).toBeInTheDocument();
340:     });
341: 
342:     it("has proper ARIA attributes for buttons", () => {
343:       const growBagButton = screen.getByTestId("container-type-grow-bag");
344:       expect(growBagButton).toHaveAttribute("type", "button");
345:     });
346:   });
347: });

================
File: src/__tests__/integration/stageCalculationDisplay.test.tsx
================
  1: import { render, screen, waitFor, within } from "@testing-library/react";
  2: import { BrowserRouter } from "react-router-dom";
  3: import Plants from "../../pages/plants/Plants";
  4: import { varietyService, PlantRecord } from "@/types/database";
  5: import { initializeDatabase } from "@/db/seedData";
  6: import { subDays } from "date-fns";
  7: 
  8: 
  9: jest.mock("@/hooks/useFirebasePlants", () => ({
 10:   useFirebasePlants: jest.fn(),
 11: }));
 12: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 13: 
 14: describe("Stage Calculation and Display Integration", () => {
 15: 
 16:   beforeEach(async () => {
 17: 
 18:     (useFirebasePlants as jest.Mock).mockClear();
 19: 
 20: 
 21:     const { db } = await import("@/types/database");
 22:     await db.plants.clear();
 23:     await db.varieties.clear();
 24:     await initializeDatabase();
 25:   });
 26: 
 27:   const renderWithRouter = (component: React.ReactElement) => {
 28:     return render(<BrowserRouter>{component}</BrowserRouter>);
 29:   };
 30: 
 31: 
 32:   const setupMockPlants = (plants: PlantRecord[]) => {
 33:     (useFirebasePlants as jest.Mock).mockReturnValue({
 34:       plants: plants,
 35:       loading: false,
 36:       error: null,
 37:     });
 38:   };
 39: 
 40:   test("correctly displays 'Ongoing Production' for everbearing strawberries after maturation", async () => {
 41:     const varieties = await varietyService.getAllVarieties();
 42:     const albion = varieties.find((v) => v.name === "Albion Strawberries");
 43:     expect(albion).toBeDefined();
 44: 
 45:     const plantedDate = subDays(new Date(), 103);
 46:     const strawberryPlant = {
 47:       id: "strawberry-1",
 48:       varietyId: albion!.id,
 49:       varietyName: albion!.name,
 50:       name: "Test Strawberry",
 51:       plantedDate,
 52:       currentStage: "flowering",
 53:       location: "Indoor",
 54:       container: "5 gallon",
 55:       isActive: true,
 56:       createdAt: new Date(),
 57:       updatedAt: new Date(),
 58:     };
 59: 
 60:     setupMockPlants([strawberryPlant]);
 61:     renderWithRouter(<Plants />);
 62: 
 63:     await waitFor(() => {
 64: 
 65:       const stageElement = screen.getByText(/ongoing/i);
 66:       const productionElement = screen.getByText(/production/i);
 67:       expect(stageElement).toBeInTheDocument();
 68:       expect(productionElement).toBeInTheDocument();
 69:     });
 70:   });
 71: 
 72:   test("correctly displays 'Harvest' for non-everbearing carrots after maturation", async () => {
 73:     const varieties = await varietyService.getAllVarieties();
 74:     const carrots = varieties.find((v) => v.name === "Little Finger Carrots");
 75:     expect(carrots).toBeDefined();
 76: 
 77:     const plantedDate = subDays(new Date(), 80);
 78:     const carrotPlant = {
 79:       id: "carrot-1",
 80:       varietyId: carrots!.id,
 81:       varietyName: carrots!.name,
 82:       name: "Test Carrots",
 83:       plantedDate,
 84:       currentStage: "vegetative",
 85:       location: "Indoor",
 86:       container: "Deep container",
 87:       isActive: true,
 88:       createdAt: new Date(),
 89:       updatedAt: new Date(),
 90:     };
 91: 
 92:     setupMockPlants([carrotPlant]);
 93:     renderWithRouter(<Plants />);
 94: 
 95:     await waitFor(() => {
 96:       expect(screen.getByText(/harvest/i)).toBeInTheDocument();
 97:     });
 98:   });
 99: 
100:   test("correctly displays 'Vegetative' stage for spinach", async () => {
101:     const varieties = await varietyService.getAllVarieties();
102:     const spinach = varieties.find((v) => v.name === "Baby's Leaf Spinach");
103:     expect(spinach).toBeDefined();
104: 
105: 
106:     const plantedDate = subDays(new Date(), 25);
107:     const spinachPlant = {
108:       id: "spinach-1",
109:       varietyId: spinach!.id,
110:       varietyName: spinach!.name,
111:       name: "Test Spinach",
112:       plantedDate,
113:       currentStage: "seedling",
114:       location: "Indoor",
115:       container: "Medium container",
116:       isActive: true,
117:       createdAt: new Date(),
118:       updatedAt: new Date(),
119:     };
120: 
121:     setupMockPlants([spinachPlant]);
122:     renderWithRouter(<Plants />);
123: 
124:     await waitFor(() => {
125:       expect(screen.getByText(/vegetative/i)).toBeInTheDocument();
126:     });
127:   });
128: 
129:   test("correctly displays 'Seedling' stage for beets", async () => {
130:     const varieties = await varietyService.getAllVarieties();
131:     const beets = varieties.find((v) => v.name === "Detroit Dark Red Beets");
132:     expect(beets).toBeDefined();
133: 
134: 
135: 
136:     const plantedDate = subDays(new Date(), 15);
137:     const beetPlant = {
138:       id: "beet-1",
139:       varietyId: beets!.id,
140:       varietyName: beets!.name,
141:       name: "Test Beets Seedling",
142:       plantedDate,
143:       currentStage: "germination",
144:       location: "Indoor",
145:       container: "Small container",
146:       isActive: true,
147:       createdAt: new Date(),
148:       updatedAt: new Date(),
149:     };
150: 
151:     setupMockPlants([beetPlant]);
152:     renderWithRouter(<Plants />);
153: 
154: 
155:     await waitFor(() => {
156:       const card = screen
157:         .getByText("Test Beets Seedling")
158:         .closest(".hover\\:shadow-lg");
159:       expect(card).toBeInTheDocument();
160: 
161:       const stageElement = within(card as HTMLElement).getByText(/seedling/i, {
162:         selector: "div.font-medium",
163:       });
164:       expect(stageElement).toBeInTheDocument();
165:     });
166:   });
167: 
168:   test("correctly displays 'Flowering' stage for sugar snap peas", async () => {
169:     const varieties = await varietyService.getAllVarieties();
170:     const peas = varieties.find((v) => v.name === "Sugar Snap Peas");
171:     expect(peas).toBeDefined();
172: 
173: 
174: 
175:     const plantedDate = subDays(new Date(), 55);
176:     const peaPlant = {
177:       id: "pea-1",
178:       varietyId: peas!.id,
179:       varietyName: peas!.name,
180:       name: "Test Peas",
181:       plantedDate,
182:       currentStage: "vegetative",
183:       location: "Indoor",
184:       container: "15 gallon",
185:       isActive: true,
186:       createdAt: new Date(),
187:       updatedAt: new Date(),
188:     };
189: 
190:     setupMockPlants([peaPlant]);
191:     renderWithRouter(<Plants />);
192: 
193:     await waitFor(() => {
194:       expect(screen.getByText(/flowering/i)).toBeInTheDocument();
195:     });
196:   });
197: });

================
File: src/components/plant/CareHistory.tsx
================
  1: import React, { useState } from "react";
  2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { CareRecord } from "@/types/database";
  5: import CareActivityItem from "./CareActivityItem";
  6: 
  7: interface CareHistoryProps {
  8:   careHistory: CareRecord[];
  9: }
 10: 
 11: const CareHistory: React.FC<CareHistoryProps> = ({ careHistory }) => {
 12:   const [showAll, setShowAll] = useState(false);
 13:   const [filter, setFilter] = useState<string>("all");
 14: 
 15: 
 16:   const filteredHistory = careHistory.filter((activity) => {
 17:     if (filter === "all") return true;
 18:     return activity.type === filter;
 19:   });
 20: 
 21: 
 22:   const displayedHistory = showAll
 23:     ? filteredHistory
 24:     : filteredHistory.slice(0, 5);
 25: 
 26:   const activityTypeFilters = [
 27:     { value: "all", label: "All Activities", icon: "📋" },
 28:     { value: "water", label: "Watering", icon: "💧" },
 29:     { value: "fertilize", label: "Fertilizing", icon: "🌱" },
 30:     { value: "observe", label: "Observations", icon: "👁️" },
 31:     { value: "harvest", label: "Harvest", icon: "🌾" },
 32:     { value: "transplant", label: "Transplant", icon: "🏺" },
 33:   ];
 34: 
 35:   return (
 36:     <Card>
 37:       <CardHeader>
 38:         <CardTitle className="flex items-center gap-2">
 39:           <span className="text-2xl">📊</span>
 40:           Care History
 41:           <span className="text-sm font-normal text-muted-foreground">
 42:             ({careHistory.length} activities)
 43:           </span>
 44:         </CardTitle>
 45:       </CardHeader>
 46:       <CardContent>
 47:         {careHistory.length === 0 ? (
 48:           <div className="text-center py-8">
 49:             <div className="text-4xl mb-2">📝</div>
 50:             <h3 className="text-lg font-medium text-foreground mb-2">
 51:               No care activities yet
 52:             </h3>
 53:             <p className="text-muted-foreground mb-4">
 54:               Start logging care activities to track your plant's progress
 55:             </p>
 56:             <Button variant="primary">Log First Activity</Button>
 57:           </div>
 58:         ) : (
 59:           <div className="space-y-4">
 60:             {}
 61:             <div className="flex gap-1 overflow-x-auto pb-2">
 62:               {activityTypeFilters.map((filterOption) => (
 63:                 <Button
 64:                   key={filterOption.value}
 65:                   variant={
 66:                     filter === filterOption.value ? "primary" : "outline"
 67:                   }
 68:                   size="sm"
 69:                   onClick={() => setFilter(filterOption.value)}
 70:                   className="whitespace-nowrap"
 71:                 >
 72:                   <span className="mr-1">{filterOption.icon}</span>
 73:                   {filterOption.label}
 74:                 </Button>
 75:               ))}
 76:             </div>
 77: 
 78:             {}
 79:             <div className="space-y-3">
 80:               {displayedHistory.map((activity) => (
 81:                 <CareActivityItem key={activity.id} activity={activity} />
 82:               ))}
 83:             </div>
 84: 
 85:             {}
 86:             {filteredHistory.length > 5 && (
 87:               <div className="text-center pt-4">
 88:                 <Button variant="outline" onClick={() => setShowAll(!showAll)}>
 89:                   {showAll
 90:                     ? "Show Less"
 91:                     : `Show All ${filteredHistory.length} Activities`}
 92:                 </Button>
 93:               </div>
 94:             )}
 95:           </div>
 96:         )}
 97:       </CardContent>
 98:     </Card>
 99:   );
100: };
101: 
102: export default CareHistory;

================
File: src/components/plant/SoilMixtureSelector.tsx
================
  1: import { useState } from "react";
  2: import { PlantCategory } from "@/types";
  3: import { Button } from "@/components/ui/Button";
  4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  5: 
  6: interface SoilComponent {
  7:   name: string;
  8:   percentage: number;
  9: }
 10: 
 11: interface SoilMixture {
 12:   id: string;
 13:   name: string;
 14:   description: string;
 15:   category?: PlantCategory;
 16:   components: SoilComponent[];
 17:   amendments?: { name: string; amount: string }[];
 18:   suitable: string[];
 19:   notes?: string[];
 20: }
 21: 
 22: interface SoilMixtureSelectorProps {
 23:   selectedMixture?: string;
 24:   onMixtureChange: (mixture: string) => void;
 25:   plantCategory?: PlantCategory;
 26: }
 27: 
 28: const PRESET_MIXTURES: SoilMixture[] = [
 29:   {
 30:     id: "leafy-greens-standard",
 31:     name: "Leafy Greens Mix",
 32:     description:
 33:       "Nutrient-rich blend perfect for arugula, spinach, and lettuce",
 34:     category: "leafy-greens",
 35:     components: [
 36:       { name: "Coco Coir", percentage: 40 },
 37:       { name: "Perlite", percentage: 25 },
 38:       { name: "Vermiculite", percentage: 25 },
 39:       { name: "Worm Castings", percentage: 10 },
 40:     ],
 41:     amendments: [{ name: "Compost", amount: "½–1 cup per cubic foot" }],
 42:     suitable: ["Arugula", "Spinach", "Lettuce", "Kale"],
 43:     notes: ["Retains moisture well", "High in organic matter"],
 44:   },
 45:   {
 46:     id: "root-vegetables-standard",
 47:     name: "Root Vegetables Mix",
 48:     description: "Well-draining mix for carrots, beets, and onions",
 49:     category: "root-vegetables",
 50:     components: [
 51:       { name: "Coco Coir", percentage: 40 },
 52:       { name: "Perlite", percentage: 30 },
 53:       { name: "Vermiculite", percentage: 25 },
 54:       { name: "Worm Castings", percentage: 5 },
 55:     ],
 56:     amendments: [
 57:       { name: "Compost", amount: "2 tbsp per gallon" },
 58:       { name: "Bone Meal", amount: "1 tsp per gallon" },
 59:     ],
 60:     suitable: ["Carrots", "Beets", "Onions", "Radishes"],
 61:     notes: ["Excellent drainage", "Prevents root rot"],
 62:   },
 63:   {
 64:     id: "herbs-standard",
 65:     name: "Mediterranean Herbs Mix",
 66:     description: "Well-draining, lean mix for oregano, thyme, and rosemary",
 67:     category: "herbs",
 68:     components: [
 69:       { name: "Coco Coir", percentage: 30 },
 70:       { name: "Perlite", percentage: 35 },
 71:       { name: "Sand", percentage: 20 },
 72:       { name: "Vermiculite", percentage: 15 },
 73:     ],
 74:     amendments: [{ name: "Lime", amount: "1 tsp per gallon" }],
 75:     suitable: ["Oregano", "Thyme", "Rosemary", "Sage"],
 76:     notes: ["Slightly alkaline", "Fast draining"],
 77:   },
 78:   {
 79:     id: "berries-standard",
 80:     name: "Berry & Fruit Mix",
 81:     description: "Acidic mix designed for strawberries and berry plants",
 82:     category: "berries",
 83:     components: [
 84:       { name: "Peat Moss", percentage: 35 },
 85:       { name: "Coco Coir", percentage: 30 },
 86:       { name: "Perlite", percentage: 20 },
 87:       { name: "Worm Castings", percentage: 15 },
 88:     ],
 89:     amendments: [
 90:       { name: "Sulfur", amount: "½ tsp per gallon (for acidity)" },
 91:       { name: "Fish Emulsion", amount: "1 tbsp per gallon monthly" },
 92:     ],
 93:     suitable: ["Strawberries", "Blueberries", "Raspberries"],
 94:     notes: ["pH 5.5-6.5", "High organic matter"],
 95:   },
 96:   {
 97:     id: "fruiting-plants-standard",
 98:     name: "Fruiting Plants Mix",
 99:     description: "Heavy-feeder mix for tomatoes, peppers, and eggplants",
100:     category: "fruiting-plants",
101:     components: [
102:       { name: "Coco Coir", percentage: 35 },
103:       { name: "Perlite", percentage: 20 },
104:       { name: "Vermiculite", percentage: 20 },
105:       { name: "Compost", percentage: 15 },
106:       { name: "Worm Castings", percentage: 5 },
107:       { name: "Biochar", percentage: 5 },
108:     ],
109:     amendments: [
110:       { name: "Gypsum", amount: "½ cup per 15-gal bag" },
111:       { name: "Bone Meal", amount: "2-3 tbsp per container" },
112:       { name: "Kelp Meal", amount: "2 tbsp per container" },
113:     ],
114:     suitable: ["Tomatoes", "Peppers", "Peas", "Beans"],
115:     notes: ["Heavy feeder support", "Calcium-rich for fruit development"],
116:   },
117:   {
118:     id: "universal-standard",
119:     name: "Universal Garden Mix",
120:     description: "Balanced all-purpose mix suitable for most plants",
121:     components: [
122:       { name: "Coco Coir", percentage: 40 },
123:       { name: "Perlite", percentage: 25 },
124:       { name: "Vermiculite", percentage: 20 },
125:       { name: "Compost", percentage: 10 },
126:       { name: "Worm Castings", percentage: 5 },
127:     ],
128:     amendments: [{ name: "Bone Meal", amount: "1 tbsp per gallon" }],
129:     suitable: ["Most vegetables", "Herbs", "Annual flowers"],
130:     notes: ["Good drainage", "Balanced nutrition", "Easy to work with"],
131:   },
132: ];
133: 
134: export const SoilMixtureSelector = ({
135:   selectedMixture,
136:   onMixtureChange,
137:   plantCategory,
138: }: SoilMixtureSelectorProps) => {
139:   const [showCustom, setShowCustom] = useState(false);
140:   const [customMixture, setCustomMixture] = useState("");
141: 
142:   const getRelevantMixtures = () => {
143:     if (!plantCategory) {
144:       return PRESET_MIXTURES;
145:     }
146: 
147:     const categoryMixtures = PRESET_MIXTURES.filter(
148:       (mix) => mix.category === plantCategory
149:     );
150:     const otherMixtures = PRESET_MIXTURES.filter(
151:       (mix) => mix.category !== plantCategory
152:     );
153: 
154:     return [...categoryMixtures, ...otherMixtures];
155:   };
156: 
157:   const formatComponents = (components: SoilComponent[]) => {
158:     return components
159:       .map((comp) => `${comp.percentage}% ${comp.name}`)
160:       .join(", ");
161:   };
162: 
163:   const handlePresetSelect = (mixtureId: string) => {
164:     const mixture = PRESET_MIXTURES.find((m) => m.id === mixtureId);
165:     if (mixture) {
166:       const mixtureText = `${mixture.name}: ${formatComponents(
167:         mixture.components
168:       )}`;
169:       onMixtureChange(mixtureText);
170:       setShowCustom(false);
171:     }
172:   };
173: 
174:   const handleCustomSubmit = () => {
175:     if (customMixture.trim()) {
176:       onMixtureChange(customMixture);
177:       setShowCustom(false);
178:     }
179:   };
180: 
181:   return (
182:     <div className="space-y-4">
183:       <div>
184:         <label className="block text-sm font-medium text-foreground mb-2">
185:           Soil Mixture *
186:         </label>
187:         <p className="text-xs text-muted-foreground mb-3">
188:           Choose a preset mixture or create your own custom blend
189:         </p>
190:       </div>
191: 
192:       {!showCustom ? (
193:         <>
194:           {}
195:           <div className="grid gap-3">
196:             {getRelevantMixtures().map((mixture) => (
197:               <div
198:                 key={mixture.id}
199:                 data-testid={`mixture-card-${mixture.id}`}
200:                 className={`cursor-pointer transition-all border rounded-lg shadow-sm ${
201:                   selectedMixture?.includes(mixture.name)
202:                     ? "ring-4 ring-ring bg-muted border-ring shadow-lg" // ✅ FIXED: Using semantic colors
203:                     : "bg-card border-border hover:bg-muted/50 hover:shadow-md"
204:                 }`}
205:                 onClick={() => handlePresetSelect(mixture.id)}
206:               >
207:                 <div className="p-4">
208:                   <div className="flex items-start justify-between">
209:                     <div className="flex-1">
210:                       <div className="font-medium text-foreground mb-1 flex items-center">
211:                         {selectedMixture?.includes(mixture.name) && (
212:                           <span className="mr-2 text-primary text-lg">✓</span>
213:                         )}
214:                         {mixture.name}
215:                         {mixture.category === plantCategory && (
216:                           <span className="ml-2 text-xs bg-primary/10 text-primary px-2 py-1 rounded-full">
217:                             Recommended
218:                           </span>
219:                         )}
220:                       </div>
221:                       <p className="text-sm text-muted-foreground mb-2">
222:                         {mixture.description}
223:                       </p>
224:                       <div className="text-xs text-muted-foreground space-y-1">
225:                         <div>
226:                           <strong>Components:</strong>{" "}
227:                           {formatComponents(mixture.components)}
228:                         </div>
229:                         {mixture.amendments && (
230:                           <div>
231:                             <strong>Amendments:</strong>{" "}
232:                             {mixture.amendments
233:                               .map((a) => `${a.name} (${a.amount})`)
234:                               .join(", ")}
235:                           </div>
236:                         )}
237:                         <div>
238:                           <strong>Best for:</strong>{" "}
239:                           {mixture.suitable.join(", ")}
240:                         </div>
241:                       </div>
242:                     </div>
243:                   </div>
244:                 </div>
245:               </div>
246:             ))}
247:           </div>
248: 
249:           {}
250:           <Button
251:             type="button"
252:             variant="primary"
253:             onClick={() => setShowCustom(true)}
254:             className="w-full"
255:           >
256:             🧪 Create Custom Mixture
257:           </Button>
258:         </>
259:       ) : (
260: 
261:         <Card>
262:           <CardHeader>
263:             <CardTitle className="text-lg">Custom Soil Mixture</CardTitle>
264:             <p className="text-sm text-muted-foreground">
265:               Describe your custom soil mixture with components and percentages
266:             </p>
267:           </CardHeader>
268:           <CardContent className="space-y-4">
269:             <div>
270:               <label
271:                 htmlFor="custom-mixture"
272:                 className="block text-sm font-medium text-foreground mb-2"
273:               >
274:                 Mixture Description
275:               </label>
276:               <textarea
277:                 id="custom-mixture"
278:                 value={customMixture}
279:                 onChange={(e) => setCustomMixture(e.target.value)}
280:                 placeholder="e.g., 40% coco coir, 30% perlite, 25% vermiculite, 5% compost"
281:                 rows={4}
282:                 className="w-full p-3 bg-input text-input-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring placeholder:text-muted-foreground"
283:               />
284:             </div>
285: 
286:             <div className="flex gap-3">
287:               <Button
288:                 type="button"
289:                 variant="primary"
290:                 onClick={handleCustomSubmit}
291:                 disabled={!customMixture.trim()}
292:                 className="flex-1"
293:               >
294:                 Save Custom Mixture
295:               </Button>
296:               <Button
297:                 type="button"
298:                 variant="outline"
299:                 onClick={() => {
300:                   setShowCustom(false);
301:                   setCustomMixture("");
302:                 }}
303:                 className="flex-1"
304:               >
305:                 Cancel
306:               </Button>
307:             </div>
308:           </CardContent>
309:         </Card>
310:       )}
311: 
312:       {}
313:       {selectedMixture && !showCustom && (
314:         <div className="p-3 bg-muted border border-border rounded-md">
315:           {" "}
316:           {}
317:           <div className="text-sm font-medium text-foreground mb-1">
318:             {" "}
319:             {}
320:             Selected Mixture:
321:           </div>
322:           <div className="text-sm text-muted-foreground">
323:             {selectedMixture}
324:           </div>{" "}
325:           {}
326:         </div>
327:       )}
328:     </div>
329:   );
330: };
331: 
332: export default SoilMixtureSelector;

================
File: src/services/smartDefaultsService.ts
================
  1: import {
  2:   varietyService,
  3:   careService,
  4:   PlantRecord,
  5:   VarietyRecord,
  6: } from "@/types/database";
  7: import { GrowthStage, PlantCategory, CareActivityType } from "@/types/core";
  8: import { calculateCurrentStage } from "@/utils/growthStage";
  9: 
 10: export interface QuickCompleteOption {
 11:   label: string;
 12:   values: QuickCompletionValues;
 13: }
 14: 
 15: export interface QuickCompletionValues {
 16:   waterValue?: number;
 17:   waterUnit?: "oz" | "ml" | "cups" | "liters" | "gallons";
 18:   product?: string;
 19:   dilution?: string;
 20:   amount?: string;
 21:   notes?: string;
 22: }
 23: 
 24: export interface SmartDefaults {
 25:   watering?: WateringDefaults;
 26:   fertilizer?: FertilizerDefaults;
 27: }
 28: 
 29: interface WateringDefaults {
 30:   suggestedAmount: number;
 31:   unit: "oz" | "ml" | "cups" | "liters" | "gallons";
 32:   confidence: "high" | "medium" | "low";
 33:   source: "protocol" | "category" | "universal";
 34:   reasoning: string;
 35: }
 36: 
 37: interface FertilizerDefaults {
 38:   products: Array<{
 39:     name: string;
 40:     dilution: string;
 41:     amount: string;
 42:     method?: ApplicationMethod;
 43:     confidence: "high" | "medium" | "low";
 44:   }>;
 45:   source: "protocol" | "category" | "universal";
 46:   reasoning: string;
 47: }
 48: 
 49: type ApplicationMethod = "soil-drench" | "foliar-spray" | "side-dress";
 50: 
 51: interface VolumeAmount {
 52:   amount: number;
 53:   unit: "oz" | "ml" | "cups" | "liters" | "gallons";
 54: }
 55: 
 56: export class SmartDefaultsService {
 57:   static async getDefaultsForPlant(
 58:     plant: PlantRecord
 59:   ): Promise<SmartDefaults | null> {
 60:     try {
 61:       const variety = await varietyService.getVariety(plant.varietyId);
 62:       if (!variety) return null;
 63: 
 64:       const currentStage = calculateCurrentStage(
 65:         plant.plantedDate,
 66:         variety.growthTimeline
 67:       );
 68: 
 69:       const watering = this.getWateringDefaults(variety, currentStage);
 70:       const fertilizer = this.getFertilizerDefaults(variety, currentStage);
 71: 
 72:       return {
 73:         watering,
 74:         fertilizer,
 75:       };
 76:     } catch (error) {
 77:       console.error("Failed to get defaults for plant:", error);
 78:       return null;
 79:     }
 80:   }
 81: 
 82:   private static getWateringDefaults(
 83:     variety: VarietyRecord,
 84:     currentStage: GrowthStage
 85:   ): WateringDefaults {
 86:     const stageProtocol = variety.protocols?.watering?.[currentStage] as {
 87:       volume?: { amount?: number | string; unit?: string };
 88:     };
 89: 
 90:     if (stageProtocol?.volume?.amount) {
 91:       const parsed = this.parseWaterAmount(stageProtocol.volume.amount);
 92:       if (parsed && stageProtocol.volume.unit) {
 93:         return {
 94:           suggestedAmount: parsed.amount,
 95:           unit: stageProtocol.volume.unit as
 96:             | "oz"
 97:             | "ml"
 98:             | "cups"
 99:             | "liters"
100:             | "gallons",
101:           confidence: "high",
102:           source: "protocol",
103:           reasoning: `Based on ${variety.name} protocol for ${currentStage} stage`,
104:         };
105:       }
106:     }
107: 
108:     const categoryDefaults = this.getCategoryWateringDefaults(
109:       variety.category,
110:       currentStage
111:     );
112:     if (categoryDefaults) {
113:       return {
114:         suggestedAmount: categoryDefaults.amount,
115:         unit: categoryDefaults.unit,
116:         confidence: "medium",
117:         source: "category",
118:         reasoning: `Based on ${variety.category} category guidelines for ${currentStage} stage`,
119:       };
120:     }
121: 
122:     return {
123:       suggestedAmount: 16,
124:       unit: "oz",
125:       confidence: "low",
126:       source: "universal",
127:       reasoning: "Using universal default amount",
128:     };
129:   }
130: 
131:   private static getFertilizerDefaults(
132:     variety: VarietyRecord,
133:     currentStage: GrowthStage
134:   ): FertilizerDefaults | undefined {
135:     const stageProtocol = variety.protocols?.fertilization?.[currentStage] as {
136:       fertilizer?: { product?: string };
137:       application?: { dilution?: string; amount?: string; method?: string };
138:     };
139: 
140:     if (stageProtocol?.fertilizer?.product && stageProtocol?.application) {
141:       return {
142:         products: [
143:           {
144:             name: stageProtocol.fertilizer.product,
145:             dilution: stageProtocol.application.dilution || "As directed",
146:             amount: stageProtocol.application.amount || "Apply to runoff",
147:             method:
148:               (stageProtocol.application.method as ApplicationMethod) ||
149:               "soil-drench",
150:             confidence: "high",
151:           },
152:         ],
153:         source: "protocol",
154:         reasoning: `Based on ${variety.name} fertilization protocol for ${currentStage} stage`,
155:       };
156:     }
157: 
158:     const categoryDefaults = this.getCategoryFertilizerDefaults(
159:       variety.category,
160:       currentStage
161:     );
162:     if (categoryDefaults) {
163:       return categoryDefaults;
164:     }
165: 
166:     return undefined;
167:   }
168: 
169:   private static getCategoryWateringDefaults(
170:     category: PlantCategory,
171:     stage: GrowthStage
172:   ): VolumeAmount | undefined {
173:     const categoryWateringGuides: Record<
174:       PlantCategory,
175:       Record<GrowthStage, VolumeAmount>
176:     > = {
177:       "leafy-greens": {
178:         germination: { amount: 8, unit: "oz" },
179:         seedling: { amount: 12, unit: "oz" },
180:         vegetative: { amount: 16, unit: "oz" },
181:         flowering: { amount: 16, unit: "oz" },
182:         fruiting: { amount: 16, unit: "oz" },
183:         maturation: { amount: 16, unit: "oz" },
184:         harvest: { amount: 16, unit: "oz" },
185:         "ongoing-production": { amount: 16, unit: "oz" },
186:       },
187:       "fruiting-plants": {
188:         germination: { amount: 12, unit: "oz" },
189:         seedling: { amount: 16, unit: "oz" },
190:         vegetative: { amount: 24, unit: "oz" },
191:         flowering: { amount: 28, unit: "oz" },
192:         fruiting: { amount: 32, unit: "oz" },
193:         maturation: { amount: 32, unit: "oz" },
194:         harvest: { amount: 32, unit: "oz" },
195:         "ongoing-production": { amount: 32, unit: "oz" },
196:       },
197:       "root-vegetables": {
198:         germination: { amount: 8, unit: "oz" },
199:         seedling: { amount: 12, unit: "oz" },
200:         vegetative: { amount: 20, unit: "oz" },
201:         flowering: { amount: 20, unit: "oz" },
202:         fruiting: { amount: 20, unit: "oz" },
203:         maturation: { amount: 20, unit: "oz" },
204:         harvest: { amount: 20, unit: "oz" },
205:         "ongoing-production": { amount: 20, unit: "oz" },
206:       },
207:       herbs: {
208:         germination: { amount: 6, unit: "oz" },
209:         seedling: { amount: 8, unit: "oz" },
210:         vegetative: { amount: 12, unit: "oz" },
211:         flowering: { amount: 12, unit: "oz" },
212:         fruiting: { amount: 12, unit: "oz" },
213:         maturation: { amount: 12, unit: "oz" },
214:         harvest: { amount: 12, unit: "oz" },
215:         "ongoing-production": { amount: 12, unit: "oz" },
216:       },
217:       berries: {
218:         germination: { amount: 10, unit: "oz" },
219:         seedling: { amount: 14, unit: "oz" },
220:         vegetative: { amount: 20, unit: "oz" },
221:         flowering: { amount: 24, unit: "oz" },
222:         fruiting: { amount: 28, unit: "oz" },
223:         maturation: { amount: 28, unit: "oz" },
224:         harvest: { amount: 28, unit: "oz" },
225:         "ongoing-production": { amount: 28, unit: "oz" },
226:       },
227:     };
228: 
229:     return categoryWateringGuides[category]?.[stage];
230:   }
231: 
232:   private static getCategoryFertilizerDefaults(
233:     category: PlantCategory,
234:     stage: GrowthStage
235:   ): FertilizerDefaults | undefined {
236:     const categoryFertilizerGuides: Record<
237:       PlantCategory,
238:       Record<string, { product: string; dilution: string; amount: string }>
239:     > = {
240:       "leafy-greens": {
241:         general: {
242:           product: "Balanced liquid fertilizer",
243:           dilution: "Half strength",
244:           amount: "Apply every 2 weeks",
245:         },
246:       },
247:       "fruiting-plants": {
248:         vegetative: {
249:           product: "High nitrogen fertilizer",
250:           dilution: "Full strength",
251:           amount: "Apply weekly",
252:         },
253:         flowering: {
254:           product: "Bloom booster",
255:           dilution: "Full strength",
256:           amount: "Apply bi-weekly",
257:         },
258:         fruiting: {
259:           product: "Potassium-rich fertilizer",
260:           dilution: "Full strength",
261:           amount: "Apply weekly",
262:         },
263:       },
264:       "root-vegetables": {
265:         general: {
266:           product: "Root vegetable fertilizer",
267:           dilution: "Half strength",
268:           amount: "Apply monthly",
269:         },
270:       },
271:       herbs: {
272:         general: {
273:           product: "Light liquid fertilizer",
274:           dilution: "Quarter strength",
275:           amount: "Apply monthly",
276:         },
277:       },
278:       berries: {
279:         general: {
280:           product: "Berry fertilizer",
281:           dilution: "Full strength",
282:           amount: "Apply bi-weekly",
283:         },
284:       },
285:     };
286: 
287:     const stageKey = ["flowering", "fruiting"].includes(stage)
288:       ? stage
289:       : "general";
290:     const defaults = categoryFertilizerGuides[category]?.[stageKey];
291: 
292:     if (defaults) {
293:       return {
294:         products: [
295:           {
296:             name: defaults.product,
297:             dilution: defaults.dilution,
298:             amount: defaults.amount,
299:             confidence: "medium",
300:           },
301:         ],
302:         source: "category",
303:         reasoning: `General ${category} fertilization guidelines`,
304:       };
305:     }
306: 
307:     return undefined;
308:   }
309: 
310:   private static parseWaterAmount(
311:     amount: string | number
312:   ): { amount: number } | null {
313:     if (typeof amount === "number") {
314:       return { amount };
315:     }
316: 
317:     if (typeof amount === "string") {
318:       const rangeMatch = amount.match(/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)/);
319:       if (rangeMatch) {
320:         const min = parseFloat(rangeMatch[1]);
321:         const max = parseFloat(rangeMatch[2]);
322:         return { amount: Math.round((min + max) / 2) };
323:       }
324: 
325:       const singleMatch = amount.match(/(\d+(?:\.\d+)?)/);
326:       if (singleMatch) {
327:         return { amount: parseFloat(singleMatch[1]) };
328:       }
329:     }
330: 
331:     return null;
332:   }
333: 
334:   static async getQuickCompletionOptions(
335:     plant: PlantRecord,
336:     taskType: CareActivityType,
337:     isForDashboard = false
338:   ): Promise<QuickCompleteOption[] | null> {
339:     try {
340:       const variety = await varietyService.getVariety(plant.varietyId);
341:       if (!variety) return null;
342: 
343:       const currentStage = calculateCurrentStage(
344:         plant.plantedDate,
345:         variety.growthTimeline
346:       );
347: 
348:       switch (taskType) {
349:         case "water":
350:           return this.getWateringQuickOptions(
351:             plant,
352:             variety,
353:             currentStage,
354:             isForDashboard
355:           );
356:         case "fertilize":
357:           return this.getFertilizingQuickOptions(variety, currentStage);
358:         case "observe":
359:           return [
360:             {
361:               label: "Quick: Health Check",
362:               values: { notes: "Quick health observation" },
363:             },
364:           ];
365:         default:
366:           return null;
367:       }
368:     } catch (error) {
369:       console.error("Failed to get quick completion options:", error);
370:       return null;
371:     }
372:   }
373: 
374:   private static async getWateringQuickOptions(
375:     plant: PlantRecord,
376:     variety: VarietyRecord,
377:     currentStage: GrowthStage,
378:     isForDashboard = false
379:   ): Promise<QuickCompleteOption[]> {
380:     const options: QuickCompleteOption[] = [];
381: 
382:     const wateringDefaults = this.getWateringDefaults(variety, currentStage);
383: 
384:     if (wateringDefaults) {
385:       options.push({
386:         label: `Quick: ${wateringDefaults.suggestedAmount}${wateringDefaults.unit}`,
387:         values: {
388:           waterValue: wateringDefaults.suggestedAmount,
389:           waterUnit: wateringDefaults.unit,
390:           notes: `${
391:             wateringDefaults.source === "protocol" ? "Protocol" : "Category"
392:           } suggestion for ${currentStage} stage`,
393:         },
394:       });
395: 
396:       if (!isForDashboard) {
397:         const lightAmount = Math.round(wateringDefaults.suggestedAmount * 0.75);
398:         const heavyAmount = Math.round(wateringDefaults.suggestedAmount * 1.25);
399: 
400:         if (
401:           lightAmount !== wateringDefaults.suggestedAmount &&
402:           lightAmount > 0
403:         ) {
404:           options.push({
405:             label: `Light: ${lightAmount}${wateringDefaults.unit}`,
406:             values: {
407:               waterValue: lightAmount,
408:               waterUnit: wateringDefaults.unit,
409:               notes: `Light watering for ${currentStage} stage`,
410:             },
411:           });
412:         }
413: 
414:         if (heavyAmount !== wateringDefaults.suggestedAmount) {
415:           options.push({
416:             label: `Heavy: ${heavyAmount}${wateringDefaults.unit}`,
417:             values: {
418:               waterValue: heavyAmount,
419:               waterUnit: wateringDefaults.unit,
420:               notes: `Deep watering for ${currentStage} stage`,
421:             },
422:           });
423:         }
424:       }
425:     }
426: 
427:     if (!isForDashboard) {
428:       try {
429:         const recentWatering = await careService.getLastActivityByType(
430:           plant.id,
431:           "water"
432:         );
433:         if (recentWatering && recentWatering.details.type === "water") {
434:           const lastAmount = recentWatering.details.amount as unknown as {
435:             value: number;
436:             unit: "oz" | "ml" | "cups" | "liters" | "gallons";
437:           };
438:           if (lastAmount && lastAmount.value > 0) {
439:             const isDifferent = !options.some(
440:               (opt) =>
441:                 opt.values.waterValue === lastAmount.value &&
442:                 opt.values.waterUnit === lastAmount.unit
443:             );
444: 
445:             if (isDifferent) {
446:               options.push({
447:                 label: `Repeat: ${lastAmount.value}${lastAmount.unit}`,
448:                 values: {
449:                   waterValue: lastAmount.value,
450:                   waterUnit: lastAmount.unit,
451:                   notes: `Based on your last watering`,
452:                 },
453:               });
454:             }
455:           }
456:         }
457:       } catch (error) {
458:         console.error("Error getting watering history:", error);
459:       }
460:     }
461: 
462:     return options.slice(0, isForDashboard ? 1 : 3);
463:   }
464: 
465:   private static async getFertilizingQuickOptions(
466:     variety: VarietyRecord,
467:     currentStage: GrowthStage
468:   ): Promise<QuickCompleteOption[]> {
469:     const options: QuickCompleteOption[] = [];
470: 
471:     const fertilizerDefaults = this.getFertilizerDefaults(
472:       variety,
473:       currentStage
474:     );
475: 
476:     if (fertilizerDefaults && fertilizerDefaults.products.length > 0) {
477:       fertilizerDefaults.products.slice(0, 2).forEach((product, index) => {
478:         const label = index === 0 ? `Quick: ${product.name}` : product.name;
479:         options.push({
480:           label,
481:           values: {
482:             product: product.name,
483:             dilution: product.dilution,
484:             amount: product.amount,
485:             notes: `${
486:               fertilizerDefaults.source === "protocol" ? "Protocol" : "Category"
487:             } suggestion for ${currentStage} stage`,
488:           },
489:         });
490:       });
491:     }
492: 
493:     return options;
494:   }
495: }

================
File: src/types/scheduling.ts
================
 1: import { QuickCompleteOption } from "@/services/smartDefaultsService";
 2: import { CareActivityType, GrowthStage } from "./core";
 3: 
 4: export interface UpcomingTask {
 5:   id: string;
 6:   plantId: string;
 7:   plantName: string;
 8:   task: string;
 9:   dueDate: Date;
10:   dueIn: string;
11:   priority: "low" | "medium" | "high";
12:   type: CareActivityType;
13:   plantStage: GrowthStage;
14:   canBypass?: boolean;
15:   quickCompleteOptions?: QuickCompleteOption[];
16: }
17: 
18: export interface TaskGroup {
19:   type: string;
20:   title: string;
21:   emoji: string;
22:   tasks: UpcomingTask[];
23:   isExpanded: boolean;
24: }
25: 
26: export interface TaskGrouping {
27:   date: string;
28:   tasks: UpcomingTask[];
29:   overallPriority: "low" | "medium" | "high";
30: }
31: 
32: export interface SchedulingAdjustment {
33:   plantId: string;
34:   taskType: CareActivityType;
35:   originalInterval: number;
36:   adjustedInterval: number;
37:   reason: string;
38:   confidence: number;
39: }

================
File: .gitignore
================
 1: # Logs
 2: logs
 3: *.log
 4: npm-debug.log*
 5: yarn-debug.log*
 6: yarn-error.log*
 7: pnpm-debug.log*
 8: lerna-debug.log*
 9: 
10: test-results/
11: 
12: # Cache directories
13: .cache/
14: .parcel-cache/
15: 
16: node_modules
17: dist
18: dist-ssr
19: *.local
20: 
21: # Editor directories and files
22: .vscode/*
23: !.vscode/extensions.json
24: .idea
25: .DS_Store
26: *.suo
27: *.ntvs*
28: *.njsproj
29: *.sln
30: *.sw?
31: # Testing
32: coverage/.DS_Store
33: .DS_Store?
34: **/.DS_Store
35: # macOS
36: .DS_Store
37: .DS_Store?
38: ._*
39: .Spotlight-V100
40: .Trashes
41: ehthumbs.db
42: Thumbs.db
43: 
44: # IDE
45: .vscode/
46: .idea/
47: 
48: # Environment
49: .env.local
50: .env.development.local
51: .env.test.local
52: .env.production.local
53: 
54: # Temporary files
55: *.tmp
56: *.temp

================
File: src/__tests__/services/careSchedulingService.test.ts
================
  1: import { CareSchedulingService } from "@/services/careSchedulingService";
  2: import { plantService, varietyService, careService } from "@/types/database";
  3: import { initializeDatabase } from "@/db/seedData";
  4: import { subDays } from "date-fns";
  5: 
  6: describe("CareSchedulingService", () => {
  7:   beforeEach(async () => {
  8: 
  9:     const { db } = await import("@/types/database");
 10:     await db.plants.clear();
 11:     await db.varieties.clear();
 12:     await db.careActivities.clear();
 13:     await initializeDatabase();
 14:   });
 15: 
 16:   describe("Reminder Filtering", () => {
 17:     it("filters tasks based on reminder preferences", async () => {
 18: 
 19:       const varieties = await varietyService.getAllVarieties();
 20:       const testVariety = varieties[0];
 21: 
 22: 
 23: 
 24:       const plantWithSelectiveReminders = await plantService.addPlant({
 25:         varietyId: testVariety.id,
 26:         varietyName: testVariety.name,
 27:         plantedDate: subDays(new Date(), 10),
 28:         location: "Indoor",
 29:         container: "4 inch pot",
 30:         isActive: true,
 31:         reminderPreferences: {
 32:           watering: false,
 33:           fertilizing: true,
 34:           observation: true,
 35:           lighting: false,
 36:           pruning: true,
 37:         },
 38:       });
 39: 
 40:       const tasks = await CareSchedulingService.getUpcomingTasks();
 41: 
 42: 
 43:       const plantTasks = tasks.filter(
 44:         (task) => task.plantId === plantWithSelectiveReminders
 45:       );
 46: 
 47: 
 48:       const wateringTasks = plantTasks.filter(
 49:         (task) =>
 50:           task.task.toLowerCase().includes("water") ||
 51:           task.task === "Check water level"
 52:       );
 53: 
 54:       expect(wateringTasks).toHaveLength(0);
 55: 
 56: 
 57:       const observationTasks = plantTasks.filter(
 58:         (task) =>
 59:           task.task === "Health check" ||
 60:           task.task.toLowerCase().includes("observe")
 61:       );
 62: 
 63: 
 64:       expect(observationTasks.length).toBeGreaterThan(0);
 65:     });
 66: 
 67:     it("shows all tasks when no reminder preferences are set", async () => {
 68: 
 69:       const varieties = await varietyService.getAllVarieties();
 70:       const testVariety = varieties[0];
 71: 
 72: 
 73:       const plantWithoutPreferences = await plantService.addPlant({
 74:         varietyId: testVariety.id,
 75:         varietyName: testVariety.name,
 76:         plantedDate: subDays(new Date(), 10),
 77:         location: "Indoor",
 78:         container: "4 inch pot",
 79:         isActive: true,
 80: 
 81:       });
 82: 
 83:       const tasks = await CareSchedulingService.getUpcomingTasks();
 84: 
 85: 
 86:       const plantTasks = tasks.filter(
 87:         (task) => task.plantId === plantWithoutPreferences
 88:       );
 89:       expect(plantTasks.length).toBeGreaterThan(0);
 90: 
 91: 
 92:       const hasWateringTask = plantTasks.some(
 93:         (task) =>
 94:           task.task.toLowerCase().includes("water") ||
 95:           task.task === "Check water level"
 96:       );
 97:       const hasObservationTask = plantTasks.some(
 98:         (task) =>
 99:           task.task === "Health check" ||
100:           task.task.toLowerCase().includes("observe")
101:       );
102: 
103:       expect(hasWateringTask).toBe(true);
104:       expect(hasObservationTask).toBe(true);
105:     });
106: 
107:     it("handles plants with all reminders disabled", async () => {
108: 
109:       const varieties = await varietyService.getAllVarieties();
110:       const testVariety = varieties[0];
111: 
112: 
113:       const plantWithNoReminders = await plantService.addPlant({
114:         varietyId: testVariety.id,
115:         varietyName: testVariety.name,
116:         plantedDate: subDays(new Date(), 10),
117:         location: "Indoor",
118:         container: "4 inch pot",
119:         isActive: true,
120:         reminderPreferences: {
121:           watering: false,
122:           fertilizing: false,
123:           observation: false,
124:           lighting: false,
125:           pruning: false,
126:         },
127:       });
128: 
129:       const tasks = await CareSchedulingService.getUpcomingTasks();
130: 
131: 
132:       const plantTasks = tasks.filter(
133:         (task) => task.plantId === plantWithNoReminders
134:       );
135:       expect(plantTasks).toHaveLength(0);
136:     });
137:   });
138: 
139:   describe("Task Creation", () => {
140:     it("creates observation tasks for plants old enough", async () => {
141:       const varieties = await varietyService.getAllVarieties();
142:       const testVariety = varieties[0];
143: 
144: 
145:       const plantId = await plantService.addPlant({
146:         varietyId: testVariety.id,
147:         varietyName: testVariety.name,
148:         plantedDate: subDays(new Date(), 5),
149:         location: "Indoor",
150:         container: "4 inch pot",
151:         isActive: true,
152:         reminderPreferences: {
153:           watering: true,
154:           fertilizing: true,
155:           observation: true,
156:           lighting: true,
157:           pruning: true,
158:         },
159:       });
160: 
161:       const tasks = await CareSchedulingService.getUpcomingTasks();
162:       const plantTasks = tasks.filter((task) => task.plantId === plantId);
163: 
164: 
165:       const observationTasks = plantTasks.filter(
166:         (task) => task.task === "Health check"
167:       );
168: 
169:       expect(observationTasks.length).toBeGreaterThan(0);
170: 
171: 
172:       const observationTask = observationTasks[0];
173:       expect(observationTask.dueIn).toContain("overdue");
174:       expect(observationTask.priority).toBe("high");
175:     });
176: 
177:     it("creates watering tasks for plants that need water", async () => {
178:       const varieties = await varietyService.getAllVarieties();
179:       const testVariety = varieties[0];
180: 
181: 
182:       const plantId = await plantService.addPlant({
183:         varietyId: testVariety.id,
184:         varietyName: testVariety.name,
185:         plantedDate: subDays(new Date(), 5),
186:         location: "Indoor",
187:         container: "4 inch pot",
188:         isActive: true,
189:         reminderPreferences: {
190:           watering: true,
191:           fertilizing: true,
192:           observation: true,
193:           lighting: true,
194:           pruning: true,
195:         },
196:       });
197: 
198:       const tasks = await CareSchedulingService.getUpcomingTasks();
199:       const plantTasks = tasks.filter((task) => task.plantId === plantId);
200: 
201: 
202:       const wateringTasks = plantTasks.filter(
203:         (task) => task.task === "Check water level"
204:       );
205: 
206:       expect(wateringTasks.length).toBeGreaterThan(0);
207:     });
208:   });
209: 
210:   describe("getUpcomingTasks Edge Cases", () => {
211:     it("handles plants with no variety data gracefully", async () => {
212: 
213:       const orphanedPlant = await plantService.addPlant({
214:         varietyId: "non-existent-variety",
215:         varietyName: "Unknown Variety",
216:         plantedDate: subDays(new Date(), 5),
217:         location: "Indoor",
218:         container: "4 inch pot",
219:         isActive: true,
220:       });
221: 
222:       const tasks = await CareSchedulingService.getUpcomingTasks();
223: 
224: 
225:       const orphanedPlantTasks = tasks.filter(
226:         (task) => task.plantId === orphanedPlant
227:       );
228:       expect(orphanedPlantTasks).toHaveLength(0);
229:     });
230: 
231:     it("correctly prioritizes overdue vs upcoming tasks", async () => {
232:       const varieties = await varietyService.getAllVarieties();
233:       const testVariety = varieties[0];
234: 
235: 
236:       const overduePlant = await plantService.addPlant({
237:         varietyId: testVariety.id,
238:         varietyName: testVariety.name,
239:         plantedDate: subDays(new Date(), 10),
240:         location: "Indoor",
241:         container: "4 inch pot",
242:         isActive: true,
243:       });
244: 
245: 
246:       await careService.addCareActivity({
247:         plantId: overduePlant,
248:         type: "water",
249:         date: subDays(new Date(), 5),
250:         details: {
251:           type: "water",
252:           amount: { value: 8, unit: "oz" },
253:         },
254:       });
255: 
256:       const tasks = await CareSchedulingService.getUpcomingTasks();
257: 
258: 
259:       const sortedTasks = tasks.sort(
260:         (a, b) => a.dueDate.getTime() - b.dueDate.getTime()
261:       );
262: 
263: 
264:       const overdueTasks = sortedTasks.filter((task) =>
265:         task.dueIn.includes("overdue")
266:       );
267:       const upcomingTasks = sortedTasks.filter(
268:         (task) => !task.dueIn.includes("overdue")
269:       );
270: 
271:       if (overdueTasks.length > 0 && upcomingTasks.length > 0) {
272:         expect(overdueTasks[0].dueDate.getTime()).toBeLessThanOrEqual(
273:           upcomingTasks[0].dueDate.getTime()
274:         );
275:       }
276:     });
277: 
278:     it("respects reminder preferences filtering", async () => {
279:       const varieties = await varietyService.getAllVarieties();
280:       const testVariety = varieties[0];
281: 
282:       const plantWithSelectivePrefs = await plantService.addPlant({
283:         varietyId: testVariety.id,
284:         varietyName: testVariety.name,
285:         plantedDate: subDays(new Date(), 8),
286:         location: "Indoor",
287:         container: "4 inch pot",
288:         isActive: true,
289:         reminderPreferences: {
290:           watering: true,
291:           fertilizing: false,
292:           observation: false,
293:           lighting: false,
294:           pruning: false,
295:         },
296:       });
297: 
298:       const tasks = await CareSchedulingService.getUpcomingTasks();
299:       const plantTasks = tasks.filter(
300:         (task) => task.plantId === plantWithSelectivePrefs
301:       );
302: 
303: 
304:       const wateringTasks = plantTasks.filter(
305:         (task) =>
306:           task.task.toLowerCase().includes("water") ||
307:           task.task === "Check water level"
308:       );
309:       const nonWateringTasks = plantTasks.filter(
310:         (task) =>
311:           !task.task.toLowerCase().includes("water") &&
312:           task.task !== "Check water level"
313:       );
314: 
315:       expect(wateringTasks.length).toBeGreaterThan(0);
316:       expect(nonWateringTasks).toHaveLength(0);
317:     });
318: 
319:     it("handles database errors gracefully", async () => {
320: 
321:       const originalGetActivePlants = plantService.getActivePlants;
322:       jest
323:         .spyOn(plantService, "getActivePlants")
324:         .mockRejectedValue(new Error("Database connection failed"));
325: 
326:       const tasks = await CareSchedulingService.getUpcomingTasks();
327: 
328: 
329:       expect(tasks).toEqual([]);
330: 
331: 
332:       plantService.getActivePlants = originalGetActivePlants;
333:     });
334: 
335:     it("handles plants with corrupt variety references", async () => {
336:       const varieties = await varietyService.getAllVarieties();
337:       const validVariety = varieties[0];
338: 
339: 
340:       const validPlant = await plantService.addPlant({
341:         varietyId: validVariety.id,
342:         varietyName: validVariety.name,
343:         plantedDate: subDays(new Date(), 5),
344:         location: "Indoor",
345:         container: "4 inch pot",
346:         isActive: true,
347:       });
348: 
349: 
350:       const originalGetVariety = varietyService.getVariety;
351:       jest
352:         .spyOn(varietyService, "getVariety")
353:         .mockImplementation(async (id) => {
354:           if (id === validVariety.id) {
355:             return undefined;
356:           }
357:           return originalGetVariety(id);
358:         });
359: 
360:       const tasks = await CareSchedulingService.getUpcomingTasks();
361: 
362: 
363:       expect(Array.isArray(tasks)).toBe(true);
364: 
365: 
366:       const corruptedPlantTasks = tasks.filter(
367:         (task) => task.plantId === validPlant
368:       );
369:       expect(corruptedPlantTasks).toHaveLength(0);
370: 
371: 
372:       varietyService.getVariety = originalGetVariety;
373:     });
374: 
375:     it("correctly calculates priority levels", async () => {
376:       const varieties = await varietyService.getAllVarieties();
377:       const testVariety = varieties[0];
378: 
379:       const testPlant = await plantService.addPlant({
380:         varietyId: testVariety.id,
381:         varietyName: testVariety.name,
382:         plantedDate: subDays(new Date(), 10),
383:         location: "Indoor",
384:         container: "4 inch pot",
385:         isActive: true,
386:       });
387: 
388: 
389:       await careService.addCareActivity({
390:         plantId: testPlant,
391:         type: "water",
392:         date: subDays(new Date(), 3),
393:         details: {
394:           type: "water",
395:           amount: { value: 8, unit: "oz" },
396:         },
397:       });
398: 
399:       const tasks = await CareSchedulingService.getUpcomingTasks();
400:       const plantTasks = tasks.filter((task) => task.plantId === testPlant);
401: 
402:       if (plantTasks.length > 0) {
403:         const wateringTask = plantTasks.find(
404:           (task) => task.task === "Check water level"
405:         );
406: 
407:         if (wateringTask) {
408: 
409:           if (wateringTask.dueIn.includes("overdue")) {
410:             const overdueDays = parseInt(
411:               wateringTask.dueIn.match(/\d+/)?.[0] || "0"
412:             );
413:             if (overdueDays >= 2) {
414:               expect(wateringTask.priority).toBe("high");
415:             } else if (overdueDays >= 0) {
416:               expect(wateringTask.priority).toBe("medium");
417:             }
418:           }
419:         }
420:       }
421:     });
422: 
423:     it("handles empty plant database", async () => {
424: 
425:       await plantService.getActivePlants().then(async (plants) => {
426:         for (const plant of plants) {
427:           await plantService.deletePlant(plant.id);
428:         }
429:       });
430: 
431:       const tasks = await CareSchedulingService.getUpcomingTasks();
432: 
433:       expect(tasks).toEqual([]);
434:     });
435: 
436:     it("handles inactive plants correctly", async () => {
437:       const varieties = await varietyService.getAllVarieties();
438:       const testVariety = varieties[0];
439: 
440: 
441:       const inactivePlant = await plantService.addPlant({
442:         varietyId: testVariety.id,
443:         varietyName: testVariety.name,
444:         plantedDate: subDays(new Date(), 10),
445:         location: "Indoor",
446:         container: "4 inch pot",
447:         isActive: false,
448:       });
449: 
450:       const tasks = await CareSchedulingService.getUpcomingTasks();
451: 
452: 
453:       const inactivePlantTasks = tasks.filter(
454:         (task) => task.plantId === inactivePlant
455:       );
456:       expect(inactivePlantTasks).toHaveLength(0);
457:     });
458:   });
459: 
460:   describe("getNextTaskForPlant Edge Cases", () => {
461:     it("returns null for non-existent plant", async () => {
462:       const task = await CareSchedulingService.getNextTaskForPlant(
463:         "non-existent-id"
464:       );
465:       expect(task).toBeNull();
466:     });
467: 
468:     it("returns null for inactive plant", async () => {
469:       const varieties = await varietyService.getAllVarieties();
470:       const testVariety = varieties[0];
471: 
472:       const inactivePlant = await plantService.addPlant({
473:         varietyId: testVariety.id,
474:         varietyName: testVariety.name,
475:         plantedDate: subDays(new Date(), 5),
476:         location: "Indoor",
477:         container: "4 inch pot",
478:         isActive: false,
479:       });
480: 
481:       const task = await CareSchedulingService.getNextTaskForPlant(
482:         inactivePlant
483:       );
484:       expect(task).toBeNull();
485:     });
486: 
487:     it("handles plant with no eligible tasks", async () => {
488:       const varieties = await varietyService.getAllVarieties();
489:       const testVariety = varieties[0];
490: 
491:       const plantWithNoTasks = await plantService.addPlant({
492:         varietyId: testVariety.id,
493:         varietyName: testVariety.name,
494:         plantedDate: new Date(),
495:         location: "Indoor",
496:         container: "seed tray",
497:         isActive: true,
498:         reminderPreferences: {
499:           watering: false,
500:           fertilizing: false,
501:           observation: false,
502:           lighting: false,
503:           pruning: false,
504:         },
505:       });
506: 
507:       const task = await CareSchedulingService.getNextTaskForPlant(
508:         plantWithNoTasks
509:       );
510:       expect(task).toBeNull();
511:     });
512: 
513:     it("returns highest priority task when multiple exist", async () => {
514:       const varieties = await varietyService.getAllVarieties();
515:       const testVariety = varieties[0];
516: 
517:       const testPlant = await plantService.addPlant({
518:         varietyId: testVariety.id,
519:         varietyName: testVariety.name,
520:         plantedDate: subDays(new Date(), 15),
521:         location: "Indoor",
522:         container: "4 inch pot",
523:         isActive: true,
524:       });
525: 
526: 
527:       await careService.addCareActivity({
528:         plantId: testPlant,
529:         type: "water",
530:         date: subDays(new Date(), 5),
531:         details: {
532:           type: "water",
533:           amount: { value: 8, unit: "oz" },
534:         },
535:       });
536: 
537:       const nextTask = await CareSchedulingService.getNextTaskForPlant(
538:         testPlant
539:       );
540: 
541:       if (nextTask) {
542: 
543:         expect(nextTask.plantId).toBe(testPlant);
544:         expect(nextTask.dueDate).toBeInstanceOf(Date);
545:       }
546:     });
547:   });
548: 
549:   describe("Task Formatting and Calculation", () => {
550:     it("correctly formats due dates", async () => {
551:       const varieties = await varietyService.getAllVarieties();
552:       const testVariety = varieties[0];
553: 
554:       const testPlant = await plantService.addPlant({
555:         varietyId: testVariety.id,
556:         varietyName: testVariety.name,
557:         plantedDate: subDays(new Date(), 5),
558:         location: "Indoor",
559:         container: "4 inch pot",
560:         isActive: true,
561:       });
562: 
563:       const tasks = await CareSchedulingService.getUpcomingTasks();
564:       const plantTasks = tasks.filter((task) => task.plantId === testPlant);
565: 
566:       plantTasks.forEach((task) => {
567: 
568:         expect(task.dueIn).toMatch(
569:           /^(Due today|Due tomorrow|Due in \d+ days?|\d+ days? overdue)$/
570:         );
571: 
572: 
573:         expect(["low", "medium", "high"]).toContain(task.priority);
574: 
575: 
576:         expect(task.plantStage).toBeDefined();
577:         expect(typeof task.plantStage).toBe("string");
578:       });
579:     });
580: 
581:     it("handles stage calculation errors gracefully", async () => {
582:       const varieties = await varietyService.getAllVarieties();
583:       const testVariety = varieties[0];
584: 
585:       const testPlant = await plantService.addPlant({
586:         varietyId: testVariety.id,
587:         varietyName: testVariety.name,
588:         plantedDate: subDays(new Date(), 5),
589:         location: "Indoor",
590:         container: "4 inch pot",
591:         isActive: true,
592:       });
593: 
594:       const growthStageModule = await import("@/utils/growthStage");
595: 
596:       const mockCalculateCurrentStage = jest
597:         .spyOn(growthStageModule, "calculateCurrentStageWithVariety")
598:         .mockImplementation(() => {
599:           throw new Error("Stage calculation failed");
600:         });
601: 
602:       const tasks = await CareSchedulingService.getUpcomingTasks();
603: 
604:       expect(Array.isArray(tasks)).toBe(true);
605: 
606:       const plantTasks = tasks.filter((task) => task.plantId === testPlant);
607: 
608:       expect(plantTasks).toHaveLength(0);
609: 
610:       expect(mockCalculateCurrentStage).toHaveBeenCalled();
611: 
612:       mockCalculateCurrentStage.mockRestore();
613:     });
614:   });
615: });

================
File: src/components/plant/PlantRegistrationForm.tsx
================
  1: import { useState, useEffect } from "react";
  2: import { useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { Button } from "../ui/Button";
  6: import { Card, CardContent } from "../ui/Card";
  7: import { Input } from "../ui/Input";
  8: import { varietyService, VarietyRecord } from "@/types/database";
  9: import { CustomVarietyForm } from "./CustomVarietyForm";
 10: import toast from "react-hot-toast";
 11: import SoilMixtureSelector from "./SoilMixtureSelector";
 12: import { Switch } from "@/components/ui/Switch";
 13: import ReminderPreferencesSection from "@/components/plant/ReminderPreferencesSection";
 14: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 15: import { LoadingSpinner } from "../ui/LoadingSpinner";
 16: 
 17: type ContainerOption = {
 18:   label: string;
 19:   icon: string;
 20:   defaultSetup: string;
 21:   sizes: ReadonlyArray<{
 22:     value: string;
 23:     label: string;
 24:   }>;
 25: };
 26: 
 27: const plantSchema = z.object({
 28:   varietyId: z.string().min(1, "Please select a variety"),
 29:   plantedDate: z.string().refine((date) => {
 30:     const selectedDate = new Date(date);
 31:     const today = new Date();
 32:     const oneYearAgo = new Date();
 33:     oneYearAgo.setFullYear(today.getFullYear() - 1);
 34: 
 35:     return selectedDate <= today && selectedDate >= oneYearAgo;
 36:   }, "Planting date must be within the past year and not in the future"),
 37:   location: z.boolean(),
 38:   containerType: z.string().min(1, "Please select a container type"),
 39:   containerSize: z.string().min(1, "Please specify container size"),
 40:   quantity: z
 41:     .number()
 42:     .min(1, "Quantity must be at least 1")
 43:     .max(999, "Quantity cannot exceed 999"),
 44:   setupType: z.enum(["multiple-containers", "same-container"]),
 45:   customBagShape: z.string().optional(),
 46:   customDiameter: z.string().optional(),
 47:   customBagHeight: z.string().optional(),
 48:   customBagWidth: z.string().optional(),
 49:   customBagLength: z.string().optional(),
 50:   customWidth: z.string().optional(),
 51:   customLength: z.string().optional(),
 52:   customDepth: z.string().optional(),
 53:   soilMix: z.string().min(1, "Please select a soil mixture"),
 54:   notes: z.string().optional(),
 55: });
 56: 
 57: type PlantFormData = z.infer<typeof plantSchema>;
 58: 
 59: interface PlantRegistrationFormProps {
 60:   onSuccess?: () => void;
 61:   onCancel?: () => void;
 62: }
 63: 
 64: interface FormErrors {
 65:   [key: string]: { message?: string } | undefined;
 66: }
 67: 
 68: const containerOptions = {
 69:   "grow-bag": {
 70:     label: "Grow Bag",
 71:     icon: "🎒",
 72:     defaultSetup: "multiple-containers",
 73:     sizes: [
 74:       { value: "1-gallon", label: "1 Gallon" },
 75:       { value: "2-gallon", label: "2 Gallon" },
 76:       { value: "3-gallon", label: "3 Gallon" },
 77:       { value: "5-gallon", label: "5 Gallon" },
 78:       { value: "7-gallon", label: "7 Gallon" },
 79:       { value: "10-gallon", label: "10 Gallon" },
 80:       { value: "15-gallon", label: "15 Gallon" },
 81:       { value: "30-gallon", label: "30 Gallon" },
 82:       { value: "custom", label: "Custom Size" },
 83:     ],
 84:   },
 85:   pot: {
 86:     label: "Pot",
 87:     icon: "🪴",
 88:     defaultSetup: "multiple-containers",
 89:     sizes: [
 90:       { value: "4-inch", label: "4 inch" },
 91:       { value: "5-inch", label: "5 inch" },
 92:       { value: "6-inch", label: "6 inch" },
 93:       { value: "8-inch", label: "8 inch" },
 94:       { value: "10-inch", label: "10 inch" },
 95:       { value: "12-inch", label: "12 inch" },
 96:       { value: "custom", label: "Custom Size" },
 97:     ],
 98:   },
 99:   "cell-tray": {
100:     label: "Seed Starting Cell Tray",
101:     icon: "📱",
102:     defaultSetup: "same-container",
103:     sizes: [
104:       { value: "72-cell", label: "72 Cell Tray" },
105:       { value: "50-cell", label: "50 Cell Tray" },
106:       { value: "32-cell", label: "32 Cell Tray" },
107:       { value: "custom", label: "Custom Cell Count" },
108:     ],
109:   },
110:   "raised-bed": {
111:     label: "Raised Bed",
112:     icon: "🏗️",
113:     defaultSetup: "same-container",
114:     sizes: [{ value: "custom-dimensions", label: "Custom Dimensions" }],
115:   },
116: } as const;
117: 
118: export function PlantRegistrationForm({
119:   onSuccess,
120:   onCancel,
121: }: PlantRegistrationFormProps) {
122:   const { createPlant } = useFirebasePlants();
123: 
124:   const [varieties, setVarieties] = useState<VarietyRecord[]>([]);
125:   const [isLoading, setIsLoading] = useState(false);
126:   const [isLoadingVarieties, setIsLoadingVarieties] = useState(true);
127:   const [submitError, setSubmitError] = useState<string | null>(null);
128:   const [showCustomVarietyForm, setShowCustomVarietyForm] = useState(false);
129:   const [reminderPreferences, setReminderPreferences] = useState({
130:     watering: true,
131:     fertilizing: true,
132:     observation: true,
133:     lighting: false,
134:     pruning: false,
135:   });
136: 
137:   const {
138:     register,
139:     handleSubmit,
140:     watch,
141:     setValue,
142:     reset,
143:     formState: { errors, isValid, isSubmitting },
144:   } = useForm<PlantFormData>({
145:     resolver: zodResolver(plantSchema),
146:     mode: "onChange",
147:     defaultValues: {
148:       location: false,
149:       quantity: 1,
150:       setupType: "multiple-containers",
151:       plantedDate: new Date().toISOString().split("T")[0],
152:       notes: "",
153:     },
154:   });
155: 
156:   const selectedVarietyId = watch("varietyId");
157:   const containerType = watch("containerType");
158: 
159:   const setupType = watch("setupType");
160:   const quantity = watch("quantity");
161: 
162:   useEffect(() => {
163:     loadVarieties();
164:   }, []);
165: 
166:   useEffect(() => {
167:     if (containerType) {
168:       const option =
169:         containerOptions[containerType as keyof typeof containerOptions];
170:       if (option) {
171:         setValue("setupType", option.defaultSetup, { shouldValidate: true });
172: 
173:         setValue("containerSize", option.sizes[0].value, {
174:           shouldValidate: true,
175:         });
176:       }
177:     }
178:   }, [containerType, setValue]);
179: 
180:   const loadVarieties = async () => {
181:     try {
182:       setIsLoadingVarieties(true);
183:       const varietyList = await varietyService.getAllVarieties();
184:       setVarieties(varietyList);
185:     } catch (error) {
186:       console.error("Failed to load varieties:", error);
187:       toast.error("Failed to load plant varieties");
188:     } finally {
189:       setIsLoadingVarieties(false);
190:     }
191:   };
192: 
193:   const selectedVariety = varieties.find((v) => v.id === selectedVarietyId);
194:   const plantCategory = selectedVariety?.category;
195: 
196:   const getVarietyDisplayName = (variety: VarietyRecord) => {
197:     return variety.isCustom ? `${variety.name} (Custom)` : variety.name;
198:   };
199: 
200:   const onSubmit = async (data: PlantFormData) => {
201:     try {
202:       setIsLoading(true);
203:       setSubmitError(null);
204: 
205:       const variety = varieties.find((v) => v.id === data.varietyId);
206:       if (!variety) {
207:         throw new Error("Selected variety not found");
208:       }
209: 
210:       const varietyName = variety.name;
211:       const locationString = data.location ? "Outdoor" : "Indoor";
212: 
213: 
214:       let containerDescription = "";
215:       const containerOption =
216:         containerOptions[data.containerType as keyof typeof containerOptions];
217: 
218:       if (
219:         data.containerSize === "custom" ||
220:         data.containerSize === "custom-dimensions"
221:       ) {
222:         containerDescription = buildCustomContainerDescription(
223:           data,
224:           containerOption
225:         );
226:       } else {
227:         const sizeOption = containerOption?.sizes.find(
228:           (s) => s.value === data.containerSize
229:         );
230:         const singleDescription = `${sizeOption?.label || data.containerSize} ${
231:           containerOption?.label || data.containerType
232:         }`;
233: 
234:         const isMultipleContainers = data.setupType === "multiple-containers";
235:         if (data.quantity > 1 && !isMultipleContainers) {
236:           containerDescription = `${singleDescription} (${data.quantity} plants)`;
237:         } else {
238:           containerDescription = singleDescription;
239:         }
240:       }
241: 
242:       const baseName = varietyName;
243: 
244:       const plantPromises = [];
245:       for (let i = 0; i < data.quantity; i++) {
246:         let plantName = baseName;
247: 
248:         if (data.quantity > 1) {
249:           const isMultipleContainers = data.setupType === "multiple-containers";
250:           if (isMultipleContainers) {
251:             plantName = `${baseName} #${i + 1}`;
252:           } else {
253:             plantName = `${baseName} (Plant ${i + 1})`;
254:           }
255:         }
256: 
257: 
258:         plantPromises.push(
259:           createPlant({
260:             varietyId: data.varietyId,
261:             varietyName: varietyName,
262:             name: plantName,
263:             plantedDate: new Date(data.plantedDate),
264:             location: locationString,
265:             container: containerDescription,
266:             soilMix: data.soilMix,
267:             isActive: true,
268:             notes: data.notes ? [data.notes] : [""],
269:             reminderPreferences,
270:             quantity: data.quantity,
271:             setupType: data.setupType,
272:           })
273:         );
274:       }
275: 
276:       // Wait for all plants to be created
277:       await Promise.all(plantPromises);
278: 
279:       toast.success(`Successfully registered ${data.quantity} plant(s)! 🌱`);
280:       reset();
281:       onSuccess?.();
282:     } catch (error) {
283:       console.error("Failed to register plant:", error);
284:       const errorMessage =
285:         error instanceof Error ? error.message : "Failed to register plant";
286:       setSubmitError(errorMessage);
287:       toast.error(errorMessage);
288:     } finally {
289:       setIsLoading(false);
290:     }
291:   };
292: 
293:   const buildCustomContainerDescription = (
294:     data: PlantFormData,
295:     containerOption: ContainerOption | undefined
296:   ) => {
297:     if (data.containerType === "grow-bag" && data.customBagShape) {
298:       if (data.customBagShape === "round") {
299:         return `${data.customDiameter}"D x ${data.customBagHeight}"H ${
300:           containerOption?.label || "Grow Bag"
301:         }`;
302:       } else {
303:         return `${data.customBagWidth}"W x ${data.customBagLength}"L x ${
304:           data.customBagHeight
305:         }"H ${containerOption?.label || "Grow Bag"}`;
306:       }
307:     } else if (data.containerType === "raised-bed") {
308:       return `${data.customWidth}"W x ${data.customLength}"L x ${data.customDepth}"D Raised Bed`;
309:     } else if (data.containerType === "pot") {
310:       return `${data.customDiameter}" ${containerOption?.label || "Pot"}`;
311:     }
312:     return "Custom Container";
313:   };
314: 
315:   const renderFormField = (
316:     id: keyof PlantFormData,
317:     label: string,
318:     type: "text" | "date" | "select" | "textarea" | "number" = "text",
319:     placeholder?: string,
320:     required: boolean = false
321:   ) => {
322:     const error = (errors as FormErrors)[id];
323: 
324:     return (
325:       <div>
326:         <label
327:           htmlFor={id}
328:           className="block text-sm font-medium text-foreground mb-2"
329:         >
330:           {label} {label && required && "*"}
331:         </label>
332: 
333:         {type === "select" && id === "varietyId" ? (
334:           <div className="space-y-2">
335:             <select
336:               {...register(id)}
337:               id={id}
338:               className={`w-full p-3 border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-accent focus:border-accent ${
339:                 error ? "border-red-500" : "border-border"
340:               }`}
341:               disabled={isLoadingVarieties}
342:             >
343:               <option value="">
344:                 {isLoadingVarieties
345:                   ? "Loading varieties..."
346:                   : "Select a variety"}
347:               </option>
348:               {varieties.map((variety) => (
349:                 <option key={variety.id} value={variety.id}>
350:                   {getVarietyDisplayName(variety)}
351:                 </option>
352:               ))}
353:             </select>
354:             <Button
355:               type="button"
356:               variant="outline"
357:               size="sm"
358:               onClick={() => setShowCustomVarietyForm(true)}
359:               className="text-sm"
360:             >
361:               + Add Custom Variety
362:             </Button>
363:           </div>
364:         ) : type === "select" && id === "containerType" ? (
365:           <div className="grid grid-cols-2 gap-3">
366:             {Object.entries(containerOptions).map(([key, option]) => (
367:               <button
368:                 key={key}
369:                 type="button"
370:                 onClick={() =>
371:                   setValue("containerType", key, { shouldValidate: true })
372:                 }
373:                 className={`p-4 border-2 rounded-lg text-left transition-all ${
374:                   watch("containerType") === key
375:                     ? "border-accent bg-accent/10"
376:                     : "border-border hover:border-accent/50"
377:                 }`}
378:                 data-testid={`container-type-${key}`}
379:               >
380:                 <div className="flex items-center space-x-2">
381:                   <span className="text-xl">{option.icon}</span>
382:                   <span className="font-medium">{option.label}</span>
383:                 </div>
384:               </button>
385:             ))}
386:           </div>
387:         ) : type === "select" && id === "containerSize" ? (
388:           renderContainerSizeSelect(error)
389:         ) : type === "textarea" ? (
390:           <textarea
391:             {...register(id)}
392:             id={id}
393:             placeholder={placeholder}
394:             rows={3}
395:             className={`w-full p-3 border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-accent focus:border-accent resize-none ${
396:               error ? "border-red-500" : "border-border"
397:             }`}
398:           />
399:         ) : type === "number" ? (
400:           <Input
401:             {...register(id, { valueAsNumber: true })}
402:             id={id}
403:             type="number"
404:             placeholder={placeholder}
405:             min={1}
406:             max={999}
407:             className={error ? "border-red-500" : ""}
408:           />
409:         ) : (
410:           <Input
411:             {...register(id)}
412:             id={id}
413:             type={type}
414:             placeholder={placeholder}
415:             className={error ? "border-red-500" : ""}
416:           />
417:         )}
418: 
419:         {error && (
420:           <p className="mt-1 text-sm text-red-600" role="alert">
421:             {error.message}
422:           </p>
423:         )}
424:       </div>
425:     );
426:   };
427: 
428:   const renderContainerSizeSelect = (
429:     error: FormErrors[keyof PlantFormData]
430:   ) => {
431:     const selectedContainerType =
432:       containerType as keyof typeof containerOptions;
433:     if (!selectedContainerType || !containerOptions[selectedContainerType]) {
434:       return (
435:         <p className="text-sm text-muted-foreground">
436:           Please select a container type first
437:         </p>
438:       );
439:     }
440: 
441:     const options = containerOptions[selectedContainerType];
442: 
443:     return (
444:       <div className="space-y-3">
445:         <select
446:           {...register("containerSize")}
447:           className={`w-full p-3 border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-accent focus:border-accent ${
448:             error ? "border-red-500" : "border-border"
449:           }`}
450:         >
451:           <option value="">Select size</option>
452:           {options.sizes.map((size) => (
453:             <option key={size.value} value={size.value}>
454:               {size.label}
455:             </option>
456:           ))}
457:         </select>
458: 
459:         {renderCustomSizeFields()}
460:       </div>
461:     );
462:   };
463: 
464:   const renderCustomSizeFields = () => {
465:     const size = watch("containerSize");
466:     if (size !== "custom" && size !== "custom-dimensions") return null;
467: 
468:     if (containerType === "grow-bag") {
469:       return (
470:         <div className="space-y-3 p-3 bg-muted/50 rounded-lg">
471:           <div>
472:             <label className="block text-sm font-medium mb-1">Bag Shape</label>
473:             <select
474:               {...register("customBagShape")}
475:               className="w-full p-2 border rounded bg-background"
476:             >
477:               <option value="">Select shape</option>
478:               <option value="round">Round</option>
479:               <option value="rectangular">Rectangular</option>
480:             </select>
481:           </div>
482: 
483:           {watch("customBagShape") === "round" ? (
484:             <>
485:               <div>
486:                 <label className="block text-sm font-medium mb-1">
487:                   Diameter (inches)
488:                 </label>
489:                 <Input
490:                   {...register("customDiameter")}
491:                   type="number"
492:                   placeholder="e.g., 12"
493:                 />
494:               </div>
495:               <div>
496:                 <label className="block text-sm font-medium mb-1">
497:                   Height (inches)
498:                 </label>
499:                 <Input
500:                   {...register("customBagHeight")}
501:                   type="number"
502:                   placeholder="e.g., 8"
503:                 />
504:               </div>
505:             </>
506:           ) : watch("customBagShape") === "rectangular" ? (
507:             <>
508:               <div>
509:                 <label className="block text-sm font-medium mb-1">
510:                   Width (inches)
511:                 </label>
512:                 <Input
513:                   {...register("customBagWidth")}
514:                   type="number"
515:                   placeholder="e.g., 24"
516:                 />
517:               </div>
518:               <div>
519:                 <label className="block text-sm font-medium mb-1">
520:                   Length (inches)
521:                 </label>
522:                 <Input
523:                   {...register("customBagLength")}
524:                   type="number"
525:                   placeholder="e.g., 36"
526:                 />
527:               </div>
528:               <div>
529:                 <label className="block text-sm font-medium mb-1">
530:                   Height (inches)
531:                 </label>
532:                 <Input
533:                   {...register("customBagHeight")}
534:                   type="number"
535:                   placeholder="e.g., 12"
536:                 />
537:               </div>
538:             </>
539:           ) : null}
540:         </div>
541:       );
542:     }
543: 
544:     if (containerType === "raised-bed") {
545:       return (
546:         <div className="space-y-3 p-3 bg-muted/50 rounded-lg">
547:           <div>
548:             <label className="block text-sm font-medium mb-1">
549:               Width (inches)
550:             </label>
551:             <Input
552:               {...register("customWidth")}
553:               type="number"
554:               placeholder="e.g., 48"
555:             />
556:           </div>
557:           <div>
558:             <label className="block text-sm font-medium mb-1">
559:               Length (inches)
560:             </label>
561:             <Input
562:               {...register("customLength")}
563:               type="number"
564:               placeholder="e.g., 96"
565:             />
566:           </div>
567:           <div>
568:             <label className="block text-sm font-medium mb-1">
569:               Depth (inches)
570:             </label>
571:             <Input
572:               {...register("customDepth")}
573:               type="number"
574:               placeholder="e.g., 12"
575:             />
576:           </div>
577:         </div>
578:       );
579:     }
580: 
581:     if (containerType === "pot") {
582:       return (
583:         <div className="p-3 bg-muted/50 rounded-lg">
584:           <label className="block text-sm font-medium mb-1">
585:             Diameter (inches)
586:           </label>
587:           <Input
588:             {...register("customDiameter")}
589:             type="number"
590:             placeholder="e.g., 14"
591:           />
592:         </div>
593:       );
594:     }
595: 
596:     return null;
597:   };
598: 
599:   const getQuantityHelperText = () => {
600:     const isMultipleContainers = setupType === "multiple-containers";
601:     const isSameContainer = setupType === "same-container";
602: 
603:     if (isMultipleContainers) {
604:       return "Number of separate containers (1 plant each)";
605:     } else if (isSameContainer) {
606:       return "Number of plants in the same container";
607:     }
608:     return "Number of containers/plants";
609:   };
610: 
611:   if (showCustomVarietyForm) {
612:     return (
613:       <CustomVarietyForm
614:         onSuccess={(varietyId) => {
615:           setValue("varietyId", varietyId, { shouldValidate: true });
616:           setShowCustomVarietyForm(false);
617:           loadVarieties();
618:         }}
619:         onCancel={() => setShowCustomVarietyForm(false)}
620:       />
621:     );
622:   }
623: 
624:   if (isLoadingVarieties) {
625:     return (
626:       <Card className="w-full max-w-2xl mx-auto">
627:         <CardContent className="flex items-center justify-center p-8">
628:           <div className="flex items-center space-x-3">
629:             <LoadingSpinner size="sm" />
630:             <span>Loading plant varieties...</span>
631:           </div>
632:         </CardContent>
633:       </Card>
634:     );
635:   }
636: 
637:   return (
638:     <div className="space-y-6">
639:       {}
640:       <div className="text-center">
641:         <div className="text-4xl mb-4">🌿</div>
642:         <h2 className="text-2xl font-bold text-foreground mb-2">
643:           Register Your Plant
644:         </h2>
645:         <p className="text-muted-foreground">
646:           Fill in the details below to start tracking your plant's growth
647:           journey
648:         </p>
649:       </div>
650: 
651:       {}
652:       <Card className="shadow-lg border-0 bg-card/50 backdrop-blur">
653:         <CardContent className="p-6">
654:           <form
655:             onSubmit={handleSubmit(onSubmit)}
656:             className="space-y-6"
657:             data-testid="plant-registration-form"
658:           >
659:             {submitError && (
660:               <div
661:                 className="p-4 bg-red-50 border border-red-200 rounded-lg"
662:                 role="alert"
663:               >
664:                 <div className="flex items-center gap-2">
665:                   <span className="text-red-500">⚠️</span>
666:                   <p className="text-sm text-red-600 font-medium">
667:                     {submitError}
668:                   </p>
669:                 </div>
670:               </div>
671:             )}
672: 
673:             {}
674:             <div className="space-y-4 p-4 bg-gradient-to-br from-primary/5 to-primary/10 rounded-lg border border-primary/20">
675:               <h3 className="font-semibold text-foreground flex items-center gap-2">
676:                 <span className="text-lg">🌱</span>
677:                 Plant Information
678:               </h3>
679:               {renderFormField(
680:                 "varietyId",
681:                 "Plant Variety",
682:                 "select",
683:                 "",
684:                 true
685:               )}
686:               {renderFormField(
687:                 "plantedDate",
688:                 "Planting Date",
689:                 "date",
690:                 "",
691:                 true
692:               )}
693:             </div>
694: 
695:             {/* Location Section */}
696:             <div className="space-y-4 p-4 bg-gradient-to-br from-accent/5 to-accent/10 rounded-lg border border-accent/20">
697:               <h3 className="font-semibold text-foreground flex items-center gap-2">
698:                 <span className="text-lg">📍</span>
699:                 Growing Location
700:               </h3>
701:               <div>
702:                 <label className="block text-sm font-medium text-foreground mb-3">
703:                   Location
704:                 </label>
705:                 <div className="flex items-center justify-center space-x-4 p-4 bg-background/50 rounded-lg">
706:                   <label className="flex items-center space-x-3 cursor-pointer">
707:                     <span className="text-sm font-medium text-foreground">
708:                       Indoor
709:                     </span>
710:                     <Switch
711:                       checked={watch("location")}
712:                       onCheckedChange={(checked) =>
713:                         setValue("location", checked, { shouldValidate: true })
714:                       }
715:                       aria-label="Location toggle between indoor and outdoor"
716:                     />
717:                     <span className="text-sm font-medium text-foreground">
718:                       Outdoor
719:                     </span>
720:                   </label>
721:                 </div>
722:               </div>
723:             </div>
724: 
725:             {}
726:             <div className="space-y-4 p-4 bg-gradient-to-br from-emerald-500/5 to-emerald-500/10 rounded-lg border border-emerald-500/20">
727:               <h3 className="font-semibold text-foreground flex items-center gap-2">
728:                 <span className="text-lg">🪴</span>
729:                 Container Setup
730:               </h3>
731: 
732:               <div>
733:                 <label className="block text-sm font-medium text-foreground mb-3">
734:                   Container Type *
735:                 </label>
736:                 {renderFormField("containerType", "", "select")}
737:               </div>
738: 
739:               {containerType && (
740:                 <div>
741:                   <label className="block text-sm font-medium text-foreground mb-3">
742:                     Container Size *
743:                   </label>
744:                   {renderFormField("containerSize", "", "select")}
745:                 </div>
746:               )}
747: 
748:               <div className="space-y-3">
749:                 <div>
750:                   <label className="block text-sm font-medium text-foreground mb-3">
751:                     Setup Type
752:                   </label>
753:                   <div className="grid grid-cols-1 gap-3">
754:                     <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-background/50 transition-colors">
755:                       <input
756:                         type="radio"
757:                         value="multiple-containers"
758:                         {...register("setupType")}
759:                         className="w-4 h-4 text-accent border-gray-300 focus:ring-accent"
760:                       />
761:                       <div>
762:                         <div className="font-medium">Multiple Containers</div>
763:                         <div className="text-sm text-muted-foreground">
764:                           Each plant gets its own container
765:                         </div>
766:                       </div>
767:                     </label>
768:                     <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-background/50 transition-colors">
769:                       <input
770:                         type="radio"
771:                         value="same-container"
772:                         {...register("setupType")}
773:                         className="w-4 h-4 text-accent border-gray-300 focus:ring-accent"
774:                       />
775:                       <div>
776:                         <div className="font-medium">Same Container</div>
777:                         <div className="text-sm text-muted-foreground">
778:                           Multiple plants share one container
779:                         </div>
780:                       </div>
781:                     </label>
782:                   </div>
783:                 </div>
784: 
785:                 <div>
786:                   <label
787:                     htmlFor="quantity"
788:                     className="block text-sm font-medium text-foreground mb-3"
789:                   >
790:                     Quantity *
791:                   </label>
792:                   <div className="flex items-center space-x-3">
793:                     <Button
794:                       type="button"
795:                       variant="outline"
796:                       size="sm"
797:                       onClick={() =>
798:                         setValue("quantity", Math.max(1, quantity - 1), {
799:                           shouldValidate: true,
800:                         })
801:                       }
802:                       disabled={quantity <= 1}
803:                       className="w-10 h-10 p-0"
804:                       aria-label="Decrease quantity"
805:                     >
806:                       -
807:                     </Button>
808:                     <div className="flex-1">
809:                       <Input
810:                         {...register("quantity", { valueAsNumber: true })}
811:                         id="quantity"
812:                         type="number"
813:                         placeholder="1"
814:                         min={1}
815:                         max={999}
816:                         className={errors.quantity ? "border-red-500" : ""}
817:                         aria-label="Plant quantity"
818:                         data-testid="quantity-input"
819:                       />
820:                     </div>
821:                     <Button
822:                       type="button"
823:                       variant="outline"
824:                       size="sm"
825:                       onClick={() =>
826:                         setValue("quantity", Math.min(999, quantity + 1), {
827:                           shouldValidate: true,
828:                         })
829:                       }
830:                       disabled={quantity >= 999}
831:                       className="w-10 h-10 p-0"
832:                       aria-label="Increase quantity"
833:                     >
834:                       +
835:                     </Button>
836:                   </div>
837:                   {errors.quantity && (
838:                     <p className="mt-1 text-sm text-red-600" role="alert">
839:                       {errors.quantity.message}
840:                     </p>
841:                   )}
842:                   <p className="text-xs text-muted-foreground mt-1 bg-background/50 p-2 rounded">
843:                     {getQuantityHelperText()}
844:                   </p>
845:                 </div>
846:               </div>
847:             </div>
848: 
849:             {}
850:             <div className="space-y-4 p-4 bg-gradient-to-br from-amber-500/5 to-amber-500/10 rounded-lg border border-amber-500/20">
851:               <h3 className="font-semibold text-foreground flex items-center gap-2">
852:                 <span className="text-lg">🌱</span>
853:                 Soil & Care Preferences
854:               </h3>
855: 
856:               <div>
857:                 <SoilMixtureSelector
858:                   selectedMixture={watch("soilMix")}
859:                   onMixtureChange={(mixture) =>
860:                     setValue("soilMix", mixture, { shouldValidate: true })
861:                   }
862:                   plantCategory={plantCategory}
863:                 />
864:                 {errors.soilMix && (
865:                   <p className="mt-1 text-sm text-red-600" role="alert">
866:                     {errors.soilMix.message}
867:                   </p>
868:                 )}
869:               </div>
870: 
871:               <ReminderPreferencesSection
872:                 preferences={reminderPreferences}
873:                 onChange={setReminderPreferences}
874:               />
875:             </div>
876: 
877:             {}
878:             <div className="space-y-4 p-4 bg-gradient-to-br from-slate-500/5 to-slate-500/10 rounded-lg border border-slate-500/20">
879:               <h3 className="font-semibold text-foreground flex items-center gap-2">
880:                 <span className="text-lg">📝</span>
881:                 Additional Notes
882:               </h3>
883:               {renderFormField(
884:                 "notes",
885:                 "Notes",
886:                 "textarea",
887:                 "Add any additional notes about this plant, growing conditions, or special care instructions...",
888:                 false
889:               )}
890:             </div>
891: 
892:             {}
893:             <div className="flex gap-3 pt-6 border-t border-border">
894:               {onCancel && (
895:                 <Button
896:                   type="button"
897:                   variant="outline"
898:                   onClick={onCancel}
899:                   className="flex-1"
900:                   disabled={isLoading}
901:                 >
902:                   Cancel
903:                 </Button>
904:               )}
905:               <Button
906:                 type="submit"
907:                 disabled={!isValid || isSubmitting || isLoading}
908:                 className="flex-1 bg-primary hover:bg-primary/90"
909:                 size="lg"
910:                 aria-label="Register Plant"
911:               >
912:                 {isLoading ? (
913:                   <div className="flex items-center space-x-2">
914:                     <LoadingSpinner size="sm" />
915:                     <span>Registering...</span>
916:                   </div>
917:                 ) : (
918:                   <div className="flex items-center space-x-2">
919:                     <span>🌱</span>
920:                     <span>Register Plant{quantity > 1 ? "s" : ""}</span>
921:                   </div>
922:                 )}
923:               </Button>
924:             </div>
925:           </form>
926:         </CardContent>
927:       </Card>
928:     </div>
929:   );
930: }

================
File: src/pages/dashboard/TaskItem.tsx
================
  1: import React, { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { Button } from "@/components/ui/Button";
  4: import { StatusBadge } from "@/components/ui/StatusBadge";
  5: import { UpcomingTask } from "@/types/scheduling";
  6: import { CheckCircle2, Clock } from "lucide-react";
  7: import {
  8:   QuickCompleteOption,
  9:   QuickCompletionValues,
 10: } from "@/services/smartDefaultsService";
 11: 
 12: interface TaskItemProps {
 13:   task: UpcomingTask;
 14:   onQuickComplete?: (
 15:     taskId: string,
 16:     values: QuickCompletionValues
 17:   ) => Promise<void>;
 18:   onBypass?: (taskId: string, reason: string) => Promise<void>;
 19:   className?: string;
 20: }
 21: 
 22: const TaskItem: React.FC<TaskItemProps> = ({
 23:   task,
 24:   onQuickComplete,
 25:   onBypass,
 26:   className = "",
 27: }) => {
 28:   const navigate = useNavigate();
 29:   const [isLoading, setIsLoading] = useState(false);
 30:   const [showBypassDialog, setShowBypassDialog] = useState(false);
 31:   const [bypassReason, setBypassReason] = useState("");
 32:   const [bypassSubmitted, setBypassSubmitted] = useState(false);
 33: 
 34:   const handleTaskClick = () => {
 35:     navigate(`/plants/${task.plantId}`);
 36:   };
 37: 
 38:   const handleQuickComplete = async (option: QuickCompleteOption) => {
 39:     if (!onQuickComplete) return;
 40: 
 41:     setIsLoading(true);
 42:     try {
 43:       await onQuickComplete(task.id, option.values);
 44:     } catch (error) {
 45:       console.error("Failed to quick complete task:", error);
 46:     } finally {
 47:       setIsLoading(false);
 48:     }
 49:   };
 50: 
 51:   const handleBypass = async () => {
 52:     if (!onBypass || !bypassReason.trim()) return;
 53: 
 54:     setIsLoading(true);
 55:     try {
 56:       await onBypass(task.id, bypassReason);
 57: 
 58:       setBypassSubmitted(true);
 59: 
 60:       setTimeout(() => {
 61:         setShowBypassDialog(false);
 62:         setBypassReason("");
 63:         setBypassSubmitted(false);
 64:       }, 1500);
 65:     } catch (error) {
 66:       console.error("Failed to bypass task:", error);
 67:     } finally {
 68:       setIsLoading(false);
 69:     }
 70:   };
 71: 
 72:   const getTaskIcon = (taskName: string) => {
 73:     const name = taskName.toLowerCase();
 74:     if (name.includes("water")) return "💧";
 75:     if (name.includes("fertiliz")) return "🌱";
 76:     if (name.includes("observe") || name.includes("health")) return "👁";
 77:     return "🌿";
 78:   };
 79: 
 80:   const getPriorityColor = (priority: string) => {
 81:     switch (priority) {
 82:       case "high":
 83:         return "text-red-600";
 84:       case "medium":
 85:         return "text-yellow-600";
 86:       case "low":
 87:         return "text-green-600";
 88:       default:
 89:         return "text-muted-foreground";
 90:     }
 91:   };
 92: 
 93:   const getStatusFromPriority = (priority: string) => {
 94:     switch (priority) {
 95:       case "high":
 96:         return "critical" as const;
 97:       case "medium":
 98:         return "attention" as const;
 99:       case "low":
100:         return "healthy" as const;
101:       default:
102:         return "new" as const;
103:     }
104:   };
105: 
106:   return (
107:     <div className={`bg-card rounded-lg border p-4 ${className}`}>
108:       <div className="flex items-start justify-between">
109:         <div className="flex items-start space-x-3 flex-1">
110:           <div className="text-2xl">{getTaskIcon(task.task)}</div>
111:           <div className="flex-1 min-w-0" onClick={handleTaskClick}>
112:             <div className="flex items-center gap-2 mb-1">
113:               <h4 className="font-medium text-foreground">{task.plantName}</h4>
114:               <StatusBadge
115:                 status={getStatusFromPriority(task.priority)}
116:                 size="sm"
117:               />
118:             </div>
119:             <p className="text-sm text-muted-foreground mb-1">{task.task}</p>
120:             <p className="text-xs text-muted-foreground mb-1">
121:               Stage: {task.plantStage}
122:             </p>
123:             <p className={`text-xs ${getPriorityColor(task.priority)}`}>
124:               {task.dueIn}
125:             </p>
126:           </div>
127: 
128:           <div className="flex flex-col gap-2 ml-4">
129:             {task.quickCompleteOptions &&
130:               task.quickCompleteOptions.length > 0 && (
131:                 <div className="flex flex-wrap gap-1">
132:                   {task.quickCompleteOptions.map((option, index) => (
133:                     <Button
134:                       key={index}
135:                       size="sm"
136:                       variant="outline"
137:                       onClick={() => handleQuickComplete(option)}
138:                       disabled={isLoading}
139:                       className="text-xs"
140:                     >
141:                       {option.label}
142:                     </Button>
143:                   ))}
144:                 </div>
145:               )}
146: 
147:             <div className="flex gap-2">
148:               <Button
149:                 size="sm"
150:                 variant="ghost"
151:                 onClick={() => setShowBypassDialog(true)}
152:                 disabled={isLoading}
153:                 className="text-xs"
154:               >
155:                 Bypass
156:               </Button>
157:               <Button
158:                 size="sm"
159:                 variant="outline"
160:                 onClick={() =>
161:                   navigate(
162:                     `/log-care?plant=${task.plantId}&type=${
163:                       task.task.toLowerCase().includes("water")
164:                         ? "water"
165:                         : "fertilize"
166:                     }`
167:                   )
168:                 }
169:                 disabled={isLoading}
170:               >
171:                 Log Manually
172:               </Button>
173:             </div>
174:           </div>
175:         </div>
176:       </div>
177: 
178:       {showBypassDialog && (
179:         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
180:           <div className="bg-background rounded-lg p-6 w-full max-w-md">
181:             {bypassSubmitted ? (
182:               <div className="text-center">
183:                 <CheckCircle2 className="w-16 h-16 text-green-500 mx-auto mb-4" />
184:                 <h3 className="text-lg font-semibold mb-2 text-green-700">
185:                   Task Bypassed
186:                 </h3>
187:                 <p className="text-sm text-muted-foreground">
188:                   Your preferences are being learned for better recommendations.
189:                 </p>
190:               </div>
191:             ) : (
192:               <>
193:                 <h3 className="text-lg font-semibold mb-4">
194:                   Bypass "{task.task}" for {task.plantName}
195:                 </h3>
196:                 <p className="text-sm text-muted-foreground mb-4">
197:                   Why are you skipping this task? This helps us improve future
198:                   recommendations.
199:                 </p>
200:                 <textarea
201:                   value={bypassReason}
202:                   onChange={(e) => setBypassReason(e.target.value)}
203:                   placeholder="e.g., plant looks healthy, watered recently, weather too cold..."
204:                   className="w-full h-24 p-3 border rounded-md resize-none text-sm"
205:                   disabled={isLoading}
206:                 />
207:                 <div className="flex gap-2 mt-4">
208:                   <Button
209:                     onClick={() => {
210:                       setShowBypassDialog(false);
211:                       setBypassReason("");
212:                     }}
213:                     variant="outline"
214:                     disabled={isLoading}
215:                     className="flex-1"
216:                   >
217:                     Cancel
218:                   </Button>
219:                   <Button
220:                     onClick={handleBypass}
221:                     disabled={!bypassReason.trim() || isLoading}
222:                     className="flex-1"
223:                   >
224:                     {isLoading ? (
225:                       <div className="flex items-center gap-2">
226:                         <Clock className="w-4 h-4 animate-spin" />
227:                         <span>Submitting...</span>
228:                       </div>
229:                     ) : (
230:                       "Submit Bypass"
231:                     )}
232:                   </Button>
233:                 </div>
234:               </>
235:             )}
236:           </div>
237:         </div>
238:       )}
239:     </div>
240:   );
241: };
242: 
243: export default TaskItem;

================
File: src/setupTests.ts
================
  1: import "@testing-library/jest-dom";
  2: import "fake-indexeddb/auto";
  3: import { TextEncoder, TextDecoder } from "util";
  4: 
  5: 
  6: 
  7: 
  8: 
  9: 
 10: 
 11: 
 12: 
 13: 
 14: 
 15: const RealDate = Date;
 16: 
 17: 
 18: 
 19: 
 20: 
 21: 
 22: export function mockDate(isoDate: string) {
 23: 
 24: 
 25:   global.Date = class extends RealDate {
 26: 
 27:     constructor(date?: string | number | Date) {
 28: 
 29: 
 30:       if (date) {
 31:         super(date);
 32:       } else {
 33:         super(isoDate);
 34:       }
 35:     }
 36: 
 37: 
 38:     static now() {
 39:       return new RealDate(isoDate).getTime();
 40:     }
 41:   };
 42: }
 43: 
 44: 
 45: 
 46: 
 47: 
 48: 
 49: export const restoreDate = () => {
 50:   global.Date = RealDate;
 51: };
 52: 
 53: 
 54: 
 55: jest.mock("@/services/firebase/config", () => ({
 56:   db: {},
 57:   auth: {},
 58:   storage: {},
 59: }));
 60: 
 61: 
 62: Object.defineProperty(globalThis, "import", {
 63:   value: {
 64:     meta: {
 65:       env: {
 66:         VITE_FIREBASE_API_KEY: "test-api-key",
 67:         VITE_FIREBASE_AUTH_DOMAIN: "test-project.firebaseapp.com",
 68:         VITE_FIREBASE_PROJECT_ID: "test-project",
 69:         VITE_FIREBASE_STORAGE_BUCKET: "test-project.appspot.com",
 70:         VITE_FIREBASE_MESSAGING_SENDER_ID: "123456789",
 71:         VITE_FIREBASE_APP_ID: "test-app-id",
 72:       },
 73:     },
 74:   },
 75: });
 76: 
 77: 
 78: Object.defineProperty(global, "import.meta", {
 79:   value: {
 80:     env: {
 81:       VITE_FIREBASE_API_KEY: "mock-api-key",
 82:       VITE_FIREBASE_AUTH_DOMAIN: "mock-auth-domain.firebaseapp.com",
 83:       VITE_FIREBASE_PROJECT_ID: "mock-project-id",
 84:       VITE_FIREBASE_STORAGE_BUCKET: "mock-project-id.appspot.com",
 85:       VITE_FIREBASE_MESSAGING_SENDER_ID: "mock-sender-id",
 86:       VITE_FIREBASE_APP_ID: "mock-app-id",
 87:     },
 88:   },
 89: });
 90: 
 91: 
 92: 
 93: 
 94: 
 95: 
 96: 
 97: 
 98: 
 99: 
100: 
101: 
102: 
103: if (typeof global.structuredClone === "undefined") {
104:   global.structuredClone = <T>(val: T): T => {
105:     const deepClone = (obj: any): any => {
106:       if (obj === null) return null;
107:       if (obj instanceof Date) return new Date(obj.getTime());
108:       if (typeof obj !== "object") return obj;
109:       if (Array.isArray(obj)) {
110:         return obj.map((item: any) => deepClone(item));
111:       }
112:       const cloned: { [key: string]: any } = {};
113:       for (const key in obj) {
114:         if (Object.prototype.hasOwnProperty.call(obj, key)) {
115:           cloned[key] = deepClone(obj[key]);
116:         }
117:       }
118:       return cloned;
119:     };
120:     return deepClone(val);
121:   };
122: }
123: 
124: 
125: global.TextEncoder = TextEncoder as typeof global.TextEncoder;
126: global.TextDecoder = TextDecoder as typeof global.TextDecoder;
127: 
128: if (!global.crypto) {
129:   global.crypto = {
130:     randomUUID: () =>
131:       "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx" as `${string}-${string}-${string}-${string}-${string}`,
132:     getRandomValues: <T extends ArrayBufferView | null>(array: T): T => array,
133:     subtle: {} as SubtleCrypto,
134:   } as unknown as Crypto;
135: }
136: 
137: if (!global.crypto.randomUUID) {
138:   global.crypto.randomUUID =
139:     (): `${string}-${string}-${string}-${string}-${string}` => {
140:       return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
141:         /[xy]/g,
142:         function (c) {
143:           const r = (Math.random() * 16) | 0;
144:           const v = c === "x" ? r : (r & 0x3) | 0x8;
145:           return v.toString(16);
146:         }
147:       ) as `${string}-${string}-${string}-${string}-${string}`;
148:     };
149: }
150: 
151: jest.mock("firebase/app", () => ({
152:   initializeApp: jest.fn(() => ({})),
153: }));
154: 
155: jest.mock("firebase/auth", () => ({
156:   getAuth: jest.fn(() => ({})),
157:   onAuthStateChanged: jest.fn((_, callback) => {
158:     callback(null);
159:     return jest.fn();
160:   }),
161:   signInWithEmailAndPassword: jest.fn(),
162:   createUserWithEmailAndPassword: jest.fn(),
163:   signOut: jest.fn(),
164:   updateProfile: jest.fn(),
165:   sendPasswordResetEmail: jest.fn(),
166: }));
167: 
168: jest.mock("firebase/firestore", () => ({
169:   getFirestore: jest.fn(() => ({})),
170:   collection: jest.fn(),
171:   doc: jest.fn(),
172:   addDoc: jest.fn(),
173:   updateDoc: jest.fn(),
174:   onSnapshot: jest.fn(),
175:   query: jest.fn(),
176:   where: jest.fn(),
177:   orderBy: jest.fn(),
178:   limit: jest.fn(),
179:   Timestamp: {
180:     now: jest.fn(() => new Date()),
181:     fromDate: jest.fn((date) => date),
182:   },
183:   writeBatch: jest.fn(),
184: }));
185: 
186: jest.mock("firebase/storage", () => ({
187:   getStorage: jest.fn(() => ({})),
188: }));
189: 
190: Object.defineProperty(window, "matchMedia", {
191:   writable: true,
192:   value: jest.fn().mockImplementation((query) => ({
193:     matches: false,
194:     media: query,
195:     onchange: null,
196:     addListener: jest.fn(),
197:     removeListener: jest.fn(),
198:     addEventListener: jest.fn(),
199:     removeEventListener: jest.fn(),
200:     dispatchEvent: jest.fn(),
201:   })),
202: });

================
File: package.json
================
 1: {
 2:   "name": "smartgarden-app",
 3:   "private": true,
 4:   "version": "0.0.0",
 5:   "type": "module",
 6:   "scripts": {
 7:     "dev": "vite --config vite.config.ts",
 8:     "dev:api": "node dev-server.js",
 9:     "dev:client": "vite",
10:     "dev:watch": "concurrently \"npm run dev\" \"npm run test:watch\"",
11:     "build": "tsc -b && vite build",
12:     "lint": "eslint . --ext ts,tsx",
13:     "preview": "vite preview",
14:     "test": "jest --passWithNoTests",
15:     "test:watch": "jest --watchAll --passWithNoTests",
16:     "test:coverage": "jest --coverage --passWithNoTests",
17:     "test:ci": "jest --ci --coverage --watchAll=false --passWithNoTests",
18:     "test:e2e": "playwright test",
19:     "test:e2e:ui": "playwright test --ui",
20:     "test:all": "npm run test:ci && npm run test:e2e"
21:   },
22:   "dependencies": {
23:     "@hookform/resolvers": "^5.1.1",
24:     "@radix-ui/react-dialog": "^1.1.14",
25:     "@radix-ui/react-slot": "^1.2.3",
26:     "@radix-ui/react-tabs": "^1.1.12",
27:     "@tanstack/react-query": "^5.80.7",
28:     "clsx": "^2.1.1",
29:     "date-fns": "^4.1.0",
30:     "dexie": "^4.0.11",
31:     "dexie-react-hooks": "^1.1.7",
32:     "firebase": "^11.9.1",
33:     "lucide-react": "^0.468.0",
34:     "react": "^19.1.0",
35:     "react-dom": "^19.1.0",
36:     "react-hook-form": "^7.57.0",
37:     "react-hot-toast": "^2.5.2",
38:     "react-router-dom": "^7.6.2",
39:     "tailwind-merge": "^3.3.1",
40:     "ts-node": "^10.9.2",
41:     "util": "^0.12.5",
42:     "uuid": "^11.1.0",
43:     "vite-plugin-pwa": "^1.0.0",
44:     "workbox-window": "^7.3.0",
45:     "zod": "^3.25.64"
46:   },
47:   "devDependencies": {
48:     "@eslint/js": "^9.25.0",
49:     "@playwright/test": "^1.53.0",
50:     "@testing-library/jest-dom": "^6.6.3",
51:     "@testing-library/react": "^16.3.0",
52:     "@testing-library/user-event": "^14.6.1",
53:     "@types/jest": "^29.5.14",
54:     "@types/react": "^19.1.2",
55:     "@types/react-dom": "^19.1.2",
56:     "@types/testing-library__jest-dom": "^5.14.9",
57:     "@types/uuid": "^10.0.0",
58:     "@vitejs/plugin-react": "^4.4.1",
59:     "autoprefixer": "^10.4.21",
60:     "concurrently": "^9.2.0",
61:     "cors": "^2.8.5",
62:     "eslint": "^9.25.0",
63:     "eslint-plugin-react-hooks": "^5.2.0",
64:     "eslint-plugin-react-refresh": "^0.4.19",
65:     "express": "^4.21.2",
66:     "fake-indexeddb": "^6.0.1",
67:     "globals": "^16.0.0",
68:     "identity-obj-proxy": "^3.0.0",
69:     "jest": "^29.7.0",
70:     "jest-axe": "^10.0.0",
71:     "jest-environment-jsdom": "^29.7.0",
72:     "postcss": "^8.5.5",
73:     "tailwindcss": "^3.4.17",
74:     "ts-jest": "^29.4.0",
75:     "typescript": "~5.8.3",
76:     "typescript-eslint": "^8.30.1",
77:     "vite": "^6.3.5"
78:   }
79: }

================
File: src/__tests__/components/Dashboard.test.tsx
================
  1: import { screen, waitFor, render } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { MemoryRouter } from "react-router-dom";
  4: import { User } from "firebase/auth";
  5: import { Dashboard } from "@/pages/dashboard";
  6: import { PlantRecord } from "@/types/database";
  7: 
  8: 
  9: jest.mock("@/hooks/useFirebaseAuth", () => ({
 10:   useFirebaseAuth: jest.fn(),
 11: }));
 12: 
 13: jest.mock("@/hooks/useFirebasePlants", () => ({
 14:   useFirebasePlants: jest.fn(),
 15: }));
 16: 
 17: const mockLogActivity = jest.fn();
 18: jest.mock("@/hooks/useFirebaseCareActivities", () => ({
 19:   useFirebaseCareActivities: () => ({
 20:     logActivity: mockLogActivity,
 21:   }),
 22: }));
 23: 
 24: jest.mock("@/components/Navigation", () => ({
 25:   __esModule: true,
 26:   default: () => <div data-testid="navigation">Navigation</div>,
 27: }));
 28: 
 29: jest.mock("@/components/ui/OfflineIndicator", () => ({
 30:   OfflineIndicator: () => (
 31:     <div data-testid="offline-indicator">Offline Indicator</div>
 32:   ),
 33: }));
 34: 
 35: jest.mock("react-hot-toast", () => ({
 36:   __esModule: true,
 37:   default: {
 38:     success: jest.fn(),
 39:     error: jest.fn(),
 40:   },
 41: 
 42:   toast: {
 43:     success: jest.fn(),
 44:     error: jest.fn(),
 45:   },
 46: }));
 47: 
 48: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
 49: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 50: 
 51: const mockUseFirebaseAuth = useFirebaseAuth as jest.Mock;
 52: const mockUseFirebasePlants = useFirebasePlants as jest.Mock;
 53: 
 54: const mockNavigate = jest.fn();
 55: jest.mock("react-router-dom", () => ({
 56:   ...jest.requireActual("react-router-dom"),
 57:   useNavigate: () => mockNavigate,
 58: }));
 59: 
 60: 
 61: const renderWithRouter = (
 62:   ui: React.ReactElement,
 63:   { initialEntries = ["/"] } = {}
 64: ) => {
 65:   return render(
 66:     <MemoryRouter initialEntries={initialEntries}>{ui}</MemoryRouter>
 67:   );
 68: };
 69: 
 70: const createMockFirebaseUser = (overrides?: Partial<User>): User =>
 71:   ({
 72:     uid: "test-user-id",
 73:     email: "test@example.com",
 74:     emailVerified: true,
 75:     displayName: "Test User",
 76:     isAnonymous: false,
 77:     metadata: {
 78:       creationTime: "2024-01-01T00:00:00.000Z",
 79:       lastSignInTime: "2024-01-01T00:00:00.000Z",
 80:     },
 81:     providerData: [],
 82:     refreshToken: "mock-refresh-token",
 83:     tenantId: null,
 84:     delete: jest.fn(),
 85:     getIdToken: jest.fn(),
 86:     getIdTokenResult: jest.fn(),
 87:     reload: jest.fn(),
 88:     toJSON: jest.fn(),
 89:     phoneNumber: null,
 90:     photoURL: null,
 91:     providerId: "firebase",
 92:     ...overrides,
 93:   } as User);
 94: 
 95: const createMockPlant = (overrides: Partial<PlantRecord>): PlantRecord => ({
 96:   id: `plant-${Math.random()}`,
 97:   varietyId: "tomato-1",
 98:   varietyName: "Cherry Tomato",
 99:   name: "My Tomato",
100:   plantedDate: new Date("2024-05-10T00:00:00.000Z"),
101:   location: "Indoor",
102:   container: "5 Gallon Grow Bag",
103:   soilMix: "standard-mix",
104:   isActive: true,
105:   createdAt: new Date(),
106:   updatedAt: new Date(),
107:   ...overrides,
108: });
109: 
110: describe("Dashboard", () => {
111:   beforeEach(() => {
112:     jest.clearAllMocks();
113:     mockUseFirebaseAuth.mockReturnValue({
114:       user: createMockFirebaseUser(),
115:       loading: false,
116:       error: null,
117:       signIn: jest.fn(),
118:       signUp: jest.fn(),
119:       signOut: jest.fn(),
120:       resetPassword: jest.fn(),
121:     });
122:     mockUseFirebasePlants.mockReturnValue({
123:       plants: [],
124:       loading: false,
125:       error: null,
126:       createPlant: jest.fn(),
127:       updatePlant: jest.fn(),
128:       deletePlant: jest.fn(),
129:     });
130:     mockLogActivity.mockResolvedValue(undefined);
131:   });
132: 
133:   describe("Loading State", () => {
134:     it("displays loading state when Firebase plants hook is loading", () => {
135:       mockUseFirebasePlants.mockReturnValue({
136:         plants: [],
137:         loading: true,
138:         error: null,
139:         createPlant: jest.fn(),
140:         updatePlant: jest.fn(),
141:         deletePlant: jest.fn(),
142:       });
143: 
144:       renderWithRouter(<Dashboard />);
145: 
146:       expect(screen.getByText("Loading...")).toBeInTheDocument();
147:     });
148:   });
149: 
150:   describe("Authentication", () => {
151:     it("displays user information when authenticated", () => {
152:       mockUseFirebasePlants.mockReturnValue({
153:         plants: [createMockPlant({ id: "p1" })],
154:         loading: false,
155:         error: null,
156:         createPlant: jest.fn(),
157:         updatePlant: jest.fn(),
158:         deletePlant: jest.fn(),
159:       });
160: 
161:       renderWithRouter(<Dashboard />);
162: 
163:       expect(screen.getByText("SmartGarden")).toBeInTheDocument();
164:       expect(screen.getByText("Welcome, Test User")).toBeInTheDocument();
165:       expect(
166:         screen.getByRole("button", { name: "Sign Out" })
167:       ).toBeInTheDocument();
168:     });
169: 
170:     it("calls signOut when sign out button is clicked", async () => {
171:       const mockSignOut = jest.fn();
172:       mockUseFirebaseAuth.mockReturnValue({
173:         user: createMockFirebaseUser(),
174:         loading: false,
175:         error: null,
176:         signIn: jest.fn(),
177:         signUp: jest.fn(),
178:         signOut: mockSignOut,
179:         resetPassword: jest.fn(),
180:       });
181: 
182:       renderWithRouter(<Dashboard />);
183: 
184:       const signOutButton = screen.getByRole("button", { name: "Sign Out" });
185:       await userEvent.click(signOutButton);
186: 
187:       expect(mockSignOut).toHaveBeenCalledTimes(1);
188:     });
189:   });
190: 
191:   describe("Empty State / Welcome", () => {
192:     it("displays welcome message when no plants exist", () => {
193:       renderWithRouter(<Dashboard />);
194: 
195:       expect(screen.getByText("Welcome to SmartGarden!")).toBeInTheDocument();
196:       expect(
197:         screen.getByText(
198:           "Start your gardening journey by adding your first plant. Track growth, log care activities, and get personalized recommendations."
199:         )
200:       ).toBeInTheDocument();
201:       expect(
202:         screen.getByRole("button", { name: "🌿 Add Your First Plant" })
203:       ).toBeInTheDocument();
204:     });
205: 
206:     it("navigates to add plant page when 'Add Your First Plant' is clicked", async () => {
207:       renderWithRouter(<Dashboard />);
208:       const addPlantButton = screen.getByRole("button", {
209:         name: "🌿 Add Your First Plant",
210:       });
211:       await userEvent.click(addPlantButton);
212: 
213:       expect(mockNavigate).toHaveBeenCalledWith("/add-plant");
214:     });
215:   });
216: 
217:   describe("Plant Grouping and Bulk Actions", () => {
218:     const groupedPlants = [
219:       createMockPlant({ id: "p1", name: "Tomato 1" }),
220:       createMockPlant({ id: "p2", name: "Tomato 2" }),
221:     ];
222: 
223:     it("should render a plant group card and allow bulk logging", async () => {
224:       mockUseFirebasePlants.mockReturnValue({
225:         plants: groupedPlants,
226:         loading: false,
227:         error: null,
228:       });
229: 
230:       const user = userEvent.setup();
231:       renderWithRouter(<Dashboard />);
232: 
233: 
234:       await waitFor(() => {
235:         expect(screen.getByText("Cherry Tomato")).toBeInTheDocument();
236:       });
237: 
238:       const groupCardText = await screen.findByText("2 plants");
239:       expect(groupCardText).toBeInTheDocument();
240: 
241: 
242:       const logAllButton = await screen.findByRole("button", {
243:         name: /Log All/i,
244:       });
245:       await user.click(logAllButton);
246: 
247: 
248:       const waterAllButton = await screen.findByRole("button", {
249:         name: /Water All/i,
250:       });
251:       await user.click(waterAllButton);
252: 
253: 
254:       await waitFor(() => {
255:         expect(screen.getByText("💧 Water All Plants")).toBeInTheDocument();
256:       });
257: 
258: 
259:       const amountInput = screen.getByLabelText(/Amount \(oz\)/i);
260:       await user.clear(amountInput);
261:       await user.type(amountInput, "100");
262: 
263:       const submitButton = screen.getByRole("button", {
264:         name: /Log Activity for All 2 Plants/i,
265:       });
266:       await user.click(submitButton);
267: 
268: 
269:       await waitFor(() => {
270:         expect(mockLogActivity).toHaveBeenCalledTimes(2);
271:         expect(mockLogActivity).toHaveBeenCalledWith(
272:           expect.objectContaining({
273:             plantId: "p1",
274:             type: "water",
275:             details: expect.objectContaining({
276:               amount: { value: 100, unit: "oz" },
277:             }),
278:           })
279:         );
280:         expect(mockLogActivity).toHaveBeenCalledWith(
281:           expect.objectContaining({
282:             plantId: "p2",
283:             type: "water",
284:             details: expect.objectContaining({
285:               amount: { value: 100, unit: "oz" },
286:             }),
287:           })
288:         );
289:       });
290: 
291: 
292:       expect(screen.queryByText("💧 Water All Plants")).not.toBeInTheDocument();
293:     });
294:   });
295: });

================
File: src/db/seedData.ts
================
  1: import { db } from "@/types/database";
  2: import { seedVarieties, SeedVariety } from "@/data/seedVarieties";
  3: import {
  4:   GrowthTimeline,
  5:   VarietyProtocols,
  6:   FertilizationScheduleItem,
  7: } from "@/types/protocols";
  8: import { GrowthStage } from "@/types/core";
  9: 
 10: 
 11: interface StageSpecificWateringProtocol {
 12:   [key: string]: {
 13:     trigger?: { moistureLevel?: string | number };
 14:     target?: { moistureLevel?: string | number };
 15:     volume?: { amount?: string | number; frequency?: string };
 16:   };
 17: }
 18: 
 19: 
 20: interface StageSpecificFertilizationProtocol {
 21:   [key: string]: {
 22:     schedule?: FertilizationScheduleItem[];
 23:     notes?: string[];
 24:   };
 25: }
 26: 
 27: 
 28: interface StageSpecificLightingProtocol {
 29:   [key: string]: {
 30:     ppfd?: { min: number; max: number; unit: string };
 31:     photoperiod?: { hours: number };
 32:     dli?: { min: number; max: number; unit: string };
 33:   };
 34: }
 35: 
 36: const convertSeedVarietyToVarietyRecord = (variety: SeedVariety) => {
 37:   const timelineData = variety.growthTimeline;
 38: 
 39:   const growthTimeline: GrowthTimeline = {
 40:     germination:
 41:       timelineData.germination ||
 42:       timelineData.germinationEmergence ||
 43:       timelineData.slipProduction ||
 44:       0,
 45:     seedling: timelineData.seedling || 7,
 46:     vegetative:
 47:       timelineData.vegetative ||
 48:       timelineData.vegetativeGrowth ||
 49:       timelineData.vegetativeVining ||
 50:       21,
 51:     maturation: timelineData.maturation || 60,
 52:     rootDevelopment: timelineData.rootDevelopment || 14,
 53:   };
 54: 
 55: 
 56:   let protocols: VarietyProtocols | undefined;
 57:   if (variety.protocols) {
 58:     protocols = {
 59:       watering: variety.protocols.watering
 60:         ? convertWateringProtocol(variety.protocols.watering)
 61:         : undefined,
 62:       fertilization: variety.protocols.fertilization
 63:         ? convertFertilizationProtocol(variety.protocols.fertilization)
 64:         : undefined,
 65:       lighting: variety.protocols.lighting
 66:         ? convertLightingProtocol(variety.protocols.lighting)
 67:         : undefined,
 68: 
 69:       environment: variety.protocols.environment,
 70:       soilMixture: variety.protocols.soilMixture,
 71:       container: variety.protocols.container,
 72:       succession: variety.protocols.succession,
 73:       specialRequirements: variety.protocols.specialRequirements,
 74:     };
 75:   }
 76: 
 77:   return {
 78:     name: variety.name,
 79:     category: variety.category,
 80:     growthTimeline,
 81:     protocols,
 82:     isEverbearing: variety.isEverbearing,
 83:     productiveLifespan: variety.productiveLifespan,
 84:     isCustom: false,
 85:   };
 86: };
 87: 
 88: const stageNameMapping: { [key: string]: GrowthStage } = {
 89:   germination: "germination",
 90:   germinationEmergence: "germination",
 91:   slipProduction: "germination",
 92:   seedling: "seedling",
 93:   establishment: "seedling",
 94:   vegetative: "vegetative",
 95:   vegetativeGrowth: "vegetative",
 96:   vegetativeVining: "vegetative",
 97:   rootDevelopment: "vegetative",
 98:   flowering: "flowering",
 99:   flowerBudFormation: "flowering",
100:   fruiting: "fruiting",
101:   fruitingHarvesting: "fruiting",
102:   podSetMaturation: "fruiting",
103:   maturation: "maturation",
104:   "ongoing-production": "ongoing-production",
105:   ongoingProduction: "ongoing-production",
106:   harvest: "harvest",
107: };
108: 
109: 
110: const convertWateringProtocol = (
111:   wateringProtocol: StageSpecificWateringProtocol
112: ): Record<
113:   GrowthStage,
114:   {
115:     trigger?: { moistureLevel?: string | number };
116:     target?: { moistureLevel?: string | number };
117:     volume?: { amount?: string | number; frequency?: string };
118:   }
119: > => {
120:   const result: Partial<
121:     Record<
122:       GrowthStage,
123:       {
124:         trigger?: { moistureLevel?: string | number };
125:         target?: { moistureLevel?: string | number };
126:         volume?: { amount?: string | number; frequency?: string };
127:       }
128:     >
129:   > = {};
130: 
131:   for (const [stage, stageData] of Object.entries(wateringProtocol)) {
132:     const canonicalStage = stageNameMapping[stage];
133:     if (canonicalStage) {
134:       result[canonicalStage] = {
135:         trigger: stageData.trigger
136:           ? { moistureLevel: stageData.trigger.moistureLevel }
137:           : undefined,
138:         target: stageData.target
139:           ? { moistureLevel: stageData.target.moistureLevel }
140:           : undefined,
141:         volume: stageData.volume
142:           ? {
143:               amount: stageData.volume.amount,
144:               frequency: stageData.volume.frequency,
145:             }
146:           : undefined,
147:       };
148:     }
149:   }
150:   return result as ReturnType<typeof convertWateringProtocol>;
151: };
152: 
153: 
154: const convertFertilizationProtocol = (
155:   fertilizationProtocol: StageSpecificFertilizationProtocol
156: ): Record<
157:   GrowthStage,
158:   {
159:     schedule?: FertilizationScheduleItem[];
160:     notes?: string[];
161:   }
162: > => {
163:   const result: Partial<
164:     Record<
165:       GrowthStage,
166:       {
167:         schedule?: FertilizationScheduleItem[];
168:         notes?: string[];
169:       }
170:     >
171:   > = {};
172: 
173:   for (const [stage, stageData] of Object.entries(fertilizationProtocol)) {
174:     const canonicalStage = stageNameMapping[stage];
175:     if (canonicalStage) {
176:       result[canonicalStage] = {
177:         schedule: stageData.schedule || [],
178:         notes: stageData.notes || [],
179:       };
180:     }
181:   }
182:   return result as ReturnType<typeof convertFertilizationProtocol>;
183: };
184: 
185: 
186: const convertLightingProtocol = (
187:   lightingProtocol: StageSpecificLightingProtocol
188: ): Record<
189:   GrowthStage,
190:   {
191:     ppfd?: { min: number; max: number; unit: string };
192:     photoperiod?: { hours: number };
193:     dli?: { min: number; max: number; unit: string };
194:   }
195: > => {
196:   const result: Partial<
197:     Record<
198:       GrowthStage,
199:       {
200:         ppfd?: { min: number; max: number; unit: string };
201:         photoperiod?: { hours: number };
202:         dli?: { min: number; max: number; unit: string };
203:       }
204:     >
205:   > = {};
206: 
207:   for (const [stage, stageData] of Object.entries(lightingProtocol)) {
208:     const canonicalStage = stageNameMapping[stage];
209:     if (canonicalStage) {
210:       result[canonicalStage] = {
211:         ppfd: stageData.ppfd,
212:         photoperiod: stageData.photoperiod,
213:         dli: stageData.dli,
214:       };
215:     }
216:   }
217:   return result as ReturnType<typeof convertLightingProtocol>;
218: };
219: 
220: export const initializeDatabase = async (): Promise<void> => {
221:   try {
222:     console.log("🌱 Initializing database with seed data...");
223: 
224: 
225:     await db.varieties.clear();
226: 
227: 
228:     for (const variety of seedVarieties) {
229:       const convertedVariety = convertSeedVarietyToVarietyRecord(variety);
230: 
231:       await db.varieties.add({
232:         id: crypto.randomUUID(),
233:         ...convertedVariety,
234:         createdAt: new Date(),
235:         updatedAt: new Date(),
236:       });
237:     }
238: 
239:     console.log(`✅ Successfully seeded ${seedVarieties.length} varieties`);
240:   } catch (error) {
241:     console.error("❌ Error initializing database:", error);
242:     throw error;
243:   }
244: };
245: 
246: 
247: export default initializeDatabase;

================
File: src/pages/plants/Plants.tsx
================
  1: import React, { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  4: import { Card, CardContent } from "@/components/ui/Card";
  5: import { Button } from "@/components/ui/Button";
  6: import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
  7: import { Input } from "@/components/ui/Input";
  8: import Navigation from "@/components/Navigation";
  9: import PlantGroupCard from "@/components/plant/PlantGroupCard";
 10: import PlantInfoCard from "@/components/plant/PlantInfoCard";
 11: import BulkActivityModal from "@/components/plant/BulkActivityModal";
 12: import { groupPlantsByConditions, PlantGroup } from "@/utils/plantGrouping";
 13: 
 14: const Plants: React.FC = () => {
 15:   const navigate = useNavigate();
 16:   const { plants, loading, error } = useFirebasePlants();
 17: 
 18:   const [searchTerm, setSearchTerm] = useState("");
 19:   const [viewMode, setViewMode] = useState<"groups" | "individual">("groups");
 20:   const [bulkModalOpen, setBulkModalOpen] = useState(false);
 21:   const [selectedPlantIds, setSelectedPlantIds] = useState<string[]>([]);
 22:   const [selectedActivityType, setSelectedActivityType] = useState<string>("");
 23:   const [selectedGroup, setSelectedGroup] = useState<PlantGroup | null>(null);
 24: 
 25:   if (loading) {
 26:     return (
 27:       <div className="min-h-screen flex items-center justify-center">
 28:         <LoadingSpinner />
 29:       </div>
 30:     );
 31:   }
 32: 
 33:   if (error) {
 34:     return (
 35:       <div className="min-h-screen flex items-center justify-center">
 36:         <div className="text-center">
 37:           <p className="text-destructive mb-4">Error loading plants: {error}</p>
 38:           <Button onClick={() => window.location.reload()}>Try Again</Button>
 39:         </div>
 40:       </div>
 41:     );
 42:   }
 43: 
 44:   const plantGroups = groupPlantsByConditions(plants);
 45: 
 46: 
 47:   const filteredPlants = plants.filter(
 48:     (plant) =>
 49:       (plant.name?.toLowerCase() || "").includes(searchTerm.toLowerCase()) ||
 50:       (plant.varietyName?.toLowerCase() || "").includes(
 51:         searchTerm.toLowerCase()
 52:       )
 53:   );
 54: 
 55:   // Fixed: Match PlantGroupCard interface - only 2 parameters
 56:   const handleBulkLogActivity = (plantIds: string[], activityType: string) => {
 57:     // Find the group to get additional data if needed
 58:     const group = plantGroups.find((g) =>
 59:       g.plants.some((plant) => plantIds.includes(plant.id))
 60:     );
 61: 
 62:     setSelectedPlantIds(plantIds);
 63:     setSelectedActivityType(activityType);
 64:     setSelectedGroup(group || null);
 65:     setBulkModalOpen(true);
 66:   };
 67: 
 68:   const handleIndividualLogActivity = (
 69:     plantId: string,
 70:     activityType: string
 71:   ) => {
 72:     navigate(`/log-care?plantId=${plantId}&activityType=${activityType}`);
 73:   };
 74: 
 75:   const closeBulkModal = () => {
 76:     setBulkModalOpen(false);
 77:     setSelectedPlantIds([]);
 78:     setSelectedActivityType("");
 79:     setSelectedGroup(null);
 80:   };
 81: 
 82:   return (
 83:     <div className="min-h-screen bg-background">
 84:       <Navigation />
 85:       <div className="container mx-auto px-4 py-8">
 86:         <div className="flex justify-between items-center mb-6">
 87:           <h1 className="text-2xl font-bold">My Plants</h1>
 88:           <Button onClick={() => navigate("/add-plant")}>Add Plant</Button>
 89:         </div>
 90: 
 91:         <div className="flex gap-4 mb-6">
 92:           <Input
 93:             placeholder="Search plants..."
 94:             value={searchTerm}
 95:             onChange={(e) => setSearchTerm(e.target.value)}
 96:             className="max-w-sm"
 97:           />
 98:           <div className="flex gap-2">
 99:             <Button
100:               variant={viewMode === "groups" ? "primary" : "outline"}
101:               onClick={() => setViewMode("groups")}
102:             >
103:               Groups
104:             </Button>
105:             <Button
106:               variant={viewMode === "individual" ? "primary" : "outline"}
107:               onClick={() => setViewMode("individual")}
108:             >
109:               Individual
110:             </Button>
111:           </div>
112:         </div>
113: 
114:         {plants.length === 0 ? (
115:           <Card>
116:             <CardContent className="text-center py-8">
117:               <h3 className="text-lg font-semibold mb-2">No plants yet</h3>
118:               <p className="text-muted-foreground mb-4">
119:                 Add your first plant to get started!
120:               </p>
121:               <Button onClick={() => navigate("/add-plant")}>Add Plant</Button>
122:             </CardContent>
123:           </Card>
124:         ) : (
125:           <div className="space-y-4">
126:             {viewMode === "groups" ? (
127:               <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
128:                 {plantGroups.map((group) => (
129:                   <PlantGroupCard
130:                     key={group.id}
131:                     group={group}
132:                     onBulkLogActivity={handleBulkLogActivity}
133:                   />
134:                 ))}
135:               </div>
136:             ) : (
137:               <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
138:                 {filteredPlants.map((plant) => (
139:                   <PlantInfoCard
140:                     key={plant.id}
141:                     plant={plant}
142:                     onLogCare={handleIndividualLogActivity}
143:                     showQuickActions={true}
144:                   />
145:                 ))}
146:               </div>
147:             )}
148:           </div>
149:         )}
150:       </div>
151: 
152:       <BulkActivityModal
153:         isOpen={bulkModalOpen}
154:         onClose={closeBulkModal}
155:         plantIds={selectedPlantIds}
156:         activityType={selectedActivityType}
157:         plantCount={selectedPlantIds.length}
158:         varietyName={selectedGroup?.varietyName || ""}
159:       />
160:     </div>
161:   );
162: };
163: 
164: export default Plants;

================
File: src/types/database.ts
================
  1: import Dexie, { Table } from "dexie";
  2: import { v4 as uuidv4 } from "uuid";
  3: import {
  4:   GrowthStage,
  5:   PlantCategory,
  6:   CareActivityType,
  7:   QualityRating,
  8:   HealthAssessment,
  9:   VolumeUnit,
 10:   ApplicationMethod,
 11:   WateringMethod,
 12: } from "./core";
 13: import { VarietyProtocols, GrowthTimeline } from "./protocols";
 14: 
 15: 
 16: export interface BaseRecord {
 17:   id: string;
 18:   createdAt: Date;
 19:   updatedAt: Date;
 20: }
 21: 
 22: 
 23: 
 24: 
 25: 
 26: export interface PlantRecord extends BaseRecord {
 27:   varietyId: string;
 28:   varietyName: string;
 29:   name?: string;
 30:   plantedDate: Date;
 31:   location: string;
 32:   container: string;
 33:   soilMix?: string;
 34:   isActive: boolean;
 35:   notes?: string[];
 36:   quantity?: number;
 37:   setupType?: "multiple-containers" | "same-container";
 38:   reminderPreferences?: {
 39:     watering?: boolean;
 40:     fertilizing?: boolean;
 41:     observation?: boolean;
 42:     lighting?: boolean;
 43:     pruning?: boolean;
 44:   };
 45: }
 46: 
 47: export interface VarietyRecord extends BaseRecord {
 48:   name: string;
 49:   category: PlantCategory;
 50:   description?: string;
 51:   growthTimeline: GrowthTimeline;
 52:   protocols?: VarietyProtocols;
 53:   isEverbearing?: boolean;
 54:   productiveLifespan?: number;
 55:   isCustom?: boolean;
 56: }
 57: 
 58: 
 59: export interface CareActivityDetails {
 60:   type: CareActivityType;
 61: 
 62:   waterAmount?: number;
 63:   waterUnit?: VolumeUnit;
 64:   moistureLevel?: {
 65:     before: number;
 66:     after: number;
 67:     scale: "1-10" | "visual";
 68:   };
 69:   method?: WateringMethod;
 70:   runoffObserved?: boolean;
 71: 
 72: 
 73:   product?: string;
 74:   dilution?: string;
 75:   amount?: string | { value: number; unit: VolumeUnit };
 76:   applicationMethod?: ApplicationMethod;
 77: 
 78: 
 79:   healthAssessment?: HealthAssessment;
 80:   observations?: string;
 81:   photos?: string[];
 82: 
 83: 
 84:   quality?: QualityRating;
 85:   harvestMethod?: string;
 86: 
 87: 
 88:   fromContainer?: string;
 89:   toContainer?: string;
 90:   reason?: string;
 91: 
 92: 
 93:   temperature?: number;
 94:   humidity?: number;
 95:   lightLevel?: number;
 96:   weatherConditions?: string;
 97: 
 98: 
 99:   notes?: string;
100: }
101: 
102: 
103: export interface CareActivityRecord extends BaseRecord {
104:   plantId: string;
105:   type: CareActivityType;
106:   date: Date;
107:   details: CareActivityDetails;
108: }
109: 
110: 
111: export interface TaskBypassRecord extends BaseRecord {
112:   taskId: string;
113:   plantId: string;
114:   taskType: CareActivityType;
115:   reason: string;
116:   scheduledDate: Date;
117:   bypassDate: Date;
118:   plantStage: GrowthStage;
119:   userId?: string;
120: }
121: 
122: export interface TaskCompletionRecord extends BaseRecord {
123:   plantId: string;
124:   taskType: CareActivityType;
125:   scheduledDate: Date;
126:   actualCompletionDate: Date;
127:   varianceDays: number;
128:   careActivityId: string;
129:   plantStage: GrowthStage;
130: }
131: 
132: export interface ScheduledTask extends BaseRecord {
133:   plantId: string;
134:   taskType: CareActivityType;
135:   dueDate: Date;
136:   status: "pending" | "completed" | "bypassed";
137:   priority?: "low" | "medium" | "high";
138:   description?: string;
139: }
140: 
141: 
142: export type CareRecord = CareActivityRecord;
143: export type BypassLogRecord = TaskBypassRecord;
144: 
145: 
146: class SmartGardenDatabase extends Dexie {
147:   plants!: Table<PlantRecord>;
148:   varieties!: Table<VarietyRecord>;
149:   careActivities!: Table<CareActivityRecord>;
150:   taskBypasses!: Table<TaskBypassRecord>;
151:   taskCompletions!: Table<TaskCompletionRecord>;
152:   scheduledTasks!: Table<ScheduledTask>;
153: 
154:   constructor() {
155:     super("SmartGardenDatabase");
156: 
157:     this.version(5).stores({
158:       plants: "++id, varietyId, isActive, plantedDate",
159:       varieties: "++id, name, category",
160:       careActivities: "++id, plantId, type, date",
161:       taskBypasses: "++id, taskId, plantId, taskType, bypassDate",
162:       taskCompletions:
163:         "++id, plantId, taskType, scheduledDate, actualCompletionDate",
164:       scheduledTasks:
165:         "++id, plantId, [plantId+status], [dueDate+status], taskType",
166:     });
167:   }
168: }
169: 
170: export const db = new SmartGardenDatabase();
171: 
172: 
173: export const plantService = {
174:   async addPlant(
175:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">
176:   ): Promise<string> {
177:     const id = uuidv4();
178:     const now = new Date();
179:     const fullPlant: PlantRecord = {
180:       ...plant,
181:       id,
182:       createdAt: now,
183:       updatedAt: now,
184:     };
185: 
186:     try {
187:       await db.plants.add(fullPlant);
188:       return id;
189:     } catch (error) {
190:       console.error("Failed to add plant:", error);
191:       throw error;
192:     }
193:   },
194: 
195:   async getActivePlants(): Promise<PlantRecord[]> {
196:     const allPlants = await db.plants.toArray();
197:     return allPlants.filter((plant) => plant.isActive === true);
198:   },
199: 
200:   async getPlant(id: string): Promise<PlantRecord | undefined> {
201:     return db.plants.get(id);
202:   },
203: 
204:   async updatePlant(
205:     id: string,
206:     updates: Partial<Omit<PlantRecord, "id" | "createdAt">>
207:   ): Promise<void> {
208:     const updateData = {
209:       ...updates,
210:       updatedAt: new Date(),
211:     };
212:     await db.plants.update(id, updateData);
213:   },
214: 
215:   async deletePlant(id: string): Promise<void> {
216:     const updateData = { isActive: false, updatedAt: new Date() };
217:     await db.plants.update(id, updateData);
218:   },
219: };
220: 
221: export const varietyService = {
222:   async addVariety(
223:     variety: Omit<VarietyRecord, "id" | "createdAt" | "updatedAt">
224:   ): Promise<string> {
225:     const existingVariety = await db.varieties
226:       .where("name")
227:       .equals(variety.name)
228:       .first();
229: 
230:     if (existingVariety) {
231:       console.warn(
232:         `Variety "${variety.name}" already exists. Returning existing ID.`
233:       );
234:       return existingVariety.id;
235:     }
236: 
237:     const id = uuidv4();
238:     const now = new Date();
239:     const fullVariety: VarietyRecord = {
240:       ...variety,
241:       id,
242:       createdAt: now,
243:       updatedAt: now,
244:     };
245: 
246:     try {
247:       await db.varieties.add(fullVariety);
248:       return id;
249:     } catch (error) {
250:       console.error("Failed to add variety:", error);
251:       throw error;
252:     }
253:   },
254: 
255:   async getVariety(id: string): Promise<VarietyRecord | undefined> {
256:     return db.varieties.get(id);
257:   },
258: 
259:   async getAllVarieties(): Promise<VarietyRecord[]> {
260:     return db.varieties.toArray();
261:   },
262: 
263:   async getVarietiesByCategory(
264:     category: PlantCategory
265:   ): Promise<VarietyRecord[]> {
266:     return db.varieties.where("category").equals(category).toArray();
267:   },
268: 
269:   async getVarietyByName(name: string): Promise<VarietyRecord | undefined> {
270:     return db.varieties.where("name").equals(name).first();
271:   },
272: };
273: 
274: export const careService = {
275:   async addCareActivity(
276:     activity: Omit<CareActivityRecord, "id" | "createdAt" | "updatedAt">
277:   ): Promise<string> {
278:     const id = uuidv4();
279:     const now = new Date();
280:     const fullActivity: CareActivityRecord = {
281:       ...activity,
282:       id,
283:       createdAt: now,
284:       updatedAt: now,
285:     };
286: 
287:     try {
288:       await db.careActivities.add(fullActivity);
289:       return id;
290:     } catch (error) {
291:       console.error("Failed to add care activity:", error);
292:       throw error;
293:     }
294:   },
295: 
296:   async getLastActivityByType(
297:     plantId: string,
298:     type: CareActivityType
299:   ): Promise<CareActivityRecord | null> {
300:     const activities = await db.careActivities
301:       .where("plantId")
302:       .equals(plantId)
303:       .and((activity) => activity.type === type)
304:       .reverse()
305:       .sortBy("date");
306: 
307:     return activities.length > 0 ? activities[0] : null;
308:   },
309: 
310:   async getPlantCareHistory(plantId: string): Promise<CareActivityRecord[]> {
311:     return db.careActivities
312:       .where("plantId")
313:       .equals(plantId)
314:       .reverse()
315:       .sortBy("date");
316:   },
317: 
318:   async getRecentActivities(limit: number = 10): Promise<CareActivityRecord[]> {
319:     return db.careActivities.orderBy("date").reverse().limit(limit).toArray();
320:   },
321: };

================
File: src/utils/growthStage.ts
================
  1: import { GrowthStage } from "../types";
  2: import { addDays, differenceInDays } from "date-fns";
  3: import { VarietyRecord } from "@/types/database";
  4: 
  5: export interface GrowthStageInfo {
  6:   stage: GrowthStage;
  7:   startDay: number;
  8:   endDay: number;
  9:   description: string;
 10: }
 11: 
 12: export interface VarietyTimeline {
 13:   germination: number;
 14:   seedling: number;
 15:   vegetative: number;
 16:   maturation: number;
 17: }
 18: 
 19: 
 20: 
 21: 
 22: 
 23: 
 24: 
 25: 
 26: 
 27: export function calculateCurrentStageWithVariety(
 28:   plantedDate: Date,
 29:   variety: VarietyRecord | undefined | null,
 30:   currentDate: Date = new Date()
 31: ): GrowthStage {
 32:   if (!variety || !variety.growthTimeline) {
 33:     console.warn(
 34:       "❌ calculateCurrentStageWithVariety: Invalid variety data, defaulting to vegetative."
 35:     );
 36: 
 37:     return "vegetative";
 38:   }
 39: 
 40:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 41:   const timeline = variety.growthTimeline;
 42: 
 43:   if (daysSincePlanting < 0 || daysSincePlanting < timeline.germination) {
 44:     return "germination";
 45:   }
 46:   if (daysSincePlanting < timeline.germination + timeline.seedling) {
 47:     return "seedling";
 48:   }
 49:   if (
 50:     daysSincePlanting <
 51:     timeline.germination + timeline.seedling + timeline.vegetative
 52:   ) {
 53:     return "vegetative";
 54:   }
 55:   if (daysSincePlanting < timeline.maturation) {
 56:     return "flowering";
 57:   }
 58: 
 59:   if (variety.isEverbearing) {
 60:     const effectiveLifespan = variety.productiveLifespan ?? 730;
 61: 
 62:     if (daysSincePlanting >= effectiveLifespan) {
 63:       return "harvest";
 64:     }
 65:     return "ongoing-production";
 66:   } else {
 67:     return "harvest";
 68:   }
 69: }
 70: 
 71: 
 72: 
 73: 
 74: 
 75: 
 76: 
 77: 
 78: 
 79: export function calculateCurrentStage(
 80:   plantedDate: Date,
 81:   timeline: VarietyTimeline,
 82:   currentDate: Date = new Date()
 83: ): GrowthStage {
 84:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 85: 
 86:   if (daysSincePlanting < 0) return "germination";
 87:   if (daysSincePlanting < timeline.germination) return "germination";
 88:   if (daysSincePlanting < timeline.germination + timeline.seedling)
 89:     return "seedling";
 90:   if (
 91:     daysSincePlanting <
 92:     timeline.germination + timeline.seedling + timeline.vegetative
 93:   )
 94:     return "vegetative";
 95:   if (daysSincePlanting < timeline.maturation) return "flowering";
 96: 
 97:   return "harvest";
 98: }
 99: 
100: export function getStageProgress(
101:   plantedDate: Date,
102:   timeline: VarietyTimeline,
103:   currentDate: Date = new Date()
104: ): number {
105:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
106:   const currentStage = calculateCurrentStage(
107:     plantedDate,
108:     timeline,
109:     currentDate
110:   );
111: 
112:   let stageStart = 0;
113:   let stageEnd = timeline.germination;
114: 
115:   switch (currentStage) {
116:     case "seedling":
117:       stageStart = timeline.germination;
118:       stageEnd = timeline.germination + timeline.seedling;
119:       break;
120:     case "vegetative":
121:       stageStart = timeline.germination + timeline.seedling;
122:       stageEnd = timeline.germination + timeline.seedling + timeline.vegetative;
123:       break;
124:     case "flowering":
125:       stageStart =
126:         timeline.germination + timeline.seedling + timeline.vegetative;
127:       stageEnd = timeline.maturation;
128:       break;
129:     case "maturation":
130:     case "ongoing-production":
131:     case "harvest":
132:       return 100;
133:   }
134: 
135:   const stageProgress =
136:     ((daysSincePlanting - stageStart) / (stageEnd - stageStart)) * 100;
137:   return Math.min(Math.max(stageProgress, 0), 100);
138: }
139: 
140: export function getNextStage(currentStage: GrowthStage): GrowthStage | null {
141:   const stages: GrowthStage[] = [
142:     "germination",
143:     "seedling",
144:     "vegetative",
145:     "flowering",
146:     "maturation",
147:     "ongoing-production",
148:     "harvest",
149:   ];
150:   const currentIndex = stages.indexOf(currentStage);
151: 
152:   if (currentIndex === -1 || currentIndex === stages.length - 1) {
153:     return null;
154:   }
155: 
156:   return stages[currentIndex + 1];
157: }
158: 
159: export function estimateStageTransition(
160:   plantedDate: Date,
161:   timeline: VarietyTimeline,
162:   targetStage: GrowthStage
163: ): Date {
164:   let daysToTarget = 0;
165: 
166:   switch (targetStage) {
167:     case "seedling":
168:       daysToTarget = timeline.germination;
169:       break;
170:     case "vegetative":
171:       daysToTarget = timeline.germination + timeline.seedling;
172:       break;
173:     case "flowering":
174:       daysToTarget =
175:         timeline.germination + timeline.seedling + timeline.vegetative;
176:       break;
177:     case "maturation":
178:     case "ongoing-production":
179:     case "harvest":
180:       daysToTarget = timeline.maturation;
181:       break;
182:   }
183: 
184:   return addDays(plantedDate, daysToTarget);
185: }
186: 
187: export function formatStageProgress(progress: number): string {
188:   return `${Math.round(progress)}%`;
189: }

================
File: src/App.tsx
================
 1: import { Routes, Route } from "react-router-dom";
 2: import { useFirebaseAuth } from "./hooks/useFirebaseAuth";
 3: import { useAppInitialization } from "./hooks/useAppInitialization";
 4: import { useDarkMode } from "./hooks/useDarkMode";
 5: import LogCare from "./pages/care/LogCare";
 6: import { Dashboard } from "./pages/dashboard";
 7: import Plants from "./pages/plants/Plants";
 8: import PlantDetail from "./pages/plants/PlantDetail";
 9: import { AuthForm } from "./components/AuthForm";
10: import AddPlant from "./pages/plants/AddPlant";
11: 
12: const App = () => {
13:   const { user, loading } = useFirebaseAuth();
14:   useDarkMode();
15:   useAppInitialization();
16: 
17:   if (loading) {
18:     return (
19:       <div className="min-h-screen flex items-center justify-center">
20:         <div>Loading...</div>
21:       </div>
22:     );
23:   }
24: 
25:   if (!user) {
26:     return <AuthForm />;
27:   }
28: 
29:   return (
30:     <div className="min-h-screen bg-gray-50">
31:       <Routes>
32:         <Route path="/" element={<Dashboard />} />
33:         <Route path="/plants" element={<Plants />} />
34:         <Route path="/plants/:plantId" element={<PlantDetail />} />
35:         <Route path="/add-plant" element={<AddPlant />} />
36:         <Route path="/log-care" element={<LogCare />} />
37:         <Route path="/log-care/:plantId" element={<LogCare />} />
38:       </Routes>
39:     </div>
40:   );
41: };
42: 
43: export default App;

================
File: src/pages/plants/PlantDetail.tsx
================
  1: import React, { useState, useEffect } from "react";
  2: import { useParams, useNavigate } from "react-router-dom";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { Button } from "@/components/ui/Button";
  5: import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
  6: import { FirebasePlantService } from "@/services/firebase/plantService";
  7: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  8: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  9: import { varietyService, PlantRecord, VarietyRecord } from "@/types/database";
 10: import CareHistory from "@/components/plant/CareHistory";
 11: import PlantReminderSettings from "@/components/plant/PlantReminderSettings";
 12: import { getPlantDisplayName } from "@/utils/plantDisplay";
 13: import PlantInfoCard from "@/components/plant/PlantInfoCard";
 14: import NextActivityCard from "@/components/plant/NextActivityCard";
 15: 
 16: const PlantDetail: React.FC = () => {
 17:   const { plantId } = useParams<{ plantId: string }>();
 18:   const navigate = useNavigate();
 19:   const { user } = useFirebaseAuth();
 20: 
 21:   const [plant, setPlant] = useState<PlantRecord | null>(null);
 22:   const [variety, setVariety] = useState<VarietyRecord | null>(null);
 23:   const [isLoading, setIsLoading] = useState(true);
 24:   const [error, setError] = useState<string | null>(null);
 25:   const [showReminderSettings, setShowReminderSettings] = useState(false);
 26: 
 27: 
 28:   const { activities: careHistory } = useFirebaseCareActivities(plantId);
 29: 
 30:   useEffect(() => {
 31:     if (!plantId) {
 32:       setError("No plant ID provided");
 33:       setIsLoading(false);
 34:       return;
 35:     }
 36: 
 37: 
 38:     if (!user) {
 39:       setError("User not authenticated");
 40:       setIsLoading(false);
 41:       return;
 42:     }
 43: 
 44:     setIsLoading(true);
 45:     setError(null);
 46: 
 47: 
 48: 
 49:     const unsubscribe = FirebasePlantService.subscribeToPlantsChanges(
 50:       user.uid,
 51:       (plants) => {
 52:         const foundPlant = plants.find((p) => p.id === plantId);
 53:         if (foundPlant) {
 54:           setPlant(foundPlant);
 55: 
 56:           if (foundPlant.varietyId) {
 57:             varietyService
 58:               .getVariety(foundPlant.varietyId)
 59:               .then((varietyData) => setVariety(varietyData || null))
 60:               .catch(console.error);
 61:           }
 62:         } else {
 63:           setError("Plant not found");
 64:         }
 65:         setIsLoading(false);
 66:       },
 67:       { includeInactive: true }
 68:     );
 69: 
 70: 
 71: 
 72:     return () => {
 73:       unsubscribe();
 74:     };
 75:   }, [plantId, user]);
 76: 
 77:   const handlePlantUpdate = async (updates: Partial<PlantRecord>) => {
 78:     if (!plantId) return;
 79: 
 80:     try {
 81:       await FirebasePlantService.updatePlant(plantId, updates);
 82: 
 83:     } catch (error) {
 84:       console.error("Failed to update plant:", error);
 85:     }
 86:   };
 87: 
 88:   const handleLogCare = (activityType?: string) => {
 89:     const params = new URLSearchParams();
 90:     if (plantId) params.set("plantId", plantId);
 91:     if (activityType) params.set("type", activityType);
 92: 
 93:     navigate(`/log-care?${params.toString()}`);
 94:   };
 95: 
 96:   if (isLoading) {
 97:     return (
 98:       <div className="min-h-screen flex items-center justify-center">
 99:         <LoadingSpinner />
100:       </div>
101:     );
102:   }
103: 
104:   if (error || !plant) {
105:     return (
106:       <div className="min-h-screen flex flex-col items-center justify-center p-4">
107:         <div className="text-center max-w-md">
108:           <span className="text-6xl mb-4 block">🌱</span>
109:           <h2 className="text-xl font-semibold text-foreground mb-2">
110:             {error || "Plant not found"}
111:           </h2>
112:           <p className="text-muted-foreground mb-4">
113:             We couldn't load the details for this plant.
114:           </p>
115:           <Button
116:             onClick={() => navigate("/")}
117:             className="bg-primary hover:bg-primary/90"
118:           >
119:             <span className="mr-2">🏠</span>
120:             Go to Dashboard
121:           </Button>
122:         </div>
123:       </div>
124:     );
125:   }
126: 
127:   const plantDisplayName = getPlantDisplayName(plant);
128: 
129:   return (
130:     <div className="min-h-screen bg-background pb-20">
131:       <div className="sticky top-0 z-40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border">
132:         <div className="flex items-center justify-between p-4">
133:           <Button
134:             variant="ghost"
135:             size="sm"
136:             onClick={() => navigate("/")}
137:             className="text-muted-foreground hover:text-foreground"
138:           >
139:             <span className="mr-2">←</span>
140:             Back
141:           </Button>
142:           <Button
143:             variant="ghost"
144:             size="sm"
145:             onClick={() => setShowReminderSettings(!showReminderSettings)}
146:             className="text-muted-foreground hover:text-foreground"
147:           >
148:             <span className="mr-2">⚙️</span>
149:             Settings
150:           </Button>
151:         </div>
152:       </div>
153: 
154:       <div className="space-y-4">
155:         {}
156:         <Card>
157:           <CardContent className="p-6">
158:             <div className="flex items-start justify-between mb-4">
159:               <div>
160:                 <h1 className="text-2xl font-bold text-foreground mb-2">
161:                   {plantDisplayName}
162:                 </h1>
163:                 <div className="text-sm text-muted-foreground">
164:                   {variety?.name}
165:                 </div>
166:               </div>
167:             </div>
168:           </CardContent>
169:         </Card>
170: 
171:         <PlantInfoCard
172:           plant={plant}
173:           onLogCare={handleLogCare}
174:           showQuickActions={false}
175:         />
176: 
177:         <NextActivityCard plantId={plant.id} onTaskClick={handleLogCare} />
178: 
179:         <Card>
180:           <CardHeader>
181:             <CardTitle className="flex items-center gap-2">
182:               <span className="text-xl">🚀</span>
183:               Quick Actions
184:             </CardTitle>
185:           </CardHeader>
186:           <CardContent>
187:             <div className="grid grid-cols-2 gap-3">
188:               <Button
189:                 onClick={() => handleLogCare("water")}
190:                 className="bg-blue-500 hover:bg-blue-600 text-white"
191:               >
192:                 <span className="mr-2">💧</span>
193:                 Water
194:               </Button>
195:               <Button
196:                 onClick={() => handleLogCare("fertilize")}
197:                 className="bg-green-500 hover:bg-green-600 text-white"
198:               >
199:                 <span className="mr-2">🌱</span>
200:                 Fertilize
201:               </Button>
202:               <Button
203:                 onClick={() => handleLogCare("photo")}
204:                 className="bg-purple-500 hover:bg-purple-600 text-white"
205:               >
206:                 <span className="mr-2">📸</span>
207:                 Photo
208:               </Button>
209:               <Button
210:                 onClick={() => handleLogCare("note")}
211:                 className="bg-orange-500 hover:bg-orange-600 text-white"
212:               >
213:                 <span className="mr-2">📝</span>
214:                 Note
215:               </Button>
216:             </div>
217:           </CardContent>
218:         </Card>
219: 
220:         {}
221:         {showReminderSettings && (
222:           <PlantReminderSettings plant={plant} onUpdate={handlePlantUpdate} />
223:         )}
224: 
225:         {}
226:         <CareHistory careHistory={careHistory} />
227:       </div>
228:     </div>
229:   );
230: };
231: 
232: export default PlantDetail;

================
File: src/services/careSchedulingService.ts
================
  1: import {
  2:   plantService,
  3:   careService,
  4:   varietyService,
  5:   PlantRecord,
  6: } from "@/types/database";
  7: import { CareActivityType, GrowthStage } from "@/types/core";
  8: import {
  9:   calculateCurrentStage,
 10:   calculateCurrentStageWithVariety,
 11: } from "@/utils/growthStage";
 12: import { getPlantDisplayName } from "@/utils/plantDisplay";
 13: import { UpcomingTask } from "@/types/scheduling";
 14: import { addDays, differenceInDays } from "date-fns";
 15: import { DynamicSchedulingService } from "./dynamicSchedulingService";
 16: 
 17: export class CareSchedulingService {
 18:   static async getUpcomingTasks(): Promise<UpcomingTask[]> {
 19:     try {
 20:       const plants = await plantService.getActivePlants();
 21:       const allTasks: UpcomingTask[] = [];
 22: 
 23:       for (const plant of plants) {
 24:         const plantTasks = await this.getTasksForPlant(plant);
 25: 
 26: 
 27:         const filteredTasks = plantTasks.filter((task) => {
 28:           if (!plant.reminderPreferences) return true;
 29: 
 30: 
 31:           const taskTypeMap: Record<
 32:             string,
 33:             keyof typeof plant.reminderPreferences
 34:           > = {
 35:             "Check water level": "watering",
 36:             Water: "watering",
 37:             Fertilize: "fertilizing",
 38:             Observe: "observation",
 39:             "Check lighting": "lighting",
 40:             Prune: "pruning",
 41:             "Health check": "observation",
 42:           };
 43: 
 44:           const preferenceKey = taskTypeMap[task.task];
 45:           return preferenceKey
 46:             ? plant.reminderPreferences[preferenceKey]
 47:             : true;
 48:         });
 49: 
 50:         allTasks.push(...filteredTasks);
 51:       }
 52: 
 53:       return allTasks.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());
 54:     } catch (error) {
 55:       console.error("Error getting upcoming tasks:", error);
 56:       return [];
 57:     }
 58:   }
 59: 
 60:   private static async getTasksForPlant(
 61:     plant: PlantRecord
 62:   ): Promise<UpcomingTask[]> {
 63:     try {
 64:       const variety = await varietyService.getVariety(plant.varietyId);
 65:       if (!variety) return [];
 66: 
 67: 
 68:       const currentStage = calculateCurrentStageWithVariety(
 69:         plant.plantedDate,
 70:         variety
 71:       );
 72: 
 73:       const tasks: UpcomingTask[] = [];
 74: 
 75: 
 76:       const wateringTask = await this.createWateringTask(plant, currentStage);
 77:       if (wateringTask) tasks.push(wateringTask);
 78: 
 79: 
 80:       const observationTask = await this.createObservationTask(
 81:         plant,
 82:         currentStage
 83:       );
 84:       if (observationTask) tasks.push(observationTask);
 85: 
 86:       return tasks;
 87:     } catch (error) {
 88:       console.error(`Error processing tasks for plant ${plant.id}:`, error);
 89:       return [];
 90:     }
 91:   }
 92: 
 93:   private static async createWateringTask(
 94:     plant: PlantRecord,
 95:     currentStage: GrowthStage
 96:   ): Promise<UpcomingTask | null> {
 97:     const lastWatering = await careService.getLastActivityByType(
 98:       plant.id,
 99:       "water"
100:     );
101: 
102: 
103:     const wateringIntervals: Record<GrowthStage, number> = {
104:       germination: 1,
105:       seedling: 2,
106:       vegetative: 3,
107:       flowering: 2,
108:       fruiting: 2,
109:       maturation: 3,
110:       harvest: 4,
111:       "ongoing-production": 2,
112:     };
113: 
114:     const intervalDays = wateringIntervals[currentStage] || 3;
115: 
116:     let nextDueDate: Date;
117: 
118:     if (lastWatering) {
119:       nextDueDate = addDays(lastWatering.date, intervalDays);
120:     } else {
121: 
122:       const daysSincePlanting = differenceInDays(new Date(), plant.plantedDate);
123:       nextDueDate =
124:         daysSincePlanting > 1 ? new Date() : addDays(plant.plantedDate, 1);
125:     }
126: 
127: 
128:     if (nextDueDate <= addDays(new Date(), 2)) {
129: 
130:       const daysOverdue = differenceInDays(new Date(), nextDueDate);
131: 
132:       return {
133:         id: `water-${plant.id}`,
134:         plantId: plant.id,
135:         plantName: getPlantDisplayName(plant),
136:         task: "Check water level",
137:         type: "water",
138:         dueIn: this.formatDueIn(nextDueDate),
139:         priority: this.calculatePriority(daysOverdue),
140:         plantStage: currentStage,
141:         dueDate: nextDueDate,
142:         canBypass: true,
143:       };
144:     }
145: 
146:     return null;
147:   }
148: 
149:   private static async createObservationTask(
150:     plant: PlantRecord,
151:     currentStage: GrowthStage
152:   ): Promise<UpcomingTask | null> {
153:     const lastObservation = await careService.getLastActivityByType(
154:       plant.id,
155:       "observe"
156:     );
157: 
158: 
159:     const observationInterval = 7;
160: 
161:     let nextDueDate: Date;
162: 
163:     if (lastObservation) {
164:       nextDueDate = addDays(lastObservation.date, observationInterval);
165:     } else {
166: 
167:       nextDueDate = addDays(plant.plantedDate, 3);
168:     }
169: 
170: 
171:     if (nextDueDate <= addDays(new Date(), 1)) {
172: 
173:       const daysOverdue = differenceInDays(new Date(), nextDueDate);
174: 
175:       return {
176:         id: `observe-${plant.id}`,
177:         plantId: plant.id,
178:         plantName: getPlantDisplayName(plant),
179:         task: "Health check",
180:         type: "observe",
181:         dueIn: this.formatDueIn(nextDueDate),
182:         priority: this.calculatePriority(daysOverdue),
183:         plantStage: currentStage,
184:         dueDate: nextDueDate,
185:         canBypass: true,
186:       };
187:     }
188: 
189:     return null;
190:   }
191: 
192:   static async getTasksForPlantWithDynamicScheduling(
193:     plant: PlantRecord
194:   ): Promise<UpcomingTask[]> {
195:     try {
196:       const variety = await varietyService.getVariety(plant.varietyId);
197:       if (!variety) return [];
198: 
199:       const tasks: UpcomingTask[] = [];
200:       const currentStage = calculateCurrentStage(
201:         plant.plantedDate,
202:         variety.growthTimeline
203:       );
204: 
205:       const protocolIntervals = {
206:         water: 3,
207:         fertilize: 14,
208:         observe: 7,
209:       };
210: 
211:       for (const [taskType, protocolInterval] of Object.entries(
212:         protocolIntervals
213:       )) {
214:         const nextDueDate =
215:           await DynamicSchedulingService.getNextDueDateForTask(
216:             plant.id,
217:             taskType as CareActivityType,
218:             new Date(protocolInterval)
219:           );
220: 
221:         const daysUntilDue = differenceInDays(nextDueDate, new Date());
222:         const priority =
223:           daysUntilDue < 0 ? "high" : daysUntilDue === 0 ? "medium" : "low";
224: 
225:         tasks.push({
226:           id: `${plant.id}-${taskType}`,
227:           plantId: plant.id,
228:           plantName: getPlantDisplayName(plant),
229:           task: this.getTaskName(taskType as CareActivityType),
230:           type: taskType as CareActivityType,
231:           dueIn: this.formatDueIn(nextDueDate),
232:           plantStage: currentStage,
233:           dueDate: nextDueDate,
234:           priority,
235:           canBypass: true,
236:         });
237:       }
238: 
239:       return tasks;
240:     } catch (error) {
241:       console.error("Failed to get tasks for plant:", error);
242:       return [];
243:     }
244:   }
245: 
246:   private static getTaskName(taskType: CareActivityType): string {
247:     switch (taskType) {
248:       case "water":
249:         return "Check water level";
250:       case "fertilize":
251:         return "Fertilize";
252:       case "observe":
253:         return "Health check";
254:       default:
255:         return "Care task";
256:     }
257:   }
258: 
259:   static async getNextTaskForPlant(
260:     plantId: string
261:   ): Promise<UpcomingTask | null> {
262:     const plants = await plantService.getActivePlants();
263:     const plant = plants.find((p) => p.id === plantId);
264: 
265:     if (!plant) return null;
266: 
267:     const tasks = await this.getTasksForPlant(plant);
268: 
269: 
270:     const filteredTasks = tasks.filter((task) => {
271:       if (!plant.reminderPreferences) return true;
272: 
273:       const taskTypeMap: Record<
274:         string,
275:         keyof typeof plant.reminderPreferences
276:       > = {
277:         "Check water level": "watering",
278:         Water: "watering",
279:         Fertilize: "fertilizing",
280:         Observe: "observation",
281:         "Check lighting": "lighting",
282:         Prune: "pruning",
283:         "Health check": "observation",
284:       };
285: 
286:       const preferenceKey = taskTypeMap[task.task];
287:       return preferenceKey ? plant.reminderPreferences[preferenceKey] : true;
288:     });
289: 
290: 
291:     if (filteredTasks.length === 0) return null;
292: 
293:     return filteredTasks.sort(
294:       (a, b) => a.dueDate.getTime() - b.dueDate.getTime()
295:     )[0];
296:   }
297: 
298:   private static formatDueIn(dueDate: Date): string {
299:     const now = new Date();
300:     const diffDays = differenceInDays(dueDate, now);
301: 
302:     if (diffDays < 0) {
303:       return `${Math.abs(diffDays)} days overdue`;
304:     } else if (diffDays === 0) {
305:       return "Due today";
306:     } else if (diffDays === 1) {
307:       return "Due tomorrow";
308:     } else {
309:       return `Due in ${diffDays} days`;
310:     }
311:   }
312: 
313:   private static calculatePriority(
314:     daysOverdue: number
315:   ): "low" | "medium" | "high" {
316:     if (daysOverdue >= 2) return "high";
317:     if (daysOverdue >= 0) return "medium";
318:     return "low";
319:   }
320: }

================
File: jest.config.ts
================
 1: import type { Config } from "jest";
 2: 
 3: const config: Config = {
 4:   preset: "ts-jest",
 5:   testEnvironment: "jsdom",
 6:   setupFilesAfterEnv: ["<rootDir>/src/setupTests.ts"],
 7:   setupFiles: ["<rootDir>/src/jest.polyfills.ts"],
 8:   moduleNameMapper: {
 9:     "^@/(.*)$": "<rootDir>/src/$1",
10:     "^@/components/(.*)$": "<rootDir>/src/components/$1",
11:     "^@/pages/(.*)$": "<rootDir>/src/pages/$1",
12:     "^@/hooks/(.*)$": "<rootDir>/src/hooks/$1",
13:     "^@/services/(.*)$": "<rootDir>/src/services/$1",
14:     "^@/types/(.*)$": "<rootDir>/src/types/$1",
15:     "^@/utils/(.*)$": "<rootDir>/src/utils/$1",
16:     "^@/data/(.*)$": "<rootDir>/src/data/$1",
17:     "^@/db/(.*)$": "<rootDir>/src/db/$1",
18: 
19:     "^@/services/firebase/config$":
20:       "<rootDir>/src/services/firebase/__mocks__/config.ts",
21:   },
22:   collectCoverageFrom: [
23:     "src/**/*.{ts,tsx}",
24:     "!src/**/*.d.ts",
25:     "!src/main.tsx",
26:     "!src/vite-env.d.ts",
27:     "!src/setupTests.ts",
28:   ],
29:   testMatch: [
30:     "<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}",
31:     "<rootDir>/src/**/*.(test|spec).{js,jsx,ts,tsx}",
32:   ],
33:   testPathIgnorePatterns: [
34:     "/__tests__/utils/testHelpers.tsx",
35:     "/__tests__/utils/plantFactory.ts",
36:     "/__tests__/e2e/",
37:     "/node_modules/",
38:     "/.*\\.spec\\.ts$",
39:     "/__tests__/e2e/plant-registration.spec.ts",
40:   ],
41:   transform: {
42:     "^.+\\.tsx?$": ["ts-jest", { tsconfig: "tsconfig.json" }],
43:   },
44:   moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json"],
45:   transformIgnorePatterns: ["node_modules/(?!(uuid)/)"],
46: };
47: 
48: export default config;

================
File: src/pages/care/CareLogForm.tsx
================
  1: import { useState, useEffect } from "react";
  2: import { useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { useSearchParams } from "react-router-dom";
  6: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  7: import { Button } from "@/components/ui/Button";
  8: import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
  9: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 10: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
 11: import {
 12:   varietyService,
 13:   VarietyRecord,
 14:   CareActivityDetails,
 15: } from "@/types/database";
 16: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 17: import { GrowthStage } from "@/types";
 18: import {
 19:   Droplets,
 20:   Beaker,
 21:   Eye,
 22:   Camera,
 23:   FileText,
 24:   Calendar,
 25:   Info,
 26: } from "lucide-react";
 27: import { getMethodDisplay } from "@/utils/fertilizationUtils";
 28: import { ApplicationMethod } from "@/types/core";
 29: import { FertilizationScheduleItem } from "@/types";
 30: 
 31: const careFormSchema = z
 32:   .object({
 33:     plantId: z.string().min(1, "Please select a plant"),
 34:     type: z.enum(["water", "fertilize", "observe", "photo", "note"]),
 35:     date: z.string().min(1, "Date is required"),
 36:     waterValue: z.number().optional(),
 37:     waterUnit: z.enum(["oz", "ml", "cups", "L"]).optional(),
 38:     moistureBefore: z.number().min(1).max(10).optional(),
 39:     moistureAfter: z.number().min(1).max(10).optional(),
 40:     fertilizeAmount: z.string().optional(),
 41:     fertilizeType: z.string().optional(),
 42:     fertilizeDilution: z.string().optional(),
 43:     notes: z.string().optional(),
 44:   })
 45:   .refine(
 46:     (data) => {
 47:       if (data.type === "water") {
 48:         return data.waterValue !== undefined && data.waterValue !== null;
 49:       }
 50:       return true;
 51:     },
 52:     {
 53:       message: "Water amount is required for watering activities.",
 54:       path: ["waterValue"],
 55:     }
 56:   );
 57: 
 58: type CareFormData = z.infer<typeof careFormSchema>;
 59: 
 60: interface CareLogFormProps {
 61:   onSuccess?: () => void;
 62:   onCancel?: () => void;
 63:   preselectedPlantId?: string;
 64:   preselectedActivityType?: "water" | "fertilize" | "observe";
 65: }
 66: 
 67: interface FertilizerProduct {
 68:   name: string;
 69:   dilution?: string;
 70:   amount?: string;
 71:   frequency?: string;
 72:   method?: ApplicationMethod;
 73: }
 74: 
 75: 
 76: const getProtocolForStage = (
 77: 
 78:   protocols: any,
 79:   stage: GrowthStage
 80: 
 81: ): any | null => {
 82:   if (!protocols) return null;
 83: 
 84:   if (protocols[stage]) return protocols[stage];
 85: 
 86:   const stageMappings: { [key in GrowthStage]?: string[] } = {
 87:     vegetative: ["vegetativeGrowth", "vegetativeVining"],
 88:     flowering: ["flowerBudFormation"],
 89:     harvest: ["fruitingHarvesting", "podSetMaturation"],
 90:     "ongoing-production": ["ongoingProduction"],
 91:     germination: ["germinationEmergence", "slipProduction"],
 92:     seedling: ["establishment"],
 93:   };
 94: 
 95:   const possibleKeys = stageMappings[stage] || [];
 96:   for (const key of possibleKeys) {
 97:     if (protocols[key]) {
 98:       return protocols[key];
 99:     }
100:   }
101: 
102:   return null;
103: };
104: 
105: const formatAmountText = (amount: string) => {
106:   return amount.split(",").map((part, index, array) => (
107:     <span key={index}>
108:       {part.trim()}
109:       {index < array.length - 1 && <br />}
110:     </span>
111:   ));
112: };
113: 
114: export function CareLogForm({
115:   onSuccess,
116:   onCancel,
117:   preselectedPlantId,
118:   preselectedActivityType,
119: }: CareLogFormProps) {
120:   const { plants, loading: plantsLoading } = useFirebasePlants();
121:   const { logActivity } = useFirebaseCareActivities();
122:   const [isLoading, setIsLoading] = useState(false);
123:   const [submitError, setSubmitError] = useState<string | null>(null);
124:   const [showDetailedTracking, setShowDetailedTracking] = useState(false);
125:   const [plantVariety, setPlantVariety] = useState<VarietyRecord | null>(null);
126:   const [currentStage, setCurrentStage] = useState<GrowthStage>("germination");
127:   const [availableFertilizers, setAvailableFertilizers] = useState<
128:     FertilizerProduct[]
129:   >([]);
130:   const [selectedFertilizer, setSelectedFertilizer] =
131:     useState<FertilizerProduct | null>(null);
132:   const [searchParams] = useSearchParams();
133: 
134:   const plantIdFromParams =
135:     preselectedPlantId || searchParams.get("plantId") || "";
136:   const activityTypeFromParams =
137:     preselectedActivityType ||
138:     (searchParams.get("type") as "water" | "fertilize" | "observe") ||
139:     "water";
140: 
141:   const {
142:     register,
143:     handleSubmit,
144:     watch,
145:     formState: { errors },
146:     reset,
147:     setValue,
148:   } = useForm<CareFormData>({
149:     resolver: zodResolver(careFormSchema),
150:     defaultValues: {
151:       plantId: "",
152:       type: activityTypeFromParams,
153:       date: new Date().toISOString().split("T")[0],
154:       waterValue: undefined,
155:       waterUnit: "oz",
156:     },
157:   });
158: 
159:   const activityType = watch("type");
160:   const selectedPlantId = watch("plantId");
161:   const selectedFertilizerType = watch("fertilizeType");
162: 
163:   useEffect(() => {
164:     if (!plantsLoading && plants.length > 0 && plantIdFromParams) {
165:       const plantExists = plants.some(
166:         (plant) => plant.id === plantIdFromParams
167:       );
168:       if (plantExists) {
169:         setValue("plantId", plantIdFromParams);
170:       }
171:     }
172:   }, [plantsLoading, plants, plantIdFromParams, setValue]);
173: 
174:   useEffect(() => {
175:     const loadPlantData = async () => {
176:       if (!selectedPlantId) {
177:         setPlantVariety(null);
178:         setCurrentStage("germination");
179:         setAvailableFertilizers([]);
180:         return;
181:       }
182: 
183:       const plant = plants.find((p) => p.id === selectedPlantId);
184:       if (!plant) return;
185: 
186:       try {
187:         const variety = await varietyService.getVariety(plant.varietyId);
188:         setPlantVariety(variety || null);
189: 
190:         if (variety) {
191:           const stage = calculateCurrentStageWithVariety(
192:             plant.plantedDate,
193:             variety
194:           );
195:           setCurrentStage(stage);
196: 
197:           if (
198:             activityType === "fertilize" &&
199:             variety.protocols?.fertilization
200:           ) {
201:             const fertilizingProtocol = getProtocolForStage(
202:               variety.protocols.fertilization,
203:               stage
204:             );
205:             if (
206:               fertilizingProtocol?.schedule &&
207:               Array.isArray(fertilizingProtocol.schedule)
208:             ) {
209:               const products: FertilizerProduct[] =
210:                 fertilizingProtocol.schedule.map(
211:                   (item: FertilizationScheduleItem) => ({
212:                     name: item.details.product,
213:                     dilution: item.details.dilution,
214:                     amount: item.details.amount,
215:                     method: item.details.method,
216:                   })
217:                 );
218:               setAvailableFertilizers(products);
219: 
220:               if (products.length === 1) {
221:                 const firstProduct = products[0];
222:                 setValue("fertilizeType", firstProduct.name);
223:                 setSelectedFertilizer(firstProduct);
224:               }
225:             } else {
226:               setAvailableFertilizers([]);
227:             }
228:           }
229:         }
230:       } catch (error) {
231:         console.error("Failed to load plant variety:", error);
232:         setPlantVariety(null);
233:       }
234:     };
235: 
236:     loadPlantData();
237:   }, [selectedPlantId, plants, activityType, setValue]);
238: 
239:   useEffect(() => {
240:     if (selectedFertilizerType) {
241:       const fertilizer = availableFertilizers.find(
242:         (f) => f.name === selectedFertilizerType
243:       );
244:       setSelectedFertilizer(fertilizer || null);
245: 
246:       if (fertilizer) {
247:         if (fertilizer.dilution) {
248:           setValue("fertilizeDilution", fertilizer.dilution);
249:         }
250:         if (fertilizer.amount) {
251:           setValue("fertilizeAmount", fertilizer.amount);
252:         }
253:       }
254:     } else {
255:       setSelectedFertilizer(null);
256:     }
257:   }, [selectedFertilizerType, availableFertilizers, setValue]);
258: 
259:   const onSubmit = async (data: CareFormData) => {
260:     try {
261:       setIsLoading(true);
262:       setSubmitError(null);
263: 
264:       let activityDetails: Partial<CareActivityDetails> = {
265:         type: data.type,
266:       };
267: 
268:       switch (data.type) {
269:         case "water":
270:           activityDetails = {
271:             type: "water",
272:             amount: {
273:               value: data.waterValue!,
274:               unit: data.waterUnit!,
275:             },
276: 
277:             ...(showDetailedTracking &&
278:             data.moistureBefore &&
279:             data.moistureAfter
280:               ? {
281:                   moistureReading: {
282:                     before: data.moistureBefore,
283:                     after: data.moistureAfter,
284:                   },
285:                 }
286:               : {}),
287:           };
288:           break;
289:         case "fertilize":
290:           activityDetails = {
291:             type: "fertilize",
292:             product: data.fertilizeType,
293:             dilution: data.fertilizeDilution,
294:             amount: data.fertilizeAmount,
295:             applicationMethod: selectedFertilizer?.method,
296:           };
297:           break;
298:         case "observe":
299:         case "photo":
300:         case "note":
301:           activityDetails = {
302:             type: data.type,
303:           };
304:           break;
305:       }
306: 
307:       if (data.notes) {
308:         activityDetails.notes = data.notes;
309:       }
310: 
311:       await logActivity({
312:         plantId: data.plantId,
313:         type: data.type,
314:         date: new Date(data.date),
315:         details: activityDetails as CareActivityDetails,
316:       });
317: 
318:       reset();
319:       onSuccess?.();
320:     } catch (error) {
321:       console.error("Failed to log care activity:", error);
322:       setSubmitError("Failed to log care activity. Please try again.");
323:     } finally {
324:       setIsLoading(false);
325:     }
326:   };
327: 
328:   const getActivityIcon = (type: string) => {
329:     switch (type) {
330:       case "water":
331:         return <Droplets className="h-4 w-4" />;
332:       case "fertilize":
333:         return <Beaker className="h-4 w-4" />;
334:       case "observe":
335:         return <Eye className="h-4 w-4" />;
336:       case "photo":
337:         return <Camera className="h-4 w-4" />;
338:       case "note":
339:         return <FileText className="h-4 w-4" />;
340:       default:
341:         return <Droplets className="h-4 w-4" />;
342:     }
343:   };
344: 
345:   const getActivityLabel = (type: string) => {
346:     switch (type) {
347:       case "water":
348:         return "Watering";
349:       case "fertilize":
350:         return "Fertilizing";
351:       case "observe":
352:         return "Health Check";
353:       case "photo":
354:         return "Photo Log";
355:       case "note":
356:         return "General Note";
357:       default:
358:         return "Activity";
359:     }
360:   };
361: 
362:   const renderWateringProtocol = () => {
363:     if (!plantVariety?.protocols?.watering) return null;
364: 
365:     const wateringProtocol = getProtocolForStage(
366:       plantVariety.protocols.watering,
367:       currentStage
368:     );
369:     if (!wateringProtocol) return null;
370: 
371:     return (
372:       <div className="mt-4 p-3 bg-muted/50 dark:bg-muted/30 border border-border rounded-lg">
373:         <div className="flex items-center gap-2 mb-2">
374:           <Info className="h-4 w-4 text-muted-foreground" />
375:           <span className="text-sm font-medium text-foreground">
376:             Protocol for {currentStage} stage:
377:           </span>
378:         </div>
379:         <div className="space-y-2 text-sm text-muted-foreground">
380:           {wateringProtocol.trigger && (
381:             <div>
382:               <span className="font-medium text-foreground">
383:                 When to water:
384:               </span>{" "}
385:               {wateringProtocol.trigger.moistureLevel}
386:             </div>
387:           )}
388:           {wateringProtocol.target && (
389:             <div>
390:               <span className="font-medium text-foreground">
391:                 Target moisture:
392:               </span>{" "}
393:               {wateringProtocol.target.moistureLevel}
394:             </div>
395:           )}
396:           {wateringProtocol.volume && (
397:             <div>
398:               <span className="font-medium text-foreground">Amount:</span>{" "}
399:               {formatAmountText(wateringProtocol.volume.amount)}
400:               {wateringProtocol.volume.frequency && (
401:                 <span className="block mt-1">
402:                   <span className="font-medium text-foreground">
403:                     Frequency:
404:                   </span>{" "}
405:                   {wateringProtocol.volume.frequency}
406:                 </span>
407:               )}
408:             </div>
409:           )}
410:           {wateringProtocol.notes && wateringProtocol.notes.length > 0 && (
411:             <div>
412:               <span className="font-medium text-foreground">Notes:</span>
413:               <ul className="list-disc list-inside ml-2 space-y-1 mt-1">
414:                 {wateringProtocol.notes.map((note: string, index: number) => (
415:                   <li key={index}>{note}</li>
416:                 ))}
417:               </ul>
418:             </div>
419:           )}
420:         </div>
421:       </div>
422:     );
423:   };
424: 
425:   const renderWateringFields = () => {
426:     return (
427:       <Card className="border-border shadow-sm">
428:         <CardHeader className="pb-3">
429:           <CardTitle className="flex items-center gap-2 text-base">
430:             <Droplets className="h-4 w-4" />
431:             Watering Details
432:           </CardTitle>
433:         </CardHeader>
434:         <CardContent className="pt-0 space-y-4">
435:           {renderWateringProtocol()}
436: 
437:           <div className="grid grid-cols-2 gap-3">
438:             <div>
439:               <label
440:                 htmlFor="waterValue"
441:                 className="block text-sm font-medium text-foreground mb-2"
442:               >
443:                 Water Amount *
444:               </label>
445:               <input
446:                 id="waterValue"
447:                 type="number"
448:                 step="0.1"
449:                 placeholder="Amount"
450:                 {...register("waterValue", { valueAsNumber: true })}
451:                 className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
452:               />
453:               {errors.waterValue && (
454:                 <p className="mt-1 text-sm text-red-600" role="alert">
455:                   {errors.waterValue.message}
456:                 </p>
457:               )}
458:             </div>
459:             <div>
460:               <label className="block text-sm font-medium text-foreground mb-2">
461:                 Unit
462:               </label>
463:               <select
464:                 {...register("waterUnit")}
465:                 className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
466:               >
467:                 <option value="oz">oz</option>
468:                 <option value="ml">ml</option>
469:                 <option value="cups">cups</option>
470:                 <option value="L">L</option>
471:               </select>
472:             </div>
473:           </div>
474: 
475:           {showDetailedTracking && (
476:             <div className="grid grid-cols-2 gap-3 pt-4 border-t border-border">
477:               <div>
478:                 <label className="block text-sm font-medium text-foreground mb-2">
479:                   Moisture Before (1-10)
480:                 </label>
481:                 <input
482:                   type="number"
483:                   min={1}
484:                   max={10}
485:                   placeholder="1-10"
486:                   {...register("moistureBefore", { valueAsNumber: true })}
487:                   className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
488:                 />
489:               </div>
490:               <div>
491:                 <label className="block text-sm font-medium text-foreground mb-2">
492:                   Moisture After (1-10)
493:                 </label>
494:                 <input
495:                   type="number"
496:                   min={1}
497:                   max={10}
498:                   placeholder="1-10"
499:                   {...register("moistureAfter", { valueAsNumber: true })}
500:                   className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
501:                 />
502:               </div>
503:             </div>
504:           )}
505: 
506:           <div className="flex items-center gap-2">
507:             <input
508:               type="checkbox"
509:               id="detailed-tracking"
510:               checked={showDetailedTracking}
511:               onChange={(e) => setShowDetailedTracking(e.target.checked)}
512:               className="rounded border-border"
513:             />
514:             <label
515:               htmlFor="detailed-tracking"
516:               className="text-sm text-foreground"
517:             >
518:               Track moisture levels
519:             </label>
520:           </div>
521:         </CardContent>
522:       </Card>
523:     );
524:   };
525: 
526:   const renderFertilizationProtocol = () => {
527:     if (!plantVariety?.protocols?.fertilization) return null;
528: 
529:     const fertilizingProtocol = getProtocolForStage(
530:       plantVariety.protocols.fertilization,
531:       currentStage
532:     );
533:     if (!fertilizingProtocol) return null;
534: 
535:     return (
536:       <div className="mt-4 p-3 bg-muted/50 dark:bg-muted/30 border border-border rounded-lg">
537:         <div className="flex items-center gap-2 mb-2">
538:           <Info className="h-4 w-4 text-muted-foreground" />
539:           <span className="text-sm font-medium text-foreground">
540:             Protocol for {currentStage} stage:
541:           </span>
542:         </div>
543:         <div className="space-y-2 text-sm text-muted-foreground">
544:           {fertilizingProtocol.timing && (
545:             <div>
546:               <span className="font-medium text-foreground">Timing:</span>{" "}
547:               {fertilizingProtocol.timing}
548:             </div>
549:           )}
550:           {selectedFertilizer && (
551:             <div className="space-y-1">
552:               {selectedFertilizer.frequency && (
553:                 <div>
554:                   <span className="font-medium text-foreground">
555:                     Frequency:
556:                   </span>{" "}
557:                   {selectedFertilizer.frequency}
558:                 </div>
559:               )}
560:               {selectedFertilizer.method && (
561:                 <div>
562:                   <span className="font-medium text-foreground">Method:</span>{" "}
563:                   {getMethodDisplay(selectedFertilizer.method)}
564:                 </div>
565:               )}
566:             </div>
567:           )}
568:           {fertilizingProtocol.notes &&
569:             fertilizingProtocol.notes.length > 0 && (
570:               <div>
571:                 <span className="font-medium text-foreground">Notes:</span>
572:                 <ul className="list-disc list-inside ml-2 space-y-1 mt-1">
573:                   {fertilizingProtocol.notes.map(
574:                     (note: string, index: number) => (
575:                       <li key={index}>{note}</li>
576:                     )
577:                   )}
578:                 </ul>
579:               </div>
580:             )}
581:         </div>
582:       </div>
583:     );
584:   };
585: 
586:   const renderFertilizingFields = () => {
587:     return (
588:       <Card className="border-border shadow-sm">
589:         <CardHeader className="pb-3">
590:           <CardTitle className="flex items-center gap-2 text-base">
591:             <Beaker className="h-4 w-4" />
592:             Fertilizer Details
593:           </CardTitle>
594:         </CardHeader>
595:         <CardContent className="pt-0 space-y-4">
596:           {renderFertilizationProtocol()}
597: 
598:           <div>
599:             <label
600:               htmlFor="fertilizeType"
601:               className="block text-sm font-medium text-foreground mb-2"
602:             >
603:               Fertilizer Product *
604:             </label>
605:             <select
606:               {...register("fertilizeType")}
607:               id="fertilizeType"
608:               className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
609:             >
610:               <option value="">Choose a fertilizer...</option>
611:               {availableFertilizers.map((fertilizer, index) => (
612:                 <option key={index} value={fertilizer.name}>
613:                   {fertilizer.name}
614:                   {fertilizer.method &&
615:                     ` (${getMethodDisplay(fertilizer.method)})`}
616:                 </option>
617:               ))}
618:               <option value="custom">Custom/Other</option>
619:             </select>
620:             {errors.fertilizeType && (
621:               <p className="mt-1 text-sm text-red-600" role="alert">
622:                 {errors.fertilizeType.message}
623:               </p>
624:             )}
625:           </div>
626: 
627:           {selectedFertilizerType === "custom" && (
628:             <div>
629:               <label className="block text-sm font-medium text-foreground mb-2">
630:                 Custom Fertilizer Name *
631:               </label>
632:               <input
633:                 type="text"
634:                 placeholder="e.g., General Purpose, Bloom Booster"
635:                 {...register("fertilizeType")}
636:                 className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
637:               />
638:             </div>
639:           )}
640: 
641:           <div className="grid grid-cols-2 gap-3">
642:             <div>
643:               <label
644:                 htmlFor="dilution"
645:                 className="block text-sm font-medium text-foreground mb-2"
646:               >
647:                 Dilution
648:               </label>
649:               <input
650:                 id="dilution"
651:                 type="text"
652:                 placeholder="e.g., 2 Tbsp/gal"
653:                 {...register("fertilizeDilution")}
654:                 className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
655:               />
656:             </div>
657:             <div>
658:               <label
659:                 htmlFor="fertilizeAmount"
660:                 className="block text-sm font-medium text-foreground mb-2"
661:               >
662:                 Amount *
663:               </label>
664:               <input
665:                 id="fertilizeAmount"
666:                 type="text"
667:                 placeholder="e.g., light application"
668:                 {...register("fertilizeAmount")}
669:                 className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
670:               />
671:               {errors.fertilizeAmount && (
672:                 <p className="mt-1 text-sm text-red-600" role="alert">
673:                   {errors.fertilizeAmount.message}
674:                 </p>
675:               )}
676:             </div>
677:           </div>
678: 
679:           {selectedFertilizer && (
680:             <div className="p-3 bg-muted/50 dark:bg-muted/30 border border-border rounded-lg">
681:               <div className="flex items-center gap-2 mb-2">
682:                 <Info className="h-4 w-4 text-muted-foreground" />
683:                 <span className="text-sm font-medium text-foreground">
684:                   Recommended Settings
685:                 </span>
686:               </div>
687:               <div className="space-y-1 text-sm text-muted-foreground">
688:                 {selectedFertilizer.frequency && (
689:                   <div>
690:                     <span className="font-medium text-foreground">
691:                       Frequency:
692:                     </span>{" "}
693:                     {selectedFertilizer.frequency}
694:                   </div>
695:                 )}
696:                 {selectedFertilizer.method && (
697:                   <div>
698:                     <span className="font-medium text-foreground">Method:</span>{" "}
699:                     {getMethodDisplay(selectedFertilizer.method)}
700:                   </div>
701:                 )}
702:                 {selectedFertilizer.amount && (
703:                   <div>
704:                     <span className="font-medium text-foreground">Amount:</span>{" "}
705:                     {selectedFertilizer.amount}
706:                   </div>
707:                 )}
708:                 {selectedFertilizer.dilution && (
709:                   <div>
710:                     <span className="font-medium text-foreground">
711:                       Dilution:
712:                     </span>{" "}
713:                     {selectedFertilizer.dilution}
714:                   </div>
715:                 )}
716:               </div>
717:             </div>
718:           )}
719: 
720:           {selectedFertilizer?.method === "soil-drench" && (
721:             <div className="p-3 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg">
722:               <div className="flex items-start gap-2">
723:                 <Droplets className="h-4 w-4 text-blue-600 mt-0.5" />
724:                 <div className="text-sm">
725:                   <p className="font-medium text-blue-900 dark:text-blue-100">
726:                     Water Required
727:                   </p>
728:                   <p className="text-blue-700 dark:text-blue-300 mt-1">
729:                     This application method requires water. Consider combining
730:                     with regular watering if due soon to prevent overwatering.
731:                   </p>
732:                 </div>
733:               </div>
734:             </div>
735:           )}
736:         </CardContent>
737:       </Card>
738:     );
739:   };
740: 
741:   const renderActivitySpecificFields = () => {
742:     switch (activityType) {
743:       case "water":
744:         return renderWateringFields();
745:       case "fertilize":
746:         return renderFertilizingFields();
747:       default:
748:         return null;
749:     }
750:   };
751: 
752:   if (plantsLoading) {
753:     return (
754:       <Card className="border-border shadow-sm">
755:         <CardContent className="pt-6">
756:           <div className="flex items-center justify-center py-8">
757:             <LoadingSpinner />
758:             <span className="ml-2">Loading plants...</span>
759:           </div>
760:         </CardContent>
761:       </Card>
762:     );
763:   }
764:   const sortedPlants = [...plants].sort((a, b) => {
765:     const nameA = a.name || a.varietyName;
766:     const nameB = b.name || b.varietyName;
767:     return nameA.localeCompare(nameB);
768:   });
769:   return (
770:     <Card className="border-border shadow-sm">
771:       <CardHeader className="pb-3">
772:         <CardTitle className="flex items-center gap-2 text-base">
773:           {getActivityIcon(activityType)}
774:           {getActivityLabel(activityType)} Log
775:         </CardTitle>
776:       </CardHeader>
777:       <CardContent className="pt-0">
778:         <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
779:           {submitError && (
780:             <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
781:               <p className="text-sm text-red-600" role="alert">
782:                 {submitError}
783:               </p>
784:             </div>
785:           )}
786: 
787:           <Card className="border-border shadow-sm">
788:             <CardHeader className="pb-3">
789:               <CardTitle className="flex items-center gap-2 text-base">
790:                 <Calendar className="h-4 w-4" />
791:                 Basic Information
792:               </CardTitle>
793:             </CardHeader>
794:             <CardContent className="pt-0 space-y-4">
795:               <div className="grid grid-cols-1 gap-4">
796:                 <div>
797:                   <label
798:                     htmlFor="plant-select"
799:                     className="block text-sm font-medium text-foreground mb-2"
800:                   >
801:                     Plant *
802:                   </label>
803:                   <select
804:                     id="plant-select"
805:                     {...register("plantId")}
806:                     className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
807:                   >
808:                     <option value="">Choose a plant...</option>
809:                     {sortedPlants.map((plant) => (
810:                       <option key={plant.id} value={plant.id}>
811:                         {plant.name
812:                           ? `${plant.name} (${plant.varietyName})`
813:                           : plant.varietyName}
814:                         {plant.location && ` - ${plant.location}`}
815:                       </option>
816:                     ))}
817:                   </select>
818:                   {errors.plantId && (
819:                     <p className="mt-1 text-sm text-red-600" role="alert">
820:                       {errors.plantId.message}
821:                     </p>
822:                   )}
823:                 </div>
824: 
825:                 <div>
826:                   <label
827:                     htmlFor="type"
828:                     className="block text-sm font-medium text-foreground mb-2"
829:                   >
830:                     Activity Type *
831:                   </label>
832:                   <select {...register("type")} id="type" className="...">
833:                     <option value="water">💧 Watering</option>
834:                     <option value="fertilize">🌱 Fertilizing</option>
835:                     <option value="observe">👁️ Health Check</option>
836:                     <option value="photo">📸 Photo Log</option>
837:                     <option value="note">📝 General Note</option>
838:                   </select>
839:                   {errors.type && (
840:                     <p className="mt-1 text-sm text-red-600" role="alert">
841:                       {errors.type.message}
842:                     </p>
843:                   )}
844:                 </div>
845: 
846:                 <div>
847:                   <label className="block text-sm font-medium text-foreground mb-2">
848:                     Date *
849:                   </label>
850:                   <input
851:                     type="date"
852:                     {...register("date")}
853:                     className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring"
854:                   />
855:                   {errors.date && (
856:                     <p className="mt-1 text-sm text-red-600" role="alert">
857:                       {errors.date.message}
858:                     </p>
859:                   )}
860:                 </div>
861:               </div>
862:             </CardContent>
863:           </Card>
864: 
865:           {renderActivitySpecificFields()}
866: 
867:           <Card className="border-border shadow-sm">
868:             <CardHeader className="pb-3">
869:               <CardTitle className="flex items-center gap-2 text-base">
870:                 <FileText className="h-4 w-4" />
871:                 Additional Notes
872:               </CardTitle>
873:             </CardHeader>
874:             <CardContent className="pt-0">
875:               <div>
876:                 <label
877:                   htmlFor="notes"
878:                   className="block text-sm font-medium text-foreground mb-2"
879:                 >
880:                   Notes (Optional)
881:                 </label>
882:                 <textarea
883:                   id="notes"
884:                   {...register("notes")}
885:                   rows={3}
886:                   placeholder="Add any additional observations or notes about this care activity..."
887:                   className="w-full p-3 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-ring focus:border-ring resize-none"
888:                 />
889:               </div>
890:             </CardContent>
891:           </Card>
892: 
893:           <div className="flex gap-3 pt-6 border-t border-border">
894:             {onCancel && (
895:               <Button
896:                 type="button"
897:                 variant="outline"
898:                 onClick={onCancel}
899:                 className="flex-1"
900:                 disabled={isLoading}
901:               >
902:                 Cancel
903:               </Button>
904:             )}
905:             <Button
906:               type="submit"
907:               disabled={isLoading}
908:               className="flex-1"
909:               size="lg"
910:             >
911:               {isLoading ? (
912:                 <div className="flex items-center gap-2">
913:                   <LoadingSpinner size="sm" />
914:                   <span>Logging...</span>
915:                 </div>
916:               ) : (
917:                 <div className="flex items-center gap-2">
918:                   <span>🌿</span>
919:                   <span>Log Activity</span>
920:                 </div>
921:               )}
922:             </Button>
923:           </div>
924:         </form>
925:       </CardContent>
926:     </Card>
927:   );
928: }

================
File: src/pages/dashboard/index.tsx
================
  1: import { useState, useEffect } from "react";
  2: import Navigation from "@/components/Navigation";
  3: import { Button } from "@/components/ui/Button";
  4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  5: import { OfflineIndicator } from "@/components/ui/OfflineIndicator";
  6: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  7: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  8: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  9: import { useNavigate } from "react-router-dom";
 10: import { groupPlantsByConditions, PlantGroup } from "@/utils/plantGrouping";
 11: import PlantGroupCard from "@/components/plant/PlantGroupCard";
 12: import BulkActivityModal from "@/components/plant/BulkActivityModal";
 13: import { useScheduledTasks } from "@/hooks/useScheduledTasks";
 14: import FertilizationDashboardSection from "@/components/fertilization/FertilizationDashboardSection";
 15: import toast from "react-hot-toast";
 16: 
 17: export const Dashboard = () => {
 18:   const { plants, loading } = useFirebasePlants();
 19:   const { user, signOut } = useFirebaseAuth();
 20:   const { logActivity } = useFirebaseCareActivities();
 21:   const navigate = useNavigate();
 22:   const [plantGroups, setPlantGroups] = useState<PlantGroup[]>([]);
 23: 
 24: 
 25:   const {
 26:     getUpcomingFertilizationTasks,
 27:     tasks,
 28:     loading: scheduleLoading,
 29:     error,
 30:   } = useScheduledTasks();
 31: 
 32:   const upcomingFertilization = getUpcomingFertilizationTasks(7);
 33: 
 34: 
 35:   const handleTaskComplete = async (taskId: string, quickData?: any) => {
 36:     try {
 37: 
 38:       const task = upcomingFertilization.find((t) => t.id === taskId);
 39:       if (!task) {
 40:         toast.error("Task not found");
 41:         return;
 42:       }
 43: 
 44: 
 45:       await logActivity({
 46:         plantId: task.plantId,
 47:         type: "fertilize",
 48:         date: new Date(),
 49:         details: {
 50:           type: "fertilize",
 51: 
 52:           product: quickData?.product || task.details.product,
 53:           amount: quickData?.amount || task.details.amount,
 54:           dilution: quickData?.dilution || task.details.dilution,
 55:           method: quickData?.method || task.details.method,
 56:           notes: quickData?.notes || `Completed task: ${task.taskName}`,
 57:         },
 58:       });
 59: 
 60: 
 61: 
 62: 
 63:       toast.success("Fertilization logged successfully!");
 64:     } catch (error) {
 65:       console.error("Failed to complete task:", error);
 66:       toast.error("Failed to complete task");
 67:     }
 68:   };
 69: 
 70:   const handleTaskBypass = async (taskId: string, reason?: string) => {
 71:     try {
 72: 
 73:       const task = upcomingFertilization.find((t) => t.id === taskId);
 74:       if (!task) {
 75:         toast.error("Task not found");
 76:         return;
 77:       }
 78: 
 79: 
 80:       await logActivity({
 81:         plantId: task.plantId,
 82:         type: "observe",
 83:         date: new Date(),
 84:         details: {
 85:           type: "observe",
 86:           notes: `Bypassed fertilization task: ${task.taskName}${
 87:             reason ? ` - Reason: ${reason}` : ""
 88:           }`,
 89:         },
 90:       });
 91: 
 92: 
 93: 
 94: 
 95:       toast.success("Task bypassed");
 96:     } catch (error) {
 97:       console.error("Failed to bypass task:", error);
 98:       toast.error("Failed to bypass task");
 99:     }
100:   };
101: 
102:   const handleTaskLogActivity = (taskId: string) => {
103: 
104:     const task = upcomingFertilization.find((t) => t.id === taskId);
105:     if (!task) {
106:       toast.error("Task not found");
107:       return;
108:     }
109: 
110: 
111:     navigate(`/care/log?plantId=${task.plantId}&type=fertilize`);
112:   };
113: 
114: 
115:   const [bulkModalOpen, setBulkModalOpen] = useState(false);
116:   const [selectedPlantIds, setSelectedPlantIds] = useState<string[]>([]);
117:   const [selectedActivityType, setSelectedActivityType] = useState("");
118:   const [selectedGroup, setSelectedGroup] = useState<PlantGroup | null>(null);
119: 
120:   useEffect(() => {
121:     if (plants && plants.length > 0) {
122:       const groups = groupPlantsByConditions(plants);
123:       setPlantGroups(groups);
124:     } else {
125:       setPlantGroups([]);
126:     }
127:   }, [plants]);
128: 
129:   const handleBulkLogActivity = (plantIds: string[], activityType: string) => {
130:     const group = plantGroups.find((g) =>
131:       g.plants.some((p) => plantIds.includes(p.id))
132:     );
133: 
134:     setSelectedPlantIds(plantIds);
135:     setSelectedActivityType(activityType);
136:     setSelectedGroup(group || null);
137:     setBulkModalOpen(true);
138:   };
139: 
140:   const closeBulkModal = () => {
141:     setBulkModalOpen(false);
142:     setSelectedPlantIds([]);
143:     setSelectedActivityType("");
144:     setSelectedGroup(null);
145:   };
146: 
147:   if (loading) {
148:     return (
149:       <div className="min-h-screen bg-background flex items-center justify-center">
150:         <div className="text-foreground">Loading...</div>
151:       </div>
152:     );
153:   }
154: 
155:   return (
156:     <>
157:       <div className="container mx-auto p-4 pb-20 max-w-md">
158:         <OfflineIndicator />
159:         <div className="min-h-screen bg-background pb-20">
160:           {}
161:           <div className="bg-card border-b border-border sticky top-0 z-40">
162:             <div className="max-w-6xl mx-auto px-4 py-4">
163:               <div className="flex justify-between items-center">
164:                 <div className="flex items-center gap-3">
165:                   <div className="text-2xl">🌱</div>
166:                   <div>
167:                     <h1 className="text-xl font-semibold text-foreground">
168:                       SmartGarden
169:                     </h1>
170:                     <p className="text-sm text-muted-foreground">
171:                       Welcome, {user?.displayName || user?.email}
172:                     </p>
173:                   </div>
174:                 </div>
175:                 <div className="flex items-center gap-2">
176:                   <Button variant="outline" onClick={signOut}>
177:                     Sign Out
178:                   </Button>
179:                 </div>
180:               </div>
181:             </div>
182:           </div>
183: 
184:           {}
185:           <div className="max-w-6xl mx-auto px-4 py-6 space-y-8">
186:             {}
187:             <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
188:               <Card className="mt-4">
189:                 <CardContent className="p-4">
190:                   <h3 className="font-semibold mb-3">
191:                     🌱 Fertilization Tasks (Debug)
192:                   </h3>
193:                   {scheduleLoading && <p>Loading fertilization tasks...</p>}
194:                   {error && <p className="text-red-600">Error: {error}</p>}
195:                   {!scheduleLoading && !error && (
196:                     <div>
197:                       <p className="mb-2">Found {tasks.length} total tasks</p>
198:                       {tasks.length === 0 ? (
199:                         <p className="text-muted-foreground">
200:                           No fertilization tasks found
201:                         </p>
202:                       ) : (
203:                         <div className="space-y-2">
204:                           {tasks.map((task) => (
205:                             <div key={task.id} className="border p-3 rounded">
206:                               <p className="font-medium">{task.taskName}</p>
207:                               <p className="text-sm">
208:                                 Product: {task.details.product}
209:                               </p>
210:                               <p className="text-sm">
211:                                 Due: {task.dueDate.toLocaleDateString()}
212:                               </p>
213:                               <p className="text-sm">Status: {task.status}</p>
214:                               <p className="text-sm">
215:                                 Plant ID: {task.plantId}
216:                               </p>
217:                             </div>
218:                           ))}
219:                         </div>
220:                       )}
221:                     </div>
222:                   )}
223:                 </CardContent>
224:               </Card>
225: 
226:               <Card className="bg-gradient-to-br from-primary/10 to-primary/5 border-primary/20">
227:                 <CardHeader className="pb-3">
228:                   <CardTitle className="text-lg flex items-center gap-2">
229:                     <span className="text-xl">🌿</span>
230:                     Total Plants
231:                   </CardTitle>
232:                 </CardHeader>
233:                 <CardContent>
234:                   <p className="text-3xl font-bold text-primary">
235:                     {plants?.length || 0}
236:                   </p>
237:                   <p className="text-sm text-muted-foreground">
238:                     Plants registered
239:                   </p>
240:                 </CardContent>
241:               </Card>
242: 
243:               <Card className="bg-gradient-to-br from-accent/10 to-accent/5 border-accent/20">
244:                 <CardHeader className="pb-3">
245:                   <CardTitle className="text-lg flex items-center gap-2">
246:                     <span className="text-xl">📅</span>
247:                     Today's Tasks
248:                   </CardTitle>
249:                 </CardHeader>
250:                 <CardContent>
251:                   <p className="text-3xl font-bold text-accent">0</p>
252:                   <p className="text-sm text-muted-foreground">Tasks due</p>
253:                 </CardContent>
254:               </Card>
255: 
256:               <Card className="bg-gradient-to-br from-emerald-500/10 to-emerald-500/5 border-emerald-500/20 sm:col-span-2 lg:col-span-1">
257:                 <CardHeader className="pb-3">
258:                   <CardTitle className="text-lg flex items-center gap-2">
259:                     <span className="text-xl">📊</span>
260:                     Garden Health
261:                   </CardTitle>
262:                 </CardHeader>
263:                 <CardContent>
264:                   <p className="text-3xl font-bold text-emerald-600">Great</p>
265:                   <p className="text-sm text-muted-foreground">
266:                     All systems green
267:                   </p>
268:                 </CardContent>
269:               </Card>
270:             </div>
271: 
272:             {}
273:             {plantGroups.length === 0 && (
274:               <Card className="bg-gradient-to-br from-card to-muted/30">
275:                 <CardContent className="text-center py-12">
276:                   <div className="text-6xl mb-4">🌱</div>
277:                   <h3 className="text-xl font-semibold mb-2 text-foreground">
278:                     Welcome to SmartGarden!
279:                   </h3>
280:                   <p className="text-muted-foreground mb-6 max-w-md mx-auto">
281:                     Start your gardening journey by adding your first plant.
282:                     Track growth, log care activities, and get personalized
283:                     recommendations.
284:                   </p>
285:                   <Button
286:                     onClick={() => navigate("/add-plant")}
287:                     size="lg"
288:                     className="bg-primary hover:bg-primary/90"
289:                   >
290:                     <span className="mr-2">🌿</span>
291:                     Add Your First Plant
292:                   </Button>
293:                 </CardContent>
294:               </Card>
295:             )}
296: 
297:             {}
298:             {plantGroups.length > 0 && (
299:               <div className="space-y-4">
300:                 <div className="flex justify-between items-center">
301:                   <h2 className="text-xl font-semibold text-foreground flex items-center gap-2">
302:                     <span className="text-2xl">🌿</span>
303:                     Your Plants
304:                   </h2>
305:                   <div className="flex gap-2">
306:                     <Button
307:                       variant="outline"
308:                       onClick={() => navigate("/plants")}
309:                       size="sm"
310:                     >
311:                       View All
312:                     </Button>
313:                     <Button
314:                       onClick={() => navigate("/add-plant")}
315:                       className="bg-primary hover:bg-primary/90"
316:                     >
317:                       <span className="mr-2">➕</span>
318:                       Add Plant
319:                     </Button>
320:                   </div>
321:                 </div>
322: 
323:                 {}
324:                 <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
325:                   {plantGroups.slice(0, 6).map((group) => (
326:                     <PlantGroupCard
327:                       key={group.id}
328:                       group={group}
329:                       onBulkLogActivity={handleBulkLogActivity}
330:                     />
331:                   ))}
332:                 </div>
333: 
334:                 {}
335:                 {plantGroups.length > 6 && (
336:                   <div className="text-center pt-4">
337:                     <Button
338:                       variant="outline"
339:                       onClick={() => navigate("/plants")}
340:                     >
341:                       View All {plantGroups.length} Plant Groups
342:                     </Button>
343:                   </div>
344:                 )}
345:               </div>
346:             )}
347:           </div>
348:           {upcomingFertilization.length > 0 && (
349:             <FertilizationDashboardSection
350:               tasks={upcomingFertilization}
351:               onTaskComplete={handleTaskComplete}
352:               onTaskBypass={handleTaskBypass}
353:               onTaskLogActivity={handleTaskLogActivity}
354:             />
355:           )}
356:           {}
357:           <Navigation />
358:         </div>
359:       </div>
360: 
361:       {}
362:       <BulkActivityModal
363:         isOpen={bulkModalOpen}
364:         onClose={closeBulkModal}
365:         plantIds={selectedPlantIds}
366:         activityType={selectedActivityType}
367:         plantCount={selectedPlantIds.length}
368:         varietyName={selectedGroup?.varietyName || ""}
369:       />
370:     </>
371:   );
372: };




================================================================
End of Codebase
================================================================
