This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: logs, *.log, npm-debug.log*, yarn-debug.log*, yarn-error.log*, pnpm-debug.log*, lerna-debug.log*, .cache/, .parcel-cache/, node_modules, dist, dist-ssr, *.local, .vscode/*, *.suo, *.ntvs*, *.njsproj, *.sln, *.sw?, ._*, .Spotlight-V100, .Trashes, ehthumbs.db, Thumbs.db, .vscode/, .idea/, .env.local, .env.development.local, .env.test.local, .env.production.local, *.tmp, *.temp
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Line numbers have been added to the beginning of each line
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
public/
  vite.svg
scripts/
  lighthouse-ci.js
src/
  __tests__/
    components/
      AddPlant.test.tsx
      BulkActivityModal.test.tsx
      CareLogForm.test.tsx
      Dashboard.test.tsx
      LogCare.test.tsx
      PlantRegistrationForm.test.tsx
      PlantReminderSettings.test.tsx
      PlantStageDisplay.test.tsx
      ReminderPreferencesSection.test.tsx
      SoilMixtureSelector.test.tsx
    database/
      plantService.test.ts
      varietyService.test.ts
    e2e/
      plant-registration.spec.ts
    integration/
      plantDetailReminderSettings.test.tsx
      plantRegistrationFlow.test.tsx
      smartDefaultsIntegration.test.tsx
      stageCalculationDisplay.test.tsx
      taskGroupingService.test.tsx
    services/
      careSchedulingService.test.ts
      smartDefaultsService.test.ts
    setup/
      mockFirebase.ts
    utils/
      growthStage.test.ts
      plantDisplay.test.ts
      plantGrouping.test.ts
      plantRegistration.test.ts
      testHelpers.tsx
      varietyGrowthStages.test.ts
  assets/
    react.svg
  components/
    layouts/
      EmptyState.tsx
      Welcome.tsx
    plant/
      BulkActivityModal.tsx
      CareActivityItem.tsx
      CareHistory.tsx
      CustomVarietyForm.tsx
      NextActivityCard.tsx
      PlantGroupCard.tsx
      PlantInfoCard.tsx
      PlantRegistrationForm.tsx
      PlantReminderSettings.tsx
      PlantStageDisplay.tsx
      ReminderPreferencesSection.tsx
      SoilMixtureSelector.tsx
    ui/
      Badge.tsx
      Button.tsx
      Card.tsx
      DarkModeToggle.tsx
      Input.tsx
      LoadingSpinner.tsx
      LocationToggle.tsx
      OfflineIndicator.tsx
      StatusBadge.tsx
      Switch.tsx
    AuthForm.tsx
    Navigation.tsx
  data/
    seedVarieties.ts
  db/
    seedData.ts
  hooks/
    useAppInitialization.ts
    useDarkMode.ts
    useDynamicStage.ts
    useFirebaseAuth.ts
    useFirebaseCareActivities.ts
    useFirebasePlants.ts
    useFirstTimeUser.ts
    useNextPlantTask.ts
  pages/
    care/
      CareLogForm.tsx
      LogCare.tsx
      PhotoCapture.tsx
      QuickCompletionButtons.tsx
    dashboard/
      index.tsx
      TaskGroup.tsx
      TaskItem.tsx
    plants/
      AddPlant.tsx
      PlantDetail.tsx
      Plants.tsx
    settings/
      index.tsx
  services/
    firebase/
      __mocks__/
        config.ts
      authService.ts
      careActivityService.ts
      config.ts
      plantService.ts
    bulkActivityService.ts
    BypassService.ts
    careSchedulingService.ts
    dynamicSchedulingService.ts
    smartDefaultsService.ts
    taskGroupingService.ts
  styles/
    globals.css
  types/
    core.ts
    database.ts
    firebase.ts
    index.ts
    scheduling.ts
    user.ts
  utils/
    cn.ts
    dateUtils.ts
    growthStage.ts
    plantDisplay.ts
    plantGrouping.ts
    plantStage.ts
    waterConversion.ts
  App.css
  App.tsx
  index.css
  jest.polyfills.ts
  main.tsx
  setupTests.ts
  vite-env.d.ts
tests/
  e2e/
    pwa-functionality.spec.ts
.firebaserc
.gitignore
eslint.config.js
firebase.json
firestore.indexes.json
firestore.rules
index.html
jest.config.ts
package.json
postcss.config.js
print_structure.py
README.md
repomix.config.json
storage.rules
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
tsconfig.tsbuildinfo
vite.config.ts

================================================================
Files
================================================================

================
File: src/__tests__/components/AddPlant.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { BrowserRouter } from "react-router-dom";
  4: import AddPlant from "@/pages/plants/AddPlant";
  5: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  6: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  7: import { varietyService } from "@/types/database";
  8: 
  9: 
 10: jest.mock("@/hooks/useFirebaseAuth");
 11: jest.mock("@/hooks/useFirebasePlants");
 12: jest.mock("@/types/database");
 13: 
 14: const mockNavigate = jest.fn();
 15: jest.mock("react-router-dom", () => ({
 16:   ...jest.requireActual("react-router-dom"),
 17:   useNavigate: () => mockNavigate,
 18: }));
 19: 
 20: const mockUser = {
 21:   uid: "test-user-id",
 22:   email: "test@example.com",
 23:   displayName: "Test User",
 24: };
 25: 
 26: const mockVarieties = [
 27:   {
 28:     id: "variety-1",
 29:     name: "Test Variety",
 30:     category: "herbs" as const,
 31:     growthTimeline: {
 32:       germination: 7,
 33:       seedling: 14,
 34:       vegetative: 21,
 35:       maturation: 45,
 36:     },
 37:     createdAt: new Date(),
 38:   },
 39: ];
 40: 
 41: describe("AddPlant Page", () => {
 42:   const user = userEvent.setup();
 43: 
 44:   beforeEach(() => {
 45:     jest.clearAllMocks();
 46: 
 47:     (useFirebaseAuth as jest.Mock).mockReturnValue({
 48:       user: mockUser,
 49:       signOut: jest.fn(),
 50:     });
 51: 
 52:     (useFirebasePlants as jest.Mock).mockReturnValue({
 53:       createPlant: jest.fn().mockResolvedValue("plant-id"),
 54:     });
 55: 
 56:     (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
 57:       mockVarieties
 58:     );
 59:   });
 60: 
 61:   const renderWithRouter = (component: React.ReactElement) => {
 62:     return render(<BrowserRouter>{component}</BrowserRouter>);
 63:   };
 64: 
 65:   it("renders the add plant page with proper styling", async () => {
 66:     renderWithRouter(<AddPlant />);
 67: 
 68: 
 69:     expect(screen.getByText("Add New Plant")).toBeInTheDocument();
 70:     expect(
 71:       screen.getByText("Register a new plant to start tracking its growth")
 72:     ).toBeInTheDocument();
 73: 
 74: 
 75:     expect(
 76:       screen.getByRole("button", { name: /go back/i })
 77:     ).toBeInTheDocument();
 78: 
 79: 
 80:     expect(screen.getByText("Welcome, Test User")).toBeInTheDocument();
 81: 
 82: 
 83:     await waitFor(() => {
 84:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
 85:     });
 86:   });
 87: 
 88:   it("navigates back to dashboard when back button is clicked", async () => {
 89:     renderWithRouter(<AddPlant />);
 90: 
 91:     const backButton = screen.getByRole("button", { name: /go back/i });
 92:     await user.click(backButton);
 93: 
 94:     expect(mockNavigate).toHaveBeenCalledWith("/");
 95:   });
 96: 
 97:   it("navigates to dashboard on successful plant registration", async () => {
 98:     renderWithRouter(<AddPlant />);
 99: 
100: 
101:     await waitFor(() => {
102:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
103:     });
104: 
105: 
106:     const varietySelect = screen.getByLabelText(/plant variety/i);
107:     await user.selectOptions(varietySelect, "variety-1");
108: 
109: 
110:     const growBagButton = screen.getByTestId("container-type-grow-bag");
111:     await user.click(growBagButton);
112: 
113: 
114:     const soilMixtureCard = screen.getByTestId(
115:       "mixture-card-leafy-greens-standard"
116:     );
117:     await user.click(soilMixtureCard);
118: 
119: 
120:     const submitButton = screen.getByRole("button", {
121:       name: /register plant/i,
122:     });
123: 
124: 
125:     await waitFor(() => {
126:       expect(submitButton).toBeEnabled();
127:     });
128:     await user.click(submitButton);
129: 
130: 
131:     await waitFor(() => {
132:       expect(mockNavigate).toHaveBeenCalledWith("/");
133:     });
134:   });
135: 
136:   it("shows offline indicator when navigator is offline", () => {
137: 
138:     const onlineSpy = jest.spyOn(navigator, "onLine", "get");
139:     onlineSpy.mockReturnValue(false);
140: 
141:     renderWithRouter(<AddPlant />);
142: 
143: 
144:     expect(
145:       screen.getByText(
146:         /You're offline - Data will sync when connection returns/i
147:       )
148:     ).toBeInTheDocument();
149: 
150: 
151:     onlineSpy.mockRestore();
152:   });
153: 
154:   it("includes navigation component", () => {
155:     renderWithRouter(<AddPlant />);
156: 
157: 
158:     expect(screen.getByRole("navigation")).toBeInTheDocument();
159:   });
160: });

================
File: src/__tests__/components/BulkActivityModal.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import BulkActivityModal from "@/components/plant/BulkActivityModal";
  4: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  5: import toast from "react-hot-toast";
  6: 
  7: 
  8: jest.mock("@/hooks/useFirebaseCareActivities");
  9: jest.mock("react-hot-toast");
 10: 
 11: const mockLogActivity = jest.fn();
 12: 
 13: describe("BulkActivityModal", () => {
 14:   const user = userEvent.setup();
 15: 
 16:   beforeEach(() => {
 17:     jest.clearAllMocks();
 18:     (useFirebaseCareActivities as jest.Mock).mockReturnValue({
 19:       logActivity: mockLogActivity,
 20:     });
 21:     mockLogActivity.mockResolvedValue(undefined);
 22:   });
 23: 
 24:   const defaultProps = {
 25:     isOpen: true,
 26:     onClose: jest.fn(),
 27:     plantIds: ["plant-1", "plant-2"],
 28:     plantCount: 2,
 29:     varietyName: "Cherry Tomato",
 30:   };
 31: 
 32:   it("renders the correct title for watering multiple plants", () => {
 33:     render(<BulkActivityModal {...defaultProps} activityType="water" />);
 34:     expect(screen.getByText("💧 Water All Plants")).toBeInTheDocument();
 35:     expect(
 36:       screen.getByText("Logging for 2 Cherry Tomato plants")
 37:     ).toBeInTheDocument();
 38:   });
 39: 
 40:   it("renders the correct title and inputs for fertilizing a single plant", () => {
 41:     render(
 42:       <BulkActivityModal
 43:         {...defaultProps}
 44:         plantCount={1}
 45:         activityType="fertilize"
 46:       />
 47:     );
 48:     expect(screen.getByText("🌱 Fertilize Plant")).toBeInTheDocument();
 49:     expect(screen.getByLabelText("Amount")).toBeInTheDocument();
 50:   });
 51: 
 52:   it("calls logActivity for each plant ID on submit", async () => {
 53:     const mockOnClose = jest.fn();
 54:     render(
 55:       <BulkActivityModal
 56:         {...defaultProps}
 57:         activityType="water"
 58:         onClose={mockOnClose}
 59:       />
 60:     );
 61: 
 62:     const amountInput = screen.getByLabelText(/Amount/i);
 63:     await user.clear(amountInput);
 64:     await user.type(amountInput, "50");
 65: 
 66:     const submitButton = screen.getByRole("button", {
 67:       name: /Log Activity for All 2 Plants/i,
 68:     });
 69:     await user.click(submitButton);
 70: 
 71:     await waitFor(() => {
 72:       expect(mockLogActivity).toHaveBeenCalledTimes(2);
 73:       expect(mockLogActivity).toHaveBeenCalledWith(
 74:         expect.objectContaining({ plantId: "plant-1", type: "water" })
 75:       );
 76:       expect(mockLogActivity).toHaveBeenCalledWith(
 77:         expect.objectContaining({ plantId: "plant-2", type: "water" })
 78:       );
 79:       expect(toast.success).toHaveBeenCalledWith(
 80:         "Activity logged for all 2 Cherry Tomato plants! 🌱"
 81:       );
 82:       expect(mockOnClose).toHaveBeenCalledTimes(1);
 83:     });
 84:   });
 85: 
 86:   it("disables submit button while submitting", async () => {
 87: 
 88:     mockLogActivity.mockImplementation(() => new Promise(() => {}));
 89:     render(<BulkActivityModal {...defaultProps} activityType="water" />);
 90: 
 91:     const submitButton = screen.getByRole("button", { name: /Log Activity/i });
 92:     await user.click(submitButton);
 93: 
 94:     expect(submitButton).toBeDisabled();
 95:     expect(screen.getByText("Logging...")).toBeInTheDocument();
 96:   });
 97: 
 98:   it("calls onClose when the close button is clicked", async () => {
 99:     const mockOnClose = jest.fn();
100:     render(
101:       <BulkActivityModal
102:         {...defaultProps}
103:         activityType="observe"
104:         onClose={mockOnClose}
105:       />
106:     );
107: 
108:     const closeButton = screen.getByRole("button", { name: "✕" });
109:     await user.click(closeButton);
110: 
111:     expect(mockOnClose).toHaveBeenCalledTimes(1);
112:   });
113: });

================
File: src/__tests__/e2e/plant-registration.spec.ts
================
  1: import { test, expect } from "@playwright/test";
  2: 
  3: test.describe("Plant Registration", () => {
  4:   test.beforeEach(async ({ page }) => {
  5: 
  6:     await page.route("**/auth/**", (route) => {
  7:       route.fulfill({
  8:         status: 200,
  9:         contentType: "application/json",
 10:         body: JSON.stringify({
 11:           user: { uid: "test-user", email: "test@example.com" },
 12:         }),
 13:       });
 14:     });
 15: 
 16: 
 17:     await page.route("**/varieties", (route) => {
 18:       route.fulfill({
 19:         status: 200,
 20:         contentType: "application/json",
 21:         body: JSON.stringify([
 22:           {
 23:             id: "tomato-1",
 24:             name: "Cherry Tomato",
 25:             category: "fruiting-plants",
 26:             growthTimeline: {
 27:               germination: 7,
 28:               seedling: 14,
 29:               vegetative: 28,
 30:               maturation: 60,
 31:             },
 32:           },
 33:         ]),
 34:       });
 35:     });
 36: 
 37:     await page.goto("/plants/add");
 38:   });
 39: 
 40:   test("successfully registers a new plant", async ({ page }) => {
 41: 
 42:     await expect(page.getByText("Register New Plant")).toBeVisible();
 43: 
 44: 
 45:     await page.selectOption('[data-testid="variety-select"]', "tomato-1");
 46: 
 47: 
 48:     const today = new Date().toISOString().split("T")[0];
 49:     await page.fill('[data-testid="planting-date"]', today);
 50: 
 51: 
 52:     await page.click("text=Grow Bag");
 53: 
 54: 
 55:     await expect(
 56:       page.locator('[data-testid="container-size-select"]')
 57:     ).toHaveValue("1-gallon");
 58: 
 59: 
 60:     await page.click('[data-testid="select-soil-mixture"]');
 61: 
 62: 
 63:     await page.click('button:has-text("Register Plant")');
 64: 
 65: 
 66:     await expect(
 67:       page.getByText("Successfully registered 1 plant(s)! 🌱")
 68:     ).toBeVisible();
 69:   });
 70: 
 71:   test("handles validation errors properly", async ({ page }) => {
 72: 
 73:     await page.click('button:has-text("Register Plant")');
 74: 
 75: 
 76:     await expect(page.getByText("Please select a variety")).toBeVisible();
 77:     await expect(
 78:       page.getByText("Please select a container type")
 79:     ).toBeVisible();
 80:     await expect(page.getByText("Please select a soil mixture")).toBeVisible();
 81:   });
 82: 
 83:   test("works with custom container dimensions", async ({ page }) => {
 84:     await page.selectOption('[data-testid="variety-select"]', "tomato-1");
 85: 
 86:     await page.click("text=Grow Bag");
 87:     await page.selectOption('[data-testid="container-size-select"]', "custom");
 88: 
 89: 
 90:     await page.selectOption('[data-testid="bag-shape-select"]', "round");
 91:     await page.fill('[data-testid="diameter-input"]', "12");
 92:     await page.fill('[data-testid="height-input"]', "8");
 93: 
 94:     await page.click('[data-testid="select-soil-mixture"]');
 95: 
 96:     await page.click('button:has-text("Register Plant")');
 97: 
 98:     await expect(
 99:       page.getByText("Successfully registered 1 plant(s)! 🌱")
100:     ).toBeVisible();
101:   });
102: 
103:   test("supports multiple plants registration", async ({ page }) => {
104:     await page.selectOption('[data-testid="variety-select"]', "tomato-1");
105:     await page.click("text=Grow Bag");
106: 
107: 
108:     await page.fill('[data-testid="quantity-input"]', "3");
109: 
110:     await page.click('[data-testid="select-soil-mixture"]');
111:     await page.click('button:has-text("Register Plants")');
112: 
113:     await expect(
114:       page.getByText("Successfully registered 3 plant(s)! 🌱")
115:     ).toBeVisible();
116:   });
117: });

================
File: src/__tests__/integration/plantRegistrationFlow.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { BrowserRouter } from "react-router-dom";
  4: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
  5: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  6: import { FirebasePlantService } from "@/services/firebase/plantService";
  7: import { varietyService } from "@/types/database";
  8: 
  9: 
 10: jest.mock("firebase/firestore", () => ({
 11:   getFirestore: jest.fn(() => ({})),
 12:   collection: jest.fn(),
 13:   doc: jest.fn(),
 14:   addDoc: jest.fn(),
 15:   updateDoc: jest.fn(),
 16:   onSnapshot: jest.fn(),
 17:   query: jest.fn(),
 18:   where: jest.fn(),
 19:   orderBy: jest.fn(),
 20:   Timestamp: {
 21:     now: jest.fn(() => new Date()),
 22:     fromDate: jest.fn((date) => date),
 23:   },
 24:   writeBatch: jest.fn(),
 25: }));
 26: 
 27: 
 28: jest.mock("@/hooks/useFirebaseAuth");
 29: jest.mock("@/services/firebase/plantService");
 30: jest.mock("@/types/database");
 31: 
 32: const mockUser = {
 33:   uid: "test-user-id",
 34:   email: "test@example.com",
 35:   displayName: "Test User",
 36: };
 37: 
 38: const mockVarieties = [
 39:   {
 40:     id: "variety-1",
 41:     name: "Test Variety",
 42:     category: "herbs" as const,
 43:     growthTimeline: {
 44:       germination: 7,
 45:       seedling: 14,
 46:       vegetative: 21,
 47:       maturation: 45,
 48:     },
 49:     createdAt: new Date(),
 50:   },
 51: ];
 52: 
 53: describe("Plant Registration Integration Flow", () => {
 54:   const user = userEvent.setup();
 55: 
 56:   beforeEach(() => {
 57:     jest.clearAllMocks();
 58: 
 59:     (useFirebaseAuth as jest.Mock).mockReturnValue({
 60:       user: mockUser,
 61:     });
 62: 
 63:     (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
 64:       mockVarieties
 65:     );
 66:     (FirebasePlantService.createPlant as jest.Mock).mockResolvedValue(
 67:       "new-plant-id"
 68:     );
 69:   });
 70: 
 71:   const renderWithRouter = (component: React.ReactElement) => {
 72:     return render(<BrowserRouter>{component}</BrowserRouter>);
 73:   };
 74: 
 75:   it("completes full plant registration workflow", async () => {
 76:     renderWithRouter(<PlantRegistrationForm />);
 77: 
 78: 
 79:     await waitFor(() => {
 80:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
 81:     });
 82: 
 83: 
 84:     const varietySelect = screen.getByLabelText(/plant variety/i);
 85:     await user.selectOptions(varietySelect, "variety-1");
 86: 
 87: 
 88:     const dateInput = screen.getByLabelText(/planting date/i);
 89:     const today = new Date().toISOString().split("T")[0];
 90:     await user.clear(dateInput);
 91:     await user.type(dateInput, today);
 92: 
 93: 
 94:     const growBagButton = screen.getByText("Grow Bag");
 95:     await user.click(growBagButton);
 96: 
 97: 
 98:     await waitFor(() => {
 99:       expect(screen.getByDisplayValue("1 Gallon")).toBeInTheDocument();
100:     });
101: 
102: 
103:     const selectSoilButton = screen.getByTestId(
104:       "mixture-card-leafy-greens-standard"
105:     );
106:     await user.click(selectSoilButton);
107: 
108: 
109:     const submitButton = screen.getByRole("button", {
110:       name: /register plant/i,
111:     });
112:     await user.click(submitButton);
113: 
114: 
115:     await waitFor(() => {
116:       expect(FirebasePlantService.createPlant).toHaveBeenCalledWith(
117:         expect.objectContaining({
118:           varietyId: "variety-1",
119:           varietyName: "Test Variety",
120:           currentStage: "germination",
121:           location: "Indoor",
122:           container: "1 Gallon Grow Bag",
123:           isActive: true,
124:         }),
125:         mockUser.uid
126:       );
127:     });
128:   });
129: 
130:   it("handles offline scenario gracefully", async () => {
131: 
132:     (FirebasePlantService.createPlant as jest.Mock).mockRejectedValue(
133:       new Error("Network error")
134:     );
135: 
136:     renderWithRouter(<PlantRegistrationForm />);
137: 
138:     await waitFor(() => {
139:       expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
140:     });
141: 
142: 
143:     const varietySelect = screen.getByLabelText(/plant variety/i);
144:     await user.selectOptions(varietySelect, "variety-1");
145: 
146:     const growBagButton = screen.getByText("Grow Bag");
147:     await user.click(growBagButton);
148: 
149:     const selectSoilButton = screen.getByTestId(
150:       "mixture-card-leafy-greens-standard"
151:     );
152:     await user.click(selectSoilButton);
153: 
154:     const submitButton = screen.getByRole("button", {
155:       name: /register plant/i,
156:     });
157:     await user.click(submitButton);
158: 
159: 
160:     await waitFor(() => {
161:       expect(screen.getByText("Network error")).toBeInTheDocument();
162:     });
163: 
164: 
165:     expect(screen.getByDisplayValue("Test Variety")).toBeInTheDocument();
166:   });
167: });

================
File: src/__tests__/setup/mockFirebase.ts
================
 1: export const mockFirebaseConfig = {
 2:   apiKey: "test-api-key",
 3:   authDomain: "test-project.firebaseapp.com",
 4:   projectId: "test-project",
 5:   storageBucket: "test-project.appspot.com",
 6:   messagingSenderId: "123456789",
 7:   appId: "test-app-id",
 8: };
 9: 
10: export const mockDb = {};
11: export const mockAuth = {};
12: export const mockStorage = {};
13: 
14: export const mockFirebaseFunctions = {
15:   initializeApp: jest.fn(() => ({})),
16:   getFirestore: jest.fn(() => mockDb),
17:   getAuth: jest.fn(() => mockAuth),
18:   getStorage: jest.fn(() => mockStorage),
19:   enableNetwork: jest.fn(),
20:   disableNetwork: jest.fn(),
21: };
22: 
23: 
24: describe("MockFirebase Setup", () => {
25:   it("should export mock Firebase functions", () => {
26:     expect(mockFirebaseFunctions.initializeApp).toBeDefined();
27:     expect(mockFirebaseFunctions.getFirestore).toBeDefined();
28:     expect(mockFirebaseFunctions.getAuth).toBeDefined();
29:     expect(mockFirebaseFunctions.getStorage).toBeDefined();
30:   });
31: });

================
File: src/__tests__/utils/plantGrouping.test.ts
================
 1: import { groupPlantsByConditions } from "@/utils/plantGrouping";
 2: import { PlantRecord } from "@/types/database";
 3: import { GrowthStage } from "@/types";
 4: 
 5: describe("groupPlantsByConditions", () => {
 6:   const createMockPlant = (overrides: Partial<PlantRecord>): PlantRecord => {
 7:     return {
 8:       id: `plant-${Math.random()}`,
 9:       varietyId: "tomato-1",
10:       varietyName: "Cherry Tomato",
11:       name: "Test Plant",
12:       plantedDate: new Date("2024-05-10T00:00:00.000Z"),
13:       currentStage: "vegetative" as GrowthStage,
14:       location: "Indoor",
15:       container: "5 Gallon Grow Bag",
16:       soilMix: "standard-mix",
17:       isActive: true,
18:       createdAt: new Date(),
19:       updatedAt: new Date(),
20:       ...overrides,
21:     };
22:   };
23: 
24:   it("should group plants with identical conditions", () => {
25:     const p1 = createMockPlant({ id: "p1" });
26:     const p2 = createMockPlant({ id: "p2" });
27:     const plants = [p1, p2];
28: 
29:     const groups = groupPlantsByConditions(plants);
30:     expect(groups).toHaveLength(1);
31:     expect(groups[0].plants).toHaveLength(2);
32:     expect(groups[0].plants.map((p) => p.id)).toEqual(["p1", "p2"]);
33:   });
34: 
35:   it("should not group plants with different varieties", () => {
36:     const p1 = createMockPlant({ id: "p1", varietyId: "tomato-1" });
37:     const p2 = createMockPlant({ id: "p2", varietyId: "basil-1" });
38:     const plants = [p1, p2];
39: 
40:     const groups = groupPlantsByConditions(plants);
41:     expect(groups).toHaveLength(2);
42:   });
43: 
44:   it("should not group plants with different planted dates", () => {
45:     const p1 = createMockPlant({
46:       id: "p1",
47:       plantedDate: new Date("2024-05-10T00:00:00.000Z"),
48:     });
49:     const p2 = createMockPlant({
50:       id: "p2",
51:       plantedDate: new Date("2024-05-11T00:00:00.000Z"),
52:     });
53:     const plants = [p1, p2];
54: 
55:     const groups = groupPlantsByConditions(plants);
56:     expect(groups).toHaveLength(2);
57:   });
58: 
59:   it("should not group plants with different containers", () => {
60:     const p1 = createMockPlant({ id: "p1", container: "5 Gallon" });
61:     const p2 = createMockPlant({ id: "p2", container: "3 Gallon" });
62:     const plants = [p1, p2];
63: 
64:     const groups = groupPlantsByConditions(plants);
65:     expect(groups).toHaveLength(2);
66:   });
67: 
68:   it("should handle an empty array of plants", () => {
69:     const groups = groupPlantsByConditions([]);
70:     expect(groups).toHaveLength(0);
71:   });
72: 
73:   it("should create separate groups for plants with and without soil mix", () => {
74:     const p1 = createMockPlant({ id: "p1", soilMix: "standard-mix" });
75:     const p2 = createMockPlant({ id: "p2", soilMix: undefined });
76:     const p3 = createMockPlant({ id: "p3", soilMix: "standard-mix" });
77: 
78:     const plants = [p1, p2, p3];
79:     const groups = groupPlantsByConditions(plants);
80: 
81:     expect(groups).toHaveLength(2);
82:     const groupWithSoil = groups.find((g) => g.soilMix === "standard-mix");
83:     const groupWithoutSoil = groups.find((g) => g.soilMix === undefined);
84: 
85:     expect(groupWithSoil?.plants).toHaveLength(2);
86:     expect(groupWithoutSoil?.plants).toHaveLength(1);
87:   });
88: });

================
File: src/__tests__/utils/plantRegistration.test.ts
================
 1: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 2: 
 3: describe("Plant Registration Utils", () => {
 4:   const mockVariety = {
 5:     id: "test-variety",
 6:     name: "Test Plant",
 7:     category: "herbs" as const,
 8:     growthTimeline: {
 9:       germination: 7,
10:       seedling: 14,
11:       vegetative: 21,
12:       maturation: 45,
13:     },
14:     createdAt: new Date(),
15:   };
16: 
17:   describe("calculateCurrentStageWithVariety", () => {
18:     it("calculates germination stage correctly", () => {
19:       const plantedDate = new Date();
20:       plantedDate.setDate(plantedDate.getDate() - 3);
21: 
22:       const stage = calculateCurrentStageWithVariety(plantedDate, mockVariety);
23:       expect(stage).toBe("germination");
24:     });
25: 
26:     it("calculates seedling stage correctly", () => {
27:       const plantedDate = new Date();
28:       plantedDate.setDate(plantedDate.getDate() - 10);
29: 
30:       const stage = calculateCurrentStageWithVariety(plantedDate, mockVariety);
31:       expect(stage).toBe("seedling");
32:     });
33: 
34:     it("calculates vegetative stage correctly", () => {
35:       const plantedDate = new Date();
36:       plantedDate.setDate(plantedDate.getDate() - 25);
37: 
38:       const stage = calculateCurrentStageWithVariety(plantedDate, mockVariety);
39:       expect(stage).toBe("vegetative");
40:     });
41: 
42:     it("handles invalid variety gracefully", () => {
43:       const plantedDate = new Date();
44:       const stage = calculateCurrentStageWithVariety(plantedDate, null);
45:       expect(stage).toBe("vegetative");
46:     });
47:   });
48: });

================
File: src/components/plant/BulkActivityModal.tsx
================
  1: import { useState } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { Input } from "@/components/ui/Input";
  5: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  6: import { toast } from "react-hot-toast";
  7: 
  8: interface BulkActivityModalProps {
  9:   isOpen: boolean;
 10:   onClose: () => void;
 11:   plantIds: string[];
 12:   activityType: string;
 13:   plantCount: number;
 14:   varietyName: string;
 15: }
 16: 
 17: const BulkActivityModal = ({
 18:   isOpen,
 19:   onClose,
 20:   plantIds,
 21:   activityType,
 22:   plantCount,
 23:   varietyName,
 24: }: BulkActivityModalProps) => {
 25:   const [isSubmitting, setIsSubmitting] = useState(false);
 26:   const [amount, setAmount] = useState("20");
 27:   const [notes, setNotes] = useState("");
 28: 
 29:   const { logActivity } = useFirebaseCareActivities();
 30: 
 31:   const isIndividual = plantCount === 1;
 32:   const modalTitle = isIndividual
 33:     ? `${
 34:         activityType === "water"
 35:           ? "💧 Water Plant"
 36:           : activityType === "fertilize"
 37:           ? "🌱 Fertilize Plant"
 38:           : "👁️ Inspect Plant"
 39:       }`
 40:     : `${
 41:         activityType === "water"
 42:           ? "💧 Water All Plants"
 43:           : activityType === "fertilize"
 44:           ? "🌱 Fertilize All Plants"
 45:           : "👁️ Inspect All Plants"
 46:       }`;
 47: 
 48:   const buttonText = isIndividual
 49:     ? `Log ${
 50:         activityType === "water"
 51:           ? "Watering"
 52:           : activityType === "fertilize"
 53:           ? "Fertilizing"
 54:           : "Inspection"
 55:       }`
 56:     : `Log Activity for All ${plantCount} Plants`;
 57: 
 58:   const handleSubmit = async () => {
 59:     setIsSubmitting(true);
 60:     try {
 61:       for (const plantId of plantIds) {
 62:         let details: any = { notes };
 63: 
 64:         if (activityType === "water") {
 65:           details = {
 66:             type: "water",
 67:             amount: { value: parseFloat(amount), unit: "oz" },
 68:             notes,
 69:           };
 70:         } else if (activityType === "fertilize") {
 71:           details = {
 72:             type: "fertilize",
 73:             product: "General fertilizer",
 74:             dilution: "1:10",
 75:             amount: amount,
 76:             notes,
 77:           };
 78:         } else if (activityType === "observe") {
 79:           details = {
 80:             type: "observe",
 81:             healthAssessment: "good",
 82:             observations: notes || "Routine inspection",
 83:             notes,
 84:           };
 85:         }
 86: 
 87:         await logActivity({
 88:           plantId,
 89:           type: activityType as any,
 90:           date: new Date(),
 91:           details,
 92:         });
 93:       }
 94: 
 95:       const successMessage = isIndividual
 96:         ? `${
 97:             activityType === "water"
 98:               ? "Watering"
 99:               : activityType === "fertilize"
100:               ? "Fertilizing"
101:               : "Inspection"
102:           } logged successfully! 🌱`
103:         : `Activity logged for all ${plantCount} ${varietyName} plants! 🌱`;
104: 
105:       toast.success(successMessage);
106:       onClose();
107:     } catch (error) {
108:       toast.error("Failed to log activities");
109:       console.error("Activity logging error:", error);
110:     } finally {
111:       setIsSubmitting(false);
112:     }
113:   };
114: 
115:   if (!isOpen) return null;
116: 
117:   return (
118:     <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
119:       <Card className="w-full max-w-md">
120:         <CardHeader>
121:           <CardTitle className="flex items-center justify-between">
122:             <span>{modalTitle}</span>
123:             <Button variant="outline" size="sm" onClick={onClose}>
124:               ✕
125:             </Button>
126:           </CardTitle>
127:           <p className="text-sm text-muted-foreground">
128:             {isIndividual
129:               ? `Logging for ${varietyName} plant`
130:               : `Logging for ${plantCount} ${varietyName} plants`}
131:           </p>
132:         </CardHeader>
133:         <CardContent className="space-y-4">
134:           {activityType === "water" && (
135:             <div>
136:               <label htmlFor="bulk-amount" className="text-sm font-medium">
137:                 Amount (oz)
138:               </label>
139:               <Input
140:                 id="bulk-amount"
141:                 type="number"
142:                 value={amount}
143:                 onChange={(e) => setAmount(e.target.value)}
144:                 placeholder="20"
145:               />
146:             </div>
147:           )}
148: 
149:           {activityType === "fertilize" && (
150:             <div>
151:               <label htmlFor="fertilize-amount" className="text-sm font-medium">
152:                 Amount
153:               </label>
154:               <Input
155:                 id="fertilize-amount"
156:                 value={amount}
157:                 onChange={(e) => setAmount(e.target.value)}
158:                 placeholder="2 tbsp"
159:               />
160:             </div>
161:           )}
162: 
163:           <div>
164:             <label htmlFor="bulk-notes" className="text-sm font-medium">
165:               Notes (optional)
166:             </label>
167:             <Input
168:               id="bulk-notes"
169:               value={notes}
170:               onChange={(e) => setNotes(e.target.value)}
171:               placeholder="Any observations..."
172:             />
173:           </div>
174: 
175:           <Button
176:             onClick={handleSubmit}
177:             disabled={isSubmitting}
178:             className="w-full"
179:           >
180:             {isSubmitting ? "Logging..." : buttonText}
181:           </Button>
182:         </CardContent>
183:       </Card>
184:     </div>
185:   );
186: };
187: 
188: export default BulkActivityModal;

================
File: src/components/plant/NextActivityCard.tsx
================
  1: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  2: import { Button } from "@/components/ui/Button";
  3: import { useNextPlantTask } from "@/hooks/useNextPlantTask";
  4: import { Clock, Calendar, AlertTriangle, CheckCircle2 } from "lucide-react";
  5: import Badge from "../ui/Badge";
  6: 
  7: interface NextActivityCardProps {
  8:   plantId: string;
  9:   onTaskClick?: (taskType: string) => void;
 10:   className?: string;
 11: }
 12: 
 13: const NextActivityCard = ({
 14:   plantId,
 15:   onTaskClick,
 16:   className = "",
 17: }: NextActivityCardProps) => {
 18:   const { nextTask, isLoading } = useNextPlantTask(plantId);
 19: 
 20:   const getTaskIcon = (task: string): string => {
 21:     const taskLower = task.toLowerCase();
 22:     if (taskLower.includes("water")) return "💧";
 23:     if (taskLower.includes("fertiliz")) return "🌱";
 24:     if (taskLower.includes("observe") || taskLower.includes("check"))
 25:       return "👁️";
 26:     if (taskLower.includes("harvest")) return "🌾";
 27:     if (taskLower.includes("prune")) return "✂️";
 28:     return "📋";
 29:   };
 30: 
 31:   const getPriorityConfig = (priority: "low" | "medium" | "high") => {
 32:     switch (priority) {
 33:       case "high":
 34:         return {
 35:           color: "bg-red-100 text-red-800 border-red-200",
 36:           icon: <AlertTriangle className="h-3 w-3" />,
 37:           buttonStyle: "bg-red-500 hover:bg-red-600 text-white",
 38:         };
 39:       case "medium":
 40:         return {
 41:           color: "bg-orange-100 text-orange-800 border-orange-200",
 42:           icon: <Clock className="h-3 w-3" />,
 43:           buttonStyle: "bg-orange-500 hover:bg-orange-600 text-white",
 44:         };
 45:       case "low":
 46:         return {
 47:           color: "bg-green-100 text-green-800 border-green-200",
 48:           icon: <CheckCircle2 className="h-3 w-3" />,
 49:           buttonStyle: "bg-green-500 hover:bg-green-600 text-white",
 50:         };
 51:       default:
 52:         return {
 53:           color: "bg-gray-100 text-gray-800 border-gray-200",
 54:           icon: <Clock className="h-3 w-3" />,
 55:           buttonStyle: "bg-primary hover:bg-primary/90",
 56:         };
 57:     }
 58:   };
 59: 
 60:   const getActivityType = (taskDescription: string): string => {
 61:     const task = taskDescription.toLowerCase();
 62:     if (task.includes("water") || task.includes("watering")) return "water";
 63:     if (task.includes("fertiliz")) return "fertilize";
 64:     if (task.includes("health check") || task.includes("observe"))
 65:       return "observe";
 66:     if (task.includes("harvest")) return "harvest";
 67:     if (task.includes("transplant")) return "transplant";
 68:     return "water";
 69:   };
 70: 
 71:   const handleTaskClick = () => {
 72:     if (nextTask && onTaskClick) {
 73:       const activityType = getActivityType(nextTask.task);
 74:       onTaskClick(activityType);
 75:     }
 76:   };
 77: 
 78:   if (isLoading) {
 79:     return (
 80:       <Card className={`border-border shadow-sm ${className}`}>
 81:         <CardHeader className="pb-3">
 82:           <CardTitle className="flex items-center gap-2 text-base">
 83:             <Calendar className="h-4 w-4" />
 84:             Next Activity
 85:           </CardTitle>
 86:         </CardHeader>
 87:         <CardContent className="pt-0">
 88:           <div className="flex items-center gap-3">
 89:             <div className="h-8 w-8 bg-muted rounded-full animate-pulse"></div>
 90:             <div className="flex-1">
 91:               <div className="h-4 bg-muted rounded animate-pulse mb-2"></div>
 92:               <div className="h-3 bg-muted rounded animate-pulse w-2/3"></div>
 93:             </div>
 94:           </div>
 95:         </CardContent>
 96:       </Card>
 97:     );
 98:   }
 99: 
100:   if (!nextTask) {
101:     return (
102:       <Card className={`border-border shadow-sm ${className}`}>
103:         <CardHeader className="pb-3">
104:           <CardTitle className="flex items-center gap-2 text-base">
105:             <Calendar className="h-4 w-4" />
106:             Next Activity
107:           </CardTitle>
108:         </CardHeader>
109:         <CardContent className="pt-0">
110:           <div className="flex items-center gap-3 py-2">
111:             <div className="h-8 w-8 bg-green-100 rounded-full flex items-center justify-center">
112:               <CheckCircle2 className="h-4 w-4 text-green-600" />
113:             </div>
114:             <div className="flex-1">
115:               <div className="text-sm font-medium text-foreground">
116:                 All caught up!
117:               </div>
118:               <div className="text-xs text-muted-foreground">
119:                 No tasks scheduled
120:               </div>
121:             </div>
122:           </div>
123:         </CardContent>
124:       </Card>
125:     );
126:   }
127: 
128:   const priorityConfig = getPriorityConfig(nextTask.priority);
129: 
130:   return (
131:     <Card className={`border-border shadow-sm ${className}`}>
132:       <CardHeader className="pb-3">
133:         <CardTitle className="flex items-center gap-2 text-base">
134:           <Calendar className="h-4 w-4" />
135:           Next Activity
136:         </CardTitle>
137:       </CardHeader>
138:       <CardContent className="pt-0">
139:         <div className="space-y-3">
140:           {}
141:           <div className="flex items-start gap-3">
142:             <div className="h-8 w-8 bg-background border border-border rounded-full flex items-center justify-center text-lg">
143:               {getTaskIcon(nextTask.task)}
144:             </div>
145:             <div className="flex-1 min-w-0">
146:               <div className="flex items-center gap-2 mb-1">
147:                 <span className="text-sm font-medium text-foreground">
148:                   {nextTask.task}
149:                 </span>
150:                 <Badge
151:                   className={`${priorityConfig.color} text-xs px-2 py-0.5 flex items-center gap-1`}
152:                 >
153:                   {priorityConfig.icon}
154:                   {nextTask.priority}
155:                 </Badge>
156:               </div>
157:               <div className="text-xs text-muted-foreground">
158:                 {nextTask.dueIn}
159:               </div>
160:             </div>
161:           </div>
162: 
163:           {}
164:           {onTaskClick && (
165:             <Button
166:               onClick={handleTaskClick}
167:               className={`w-full ${priorityConfig.buttonStyle} text-sm py-2`}
168:               size="sm"
169:             >
170:               <span className="mr-2">{getTaskIcon(nextTask.task)}</span>
171:               Log {nextTask.task}
172:             </Button>
173:           )}
174:         </div>
175:       </CardContent>
176:     </Card>
177:   );
178: };
179: 
180: export default NextActivityCard;

================
File: src/components/plant/PlantGroupCard.tsx
================
  1: import { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { PlantGroup } from "@/utils/plantGrouping";
  4: import { Button } from "@/components/ui/Button";
  5: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  6: import { StatusBadge } from "@/components/ui/StatusBadge";
  7: import { useDynamicStage } from "@/hooks/useDynamicStage";
  8: 
  9: interface PlantGroupCardProps {
 10:   group: PlantGroup;
 11:   onBulkLogActivity: (plantIds: string[], activityType: string) => void;
 12: }
 13: 
 14: const PlantGroupCard = ({ group, onBulkLogActivity }: PlantGroupCardProps) => {
 15:   const navigate = useNavigate();
 16:   const [currentIndex, setCurrentIndex] = useState(0);
 17:   const [showBulkActions, setShowBulkActions] = useState(false);
 18:   const [showIndividualActions, setShowIndividualActions] = useState(false);
 19: 
 20:   const currentPlant = group.plants[currentIndex];
 21:   const hasMultiplePlants = group.plants.length > 1;
 22:   const calculatedStage = useDynamicStage(currentPlant);
 23: 
 24:   const goToPrevious = () => {
 25:     setCurrentIndex((prev) =>
 26:       prev === 0 ? group.plants.length - 1 : prev - 1
 27:     );
 28:   };
 29: 
 30:   const goToNext = () => {
 31:     setCurrentIndex((prev) =>
 32:       prev === group.plants.length - 1 ? 0 : prev + 1
 33:     );
 34:   };
 35: 
 36:   const handlePlantClick = () => {
 37:     navigate(`/plants/${currentPlant.id}`);
 38:   };
 39: 
 40:   const handleBulkAction = (activityType: string) => {
 41:     const plantIds = group.plants.map((p) => p.id);
 42:     onBulkLogActivity(plantIds, activityType);
 43:     setShowBulkActions(false);
 44:   };
 45: 
 46:   const handleIndividualAction = (activityType: string) => {
 47:     onBulkLogActivity([currentPlant.id], activityType);
 48:     setShowIndividualActions(false);
 49:   };
 50: 
 51:   return (
 52:     <Card className="hover:shadow-lg transition-shadow">
 53:       <CardHeader>
 54:         <div className="flex justify-between items-start">
 55:           <div className="flex-1">
 56:             <CardTitle className="text-lg flex items-center justify-between">
 57:               <span className="truncate">{currentPlant.name}</span>
 58:               <StatusBadge status="healthy" size="sm" />
 59:             </CardTitle>
 60: 
 61:             {hasMultiplePlants && (
 62:               <div className="flex items-center gap-2 mt-2">
 63:                 <Button
 64:                   variant="outline"
 65:                   size="sm"
 66:                   onClick={(e) => {
 67:                     e.stopPropagation();
 68:                     goToPrevious();
 69:                   }}
 70:                   className="h-8 w-8 p-0"
 71:                 >
 72:                   ←
 73:                 </Button>
 74:                 <span className="text-sm text-muted-foreground min-w-fit">
 75:                   {currentIndex + 1} of {group.plants.length}
 76:                 </span>
 77:                 <Button
 78:                   variant="outline"
 79:                   size="sm"
 80:                   onClick={(e) => {
 81:                     e.stopPropagation();
 82:                     goToNext();
 83:                   }}
 84:                   className="h-8 w-8 p-0"
 85:                 >
 86:                   →
 87:                 </Button>
 88:               </div>
 89:             )}
 90:           </div>
 91:         </div>
 92:       </CardHeader>
 93: 
 94:       <CardContent className="space-y-4">
 95:         <div className="cursor-pointer space-y-2" onClick={handlePlantClick}>
 96:           <div className="flex items-center gap-2">
 97:             <span className="text-xs font-medium bg-primary/10 text-primary px-2 py-1 rounded-full">
 98:               {currentPlant.varietyName}
 99:             </span>
100:             {hasMultiplePlants && (
101:               <span className="text-xs font-medium bg-secondary/50 text-secondary-foreground px-2 py-1 rounded-full">
102:                 {group.plants.length} plants
103:               </span>
104:             )}
105:           </div>
106: 
107:           <div className="grid grid-cols-2 gap-2 text-sm">
108:             <div>
109:               <span className="text-muted-foreground">Stage:</span>
110:               <div className="font-medium text-foreground capitalize">
111:                 {calculatedStage.replace("-", " ")}
112:               </div>
113:             </div>
114:             <div>
115:               <span className="text-muted-foreground">Planted:</span>
116:               <div className="font-medium text-foreground">
117:                 {currentPlant.plantedDate.toLocaleDateString()}
118:               </div>
119:             </div>
120:           </div>
121: 
122:           <div className="text-sm">
123:             <span className="text-muted-foreground">Location:</span>
124:             <span className="font-medium text-foreground ml-1">
125:               {currentPlant.location || "Not specified"}
126:             </span>
127:           </div>
128:         </div>
129: 
130:         <div className="border-t pt-3 space-y-3">
131:           <div className="space-y-3">
132:             <div className="flex items-center justify-between">
133:               <div>
134:                 <div className="text-sm font-medium text-primary">
135:                   {hasMultiplePlants
136:                     ? "Current Plant Actions"
137:                     : "Quick Actions"}
138:                 </div>
139:                 <div className="text-xs text-muted-foreground">
140:                   Log activity for {currentPlant.name}
141:                 </div>
142:               </div>
143:               <Button
144:                 variant="outline"
145:                 size="sm"
146:                 onClick={(e) => {
147:                   e.stopPropagation();
148:                   setShowIndividualActions(!showIndividualActions);
149:                 }}
150:                 className="text-primary border-primary/50 hover:bg-primary/10"
151:               >
152:                 {showIndividualActions
153:                   ? "Cancel"
154:                   : hasMultiplePlants
155:                   ? "Log One"
156:                   : "Log Care"}
157:               </Button>
158:             </div>
159: 
160:             {showIndividualActions && (
161:               <div className="grid grid-cols-2 gap-2">
162:                 <Button
163:                   size="sm"
164:                   onClick={(e) => {
165:                     e.stopPropagation();
166:                     handleIndividualAction("water");
167:                   }}
168:                   className="bg-blue-500 hover:bg-blue-600 text-white"
169:                 >
170:                   💧 Water
171:                 </Button>
172:                 <Button
173:                   size="sm"
174:                   onClick={(e) => {
175:                     e.stopPropagation();
176:                     handleIndividualAction("fertilize");
177:                   }}
178:                   className="bg-green-500 hover:bg-green-600 text-white"
179:                 >
180:                   🌱 Fertilize
181:                 </Button>
182:                 <Button
183:                   size="sm"
184:                   onClick={(e) => {
185:                     e.stopPropagation();
186:                     handleIndividualAction("observe");
187:                   }}
188:                   className="bg-orange-500 hover:bg-orange-600 text-white"
189:                 >
190:                   👁️ Inspect
191:                 </Button>
192:                 <Button
193:                   size="sm"
194:                   onClick={(e) => {
195:                     e.stopPropagation();
196:                     navigate(`/log-care/${currentPlant.id}`);
197:                   }}
198:                   variant="outline"
199:                 >
200:                   📝 More
201:                 </Button>
202:               </div>
203:             )}
204:           </div>
205: 
206:           {hasMultiplePlants && (
207:             <div className="border-t pt-3 space-y-3">
208:               <div className="flex items-center justify-between">
209:                 <div>
210:                   <div className="text-sm font-medium text-primary">
211:                     Group Actions
212:                   </div>
213:                   <div className="text-xs text-muted-foreground">
214:                     Log activity for all {group.plants.length} plants
215:                   </div>
216:                 </div>
217:                 <Button
218:                   variant="outline"
219:                   size="sm"
220:                   onClick={(e) => {
221:                     e.stopPropagation();
222:                     setShowBulkActions(!showBulkActions);
223:                   }}
224:                   className="text-primary border-primary/50 hover:bg-primary/10"
225:                 >
226:                   {showBulkActions ? "Cancel" : "Log All"}
227:                 </Button>
228:               </div>
229: 
230:               {showBulkActions && (
231:                 <div className="grid grid-cols-2 gap-2">
232:                   <Button
233:                     size="sm"
234:                     onClick={(e) => {
235:                       e.stopPropagation();
236:                       handleBulkAction("water");
237:                     }}
238:                     className="bg-blue-500 hover:bg-blue-600 text-white"
239:                   >
240:                     💧 Water All
241:                   </Button>
242:                   <Button
243:                     size="sm"
244:                     onClick={(e) => {
245:                       e.stopPropagation();
246:                       handleBulkAction("fertilize");
247:                     }}
248:                     className="bg-green-500 hover:bg-green-600 text-white"
249:                   >
250:                     🌱 Fertilize All
251:                   </Button>
252:                   <Button
253:                     size="sm"
254:                     onClick={(e) => {
255:                       e.stopPropagation();
256:                       handleBulkAction("observe");
257:                     }}
258:                     className="bg-orange-500 hover:bg-orange-600 text-white"
259:                   >
260:                     👁️ Inspect All
261:                   </Button>
262:                   <Button
263:                     size="sm"
264:                     onClick={(e) => {
265:                       e.stopPropagation();
266:                       handleBulkAction("note");
267:                     }}
268:                     className="bg-purple-500 hover:bg-purple-600 text-white"
269:                   >
270:                     📝 Note All
271:                   </Button>
272:                 </div>
273:               )}
274:             </div>
275:           )}
276:         </div>
277:       </CardContent>
278:     </Card>
279:   );
280: };
281: 
282: export default PlantGroupCard;

================
File: src/components/plant/PlantInfoCard.tsx
================
  1: import { useState } from "react";
  2: import { Card, CardContent } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { Badge } from "@/components/ui/Badge";
  5: import { PlantRecord } from "@/types/database";
  6: import { useDynamicStage } from "@/hooks/useDynamicStage";
  7: import { formatDate, getDaysSincePlanting } from "@/utils/dateUtils";
  8: import { getPlantDisplayName } from "@/utils/plantDisplay";
  9: import { useNavigate } from "react-router-dom";
 10: import { Calendar, MapPin, Package } from "lucide-react";
 11: 
 12: interface PlantInfoCardProps {
 13:   plant: PlantRecord;
 14:   onLogCare?: (plantId: string, activityType: string) => void;
 15:   className?: string;
 16:   showQuickActions?: boolean;
 17: }
 18: 
 19: const PlantInfoCard = ({
 20:   plant,
 21:   onLogCare,
 22:   className = "",
 23:   showQuickActions = true,
 24: }: PlantInfoCardProps) => {
 25:   const [showActions, setShowActions] = useState(false);
 26:   const navigate = useNavigate();
 27:   const stage = useDynamicStage(plant);
 28:   const daysSincePlanting = getDaysSincePlanting(plant.plantedDate);
 29:   const plantDisplayName = getPlantDisplayName(plant);
 30: 
 31:   const handleQuickAction = (activityType: string) => {
 32:     if (onLogCare) {
 33:       onLogCare(plant.id, activityType);
 34:     } else {
 35:       // Default navigation if no custom handler
 36:       const params = new URLSearchParams();
 37:       params.set("plantId", plant.id);
 38:       params.set("type", activityType);
 39:       navigate(`/log-care?${params.toString()}`);
 40:     }
 41:   };
 42: 
 43:   const handleCardClick = () => {
 44:     navigate(`/plants/${plant.id}`);
 45:   };
 46: 
 47:   return (
 48:     <Card
 49:       className={`transition-all duration-200 hover:shadow-md ${className}`}
 50:     >
 51:       <CardContent className="p-4">
 52:         {}
 53:         <div onClick={handleCardClick} className="cursor-pointer space-y-3">
 54:           {}
 55:           <div className="flex items-start justify-between">
 56:             <div className="flex-1">
 57:               <h3 className="font-semibold text-foreground text-lg leading-tight">
 58:                 {plantDisplayName}
 59:               </h3>
 60:               <div className="flex items-center gap-2 mt-1">
 61:                 <Badge variant="secondary" className="text-xs">
 62:                   {stage}
 63:                 </Badge>
 64:                 <span className="text-xs text-muted-foreground">
 65:                   Day {daysSincePlanting}
 66:                 </span>
 67:               </div>
 68:             </div>
 69:           </div>
 70: 
 71:           {}
 72:           <div className="space-y-2 text-sm">
 73:             <div className="flex items-center gap-2 text-muted-foreground">
 74:               <Calendar size={14} />
 75:               <span>Planted {formatDate(plant.plantedDate)}</span>
 76:             </div>
 77: 
 78:             {plant.location && (
 79:               <div className="flex items-center gap-2 text-muted-foreground">
 80:                 <MapPin size={14} />
 81:                 <span>{plant.location}</span>
 82:               </div>
 83:             )}
 84: 
 85:             {plant.container && (
 86:               <div className="flex items-center gap-2 text-muted-foreground">
 87:                 <Package size={14} />
 88:                 <span>{plant.container}</span>
 89:               </div>
 90:             )}
 91:           </div>
 92:         </div>
 93: 
 94:         {}
 95:         {showQuickActions && (
 96:           <div className="mt-4 pt-3 border-t border-border">
 97:             <div className="flex items-center justify-between">
 98:               <div>
 99:                 <div className="text-sm font-medium text-primary">
100:                   Quick Actions
101:                 </div>
102:                 <div className="text-xs text-muted-foreground">
103:                   Log activity for this plant
104:                 </div>
105:               </div>
106:               <Button
107:                 variant="outline"
108:                 size="sm"
109:                 onClick={(e) => {
110:                   e.stopPropagation();
111:                   setShowActions(!showActions);
112:                 }}
113:                 className="text-primary border-primary/50 hover:bg-primary/10"
114:               >
115:                 {showActions ? "Cancel" : "Log Care"}
116:               </Button>
117:             </div>
118: 
119:             {showActions && (
120:               <div className="grid grid-cols-2 gap-2 mt-3">
121:                 <Button
122:                   size="sm"
123:                   onClick={(e) => {
124:                     e.stopPropagation();
125:                     handleQuickAction("water");
126:                   }}
127:                   className="bg-blue-500 hover:bg-blue-600 text-white"
128:                 >
129:                   💧 Water
130:                 </Button>
131:                 <Button
132:                   size="sm"
133:                   onClick={(e) => {
134:                     e.stopPropagation();
135:                     handleQuickAction("fertilize");
136:                   }}
137:                   className="bg-green-500 hover:bg-green-600 text-white"
138:                 >
139:                   🌱 Fertilize
140:                 </Button>
141:                 <Button
142:                   size="sm"
143:                   onClick={(e) => {
144:                     e.stopPropagation();
145:                     handleQuickAction("observe");
146:                   }}
147:                   className="bg-orange-500 hover:bg-orange-600 text-white"
148:                 >
149:                   👁️ Inspect
150:                 </Button>
151:                 <Button
152:                   size="sm"
153:                   onClick={(e) => {
154:                     e.stopPropagation();
155:                     handleQuickAction("photo");
156:                   }}
157:                   className="bg-purple-500 hover:bg-purple-600 text-white"
158:                 >
159:                   📸 Photo
160:                 </Button>
161:               </div>
162:             )}
163:           </div>
164:         )}
165:       </CardContent>
166:     </Card>
167:   );
168: };
169: 
170: export default PlantInfoCard;

================
File: src/components/ui/Badge.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
 5:   variant?: "default" | "secondary" | "destructive" | "outline";
 6:   size?: "sm" | "md" | "lg";
 7:   children: React.ReactNode;
 8:   className?: string;
 9: }
10: 
11: export const Badge = ({
12:   variant = "default",
13:   size = "md",
14:   children,
15:   className,
16:   ...props
17: }: BadgeProps) => {
18:   const baseClasses =
19:     "inline-flex items-center font-medium rounded-full border";
20: 
21:   const variantClasses = {
22:     default: "bg-primary text-primary-foreground border-primary",
23:     secondary: "bg-secondary text-secondary-foreground border-secondary",
24:     destructive:
25:       "bg-destructive text-destructive-foreground border-destructive",
26:     outline: "text-foreground border-border bg-transparent",
27:   };
28: 
29:   const sizeClasses = {
30:     sm: "px-2 py-0.5 text-xs",
31:     md: "px-2.5 py-1 text-sm",
32:     lg: "px-3 py-1.5 text-base",
33:   };
34: 
35:   return (
36:     <div
37:       className={cn(
38:         baseClasses,
39:         variantClasses[variant],
40:         sizeClasses[size],
41:         className
42:       )}
43:       {...props}
44:     >
45:       {children}
46:     </div>
47:   );
48: };
49: 
50: export default Badge;

================
File: src/components/ui/Input.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
 5:   className?: string;
 6: }
 7: 
 8: export const Input: React.FC<InputProps> = ({
 9:   className,
10:   type = "text",
11:   ...props
12: }) => {
13:   return (
14:     <input
15:       type={type}
16:       className={cn(
17:         "flex h-10 w-full rounded-md border border-border bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
18:         className
19:       )}
20:       {...props}
21:     />
22:   );
23: };

================
File: src/components/AuthForm.tsx
================
 1: import React, { useState } from "react";
 2: import { useFirebaseAuth } from "../hooks/useFirebaseAuth";
 3: import { Card, CardContent, CardHeader, CardTitle } from "./ui/Card";
 4: import { Button } from "./ui/Button";
 5: import { Input } from "./ui/Input";
 6: 
 7: export const AuthForm = () => {
 8:   const [isSignUp, setIsSignUp] = useState(false);
 9:   const [email, setEmail] = useState("");
10:   const [password, setPassword] = useState("");
11:   const [displayName, setDisplayName] = useState("");
12:   const { signIn, signUp, loading, error } = useFirebaseAuth();
13: 
14:   const handleSubmit = async (e: React.FormEvent) => {
15:     e.preventDefault();
16: 
17:     try {
18:       if (isSignUp) {
19:         await signUp(email, password, displayName);
20:       } else {
21:         await signIn(email, password);
22:       }
23:     } catch {
24:       // Error is handled by the hook
25:     }
26:   };
27: 
28:   return (
29:     <div className="min-h-screen flex items-center justify-center bg-gray-50">
30:       <Card className="w-full max-w-md">
31:         <CardHeader>
32:           <CardTitle className="text-center">
33:             {isSignUp ? "Create Account" : "Sign In"}
34:           </CardTitle>
35:         </CardHeader>
36:         <CardContent>
37:           <form onSubmit={handleSubmit} className="space-y-4">
38:             {isSignUp && (
39:               <Input
40:                 type="text"
41:                 placeholder="Display Name"
42:                 value={displayName}
43:                 onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
44:                   setDisplayName(e.target.value)
45:                 }
46:                 required
47:               />
48:             )}
49:             <Input
50:               type="email"
51:               placeholder="Email"
52:               value={email}
53:               onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
54:                 setEmail(e.target.value)
55:               }
56:               required
57:             />
58:             <Input
59:               type="password"
60:               placeholder="Password"
61:               value={password}
62:               onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
63:                 setPassword(e.target.value)
64:               }
65:               required
66:             />
67: 
68:             {error && <div className="text-red-600 text-sm">{error}</div>}
69: 
70:             <Button type="submit" className="w-full" loading={loading}>
71:               {isSignUp ? "Create Account" : "Sign In"}
72:             </Button>
73: 
74:             <Button
75:               type="button"
76:               variant="ghost"
77:               className="w-full"
78:               onClick={() => setIsSignUp(!isSignUp)}
79:             >
80:               {isSignUp
81:                 ? "Already have an account? Sign in"
82:                 : "Don't have an account? Sign up"}
83:             </Button>
84:           </form>
85:         </CardContent>
86:       </Card>
87:     </div>
88:   );
89: };

================
File: src/hooks/useFirebaseAuth.ts
================
 1: import { useState, useEffect } from "react";
 2: import { User } from "firebase/auth";
 3: import { FirebaseAuthService } from "../services/firebase/authService";
 4: 
 5: export function useFirebaseAuth() {
 6:   const [user, setUser] = useState<User | null>(null);
 7:   const [loading, setLoading] = useState(true);
 8:   const [error, setError] = useState<string | null>(null);
 9: 
10:   useEffect(() => {
11:     const unsubscribe = FirebaseAuthService.onAuthStateChanged((user) => {
12:       setUser(user);
13:       setLoading(false);
14:     });
15: 
16:     return unsubscribe;
17:   }, []);
18: 
19:   const signIn = async (email: string, password: string) => {
20:     try {
21:       setError(null);
22:       setLoading(true);
23:       await FirebaseAuthService.signIn(email, password);
24:     } catch (err) {
25:       setError(err instanceof Error ? err.message : "Sign in failed");
26:       throw err;
27:     } finally {
28:       setLoading(false);
29:     }
30:   };
31: 
32:   const signUp = async (
33:     email: string,
34:     password: string,
35:     displayName?: string
36:   ) => {
37:     try {
38:       setError(null);
39:       setLoading(true);
40:       await FirebaseAuthService.signUp(email, password, displayName);
41:     } catch (err) {
42:       setError(err instanceof Error ? err.message : "Sign up failed");
43:       throw err;
44:     } finally {
45:       setLoading(false);
46:     }
47:   };
48: 
49:   const signOut = async () => {
50:     try {
51:       setError(null);
52:       await FirebaseAuthService.signOut();
53:     } catch (err) {
54:       setError(err instanceof Error ? err.message : "Sign out failed");
55:       throw err;
56:     }
57:   };
58: 
59:   const resetPassword = async (email: string) => {
60:     try {
61:       setError(null);
62:       await FirebaseAuthService.resetPassword(email);
63:     } catch (err) {
64:       setError(err instanceof Error ? err.message : "Password reset failed");
65:       throw err;
66:     }
67:   };
68: 
69:   return {
70:     user,
71:     loading,
72:     error,
73:     signIn,
74:     signUp,
75:     signOut,
76:     resetPassword,
77:   };
78: }

================
File: src/hooks/useFirebaseCareActivities.ts
================
 1: import { useState, useEffect } from "react";
 2: import { FirebaseCareActivityService } from "../services/firebase/careActivityService";
 3: import { useFirebaseAuth } from "./useFirebaseAuth";
 4: import { CareRecord } from "@/types";
 5: 
 6: export function useFirebaseCareActivities(plantId?: string) {
 7:   const [activities, setActivities] = useState<CareRecord[]>([]);
 8:   const [loading, setLoading] = useState(true);
 9:   const [error, setError] = useState<string | null>(null);
10:   const { user } = useFirebaseAuth();
11: 
12:   useEffect(() => {
13:     if (!user) {
14:       setActivities([]);
15:       setLoading(false);
16:       return;
17:     }
18: 
19:     const unsubscribe = plantId
20:       ? FirebaseCareActivityService.subscribeToPlantActivities(
21:           plantId,
22:           (updatedActivities) => {
23:             setActivities(updatedActivities);
24:             setLoading(false);
25:             setError(null);
26:           }
27:         )
28:       : FirebaseCareActivityService.subscribeToUserActivities(
29:           user.uid,
30:           (updatedActivities) => {
31:             setActivities(updatedActivities);
32:             setLoading(false);
33:             setError(null);
34:           }
35:         );
36: 
37:     return unsubscribe;
38:   }, [user, plantId]);
39: 
40:   const logActivity = async (
41:     activity: Omit<CareRecord, "id" | "createdAt" | "updatedAt">
42:   ) => {
43:     try {
44:       if (!user) throw new Error("User not authenticated");
45:       setError(null);
46:       return await FirebaseCareActivityService.createCareActivity(
47:         activity,
48:         user.uid
49:       );
50:     } catch (err) {
51:       const errorMessage =
52:         err instanceof Error ? err.message : "Failed to log activity";
53:       setError(errorMessage);
54:       throw new Error(errorMessage);
55:     }
56:   };
57: 
58:   return {
59:     activities,
60:     loading,
61:     error,
62:     logActivity,
63:   };
64: }

================
File: src/hooks/useFirebasePlants.ts
================
 1: import { useState, useEffect } from "react";
 2: import { FirebasePlantService } from "../services/firebase/plantService";
 3: import { PlantRecord } from "../types/database";
 4: import { useFirebaseAuth } from "./useFirebaseAuth";
 5: 
 6: export function useFirebasePlants(includeInactive = false) {
 7:   const [plants, setPlants] = useState<PlantRecord[]>([]);
 8:   const [loading, setLoading] = useState(true);
 9:   const [error, setError] = useState<string | null>(null);
10:   const { user } = useFirebaseAuth();
11: 
12:   useEffect(() => {
13:     if (!user) {
14:       setPlants([]);
15:       setLoading(false);
16:       return;
17:     }
18: 
19:     const unsubscribe = FirebasePlantService.subscribeToPlantsChanges(
20:       user.uid,
21:       (updatedPlants) => {
22:         setPlants(updatedPlants);
23:         setLoading(false);
24:         setError(null);
25:       },
26:       { includeInactive }
27:     );
28: 
29:     return unsubscribe;
30:   }, [user, includeInactive]);
31: 
32:   const createPlant = async (
33:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">
34:   ) => {
35:     try {
36:       if (!user) throw new Error("User not authenticated");
37:       setError(null);
38:       return await FirebasePlantService.createPlant(plant, user.uid);
39:     } catch (err) {
40:       const errorMessage =
41:         err instanceof Error ? err.message : "Failed to create plant";
42:       setError(errorMessage);
43:       throw new Error(errorMessage);
44:     }
45:   };
46: 
47:   const updatePlant = async (
48:     plantId: string,
49:     updates: Partial<PlantRecord>
50:   ) => {
51:     try {
52:       setError(null);
53:       await FirebasePlantService.updatePlant(plantId, updates);
54:     } catch (err) {
55:       const errorMessage =
56:         err instanceof Error ? err.message : "Failed to update plant";
57:       setError(errorMessage);
58:       throw new Error(errorMessage);
59:     }
60:   };
61: 
62:   const deletePlant = async (plantId: string) => {
63:     try {
64:       setError(null);
65:       await FirebasePlantService.deletePlant(plantId);
66:     } catch (err) {
67:       const errorMessage =
68:         err instanceof Error ? err.message : "Failed to delete plant";
69:       setError(errorMessage);
70:       throw new Error(errorMessage);
71:     }
72:   };
73: 
74:   return {
75:     plants,
76:     loading,
77:     error,
78:     createPlant,
79:     updatePlant,
80:     deletePlant,
81:   };
82: }

================
File: src/services/firebase/__mocks__/config.ts
================
1: export const db = {};
2: export const auth = {};
3: export const storage = {};
4: export const enableOfflineMode = jest.fn();
5: export const enableOnlineMode = jest.fn();

================
File: src/services/firebase/authService.ts
================
 1: import {
 2:   signInWithEmailAndPassword,
 3:   createUserWithEmailAndPassword,
 4:   signOut,
 5:   onAuthStateChanged,
 6:   User,
 7:   updateProfile,
 8:   sendPasswordResetEmail,
 9: } from "firebase/auth";
10: import { auth } from "./config";
11: 
12: export class FirebaseAuthService {
13:   static async signIn(email: string, password: string): Promise<User> {
14:     const result = await signInWithEmailAndPassword(auth, email, password);
15:     return result.user;
16:   }
17: 
18:   static async signUp(
19:     email: string,
20:     password: string,
21:     displayName?: string
22:   ): Promise<User> {
23:     const result = await createUserWithEmailAndPassword(auth, email, password);
24: 
25:     if (displayName) {
26:       await updateProfile(result.user, { displayName });
27:     }
28: 
29:     return result.user;
30:   }
31: 
32:   static async signOut(): Promise<void> {
33:     await signOut(auth);
34:   }
35: 
36:   static async resetPassword(email: string): Promise<void> {
37:     await sendPasswordResetEmail(auth, email);
38:   }
39: 
40:   static onAuthStateChanged(callback: (user: User | null) => void): () => void {
41:     return onAuthStateChanged(auth, callback);
42:   }
43: 
44:   static getCurrentUser(): User | null {
45:     return auth.currentUser;
46:   }
47: }

================
File: src/services/firebase/careActivityService.ts
================
 1: import {
 2:   collection,
 3:   addDoc,
 4:   onSnapshot,
 5:   query,
 6:   where,
 7:   orderBy,
 8:   limit,
 9: } from "firebase/firestore";
10: import { db } from "./config";
11: import {
12:   FirebaseCareRecord,
13:   convertCareActivityToFirebase,
14:   convertCareActivityFromFirebase,
15: } from "../../types/firebase";
16: import { CareRecord } from "../../types/database";
17: 
18: export class FirebaseCareActivityService {
19:   private static careActivitiesCollection = collection(db, "careActivities");
20: 
21:   static async createCareActivity(
22:     activity: Omit<CareRecord, "id" | "createdAt" | "updatedAt">,
23:     userId: string
24:   ): Promise<string> {
25:     const activityWithDates: CareRecord = {
26:       ...activity,
27:       id: "", // Will be set by Firebase
28:       createdAt: new Date(),
29:       updatedAt: new Date(),
30:     };
31: 
32:     const firebaseActivity = convertCareActivityToFirebase(
33:       activityWithDates,
34:       userId
35:     );
36:     const docRef = await addDoc(
37:       this.careActivitiesCollection,
38:       firebaseActivity
39:     );
40:     return docRef.id;
41:   }
42: 
43:   static subscribeToPlantActivities(
44:     plantId: string,
45:     callback: (activities: CareRecord[]) => void,
46:     limitCount = 50
47:   ): () => void {
48:     const activitiesQuery = query(
49:       this.careActivitiesCollection,
50:       where("plantId", "==", plantId),
51:       orderBy("date", "desc"),
52:       limit(limitCount)
53:     );
54: 
55:     return onSnapshot(activitiesQuery, (snapshot) => {
56:       const activities = snapshot.docs.map((doc) => {
57:         const data = doc.data() as FirebaseCareRecord;
58:         return convertCareActivityFromFirebase({ ...data, id: doc.id });
59:       });
60:       callback(activities);
61:     });
62:   }
63: 
64:   static subscribeToUserActivities(
65:     userId: string,
66:     callback: (activities: CareRecord[]) => void,
67:     limitCount = 100
68:   ): () => void {
69:     const activitiesQuery = query(
70:       this.careActivitiesCollection,
71:       where("userId", "==", userId),
72:       orderBy("date", "desc"),
73:       limit(limitCount)
74:     );
75: 
76:     return onSnapshot(activitiesQuery, (snapshot) => {
77:       const activities = snapshot.docs.map((doc) => {
78:         const data = doc.data() as FirebaseCareRecord;
79:         return convertCareActivityFromFirebase({ ...data, id: doc.id });
80:       });
81:       callback(activities);
82:     });
83:   }
84: }

================
File: src/services/firebase/config.ts
================
 1: import { initializeApp } from "firebase/app";
 2: import { getAuth } from "firebase/auth";
 3: import { getFirestore } from "firebase/firestore";
 4: import { getStorage } from "firebase/storage";
 5: 
 6: 
 7: const firebaseConfig = {
 8:   apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
 9:   authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
10:   projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
11:   storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
12:   messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
13:   appId: import.meta.env.VITE_FIREBASE_APP_ID,
14: };
15: 
16: 
17: const app = initializeApp(firebaseConfig);
18: 
19: 
20: export const auth = getAuth(app);
21: export const db = getFirestore(app);
22: export const storage = getStorage(app);

================
File: src/services/firebase/plantService.ts
================
  1: import {
  2:   collection,
  3:   doc,
  4:   addDoc,
  5:   updateDoc,
  6:   onSnapshot,
  7:   query,
  8:   where,
  9:   orderBy,
 10:   Timestamp,
 11:   writeBatch,
 12: } from "firebase/firestore";
 13: import { db } from "./config";
 14: import {
 15:   FirebasePlantRecord,
 16:   convertPlantToFirebase,
 17:   convertPlantFromFirebase,
 18: } from "../../types/firebase";
 19: import { PlantRecord } from "../../types/database";
 20: 
 21: export class FirebasePlantService {
 22:   private static plantsCollection = collection(db, "plants");
 23: 
 24:   static async createPlant(
 25:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">,
 26:     userId: string
 27:   ): Promise<string> {
 28:     const plantWithDates: PlantRecord = {
 29:       ...plant,
 30:       id: "", // Will be set by Firebase
 31:       createdAt: new Date(),
 32:       updatedAt: new Date(),
 33:     };
 34: 
 35:     const firebasePlant = convertPlantToFirebase(plantWithDates, userId);
 36:     const docRef = await addDoc(this.plantsCollection, firebasePlant);
 37:     return docRef.id;
 38:   }
 39: 
 40:   static async updatePlant(
 41:     plantId: string,
 42:     updates: Partial<PlantRecord>
 43:   ): Promise<void> {
 44:     const plantRef = doc(this.plantsCollection, plantId);
 45:     const firebaseUpdates = {
 46:       ...updates,
 47:       updatedAt: Timestamp.now(),
 48:       ...(updates.plantedDate && {
 49:         plantedDate: Timestamp.fromDate(updates.plantedDate),
 50:       }),
 51:     };
 52: 
 53:     await updateDoc(plantRef, firebaseUpdates);
 54:   }
 55: 
 56:   static async deletePlant(plantId: string): Promise<void> {
 57:     // Soft delete - mark as inactive
 58:     await this.updatePlant(plantId, { isActive: false });
 59:   }
 60: 
 61:   static async hardDeletePlant(plantId: string): Promise<void> {
 62:     const batch = writeBatch(db);
 63: 
 64:     // Delete the plant
 65:     const plantRef = doc(this.plantsCollection, plantId);
 66:     batch.delete(plantRef);
 67: 
 68:     // Note: In a real implementation, you'd also delete associated care activities
 69:     await batch.commit();
 70:   }
 71: 
 72:   static subscribeToPlantsChanges(
 73:     userId: string,
 74:     callback: (plants: PlantRecord[]) => void,
 75:     options?: { includeInactive?: boolean }
 76:   ): () => void {
 77:     const constraints = [
 78:       where("userId", "==", userId),
 79:       orderBy("createdAt", "desc"),
 80:     ];
 81: 
 82:     if (!options?.includeInactive) {
 83:       constraints.push(where("isActive", "==", true));
 84:     }
 85: 
 86:     const plantsQuery = query(this.plantsCollection, ...constraints);
 87: 
 88:     return onSnapshot(plantsQuery, (snapshot) => {
 89:       const plants = snapshot.docs.map((doc) => {
 90:         const data = doc.data() as FirebasePlantRecord;
 91:         return convertPlantFromFirebase({ ...data, id: doc.id });
 92:       });
 93:       callback(plants);
 94:     });
 95:   }
 96: 
 97:   static async getPlant(plantId: string): Promise<PlantRecord | null> {
 98:     return new Promise((resolve) => {
 99:       const plantRef = doc(this.plantsCollection, plantId);
100:       const unsubscribe = onSnapshot(plantRef, (doc) => {
101:         if (doc.exists()) {
102:           const data = doc.data() as FirebasePlantRecord;
103:           resolve(convertPlantFromFirebase({ ...data, id: doc.id }));
104:         } else {
105:           resolve(null);
106:         }
107:         unsubscribe();
108:       });
109:     });
110:   }
111: }

================
File: src/services/bulkActivityService.ts
================
 1: import { CareActivityType } from "@/types";
 2: import { careService } from "@/types/database";
 3: import { CareActivityDetails } from "@/types/database";
 4: 
 5: export interface BulkActivityData {
 6:   type: CareActivityType;
 7:   date?: Date;
 8:   details: Partial<CareActivityDetails>;
 9: }
10: 
11: export class BulkActivityService {
12:   static async logActivityForPlants(
13:     plantIds: string[],
14:     activityData: BulkActivityData
15:   ): Promise<string[]> {
16:     const results: string[] = [];
17:     const date = activityData.date || new Date();
18: 
19:     for (const plantId of plantIds) {
20:       try {
21:         const careId = await careService.addCareActivity({
22:           plantId,
23:           type: activityData.type,
24:           date,
25:           details: {
26:             type: activityData.type,
27:             ...activityData.details,
28:           } as CareActivityDetails,
29:         });
30:         results.push(careId);
31:       } catch (error) {
32:         console.error(`Failed to log activity for plant ${plantId}:`, error);
33:       }
34:     }
35: 
36:     return results;
37:   }
38: 
39:   static async createBulkWateringActivity(
40:     amount: number,
41:     unit: string,
42:     moistureBefore?: number,
43:     moistureAfter?: number,
44:     notes?: string
45:   ): Promise<BulkActivityData> {
46:     return {
47:       type: "water",
48:       details: {
49:         type: "water",
50:         amount: { value: amount, unit: unit as any },
51:         moistureReading:
52:           moistureBefore && moistureAfter
53:             ? {
54:                 before: moistureBefore,
55:                 after: moistureAfter,
56:                 scale: "1-10" as const,
57:               }
58:             : undefined,
59:         notes,
60:       },
61:     };
62:   }
63: 
64:   static async createBulkFertilizeActivity(
65:     product: string,
66:     dilution: string,
67:     amount: string,
68:     notes?: string
69:   ): Promise<BulkActivityData> {
70:     return {
71:       type: "fertilize",
72:       details: {
73:         type: "fertilize",
74:         product,
75:         dilution,
76:         amount,
77:         notes,
78:       },
79:     };
80:   }
81: 
82:   static async createBulkObservationActivity(
83:     healthAssessment: "excellent" | "good" | "fair" | "concerning" | "critical",
84:     observations: string,
85:     notes?: string
86:   ): Promise<BulkActivityData> {
87:     return {
88:       type: "observe",
89:       details: {
90:         type: "observe",
91:         healthAssessment,
92:         observations,
93:         notes,
94:       },
95:     };
96:   }
97: }

================
File: src/services/BypassService.ts
================
  1: import { db, TaskBypassRecord } from "@/types/database";
  2: import { CareActivityType, GrowthStage } from "@/types/core";
  3: import { subMonths } from "date-fns";
  4: 
  5: export interface BypassPattern {
  6:   plantId: string;
  7:   taskType: CareActivityType;
  8:   commonReasons: string[];
  9:   frequency: number;
 10:   seasonalPattern?: {
 11:     season: string;
 12:     frequency: number;
 13:   }[];
 14:   confidenceScore: number;
 15: }
 16: 
 17: export interface BypassInsight {
 18:   plantId: string;
 19:   pattern: BypassPattern;
 20:   recommendation: string;
 21:   shouldAdjustSchedule: boolean;
 22:   adjustmentDays?: number;
 23: }
 24: 
 25: export class BypassService {
 26: 
 27: 
 28: 
 29: 
 30:   static async logBypass(
 31:     taskId: string,
 32:     plantId: string,
 33:     taskType: CareActivityType,
 34:     reason: string,
 35:     dueDate: Date,
 36:     plantStage: GrowthStage,
 37:     moistureLevel?: number,
 38:     weatherConditions?: string
 39:   ): Promise<void> {
 40:     try {
 41:       const now = new Date();
 42:       const bypassId = crypto.randomUUID();
 43: 
 44: 
 45:       await db.taskBypasses.add({
 46:         id: bypassId,
 47:         taskId,
 48:         plantId,
 49:         taskType,
 50:         reason,
 51:         scheduledDate: dueDate,
 52:         bypassDate: now,
 53:         plantStage,
 54:         createdAt: now,
 55:         updatedAt: now,
 56:       });
 57: 
 58: 
 59:       await db.bypassLog.add({
 60:         id: crypto.randomUUID(),
 61:         taskId,
 62:         plantId,
 63:         taskType,
 64:         reason,
 65:         bypassedAt: now,
 66:         plantStage,
 67:         dueDate,
 68:         moistureLevel,
 69:         weatherConditions,
 70:       });
 71: 
 72: 
 73:       await db.careActivities.add({
 74:         id: crypto.randomUUID(),
 75:         plantId,
 76:         type: "observe",
 77:         date: now,
 78:         details: {
 79:           type: "observe",
 80:           healthAssessment: "good",
 81:           observations: `Task bypassed: ${reason}`,
 82:           notes: `Bypassed ${taskType} task - ${reason}`,
 83:         },
 84:         createdAt: now,
 85:         updatedAt: now,
 86:       });
 87:     } catch (error) {
 88:       console.error("Failed to log bypass:", error);
 89:       throw error;
 90:     }
 91:   }
 92: 
 93: 
 94: 
 95: 
 96:   static async getBypassPatterns(
 97:     plantId?: string,
 98:     monthsBack: number = 6
 99:   ): Promise<BypassPattern[]> {
100:     try {
101:       const cutoffDate = subMonths(new Date(), monthsBack);
102:       let query = db.taskBypasses.where("bypassDate").above(cutoffDate);
103: 
104:       if (plantId) {
105:         query = query.and(
106:           (bypass: TaskBypassRecord) => bypass.plantId === plantId
107:         );
108:       }
109: 
110:       const bypasses = await query.toArray();
111:       return this.analyzeBypassPatterns(bypasses);
112:     } catch (error) {
113:       console.error("Failed to get bypass patterns:", error);
114:       return [];
115:     }
116:   }
117: 
118: 
119: 
120: 
121:   static async generateBypassInsights(
122:     plantId?: string
123:   ): Promise<BypassInsight[]> {
124:     try {
125:       const patterns = await this.getBypassPatterns(plantId);
126:       const insights: BypassInsight[] = [];
127: 
128:       for (const pattern of patterns) {
129:         let shouldAdjustSchedule = false;
130:         let adjustmentDays: number | undefined;
131:         let recommendation = "";
132: 
133:         if (pattern.frequency > 2) {
134:           shouldAdjustSchedule = true;
135:           adjustmentDays = Math.round(pattern.frequency * 2);
136: 
137:           if (pattern.commonReasons.includes("looks healthy")) {
138:             recommendation = `Consider extending ${pattern.taskType} interval by ${adjustmentDays} days. Your plant consistently appears healthy when bypassing.`;
139:           } else if (pattern.commonReasons.includes("weather")) {
140:             recommendation = `Consider weather-based scheduling adjustments.`;
141:           }
142:         }
143: 
144:         if (!recommendation) {
145:           recommendation = `You've bypassed ${pattern.taskType} ${Math.round(
146:             pattern.frequency
147:           )} times per month. Consider if schedule adjustments would be helpful.`;
148:         }
149: 
150:         insights.push({
151:           plantId: pattern.plantId,
152:           pattern,
153:           recommendation,
154:           shouldAdjustSchedule,
155:           adjustmentDays,
156:         });
157:       }
158: 
159:       return insights;
160:     } catch (error) {
161:       console.error("Failed to generate bypass insights:", error);
162:       return [];
163:     }
164:   }
165: 
166:   private static analyzeBypassPatterns(
167:     bypasses: TaskBypassRecord[]
168:   ): BypassPattern[] {
169:     const groupedBypasses = bypasses.reduce(
170:       (acc: Record<string, TaskBypassRecord[]>, bypass: TaskBypassRecord) => {
171:         const key = `${bypass.plantId}-${bypass.taskType}`;
172:         if (!acc[key]) {
173:           acc[key] = [];
174:         }
175:         acc[key].push(bypass);
176:         return acc;
177:       },
178:       {}
179:     );
180: 
181:     const patterns: BypassPattern[] = [];
182: 
183:     for (const [key, plantBypasses] of Object.entries(groupedBypasses)) {
184:       if (plantBypasses.length < 2) continue;
185: 
186:       const [plantId, taskType] = key.split("-");
187:       const commonReasons = this.extractCommonReasons(plantBypasses);
188:       const frequency = plantBypasses.length / 6;
189:       const seasonalPattern = this.calculateSeasonalPattern(plantBypasses);
190: 
191:       patterns.push({
192:         plantId,
193:         taskType: taskType as CareActivityType,
194:         commonReasons,
195:         frequency,
196:         seasonalPattern,
197:         confidenceScore: Math.min(plantBypasses.length / 10, 1),
198:       });
199:     }
200: 
201:     return patterns.sort(
202:       (a: BypassPattern, b: BypassPattern) =>
203:         b.confidenceScore - a.confidenceScore
204:     );
205:   }
206: 
207:   private static extractCommonReasons(bypasses: TaskBypassRecord[]): string[] {
208:     const reasonCounts: Record<string, number> = {};
209:     bypasses.forEach((bypass: TaskBypassRecord) => {
210:       const reason = bypass.reason.toLowerCase().trim();
211:       reasonCounts[reason] = (reasonCounts[reason] || 0) + 1;
212:     });
213: 
214:     return Object.entries(reasonCounts)
215:       .filter(([, count]) => count >= 2)
216:       .sort(([, a], [, b]) => b - a)
217:       .slice(0, 3)
218:       .map(([reason]) => reason);
219:   }
220: 
221:   private static calculateSeasonalPattern(bypasses: TaskBypassRecord[]) {
222:     const seasonCounts: Record<string, number> = {
223:       winter: 0,
224:       spring: 0,
225:       summer: 0,
226:       fall: 0,
227:     };
228: 
229:     bypasses.forEach((bypass: TaskBypassRecord) => {
230:       const month = new Date(bypass.bypassDate).getMonth();
231:       const season =
232:         month < 3
233:           ? "winter"
234:           : month < 6
235:           ? "spring"
236:           : month < 9
237:           ? "summer"
238:           : "fall";
239:       seasonCounts[season]++;
240:     });
241: 
242:     return Object.entries(seasonCounts)
243:       .filter(([, count]) => count > 0)
244:       .map(([season, frequency]) => ({ season, frequency }));
245:   }
246: }

================
File: src/types/firebase.ts
================
  1: import { Timestamp } from "firebase/firestore";
  2: import { PlantRecord, CareRecord, CareActivityDetails } from "./database";
  3: import { CareActivityType, GrowthStage, PlantCategory } from "./core";
  4: 
  5: 
  6: export interface FirebasePlantRecord {
  7:   id?: string;
  8:   userId: string;
  9:   varietyId: string;
 10:   varietyName: string;
 11:   name: string;
 12:   plantedDate: Timestamp;
 13:   currentStage: GrowthStage;
 14:   location: string;
 15:   container: string;
 16:   soilMix?: string;
 17:   isActive: boolean;
 18:   notes?: string[];
 19:   quantity?: number;
 20:   setupType?: "multiple-containers" | "same-container";
 21:   reminderPreferences?: {
 22:     watering: boolean;
 23:     fertilizing: boolean;
 24:     observation: boolean;
 25:     lighting: boolean;
 26:     pruning: boolean;
 27:   };
 28:   createdAt: Timestamp;
 29:   updatedAt: Timestamp;
 30: }
 31: 
 32: export interface FirebaseCareRecord {
 33:   id?: string;
 34:   userId: string;
 35:   plantId: string;
 36:   type: CareActivityType;
 37:   date: Timestamp;
 38:   details: CareActivityDetails;
 39:   createdAt: Timestamp;
 40:   updatedAt: Timestamp;
 41: }
 42: 
 43: export interface FirebaseVarietyRecord {
 44:   id?: string;
 45:   userId?: string;
 46:   name: string;
 47:   category: PlantCategory;
 48:   growthTimeline: {
 49:     germination: number;
 50:     seedling: number;
 51:     vegetative: number;
 52:     maturation: number;
 53:   };
 54:   protocols?: Record<string, unknown>;
 55:   moistureProtocols?: Record<string, unknown>;
 56:   isCustom?: boolean;
 57:   isEverbearing?: boolean;
 58:   productiveLifespan?: number;
 59:   createdAt: Timestamp;
 60: }
 61: 
 62: 
 63: export const toFirebaseTimestamp = (date: Date): Timestamp => {
 64:   return Timestamp.fromDate(date);
 65: };
 66: 
 67: export const fromFirebaseTimestamp = (timestamp: Timestamp): Date => {
 68:   return timestamp.toDate();
 69: };
 70: 
 71: export const convertPlantToFirebase = (
 72:   plant: PlantRecord,
 73:   userId: string
 74: ): Omit<FirebasePlantRecord, "id"> => ({
 75:   userId,
 76:   varietyId: plant.varietyId,
 77:   varietyName: plant.varietyName,
 78:   name: plant.name || plant.varietyName,
 79:   plantedDate: toFirebaseTimestamp(plant.plantedDate),
 80:   currentStage: plant.currentStage,
 81:   location: plant.location,
 82:   container: plant.container,
 83:   soilMix: plant.soilMix,
 84:   isActive: plant.isActive,
 85:   notes: plant.notes,
 86:   quantity: plant.quantity,
 87:   setupType: plant.setupType,
 88:   reminderPreferences: plant.reminderPreferences,
 89:   createdAt: Timestamp.now(),
 90:   updatedAt: Timestamp.now(),
 91: });
 92: 
 93: export const convertPlantFromFirebase = (
 94:   firebasePlant: FirebasePlantRecord
 95: ): PlantRecord => ({
 96:   id: firebasePlant.id!,
 97:   varietyId: firebasePlant.varietyId,
 98:   varietyName: firebasePlant.varietyName,
 99:   name: firebasePlant.name,
100:   plantedDate: fromFirebaseTimestamp(firebasePlant.plantedDate),
101:   currentStage: firebasePlant.currentStage,
102:   location: firebasePlant.location,
103:   container: firebasePlant.container,
104:   soilMix: firebasePlant.soilMix,
105:   isActive: firebasePlant.isActive,
106:   notes: firebasePlant.notes,
107:   quantity: firebasePlant.quantity,
108:   setupType: firebasePlant.setupType,
109:   reminderPreferences: firebasePlant.reminderPreferences,
110:   createdAt: fromFirebaseTimestamp(firebasePlant.createdAt),
111:   updatedAt: fromFirebaseTimestamp(firebasePlant.updatedAt),
112: });
113: 
114: export const convertCareActivityToFirebase = (
115:   activity: CareRecord,
116:   userId: string
117: ): Omit<FirebaseCareRecord, "id"> => ({
118:   userId,
119:   plantId: activity.plantId,
120:   type: activity.type,
121:   date: toFirebaseTimestamp(activity.date),
122:   details: activity.details,
123:   createdAt: Timestamp.now(),
124:   updatedAt: Timestamp.now(),
125: });
126: 
127: export const convertCareActivityFromFirebase = (
128:   firebaseActivity: FirebaseCareRecord
129: ): CareRecord => ({
130:   id: firebaseActivity.id!,
131:   plantId: firebaseActivity.plantId,
132:   type: firebaseActivity.type,
133:   date: fromFirebaseTimestamp(firebaseActivity.date),
134:   details: firebaseActivity.details,
135:   createdAt: fromFirebaseTimestamp(firebaseActivity.createdAt),
136:   updatedAt: fromFirebaseTimestamp(firebaseActivity.updatedAt),
137: });

================
File: src/utils/plantGrouping.ts
================
 1: import { PlantRecord } from "@/types/database";
 2: 
 3: export interface PlantGroup {
 4:   id: string;
 5:   varietyId: string;
 6:   varietyName: string;
 7:   plantedDate: Date;
 8:   container: string;
 9:   soilMix?: string;
10:   location: string;
11:   plants: PlantRecord[];
12:   setupType: "multiple-containers" | "same-container";
13: }
14: 
15: export const groupPlantsByConditions = (
16:   plants: PlantRecord[]
17: ): PlantGroup[] => {
18:   const groupMap = new Map<string, PlantRecord[]>();
19: 
20:   plants.forEach((plant) => {
21: 
22:     const key = `${plant.varietyId}-${
23:       plant.plantedDate.toISOString().split("T")[0]
24:     }-${plant.container}-${plant.soilMix || "no-soil"}-${plant.location}`;
25: 
26:     if (!groupMap.has(key)) {
27:       groupMap.set(key, []);
28:     }
29:     groupMap.get(key)!.push(plant);
30:   });
31: 
32:   const groups: PlantGroup[] = [];
33: 
34:   groupMap.forEach((plantsInGroup) => {
35:     if (plantsInGroup.length === 0) return;
36: 
37: 
38:     const templatePlant = plantsInGroup[0];
39: 
40:     groups.push({
41:       id: `group-${
42:         templatePlant.varietyId
43:       }-${templatePlant.plantedDate.getTime()}`,
44:       varietyId: templatePlant.varietyId,
45:       varietyName: templatePlant.varietyName,
46:       plantedDate: templatePlant.plantedDate,
47:       container: templatePlant.container,
48:       soilMix: templatePlant.soilMix,
49:       location: templatePlant.location,
50:       plants: plantsInGroup.sort(
51:         (a, b) => a.name?.localeCompare(b.name || "") || 0
52:       ),
53:       setupType: templatePlant.setupType || "multiple-containers",
54:     });
55:   });
56: 
57:   return groups.sort((a, b) => a.varietyName.localeCompare(b.varietyName));
58: };

================
File: src/utils/plantStage.ts
================
 1: import { PlantRecord, varietyService } from "@/types/database";
 2: import { calculateCurrentStageWithVariety } from "./growthStage";
 3: import { GrowthStage } from "@/types";
 4: 
 5: export async function getPlantCurrentStage(
 6:   plant: PlantRecord
 7: ): Promise<GrowthStage> {
 8: 
 9: 
10: 
11: 
12: 
13:   try {
14:     const variety = await varietyService.getVariety(plant.varietyId);
15: 
16:     if (!variety) {
17: 
18:       const allVarieties = await varietyService.getAllVarieties();
19:       const varietyByName = allVarieties.find(
20:         (v) => v.name === plant.varietyName
21:       );
22: 
23:       if (varietyByName) {
24:         return calculateCurrentStageWithVariety(
25:           plant.plantedDate,
26:           varietyByName
27:         );
28:       }
29: 
30:       console.warn("Could not find variety, defaulting to germination");
31:       return "germination";
32:     }
33: 
34:     return calculateCurrentStageWithVariety(plant.plantedDate, variety);
35:   } catch (error) {
36:     console.error("Error calculating stage:", error);
37:     return "germination";
38:   }
39: }

================
File: .firebaserc
================
1: {
2:   "projects": {
3:     "default": "smartgarden-41f21"
4:   }
5: }

================
File: firebase.json
================
 1: {
 2:   "firestore": {
 3:     "database": "(default)",
 4:     "location": "nam5",
 5:     "rules": "firestore.rules",
 6:     "indexes": "firestore.indexes.json"
 7:   },
 8:   "storage": {
 9:     "rules": "storage.rules"
10:   },
11:   "emulators": {
12:     "auth": {
13:       "port": 9099
14:     },
15:     "firestore": {
16:       "port": 8080
17:     },
18:     "storage": {
19:       "port": 9199
20:     },
21:     "ui": {
22:       "enabled": true
23:     },
24:     "singleProjectMode": true
25:   }
26: }

================
File: firestore.indexes.json
================
 1: {
 2:   "indexes": [
 3:     {
 4:       "collectionGroup": "plants",
 5:       "queryScope": "COLLECTION",
 6:       "fields": [
 7:         { "fieldPath": "userId", "order": "ASCENDING" },
 8:         { "fieldPath": "isActive", "order": "ASCENDING" },
 9:         { "fieldPath": "createdAt", "order": "DESCENDING" }
10:       ]
11:     },
12:     {
13:       "collectionGroup": "plants",
14:       "queryScope": "COLLECTION",
15:       "fields": [
16:         { "fieldPath": "userId", "order": "ASCENDING" },
17:         { "fieldPath": "createdAt", "order": "DESCENDING" }
18:       ]
19:     },
20:     {
21:       "collectionGroup": "careActivities",
22:       "queryScope": "COLLECTION",
23:       "fields": [
24:         { "fieldPath": "plantId", "order": "ASCENDING" },
25:         { "fieldPath": "date", "order": "DESCENDING" }
26:       ]
27:     },
28:     {
29:       "collectionGroup": "careActivities",
30:       "queryScope": "COLLECTION",
31:       "fields": [
32:         { "fieldPath": "userId", "order": "ASCENDING" },
33:         { "fieldPath": "date", "order": "DESCENDING" }
34:       ]
35:     }
36:   ],
37:   "fieldOverrides": []
38: }

================
File: firestore.rules
================
 1: rules_version='2'
 2: 
 3: service cloud.firestore {
 4:   match /databases/{database}/documents {
 5:     match /{document=**} {
 6:       // This rule allows anyone with your database reference to view, edit,
 7:       // and delete all data in your database. It is useful for getting
 8:       // started, but it is configured to expire after 30 days because it
 9:       // leaves your app open to attackers. At that time, all client
10:       // requests to your database will be denied.
11:       //
12:       // Make sure to write security rules for your app before that time, or
13:       // else all client requests to your database will be denied until you
14:       // update your rules.
15:       allow read, write: if request.time < timestamp.date(2025, 7, 23);
16:     }
17:   }
18: }

================
File: storage.rules
================
 1: rules_version = '2';
 2: 
 3: // Craft rules based on data in your Firestore database
 4: // allow write: if firestore.get(
 5: //    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
 6: service firebase.storage {
 7:   match /b/{bucket}/o {
 8:     match /{allPaths=**} {
 9:       allow read, write: if false;
10:     }
11:   }
12: }

================
File: public/vite.svg
================
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: scripts/lighthouse-ci.js
================
 1: const lighthouse = require("lighthouse");
 2: const chromeLauncher = require("chrome-launcher");
 3: 
 4: async function runLighthouse() {
 5:   const chrome = await chromeLauncher.launch({ chromeFlags: ["--headless"] });
 6: 
 7:   const options = {
 8:     logLevel: "info",
 9:     output: "html",
10:     onlyCategories: ["performance", "pwa", "accessibility"],
11:     port: chrome.port,
12:   };
13: 
14:   const runnerResult = await lighthouse("http://localhost:3000", options);
15: 
16: 
17:   const { performance, pwa, accessibility } = runnerResult.lhr.categories;
18: 
19:   console.log("Lighthouse Scores:");
20:   console.log(`Performance: ${Math.round(performance.score * 100)}`);
21:   console.log(`PWA: ${Math.round(pwa.score * 100)}`);
22:   console.log(`Accessibility: ${Math.round(accessibility.score * 100)}`);
23: 
24: 
25:   if (performance.score < 0.9 || pwa.score < 0.9 || accessibility.score < 0.9) {
26:     process.exit(1);
27:   }
28: 
29:   await chrome.kill();
30: }
31: 
32: runLighthouse().catch(console.error);

================
File: src/__tests__/components/LogCare.test.tsx
================
 1: import { describe, it, expect, beforeEach } from "@jest/globals";
 2: import { render, screen } from "@testing-library/react";
 3: import { MemoryRouter } from "react-router-dom";
 4: import LogCare from "../../pages/care/LogCare";
 5: import { initializeDatabase } from "@/db/seedData";
 6: 
 7: 
 8: jest.mock("@/pages/care/CareLogForm", () => ({
 9:   CareLogForm: ({ preselectedPlantId }: { preselectedPlantId?: string }) => (
10:     <div data-testid="care-log-form">
11:       {preselectedPlantId && (
12:         <div data-testid="pre-selected-plant-id">{preselectedPlantId}</div>
13:       )}
14:     </div>
15:   ),
16: }));
17: 
18: describe("LogCare", () => {
19:   beforeEach(async () => {
20:     await initializeDatabase();
21:   });
22: 
23:   it("renders without a pre-selected plant", () => {
24:     render(
25:       <MemoryRouter initialEntries={["/log-care"]}>
26:         <LogCare />
27:       </MemoryRouter>
28:     );
29: 
30:     expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
31:     expect(screen.getByTestId("care-log-form")).toBeInTheDocument();
32:     expect(
33:       screen.queryByTestId("pre-selected-plant-id")
34:     ).not.toBeInTheDocument();
35:   });
36: 
37:   it("passes pre-selected plant ID from URL params to CareLogForm", () => {
38:     const testPlantId = "test-plant-123";
39: 
40:     render(
41:       <MemoryRouter initialEntries={[`/log-care?plantId=${testPlantId}`]}>
42:         <LogCare />
43:       </MemoryRouter>
44:     );
45: 
46:     expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
47:     expect(screen.getByTestId("care-log-form")).toBeInTheDocument();
48:     expect(screen.getByTestId("pre-selected-plant-id")).toHaveTextContent(
49:       testPlantId
50:     );
51:   });
52: });

================
File: src/__tests__/components/PlantReminderSettings.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import PlantReminderSettings from "@/components/plant/PlantReminderSettings";
  4: import { plantService } from "@/types/database";
  5: import toast from "react-hot-toast";
  6: 
  7: 
  8: jest.mock("@/types/database", () => ({
  9:   plantService: {
 10:     updatePlant: jest.fn(),
 11:   },
 12: }));
 13: 
 14: jest.mock("react-hot-toast", () => ({
 15:   __esModule: true,
 16:   default: {
 17:     success: jest.fn(),
 18:     error: jest.fn(),
 19:   },
 20: }));
 21: 
 22: jest.mock("@/components/plant/ReminderPreferencesSection", () => ({
 23:   __esModule: true,
 24: 
 25:   default: ({ preferences, onChange }: any) => (
 26:     <div data-testid="reminder-preferences-section">
 27:       <button
 28:         data-testid="toggle-watering"
 29:         onClick={() =>
 30:           onChange({ ...preferences, watering: !preferences.watering })
 31:         }
 32:       >
 33:         Toggle Watering: {preferences.watering ? "ON" : "OFF"}
 34:       </button>
 35:     </div>
 36:   ),
 37: }));
 38: 
 39: const mockPlantService = plantService as jest.Mocked<typeof plantService>;
 40: const mockToast = toast as jest.Mocked<typeof toast>;
 41: 
 42: describe("PlantReminderSettings", () => {
 43:   const mockPlant = {
 44:     id: "test-plant-1",
 45:     varietyId: "tomato-1",
 46:     varietyName: "Roma Tomato",
 47:     name: "My Tomato",
 48:     plantedDate: new Date("2024-01-01"),
 49:     currentStage: "vegetative" as const,
 50:     location: "Indoor",
 51:     container: "5 gallon pot",
 52:     isActive: true,
 53:     notes: [],
 54:     createdAt: new Date(),
 55:     updatedAt: new Date(),
 56:     reminderPreferences: {
 57:       watering: true,
 58:       fertilizing: true,
 59:       observation: false,
 60:       lighting: true,
 61:       pruning: false,
 62:     },
 63:   };
 64: 
 65:   const mockOnUpdate = jest.fn();
 66: 
 67:   beforeEach(() => {
 68:     jest.clearAllMocks();
 69:     mockPlantService.updatePlant.mockResolvedValue(undefined);
 70:   });
 71: 
 72:   it("renders with current plant preferences", () => {
 73:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 74: 
 75:     expect(
 76:       screen.getByTestId("reminder-preferences-section")
 77:     ).toBeInTheDocument();
 78:     expect(screen.getByText("Toggle Watering: ON")).toBeInTheDocument();
 79:   });
 80: 
 81:   it("shows 'No Changes' button when preferences haven't changed", () => {
 82:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 83: 
 84:     const saveButton = screen.getByRole("button", { name: /no changes/i });
 85:     expect(saveButton).toBeDisabled();
 86:   });
 87: 
 88:   it("shows 'Save Changes' button when preferences change", async () => {
 89:     const user = userEvent.setup();
 90: 
 91:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
 92: 
 93: 
 94:     const toggleButton = screen.getByTestId("toggle-watering");
 95:     await user.click(toggleButton);
 96: 
 97:     await waitFor(() => {
 98:       const saveButton = screen.getByRole("button", { name: /save changes/i });
 99:       expect(saveButton).not.toBeDisabled();
100:     });
101:   });
102: 
103:   it("saves preferences successfully", async () => {
104:     const user = userEvent.setup();
105: 
106:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
107: 
108: 
109:     const toggleButton = screen.getByTestId("toggle-watering");
110:     await user.click(toggleButton);
111: 
112: 
113:     const saveButton = screen.getByRole("button", { name: /save changes/i });
114:     await user.click(saveButton);
115: 
116:     await waitFor(() => {
117:       expect(mockPlantService.updatePlant).toHaveBeenCalledWith(
118:         "test-plant-1",
119:         {
120:           reminderPreferences: {
121:             watering: false,
122:             fertilizing: true,
123:             observation: false,
124:             lighting: true,
125:             pruning: false,
126:           },
127:           updatedAt: expect.any(Date),
128:         }
129:       );
130:     });
131: 
132:     expect(mockOnUpdate).toHaveBeenCalledWith({
133:       ...mockPlant,
134:       reminderPreferences: {
135:         watering: false,
136:         fertilizing: true,
137:         observation: false,
138:         lighting: true,
139:         pruning: false,
140:       },
141:     });
142: 
143:     expect(mockToast.success).toHaveBeenCalledWith(
144:       "Reminder preferences updated!"
145:     );
146:   });
147: 
148:   it("handles save errors gracefully", async () => {
149:     const user = userEvent.setup();
150:     mockPlantService.updatePlant.mockRejectedValue(new Error("Database error"));
151: 
152:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
153: 
154: 
155:     const toggleButton = screen.getByTestId("toggle-watering");
156:     await user.click(toggleButton);
157: 
158: 
159:     const saveButton = screen.getByRole("button", { name: /save changes/i });
160:     await user.click(saveButton);
161: 
162:     await waitFor(() => {
163:       expect(mockToast.error).toHaveBeenCalledWith(
164:         "Failed to update preferences"
165:       );
166:     });
167: 
168:     expect(mockOnUpdate).not.toHaveBeenCalled();
169:   });
170: 
171:   it("shows loading state during save", async () => {
172:     const user = userEvent.setup();
173: 
174: 
175:     mockPlantService.updatePlant.mockImplementation(
176:       () => new Promise(() => {})
177:     );
178: 
179:     render(<PlantReminderSettings plant={mockPlant} onUpdate={mockOnUpdate} />);
180: 
181: 
182:     const toggleButton = screen.getByTestId("toggle-watering");
183:     await user.click(toggleButton);
184: 
185: 
186:     const saveButton = screen.getByRole("button", { name: /save changes/i });
187:     await user.click(saveButton);
188: 
189: 
190:     expect(screen.getByText("Saving...")).toBeInTheDocument();
191:     expect(saveButton).toBeDisabled();
192:   });
193: 
194:   it("uses default preferences when plant has none", () => {
195:     const plantWithoutPreferences = {
196:       ...mockPlant,
197:       reminderPreferences: undefined,
198:     };
199: 
200:     render(
201:       <PlantReminderSettings
202:         plant={plantWithoutPreferences}
203:         onUpdate={mockOnUpdate}
204:       />
205:     );
206: 
207: 
208:     expect(screen.getByText("Toggle Watering: ON")).toBeInTheDocument();
209:   });
210: });

================
File: src/__tests__/components/PlantStageDisplay.test.tsx
================
 1: import { render, screen } from "@testing-library/react";
 2: import PlantStageDisplay from "@/components/plant/PlantStageDisplay";
 3: import { PlantRecord } from "@/types/database";
 4: 
 5: 
 6: jest.mock("@/hooks/useDynamicStage", () => ({
 7:   useDynamicStage: jest.fn(),
 8: }));
 9: 
10: import { useDynamicStage } from "@/hooks/useDynamicStage";
11: const mockUseDynamicStage = useDynamicStage as jest.MockedFunction<
12:   typeof useDynamicStage
13: >;
14: 
15: describe("PlantStageDisplay", () => {
16:   const mockPlant: PlantRecord = {
17:     id: "test-plant",
18:     varietyId: "test-variety",
19:     varietyName: "Test Variety",
20:     name: "Test Plant",
21:     plantedDate: new Date(),
22:     currentStage: "vegetative",
23:     location: "Indoor",
24:     container: "5 gallon",
25:     isActive: true,
26:     createdAt: new Date(),
27:     updatedAt: new Date(),
28:   };
29: 
30:   beforeEach(() => {
31:     mockUseDynamicStage.mockReturnValue("flowering");
32:   });
33: 
34:   afterEach(() => {
35:     jest.clearAllMocks();
36:   });
37: 
38:   it("displays plant stage without emoji by default", () => {
39:     render(<PlantStageDisplay plant={mockPlant} />);
40: 
41:     expect(screen.getByText("Stage: flowering")).toBeInTheDocument();
42:     expect(screen.queryByText("🌱")).not.toBeInTheDocument();
43:   });
44: 
45:   it("displays plant stage with emoji when showEmoji is true", () => {
46:     render(<PlantStageDisplay plant={mockPlant} showEmoji={true} />);
47: 
48:     expect(screen.getByText("Stage: flowering")).toBeInTheDocument();
49:     expect(screen.getByText("🌱")).toBeInTheDocument();
50:   });
51: 
52:   it("applies custom className when provided", () => {
53:     render(<PlantStageDisplay plant={mockPlant} className="custom-class" />);
54: 
55:     const stageDisplay = screen.getByText(/Stage:/).closest("div");
56:     expect(stageDisplay).toHaveClass("custom-class");
57:   });
58: 
59:   it("uses calculated stage from useDynamicStage hook", () => {
60:     mockUseDynamicStage.mockReturnValue("harvest");
61: 
62:     render(<PlantStageDisplay plant={mockPlant} />);
63: 
64:     expect(screen.getByText("Stage: harvest")).toBeInTheDocument();
65:     expect(mockUseDynamicStage).toHaveBeenCalledWith(mockPlant);
66:   });
67: });

================
File: src/__tests__/components/ReminderPreferencesSection.test.tsx
================
  1: import { render, screen } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import ReminderPreferencesSection from "@/components/plant/ReminderPreferencesSection";
  4: 
  5: describe("ReminderPreferencesSection", () => {
  6:   const defaultPreferences = {
  7:     watering: true,
  8:     fertilizing: true,
  9:     observation: true,
 10:     lighting: true,
 11:     pruning: true,
 12:   };
 13: 
 14:   const mockOnChange = jest.fn();
 15: 
 16:   beforeEach(() => {
 17:     jest.clearAllMocks();
 18:   });
 19: 
 20:   it("renders all reminder types with correct labels", () => {
 21:     render(
 22:       <ReminderPreferencesSection
 23:         preferences={defaultPreferences}
 24:         onChange={mockOnChange}
 25:       />
 26:     );
 27: 
 28:     expect(screen.getByText("Reminder Preferences")).toBeInTheDocument();
 29:     expect(screen.getByText("Watering")).toBeInTheDocument();
 30:     expect(screen.getByText("Fertilizing")).toBeInTheDocument();
 31:     expect(screen.getByText("Health Checks")).toBeInTheDocument();
 32:     expect(screen.getByText("Lighting")).toBeInTheDocument();
 33:     expect(screen.getByText("Maintenance")).toBeInTheDocument();
 34: 
 35: 
 36:     expect(
 37:       screen.getByText("Get notified when watering is due")
 38:     ).toBeInTheDocument();
 39:     expect(
 40:       screen.getByText("Reminders for feeding schedule")
 41:     ).toBeInTheDocument();
 42:     expect(
 43:       screen.getByText("Regular observation reminders")
 44:     ).toBeInTheDocument();
 45:   });
 46: 
 47:   it("displays current preference states correctly", () => {
 48:     const mixedPreferences = {
 49:       watering: true,
 50:       fertilizing: false,
 51:       observation: true,
 52:       lighting: false,
 53:       pruning: true,
 54:     };
 55: 
 56:     render(
 57:       <ReminderPreferencesSection
 58:         preferences={mixedPreferences}
 59:         onChange={mockOnChange}
 60:       />
 61:     );
 62: 
 63: 
 64:     const switches = screen.getAllByRole("switch");
 65:     expect(switches).toHaveLength(5);
 66: 
 67: 
 68:     expect(switches[0]).toHaveAttribute("aria-checked", "true");
 69: 
 70:     expect(switches[1]).toHaveAttribute("aria-checked", "false");
 71: 
 72:     expect(switches[2]).toHaveAttribute("aria-checked", "true");
 73: 
 74:     expect(switches[3]).toHaveAttribute("aria-checked", "false");
 75: 
 76:     expect(switches[4]).toHaveAttribute("aria-checked", "true");
 77:   });
 78: 
 79:   it("calls onChange when a switch is toggled", async () => {
 80:     const user = userEvent.setup();
 81: 
 82:     render(
 83:       <ReminderPreferencesSection
 84:         preferences={defaultPreferences}
 85:         onChange={mockOnChange}
 86:       />
 87:     );
 88: 
 89: 
 90:     const wateringSwitch = screen.getAllByRole("switch")[0];
 91:     await user.click(wateringSwitch);
 92: 
 93:     expect(mockOnChange).toHaveBeenCalledWith({
 94:       watering: false,
 95:       fertilizing: true,
 96:       observation: true,
 97:       lighting: true,
 98:       pruning: true,
 99:     });
100:   });
101: 
102:   it("toggles multiple preferences correctly", async () => {
103:     const user = userEvent.setup();
104: 
105:     render(
106:       <ReminderPreferencesSection
107:         preferences={defaultPreferences}
108:         onChange={mockOnChange}
109:       />
110:     );
111: 
112: 
113:     const fertilizingSwitch = screen.getAllByRole("switch")[1];
114:     await user.click(fertilizingSwitch);
115: 
116:     expect(mockOnChange).toHaveBeenCalledWith({
117:       watering: true,
118:       fertilizing: false,
119:       observation: true,
120:       lighting: true,
121:       pruning: true,
122:     });
123: 
124: 
125:     const lightingSwitch = screen.getAllByRole("switch")[3];
126:     await user.click(lightingSwitch);
127: 
128:     expect(mockOnChange).toHaveBeenCalledWith({
129:       watering: true,
130:       fertilizing: true,
131:       observation: true,
132:       lighting: false,
133:       pruning: true,
134:     });
135:   });
136: 
137:   it("has proper accessibility attributes", () => {
138:     render(
139:       <ReminderPreferencesSection
140:         preferences={defaultPreferences}
141:         onChange={mockOnChange}
142:       />
143:     );
144: 
145:     const switches = screen.getAllByRole("switch");
146:     switches.forEach((switchElement) => {
147:       expect(switchElement).toHaveAttribute("aria-checked");
148:       expect(switchElement).not.toHaveAttribute("aria-disabled");
149:     });
150:   });
151: });

================
File: src/__tests__/components/SoilMixtureSelector.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import SoilMixtureSelector from "@/components/plant/SoilMixtureSelector";
  4: 
  5: describe("SoilMixtureSelector", () => {
  6:   const user = userEvent.setup();
  7:   const mockOnMixtureChange = jest.fn();
  8: 
  9:   beforeEach(() => {
 10:     jest.clearAllMocks();
 11:   });
 12: 
 13:   const renderSelector = (props = {}) => {
 14:     return render(
 15:       <SoilMixtureSelector onMixtureChange={mockOnMixtureChange} {...props} />
 16:     );
 17:   };
 18: 
 19:   describe("Initial Rendering", () => {
 20:     it("renders with default state", () => {
 21:       renderSelector();
 22: 
 23:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
 24:       expect(
 25:         screen.getByText(
 26:           "Choose a preset mixture or create your own custom blend"
 27:         )
 28:       ).toBeInTheDocument();
 29:       expect(screen.getByText("🧪 Create Custom Mixture")).toBeInTheDocument();
 30:     });
 31: 
 32:     it("displays all preset mixtures", () => {
 33:       renderSelector();
 34: 
 35:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
 36:       expect(screen.getByText("Root Vegetables Mix")).toBeInTheDocument();
 37:       expect(screen.getByText("Mediterranean Herbs Mix")).toBeInTheDocument();
 38:       expect(screen.getByText("Berry & Fruit Mix")).toBeInTheDocument();
 39:       expect(screen.getByText("Fruiting Plants Mix")).toBeInTheDocument();
 40:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
 41:     });
 42: 
 43:     it("shows mixture descriptions and components", () => {
 44:       renderSelector();
 45: 
 46:       expect(
 47:         screen.getByText(
 48:           "Nutrient-rich blend perfect for arugula, spinach, and lettuce"
 49:         )
 50:       ).toBeInTheDocument();
 51:       expect(
 52:         screen.getByText(
 53:           /40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings/
 54:         )
 55:       ).toBeInTheDocument();
 56:     });
 57:   });
 58: 
 59:   describe("Preset Selection", () => {
 60:     it("calls onMixtureChange when preset is clicked", async () => {
 61:       renderSelector();
 62: 
 63:       const leafyGreensCard = screen.getByTestId(
 64:         "mixture-card-leafy-greens-standard"
 65:       );
 66:       await user.click(leafyGreensCard);
 67: 
 68:       expect(mockOnMixtureChange).toHaveBeenCalledWith(
 69:         "Leafy Greens Mix: 40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings"
 70:       );
 71:     });
 72: 
 73:     it("shows selected state when mixture is selected", () => {
 74:       renderSelector({
 75:         selectedMixture:
 76:           "Leafy Greens Mix: 40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings",
 77:       });
 78: 
 79:       const leafyGreensCard = screen.getByTestId(
 80:         "mixture-card-leafy-greens-standard"
 81:       );
 82: 
 83:       expect(leafyGreensCard).toHaveClass("cursor-pointer");
 84:       expect(leafyGreensCard).toHaveClass(
 85:         "ring-4",
 86:         "ring-ring",
 87:         "bg-muted",
 88:         "border-ring",
 89:         "shadow-lg"
 90:       );
 91:     });
 92: 
 93:     it("displays selected mixture information", () => {
 94:       const selectedMixture =
 95:         "Root Vegetables Mix: 40% Coco Coir, 30% Perlite, 25% Vermiculite, 5% Worm Castings";
 96:       renderSelector({ selectedMixture });
 97: 
 98:       expect(screen.getByText("Selected Mixture:")).toBeInTheDocument();
 99:       expect(screen.getByText(selectedMixture)).toBeInTheDocument();
100:     });
101:   });
102: 
103:   describe("Custom Mixture Functionality", () => {
104:     it("switches to custom mode when button clicked", async () => {
105:       renderSelector();
106: 
107:       const customButton = screen.getByText("🧪 Create Custom Mixture");
108:       await user.click(customButton);
109: 
110:       expect(screen.getByText("Custom Soil Mixture")).toBeInTheDocument();
111:       expect(screen.getByText("Mixture Description")).toBeInTheDocument();
112:       expect(screen.getByPlaceholderText(/40% coco coir/)).toBeInTheDocument();
113:     });
114: 
115:     it("allows typing in custom mixture textarea", async () => {
116:       renderSelector();
117: 
118:       const customButton = screen.getByText("🧪 Create Custom Mixture");
119:       await user.click(customButton);
120: 
121:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
122:       await user.type(textarea, "50% peat moss, 30% perlite, 20% sand");
123: 
124:       expect(textarea).toHaveValue("50% peat moss, 30% perlite, 20% sand");
125:     });
126: 
127:     it("calls onMixtureChange when custom mixture is submitted", async () => {
128:       renderSelector();
129: 
130:       const customButton = screen.getByText("🧪 Create Custom Mixture");
131:       await user.click(customButton);
132: 
133:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
134:       await user.type(textarea, "Custom mix");
135: 
136:       const saveButton = screen.getByRole("button", {
137:         name: /save custom mixture/i,
138:       });
139:       await user.click(saveButton);
140: 
141:       expect(mockOnMixtureChange).toHaveBeenCalledWith("Custom mix");
142:     });
143: 
144:     it("disables submit button when textarea is empty", async () => {
145:       renderSelector();
146: 
147:       const customButton = screen.getByText("🧪 Create Custom Mixture");
148:       await user.click(customButton);
149: 
150:       const saveButton = screen.getByRole("button", {
151:         name: /save custom mixture/i,
152:       });
153:       expect(saveButton).toBeDisabled();
154:     });
155: 
156:     it("returns to presets when cancel button clicked", async () => {
157:       renderSelector();
158: 
159:       const customButton = screen.getByText("🧪 Create Custom Mixture");
160:       await user.click(customButton);
161: 
162:       const cancelButton = screen.getByRole("button", {
163:         name: /cancel/i,
164:       });
165:       await user.click(cancelButton);
166: 
167:       expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
168:       expect(screen.queryByText("Custom Soil Mixture")).not.toBeInTheDocument();
169:     });
170: 
171:     it("closes custom mode after successful submission", async () => {
172:       renderSelector();
173: 
174:       const customButton = screen.getByText("🧪 Create Custom Mixture");
175:       await user.click(customButton);
176: 
177:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
178:       await user.type(textarea, "Custom mix");
179: 
180:       const saveButton = screen.getByRole("button", {
181:         name: /save custom mixture/i,
182:       });
183:       await user.click(saveButton);
184: 
185:       await waitFor(() => {
186:         expect(screen.getByText("Leafy Greens Mix")).toBeInTheDocument();
187:         expect(
188:           screen.queryByText("Custom Soil Mixture")
189:         ).not.toBeInTheDocument();
190:       });
191:     });
192:   });
193: 
194:   describe("Mixture Information Display", () => {
195:     it("shows components for different mixtures", () => {
196:       renderSelector();
197: 
198:       const leafyGreensComponents = screen.getAllByText(
199:         /40% Coco Coir, 25% Perlite, 25% Vermiculite, 10% Worm Castings/
200:       );
201:       expect(leafyGreensComponents.length).toBeGreaterThan(0);
202: 
203:       const rootVegComponents = screen.getAllByText(
204:         /40% Coco Coir, 30% Perlite, 25% Vermiculite, 5% Worm Castings/
205:       );
206:       expect(rootVegComponents.length).toBeGreaterThan(0);
207:     });
208: 
209:     it("shows amendments when available", () => {
210:       renderSelector();
211: 
212:       expect(
213:         screen.getByText(/Compost \(½–1 cup per cubic foot\)/)
214:       ).toBeInTheDocument();
215:       expect(
216:         screen.getByText(/Bone Meal \(1 tsp per gallon\)/)
217:       ).toBeInTheDocument();
218:     });
219: 
220:     it("shows suitable plants information", () => {
221:       renderSelector();
222: 
223:       expect(
224:         screen.getByText(/Arugula, Spinach, Lettuce, Kale/)
225:       ).toBeInTheDocument();
226:       expect(
227:         screen.getByText(/Carrots, Beets, Onions, Radishes/)
228:       ).toBeInTheDocument();
229:     });
230:   });
231: 
232:   describe("Edge Cases", () => {
233:     it("handles undefined selectedMixture gracefully", () => {
234:       renderSelector({ selectedMixture: undefined });
235: 
236:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
237:       expect(screen.queryByText("Selected Mixture:")).not.toBeInTheDocument();
238:     });
239: 
240:     it("handles empty selectedMixture gracefully", () => {
241:       renderSelector({ selectedMixture: "" });
242: 
243:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
244:       expect(screen.queryByText("Selected Mixture:")).not.toBeInTheDocument();
245:     });
246: 
247:     it("handles undefined plantCategory gracefully", () => {
248:       renderSelector({ plantCategory: undefined });
249: 
250:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
251:       expect(screen.getByText("Universal Garden Mix")).toBeInTheDocument();
252:     });
253: 
254:     it("handles custom mixture with only whitespace", async () => {
255:       renderSelector();
256: 
257:       const customButton = screen.getByText("🧪 Create Custom Mixture");
258:       await user.click(customButton);
259: 
260:       const textarea = screen.getByPlaceholderText(/40% coco coir/);
261:       await user.type(textarea, "   ");
262: 
263:       const saveButton = screen.getByRole("button", {
264:         name: /save custom mixture/i,
265:       });
266:       expect(saveButton).toBeDisabled();
267:     });
268:   });
269: 
270:   describe("Accessibility", () => {
271:     it("has proper labels and structure", () => {
272:       renderSelector();
273: 
274:       expect(screen.getByText("Soil Mixture *")).toBeInTheDocument();
275:       expect(
276:         screen.getByText(
277:           "Choose a preset mixture or create your own custom blend"
278:         )
279:       ).toBeInTheDocument();
280:     });
281: 
282:     it("has accessible buttons", () => {
283:       renderSelector();
284: 
285:       const customButton = screen.getByRole("button", {
286:         name: /create custom mixture/i,
287:       });
288:       expect(customButton).toBeInTheDocument();
289:     });
290: 
291:     it("maintains accessibility in custom mode", async () => {
292:       renderSelector();
293: 
294:       const customButton = screen.getByText("🧪 Create Custom Mixture");
295:       await user.click(customButton);
296: 
297:       expect(screen.getByLabelText("Mixture Description")).toBeInTheDocument();
298:       expect(
299:         screen.getByRole("button", { name: /save custom mixture/i })
300:       ).toBeInTheDocument();
301:       expect(
302:         screen.getByRole("button", { name: /cancel/i })
303:       ).toBeInTheDocument();
304:     });
305:   });
306: });

================
File: src/__tests__/database/plantService.test.ts
================
 1: import { plantService, PlantRecord } from "../../types/database";
 2: 
 3: describe("plantService", () => {
 4:   beforeEach(async () => {
 5: 
 6:     const db = await import("../../types/database").then((m) => m.db);
 7:     await db.plants.clear();
 8:   });
 9: 
10:   it("adds and retrieves a plant", async () => {
11:     const plantData: Omit<PlantRecord, "id" | "createdAt" | "updatedAt"> = {
12:       varietyId: "test-variety",
13:       name: "Test Plant",
14:       varietyName: "Test Variety",
15:       plantedDate: new Date("2024-01-01"),
16:       currentStage: "seedling",
17:       location: "Indoor",
18:       container: "Test Container",
19:       isActive: true,
20:       notes: ["Test note"],
21:     };
22: 
23:     const plantId = await plantService.addPlant(plantData);
24:     expect(plantId).toBeDefined();
25: 
26:     const retrievedPlant = await plantService.getPlant(plantId);
27:     expect(retrievedPlant).toBeDefined();
28:     expect(retrievedPlant?.name).toBe("Test Plant");
29:     expect(retrievedPlant?.varietyId).toBe("test-variety");
30:   });
31: 
32:   it("retrieves only active plants", async () => {
33: 
34:     await plantService.addPlant({
35:       varietyId: "active-variety",
36:       varietyName: "Active Variety",
37:       plantedDate: new Date(),
38:       currentStage: "vegetative",
39:       location: "Location 1",
40:       container: "Container 1",
41:       isActive: true,
42:     });
43: 
44: 
45:     const inactiveId = await plantService.addPlant({
46:       varietyId: "inactive-variety",
47:       varietyName: "Inactive Variety",
48:       plantedDate: new Date(),
49:       currentStage: "vegetative",
50:       location: "Location 2",
51:       container: "Container 2",
52:       isActive: true,
53:     });
54: 
55: 
56:     await plantService.updatePlant(inactiveId, { isActive: false });
57: 
58:     const activePlants = await plantService.getActivePlants();
59:     expect(activePlants).toHaveLength(1);
60:     expect(activePlants[0].varietyId).toBe("active-variety");
61:   });
62: });

================
File: src/__tests__/integration/plantDetailReminderSettings.test.tsx
================
 1: import { render, screen, waitFor } from "@testing-library/react";
 2: import userEvent from "@testing-library/user-event";
 3: import { BrowserRouter } from "react-router-dom";
 4: import PlantDetail from "@/pages/plants/PlantDetail";
 5: import { FirebasePlantService } from "@/services/firebase/plantService";
 6: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
 7: 
 8: 
 9: jest.mock("@/services/firebase/plantService");
10: 
11: 
12: jest.mock("@/hooks/useFirebaseAuth");
13: 
14: jest.mock("react-router-dom", () => ({
15:   ...jest.requireActual("react-router-dom"),
16:   useParams: () => ({ plantId: "test-plant-1" }),
17:   useNavigate: () => jest.fn(),
18: }));
19: 
20: describe("PlantDetail Reminder Settings Integration", () => {
21:   beforeEach(() => {
22: 
23:     (useFirebaseAuth as jest.Mock).mockReturnValue({
24:       user: { uid: "test-user-id", displayName: "Test User" },
25:       loading: false,
26:     });
27:   });
28: 
29:   it("shows and hides reminder settings when settings button is clicked", async () => {
30:     const user = userEvent.setup();
31: 
32:     (
33:       FirebasePlantService.subscribeToPlantsChanges as jest.Mock
34:     ).mockImplementation((_, callback) => {
35:       const mockPlant = {
36:         id: "test-plant-1",
37:         varietyId: "tomato-1",
38:         varietyName: "Roma Tomato",
39:         name: "My Tomato",
40:         plantedDate: new Date(),
41:         currentStage: "vegetative",
42:         location: "Indoor",
43:         container: "5 gallon pot",
44:         isActive: true,
45:         notes: [],
46:         createdAt: new Date(),
47:         updatedAt: new Date(),
48:         reminderPreferences: {
49:           watering: true,
50:           fertilizing: false,
51:           observation: true,
52:           lighting: false,
53:           pruning: true,
54:         },
55:       };
56:       callback([mockPlant]);
57:       return jest.fn();
58:     });
59: 
60:     render(
61:       <BrowserRouter>
62:         <PlantDetail />
63:       </BrowserRouter>
64:     );
65: 
66:     await waitFor(() => {
67:       expect(
68:         screen.getByRole("heading", { name: /my tomato/i, level: 1 })
69:       ).toBeInTheDocument();
70:     });
71: 
72: 
73:     expect(screen.queryByText("Reminder Preferences")).not.toBeInTheDocument();
74: 
75:     const settingsButton = screen.getByRole("button", { name: /settings/i });
76:     await user.click(settingsButton);
77: 
78: 
79:     await waitFor(() => {
80:       expect(screen.getByText("Reminder Preferences")).toBeInTheDocument();
81:     });
82: 
83:     await user.click(settingsButton);
84: 
85: 
86:     await waitFor(() => {
87:       expect(
88:         screen.queryByText("Reminder Preferences")
89:       ).not.toBeInTheDocument();
90:     });
91:   });
92: 
93:   it.skip("displays active reminder preferences correctly", async () => {
94: 
95:   });
96: });

================
File: src/__tests__/integration/taskGroupingService.test.tsx
================
  1: import { TaskGroupingService } from "@/services/taskGroupingService";
  2: import { UpcomingTask, TaskGroup } from "@/types/scheduling";
  3: 
  4: describe("TaskGroupingService", () => {
  5:   const createMockTask = (
  6:     task: string,
  7:     priority: "low" | "medium" | "high" = "medium"
  8:   ): UpcomingTask => ({
  9:     id: `task-${Date.now()}-${Math.random()}`,
 10:     plantId: "test-plant-1",
 11:     name: "Test Plant",
 12:     task,
 13:     dueIn: "Due in 2 days",
 14:     plantStage: "vegetative",
 15:     dueDate: new Date(),
 16:     priority,
 17:     canBypass: true,
 18:   });
 19: 
 20:   describe("groupTasksByActivity", () => {
 21:     it("groups watering tasks correctly", () => {
 22:       const tasks = [
 23:         createMockTask("Check water level"),
 24:         createMockTask("Water plant"),
 25:         createMockTask("Check moisture"),
 26:       ];
 27: 
 28:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
 29:       const wateringGroup = groups.find((g) => g.type === "watering");
 30: 
 31:       expect(wateringGroup).toBeDefined();
 32:       expect(wateringGroup!.tasks).toHaveLength(3);
 33:       expect(wateringGroup!.title).toBe("Watering");
 34:       expect(wateringGroup!.emoji).toBe("💧");
 35:     });
 36: 
 37:     it("groups fertilizing tasks correctly", () => {
 38:       const tasks = [
 39:         createMockTask("Fertilize plant"),
 40:         createMockTask("Feed with nutrients"),
 41:       ];
 42: 
 43:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
 44:       const fertilizingGroup = groups.find((g) => g.type === "fertilizing");
 45: 
 46:       expect(fertilizingGroup!.tasks).toHaveLength(2);
 47:       expect(fertilizingGroup!.title).toBe("Fertilizing");
 48:       expect(fertilizingGroup!.emoji).toBe("🌱");
 49:     });
 50: 
 51:     it("groups observation tasks correctly", () => {
 52:       const tasks = [
 53:         createMockTask("Health check"),
 54:         createMockTask("Observe growth"),
 55:         createMockTask("Check for pests"),
 56:       ];
 57: 
 58:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
 59:       const observationGroup = groups.find((g) => g.type === "observation");
 60: 
 61:       expect(observationGroup!.tasks).toHaveLength(3);
 62:       expect(observationGroup!.title).toBe("Health Checks");
 63:       expect(observationGroup!.emoji).toBe("👁");
 64:     });
 65: 
 66:     it("groups maintenance tasks correctly", () => {
 67:       const tasks = [
 68:         createMockTask("Prune leaves"),
 69:         createMockTask("Transplant"),
 70:         createMockTask("Clean pot"),
 71:       ];
 72: 
 73:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
 74:       const maintenanceGroup = groups.find((g) => g.type === "maintenance");
 75: 
 76:       expect(maintenanceGroup!.tasks).toHaveLength(3);
 77:       expect(maintenanceGroup!.title).toBe("Maintenance");
 78:       expect(maintenanceGroup!.emoji).toBe("✂️");
 79:       expect(maintenanceGroup!.isExpanded).toBe(false);
 80:     });
 81: 
 82:     it("expands groups with high priority tasks", () => {
 83:       const tasks = [
 84:         createMockTask("Prune leaves", "high"),
 85:         createMockTask("Transplant", "low"),
 86:       ];
 87: 
 88:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
 89:       const maintenanceGroup = groups.find((g) => g.type === "maintenance");
 90: 
 91:       expect(maintenanceGroup!.isExpanded).toBe(true);
 92:     });
 93: 
 94:     it("filters out empty groups", () => {
 95:       const tasks = [createMockTask("Check water level")];
 96: 
 97:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
 98: 
 99:       expect(groups).toHaveLength(1);
100:       expect(groups[0].type).toBe("watering");
101:     });
102: 
103:     it("handles empty task list", () => {
104:       const groups = TaskGroupingService.groupTasksByActivity([]);
105:       expect(groups).toHaveLength(0);
106:     });
107: 
108:     it("handles case insensitive task matching", () => {
109:       const tasks = [
110:         createMockTask("WATER plant"),
111:         createMockTask("fertilize PLANT"),
112:         createMockTask("HEALTH check"),
113:       ];
114: 
115:       const groups = TaskGroupingService.groupTasksByActivity(tasks);
116: 
117:       expect(groups).toHaveLength(3);
118:       expect(groups.find((g) => g.type === "watering")!.tasks).toHaveLength(1);
119:       expect(groups.find((g) => g.type === "fertilizing")!.tasks).toHaveLength(
120:         1
121:       );
122:       expect(groups.find((g) => g.type === "observation")!.tasks).toHaveLength(
123:         1
124:       );
125:     });
126:   });
127: 
128:   describe("shouldExpandGroup", () => {
129:     it("expands group with high priority tasks", () => {
130:       const group: TaskGroup = {
131:         type: "watering",
132:         title: "Watering",
133:         emoji: "💧",
134:         tasks: [createMockTask("Water", "high")],
135:         isExpanded: false,
136:       };
137: 
138:       expect(TaskGroupingService.shouldExpandGroup(group)).toBe(true);
139:     });
140: 
141:     it("expands group with overdue tasks", () => {
142:       const overdueTask = createMockTask("Water");
143:       overdueTask.dueIn = "overdue by 2 days";
144: 
145:       const group: TaskGroup = {
146:         type: "watering",
147:         title: "Watering",
148:         emoji: "💧",
149:         tasks: [overdueTask],
150:         isExpanded: false,
151:       };
152: 
153:       expect(TaskGroupingService.shouldExpandGroup(group)).toBe(true);
154:     });
155: 
156:     it("does not expand group with only low priority tasks", () => {
157:       const group: TaskGroup = {
158:         type: "watering",
159:         title: "Watering",
160:         emoji: "💧",
161:         tasks: [createMockTask("Water", "low")],
162:         isExpanded: false,
163:       };
164: 
165:       expect(TaskGroupingService.shouldExpandGroup(group)).toBe(false);
166:     });
167: 
168:     it("does not expand empty group", () => {
169:       const group: TaskGroup = {
170:         type: "watering",
171:         title: "Watering",
172:         emoji: "💧",
173:         tasks: [],
174:         isExpanded: false,
175:       };
176: 
177:       expect(TaskGroupingService.shouldExpandGroup(group)).toBe(false);
178:     });
179:   });
180: });

================
File: src/__tests__/utils/plantDisplay.test.ts
================
 1: import { getPlantDisplayName } from "@/utils/plantDisplay";
 2: import { PlantRecord } from "@/types/database";
 3: 
 4: describe("getPlantDisplayName", () => {
 5:   const basePlant: PlantRecord = {
 6:     id: "test-id",
 7:     varietyId: "some-uuid-123",
 8:     varietyName: "Roma Tomato",
 9:     plantedDate: new Date(),
10:     currentStage: "vegetative",
11:     location: "Indoor",
12:     container: "5 gallon",
13:     isActive: true,
14:     notes: [],
15:     createdAt: new Date(),
16:     updatedAt: new Date(),
17:   };
18: 
19:   it("returns custom name when provided", () => {
20:     const plant = { ...basePlant, name: "My Special Tomato" };
21:     expect(getPlantDisplayName(plant)).toBe("My Special Tomato");
22:   });
23: 
24:   it("returns variety name when no custom name", () => {
25:     const plant = { ...basePlant, name: undefined };
26:     expect(getPlantDisplayName(plant)).toBe("Roma Tomato");
27:   });
28: 
29:   it("returns fallback when no custom name or variety name", () => {
30:     const plant = { ...basePlant, name: undefined, varietyName: "" };
31:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
32:   });
33: 
34:   it("returns fallback when varietyName is empty", () => {
35:     const plant = { ...basePlant, name: undefined, varietyName: "" };
36:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
37:   });
38: 
39:   it("returns fallback when varietyName is whitespace only", () => {
40:     const plant = { ...basePlant, name: undefined, varietyName: "   " };
41:     expect(getPlantDisplayName(plant)).toBe("Unknown Plant");
42:   });
43: });

================
File: src/__tests__/utils/testHelpers.tsx
================
 1: import { render } from "@testing-library/react";
 2: import { BrowserRouter } from "react-router-dom";
 3: import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 4: 
 5: interface RenderOptions {
 6:   initialEntries?: string[];
 7:   withRouter?: boolean;
 8:   queryClient?: QueryClient;
 9: }
10: 
11: export const renderWithProviders = (
12:   ui: React.ReactElement,
13:   options: RenderOptions = {}
14: ) => {
15:   const {
16:     initialEntries = ["/"],
17:     withRouter = true,
18:     queryClient = new QueryClient({
19:       defaultOptions: {
20:         queries: {
21:           retry: false,
22:         },
23:         mutations: {
24:           retry: false,
25:         },
26:       },
27:     }),
28:   } = options;
29: 
30:   const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {
31:     const content = (
32:       <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
33:     );
34: 
35:     if (withRouter) {
36:       return <BrowserRouter>{content}</BrowserRouter>;
37:     }
38: 
39:     return content;
40:   };
41: 
42:   return render(ui, { wrapper: Wrapper });
43: };
44: 
45: 
46: export const mockPlantData = [
47:   {
48:     id: "plant-1",
49:     varietyId: "tomato-1",
50:     varietyName: "Cherry Tomato",
51:     name: "My Cherry Tomato",
52:     plantedDate: new Date("2024-01-01"),
53:     currentStage: "vegetative" as const,
54:     location: "Indoor",
55:     container: "5 gallon pot",
56:     isActive: true,
57:     notes: [],
58:     createdAt: new Date(),
59:     updatedAt: new Date(),
60:   },
61:   {
62:     id: "plant-2",
63:     varietyId: "basil-1",
64:     varietyName: "Sweet Basil",
65:     name: "My Basil",
66:     plantedDate: new Date("2024-01-15"),
67:     currentStage: "seedling" as const,
68:     location: "Indoor",
69:     container: "3 gallon pot",
70:     isActive: true,
71:     notes: [],
72:     createdAt: new Date(),
73:     updatedAt: new Date(),
74:   },
75: ];
76: 
77: export const mockUser = {
78:   uid: "test-user-id",
79:   email: "test@example.com",
80:   displayName: "Test User",
81: };

================
File: src/__tests__/utils/varietyGrowthStages.test.ts
================
  1: import {
  2:   calculateCurrentStage,
  3:   getStageProgress,
  4: } from "../../utils/growthStage";
  5: import { restoreDate } from "../../setupTests";
  6: 
  7: describe("Variety-Specific Growth Stage Calculations", () => {
  8:   beforeEach(() => {
  9:     restoreDate();
 10:   });
 11: 
 12:   describe("Fast-Growing Crops (21-45 days)", () => {
 13:     const arugulaTimeline = {
 14:       germination: 5,
 15:       seedling: 14,
 16:       vegetative: 14,
 17:       maturation: 37,
 18:     };
 19: 
 20:     it("calculates arugula stages correctly", () => {
 21:       const plantedDate = new Date("2024-01-01");
 22: 
 23: 
 24:       expect(
 25:         calculateCurrentStage(
 26:           plantedDate,
 27:           arugulaTimeline,
 28:           new Date("2024-01-03")
 29:         )
 30:       ).toBe("germination");
 31: 
 32: 
 33:       expect(
 34:         calculateCurrentStage(
 35:           plantedDate,
 36:           arugulaTimeline,
 37:           new Date("2024-01-10")
 38:         )
 39:       ).toBe("seedling");
 40: 
 41: 
 42:       expect(
 43:         calculateCurrentStage(
 44:           plantedDate,
 45:           arugulaTimeline,
 46:           new Date("2024-01-25")
 47:         )
 48:       ).toBe("vegetative");
 49: 
 50: 
 51:       expect(
 52:         calculateCurrentStage(
 53:           plantedDate,
 54:           arugulaTimeline,
 55:           new Date("2024-02-10")
 56:         )
 57:       ).toBe("harvest");
 58:     });
 59: 
 60:     const spinachTimeline = {
 61:       germination: 7,
 62:       seedling: 14,
 63:       vegetative: 9,
 64:       maturation: 30,
 65:     };
 66: 
 67:     it("calculates spinach stages correctly", () => {
 68:       const plantedDate = new Date("2024-01-01");
 69: 
 70: 
 71: 
 72:       expect(
 73:         calculateCurrentStage(
 74:           plantedDate,
 75:           spinachTimeline,
 76:           new Date("2024-01-31")
 77:         )
 78:       ).toBe("harvest");
 79: 
 80:       expect(
 81:         calculateCurrentStage(
 82:           plantedDate,
 83:           spinachTimeline,
 84:           new Date("2024-01-20")
 85:         )
 86:       ).toBe("seedling");
 87:     });
 88:   });
 89: 
 90:   describe("Medium Crops (45-70 days)", () => {
 91:     const lettuceTimeline = {
 92:       germination: 7,
 93:       seedling: 18,
 94:       vegetative: 21,
 95:       maturation: 55,
 96:     };
 97: 
 98:     it("calculates lettuce stages correctly", () => {
 99:       const plantedDate = new Date("2024-01-01");
100: 
101: 
102:       expect(
103:         calculateCurrentStage(
104:           plantedDate,
105:           lettuceTimeline,
106:           new Date("2024-02-20")
107:         )
108:       ).toBe("flowering");
109:       expect(
110:         calculateCurrentStage(
111:           plantedDate,
112:           lettuceTimeline,
113:           new Date("2024-02-25")
114:         )
115:       ).toBe("harvest");
116:     });
117: 
118:     const beetTimeline = {
119:       germination: 7,
120:       seedling: 14,
121:       vegetative: 21,
122:       maturation: 60,
123:     };
124: 
125:     it("calculates beet stages correctly", () => {
126:       const plantedDate = new Date("2024-01-01");
127: 
128: 
129:       expect(
130:         calculateCurrentStage(plantedDate, beetTimeline, new Date("2024-03-01"))
131:       ).toBe("harvest");
132:     });
133: 
134:     const carrotTimeline = {
135:       germination: 14,
136:       seedling: 14,
137:       vegetative: 14,
138:       maturation: 70,
139:     };
140: 
141:     it("calculates carrot stages correctly with strict photoperiod needs", () => {
142:       const plantedDate = new Date("2024-01-01");
143: 
144: 
145:       expect(
146:         calculateCurrentStage(
147:           plantedDate,
148:           carrotTimeline,
149:           new Date("2024-01-10")
150:         )
151:       ).toBe("germination");
152:       expect(
153:         calculateCurrentStage(
154:           plantedDate,
155:           carrotTimeline,
156:           new Date("2024-01-15")
157:         )
158:       ).toBe("seedling");
159: 
160: 
161:       expect(
162:         calculateCurrentStage(
163:           plantedDate,
164:           carrotTimeline,
165:           new Date("2024-03-11")
166:         )
167:       ).toBe("harvest");
168:     });
169:   });
170: 
171:   describe("Long Crops (90+ days)", () => {
172:     const sweetPotatoTimeline = {
173:       germination: 14,
174:       seedling: 21,
175:       vegetative: 42,
176:       maturation: 100,
177:     };
178: 
179:     it("calculates sweet potato stages correctly", () => {
180:       const plantedDate = new Date("2024-01-01");
181: 
182: 
183:       expect(
184:         calculateCurrentStage(
185:           plantedDate,
186:           sweetPotatoTimeline,
187:           new Date("2024-01-10")
188:         )
189:       ).toBe("germination");
190: 
191: 
192:       expect(
193:         calculateCurrentStage(
194:           plantedDate,
195:           sweetPotatoTimeline,
196:           new Date("2024-01-25")
197:         )
198:       ).toBe("seedling");
199: 
200: 
201:       expect(
202:         calculateCurrentStage(
203:           plantedDate,
204:           sweetPotatoTimeline,
205:           new Date("2024-02-20")
206:         )
207:       ).toBe("vegetative");
208: 
209: 
210:       expect(
211:         calculateCurrentStage(
212:           plantedDate,
213:           sweetPotatoTimeline,
214:           new Date("2024-04-15")
215:         )
216:       ).toBe("harvest");
217:     });
218: 
219:     const broccoliTimeline = {
220:       germination: 7,
221:       seedling: 17,
222:       vegetative: 30,
223:       maturation: 90,
224:     };
225: 
226:     it("calculates broccoli stages correctly", () => {
227:       const plantedDate = new Date("2024-01-01");
228: 
229: 
230:       expect(
231:         calculateCurrentStage(
232:           plantedDate,
233:           broccoliTimeline,
234:           new Date("2024-04-01")
235:         )
236:       ).toBe("harvest");
237:       expect(
238:         calculateCurrentStage(
239:           plantedDate,
240:           broccoliTimeline,
241:           new Date("2024-03-15")
242:         )
243:       ).toBe("flowering");
244:     });
245: 
246:     const onionTimeline = {
247:       germination: 14,
248:       seedling: 28,
249:       vegetative: 42,
250:       maturation: 120,
251:     };
252: 
253:     it("calculates onion bulbing stages correctly", () => {
254:       const plantedDate = new Date("2024-01-01");
255: 
256: 
257:       expect(
258:         calculateCurrentStage(
259:           plantedDate,
260:           onionTimeline,
261:           new Date("2024-03-01")
262:         )
263:       ).toBe("vegetative");
264: 
265: 
266:       expect(
267:         calculateCurrentStage(
268:           plantedDate,
269:           onionTimeline,
270:           new Date("2024-05-01")
271:         )
272:       ).toBe("harvest");
273:     });
274:   });
275: 
276:   describe("Continuous Production Crops", () => {
277:     const strawberryTimeline = {
278:       germination: 21,
279:       seedling: 21,
280:       vegetative: 14,
281:       maturation: 91,
282:     };
283: 
284:     it("calculates strawberry production stages correctly", () => {
285:       const plantedDate = new Date("2024-01-01");
286: 
287: 
288:       expect(
289:         calculateCurrentStage(
290:           plantedDate,
291:           strawberryTimeline,
292:           new Date("2024-04-16")
293:         )
294:       ).toBe("harvest");
295: 
296: 
297:       expect(
298:         calculateCurrentStage(
299:           plantedDate,
300:           strawberryTimeline,
301:           new Date("2024-01-15")
302:         )
303:       ).toBe("germination");
304: 
305: 
306:       expect(
307:         calculateCurrentStage(
308:           plantedDate,
309:           strawberryTimeline,
310:           new Date("2024-02-05")
311:         )
312:       ).toBe("seedling");
313: 
314: 
315:       expect(
316:         calculateCurrentStage(
317:           plantedDate,
318:           strawberryTimeline,
319:           new Date("2024-02-20")
320:         )
321:       ).toBe("vegetative");
322: 
323: 
324:       expect(
325:         calculateCurrentStage(
326:           plantedDate,
327:           strawberryTimeline,
328:           new Date("2024-03-15")
329:         )
330:       ).toBe("flowering");
331: 
332: 
333:       expect(
334:         calculateCurrentStage(
335:           plantedDate,
336:           strawberryTimeline,
337:           new Date("2024-04-01")
338:         )
339:       ).toBe("harvest");
340:     });
341:   });
342: 
343:   describe("Stage Progress Calculations", () => {
344:     it("calculates progress correctly within stages", () => {
345:       const plantedDate = new Date("2024-01-01");
346:       const lettuceTimeline = {
347:         germination: 7,
348:         seedling: 18,
349:         vegetative: 21,
350:         maturation: 55,
351:       };
352: 
353: 
354:       const midSeedlingProgress = getStageProgress(
355:         plantedDate,
356:         lettuceTimeline,
357:         new Date("2024-01-16")
358:       );
359:       expect(midSeedlingProgress).toBeCloseTo(44, 0);
360: 
361: 
362:       const earlyGerminationProgress = getStageProgress(
363:         plantedDate,
364:         lettuceTimeline,
365:         new Date("2024-01-04")
366:       );
367:       expect(earlyGerminationProgress).toBeCloseTo(43, 0);
368: 
369: 
370:       const earlyVegetativeProgress = getStageProgress(
371:         plantedDate,
372:         lettuceTimeline,
373:         new Date("2024-01-30")
374:       );
375:       expect(earlyVegetativeProgress).toBeCloseTo(19, 0);
376:     });
377: 
378:     it("returns 100% for completed crops", () => {
379:       const plantedDate = new Date("2024-01-01");
380:       const arugulaTimeline = {
381:         germination: 5,
382:         seedling: 14,
383:         vegetative: 14,
384:         maturation: 37,
385:       };
386: 
387:       const progress = getStageProgress(
388:         plantedDate,
389:         arugulaTimeline,
390:         new Date("2024-03-01")
391:       );
392:       expect(progress).toBe(100);
393:     });
394:   });
395: 
396:   describe("Edge Cases", () => {
397:     it("handles future planting dates gracefully", () => {
398:       const plantedDate = new Date("2024-12-31");
399:       const currentDate = new Date("2024-01-01");
400:       const arugulaTimeline = {
401:         germination: 5,
402:         seedling: 14,
403:         vegetative: 14,
404:         maturation: 37,
405:       };
406: 
407:       expect(
408:         calculateCurrentStage(plantedDate, arugulaTimeline, currentDate)
409:       ).toBe("germination");
410:     });
411: 
412:     it("handles same-day calculations", () => {
413:       const plantedDate = new Date("2024-01-01");
414:       const currentDate = new Date("2024-01-01");
415:       const spinachTimeline = {
416:         germination: 7,
417:         seedling: 14,
418:         vegetative: 14,
419:         maturation: 30,
420:       };
421: 
422:       expect(
423:         calculateCurrentStage(plantedDate, spinachTimeline, currentDate)
424:       ).toBe("germination");
425:     });
426:   });
427: });

================
File: src/assets/react.svg
================
1: <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/ui/LoadingSpinner.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface LoadingSpinnerProps {
 5:   size?: "sm" | "md" | "lg";
 6:   className?: string;
 7: }
 8: 
 9: export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
10:   size = "md",
11:   className,
12: }) => {
13:   const sizeClasses = {
14:     sm: "w-4 h-4",
15:     md: "w-6 h-6",
16:     lg: "w-8 h-8",
17:   };
18: 
19:   return (
20:     <div className={cn("flex items-center justify-center", className)}>
21:       <div
22:         className={cn(
23:           "animate-spin rounded-full border-2 border-garden-200 border-t-garden-600",
24:           sizeClasses[size]
25:         )}
26:       />
27:     </div>
28:   );
29: };

================
File: src/components/ui/OfflineIndicator.tsx
================
 1: import React, { useState, useEffect } from "react";
 2: 
 3: export const OfflineIndicator: React.FC = () => {
 4:   const [isOnline, setIsOnline] = useState(navigator.onLine);
 5: 
 6:   useEffect(() => {
 7:     function handleOnline() {
 8:       setIsOnline(true);
 9:     }
10: 
11:     function handleOffline() {
12:       setIsOnline(false);
13:     }
14: 
15:     window.addEventListener("online", handleOnline);
16:     window.addEventListener("offline", handleOffline);
17: 
18:     return () => {
19:       window.removeEventListener("online", handleOnline);
20:       window.removeEventListener("offline", handleOffline);
21:     };
22:   }, []);
23: 
24:   if (isOnline) return null;
25: 
26:   return (
27:     <div className="fixed top-0 left-0 right-0 bg-red-600 text-white px-4 py-2 text-center text-sm font-medium z-50">
28:       📡 You're offline - Data will sync when connection returns
29:     </div>
30:   );
31: };

================
File: src/components/ui/StatusBadge.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface StatusBadgeProps {
 5:   status: "healthy" | "attention" | "critical" | "new";
 6:   size?: "sm" | "md";
 7: }
 8: 
 9: export const StatusBadge: React.FC<StatusBadgeProps> = ({
10:   status,
11:   size = "md",
12: }) => {
13:   const baseClasses = "inline-flex items-center font-medium rounded-full";
14: 
15:   const sizeClasses = {
16:     sm: "px-2 py-0.5 text-xs",
17:     md: "px-2.5 py-1 text-sm",
18:   };
19: 
20:   const statusClasses = {
21:     healthy: "bg-green-100 text-green-800",
22:     attention: "bg-yellow-100 text-yellow-800",
23:     critical: "bg-red-100 text-red-800",
24:     new: "bg-blue-100 text-blue-800",
25:   };
26: 
27:   const statusIcons = {
28:     healthy: "✅",
29:     attention: "⚠️",
30:     critical: "🚨",
31:     new: "🌱",
32:   };
33: 
34:   return (
35:     <span className={cn(baseClasses, sizeClasses[size], statusClasses[status])}>
36:       <span className="mr-1">{statusIcons[status]}</span>
37:       {status}
38:     </span>
39:   );
40: };

================
File: src/hooks/useAppInitialization.ts
================
 1: import { useEffect } from "react";
 2: import { initializeDatabase } from "@/db/seedData";
 3: 
 4: export function useAppInitialization() {
 5:   useEffect(() => {
 6:     const initializeApp = async () => {
 7:       try {
 8:         console.log("🌱 Initializing database...");
 9:         await initializeDatabase();
10:         console.log("✅ Database initialization complete");
11:       } catch (error) {
12:         console.error("❌ Error during app initialization:", error);
13:       }
14:     };
15: 
16:     initializeApp();
17:   }, []);
18: }

================
File: src/hooks/useDarkMode.ts
================
 1: import { useState, useEffect } from "react";
 2: 
 3: export const useDarkMode = () => {
 4:   const [isDarkMode, setIsDarkMode] = useState(() => {
 5: 
 6:     const saved = localStorage.getItem("darkMode");
 7:     if (saved !== null) {
 8:       return JSON.parse(saved);
 9:     }
10: 
11: 
12:     return window.matchMedia("(prefers-color-scheme: dark)").matches;
13:   });
14: 
15:   useEffect(() => {
16: 
17:     if (isDarkMode) {
18:       document.documentElement.classList.add("dark");
19:     } else {
20:       document.documentElement.classList.remove("dark");
21:     }
22: 
23: 
24:     localStorage.setItem("darkMode", JSON.stringify(isDarkMode));
25:   }, [isDarkMode]);
26: 
27: 
28:   useEffect(() => {
29:     const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
30:     const handleChange = (e: MediaQueryListEvent) => {
31: 
32:       const saved = localStorage.getItem("darkMode");
33:       if (saved === null) {
34:         setIsDarkMode(e.matches);
35:       }
36:     };
37: 
38:     mediaQuery.addEventListener("change", handleChange);
39:     return () => mediaQuery.removeEventListener("change", handleChange);
40:   }, []);
41: 
42:   return { isDarkMode, toggleDarkMode: () => setIsDarkMode(!isDarkMode) };
43: };

================
File: src/hooks/useFirstTimeUser.ts
================
 1: import { useState, useEffect } from "react";
 2: import { plantService } from "@/types/database";
 3: 
 4: export const useFirstTimeUser = () => {
 5:   const [isFirstTime, setIsFirstTime] = useState<boolean | null>(null);
 6:   const [isLoading, setIsLoading] = useState(true);
 7: 
 8:   useEffect(() => {
 9:     const checkFirstTimeUser = async () => {
10:       try {
11: 
12:         const plants = await plantService.getActivePlants();
13: 
14: 
15:         const hasCompletedOnboarding = localStorage.getItem(
16:           "smartgarden_onboarding_completed"
17:         );
18: 
19:         setIsFirstTime(plants.length === 0 && !hasCompletedOnboarding);
20:       } catch (error) {
21:         console.error("Error checking first time user:", error);
22:         setIsFirstTime(false);
23:       } finally {
24:         setIsLoading(false);
25:       }
26:     };
27: 
28:     checkFirstTimeUser();
29:   }, []);
30: 
31:   const markOnboardingComplete = () => {
32:     localStorage.setItem("smartgarden_onboarding_completed", "true");
33:     setIsFirstTime(false);
34:   };
35: 
36:   return {
37:     isFirstTime,
38:     isLoading,
39:     markOnboardingComplete,
40:   };
41: };

================
File: src/hooks/useNextPlantTask.ts
================
 1: import { useState, useEffect } from "react";
 2: import { CareSchedulingService } from "@/services/careSchedulingService";
 3: import { UpcomingTask } from "@/types/scheduling";
 4: 
 5: export const useNextPlantTask = (plantId: string) => {
 6:   const [nextTask, setNextTask] = useState<UpcomingTask | null>(null);
 7:   const [isLoading, setIsLoading] = useState(true);
 8: 
 9:   useEffect(() => {
10:     let mounted = true;
11: 
12:     const loadNextTask = async () => {
13:       try {
14:         setIsLoading(true);
15:         const task = await CareSchedulingService.getNextTaskForPlant(plantId);
16:         if (mounted) {
17:           setNextTask(task);
18:         }
19:       } catch (error) {
20:         console.error(`Failed to load next task for plant ${plantId}:`, error);
21:         if (mounted) {
22:           setNextTask(null);
23:         }
24:       } finally {
25:         if (mounted) {
26:           setIsLoading(false);
27:         }
28:       }
29:     };
30: 
31:     loadNextTask();
32: 
33:     return () => {
34:       mounted = false;
35:     };
36:   }, [plantId]);
37: 
38:   return { nextTask, isLoading };
39: };

================
File: src/pages/dashboard/TaskGroup.tsx
================
 1: import React, { useState } from "react";
 2: import { Card, CardContent, CardHeader } from "@/components/ui/Card";
 3: import {
 4:   QuickCompletionValues,
 5:   TaskGroup as TaskGroupType,
 6: } from "@/types/scheduling";
 7: import TaskItem from "./TaskItem";
 8: 
 9: interface TaskGroupProps {
10:   group: TaskGroupType;
11:   onQuickComplete?: (
12:     taskId: string,
13:     values: QuickCompletionValues
14:   ) => Promise<void>;
15:   onBypass?: (taskId: string, reason: string) => Promise<void>;
16:   onToggleExpanded?: (groupType: string) => void;
17: }
18: 
19: const TaskGroup: React.FC<TaskGroupProps> = ({
20:   group,
21:   onQuickComplete,
22:   onBypass,
23:   onToggleExpanded,
24: }) => {
25:   const [isExpanded, setIsExpanded] = useState(group.isExpanded);
26: 
27:   const handleToggle = () => {
28:     const newExpanded = !isExpanded;
29:     setIsExpanded(newExpanded);
30:     onToggleExpanded?.(group.type);
31:   };
32: 
33:   const urgentTaskCount = group.tasks.filter(
34:     (task) => task.priority === "high" || task.dueIn.includes("overdue")
35:   ).length;
36: 
37:   return (
38:     <Card className="w-full">
39:       <CardHeader className="cursor-pointer hover:bg-muted/50 transition-colors">
40:         <div
41:           className="flex items-center justify-between"
42:           onClick={handleToggle}
43:         >
44:           {}
45:           <div className="flex items-center gap-3">
46:             <span className="text-2xl">{group.emoji}</span>
47:             <div>
48:               <h3 className="text-lg font-semibold">{group.title}</h3>
49:               <p className="text-sm text-muted-foreground">
50:                 {group.tasks.length} task{group.tasks.length !== 1 ? "s" : ""}
51:                 {urgentTaskCount > 0 && (
52:                   <span className="ml-2 px-2 py-0.5 bg-red-100 text-red-700 rounded-full text-xs font-medium">
53:                     {urgentTaskCount} urgent
54:                   </span>
55:                 )}
56:               </p>
57:             </div>
58:           </div>
59: 
60:           <div className="flex items-center gap-2">
61:             <svg
62:               className={`w-5 h-5 transition-transform ${
63:                 isExpanded ? "rotate-180" : ""
64:               }`}
65:               fill="none"
66:               stroke="currentColor"
67:               viewBox="0 0 24 24"
68:             >
69:               <path
70:                 strokeLinecap="round"
71:                 strokeLinejoin="round"
72:                 strokeWidth={2}
73:                 d="M19 9l-7 7-7-7"
74:               />
75:             </svg>
76:           </div>
77:         </div>
78:       </CardHeader>
79: 
80:       {isExpanded && (
81:         <CardContent className="pt-0">
82:           <div className="space-y-3">
83:             {group.tasks.map((task) => (
84:               <TaskItem
85:                 key={task.id}
86:                 task={task}
87:                 onQuickComplete={onQuickComplete}
88:                 onBypass={onBypass}
89:               />
90:             ))}
91:           </div>
92:         </CardContent>
93:       )}
94:     </Card>
95:   );
96: };
97: 
98: export default TaskGroup;

================
File: src/pages/settings/index.tsx
================
 1: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
 2: 
 3: const Settings = () => {
 4:   return (
 5:     <div className="space-y-6">
 6:       <h1 className="text-2xl font-bold">Settings</h1>
 7: 
 8:       <Card>
 9:         <CardHeader>
10:           <CardTitle>Sync Settings</CardTitle>
11:         </CardHeader>
12:       </Card>
13: 
14:       <Card>
15:         <CardHeader>
16:           <CardTitle>App Information</CardTitle>
17:         </CardHeader>
18:         <CardContent className="space-y-2">
19:           <div className="flex justify-between">
20:             <span>Version:</span>
21:             <span>1.0.0</span>
22:           </div>
23:           <div className="flex justify-between">
24:             <span>Build:</span>
25:             <span>Development</span>
26:           </div>
27:         </CardContent>
28:       </Card>
29:     </div>
30:   );
31: };
32: 
33: export default Settings;

================
File: src/services/dynamicSchedulingService.ts
================
  1: import { db, TaskCompletionRecord } from "@/types/database";
  2: import { CareActivityType, GrowthStage } from "@/types/core";
  3: import { addDays, differenceInDays } from "date-fns";
  4: 
  5: export interface SchedulingAdjustment {
  6:   plantId: string;
  7:   taskType: CareActivityType;
  8:   originalInterval: number;
  9:   adjustedInterval: number;
 10:   reason: string;
 11:   confidence: number;
 12: }
 13: 
 14: export class DynamicSchedulingService {
 15:   static async recordTaskCompletion(
 16:     plantId: string,
 17:     taskType: CareActivityType,
 18:     scheduledDate: Date,
 19:     actualCompletionDate: Date,
 20:     careActivityId: string,
 21:     plantStage: GrowthStage
 22:   ): Promise<void> {
 23:     try {
 24:       const varianceDays = differenceInDays(
 25:         actualCompletionDate,
 26:         scheduledDate
 27:       );
 28: 
 29:       await db.taskCompletions.add({
 30:         id: crypto.randomUUID(),
 31:         plantId,
 32:         taskType,
 33:         scheduledDate,
 34:         actualCompletionDate,
 35:         varianceDays,
 36:         careActivityId,
 37:         plantStage,
 38:         createdAt: new Date(),
 39:         updatedAt: new Date(),
 40:       });
 41:     } catch (error) {
 42:       console.error("Failed to record task completion:", error);
 43:       throw error;
 44:     }
 45:   }
 46: 
 47:   static async getNextDueDateForTask(
 48:     plantId: string,
 49:     taskType: CareActivityType,
 50:     lastCompletionDate: Date
 51:   ): Promise<Date> {
 52:     try {
 53:       const patterns = await this.getCompletionPatterns(plantId, taskType);
 54: 
 55: 
 56:       let intervalDays = 7;
 57: 
 58:       if (patterns.recommendedAdjustment !== 0 && patterns.consistency > 0.5) {
 59:         intervalDays += patterns.recommendedAdjustment;
 60:       }
 61: 
 62:       return addDays(lastCompletionDate, intervalDays);
 63:     } catch (error) {
 64:       console.error("Failed to get next due date for task:", error);
 65: 
 66:       return addDays(lastCompletionDate, 7);
 67:     }
 68:   }
 69:   static async getCompletionPatterns(
 70:     plantId: string,
 71:     taskType: CareActivityType,
 72:     lookbackDays: number = 90
 73:   ): Promise<{
 74:     averageVariance: number;
 75:     consistency: number;
 76:     recommendedAdjustment: number;
 77:   }> {
 78:     try {
 79:       const cutoffDate = addDays(new Date(), -lookbackDays);
 80: 
 81:       const completions = await db.taskCompletions
 82:         .where("plantId")
 83:         .equals(plantId)
 84:         .and(
 85:           (completion: TaskCompletionRecord) =>
 86:             completion.taskType === taskType &&
 87:             new Date(completion.scheduledDate) > cutoffDate
 88:         )
 89:         .toArray();
 90: 
 91:       if (completions.length < 3) {
 92:         return {
 93:           averageVariance: 0,
 94:           consistency: 0,
 95:           recommendedAdjustment: 0,
 96:         };
 97:       }
 98: 
 99:       const variances = completions.map(
100:         (completion: TaskCompletionRecord) => completion.varianceDays
101:       );
102:       const averageVariance =
103:         variances.reduce((sum, variance) => sum + variance, 0) /
104:         variances.length;
105: 
106: 
107:       const mean = averageVariance;
108:       const squaredDiffs = variances.map((variance) =>
109:         Math.pow(variance - mean, 2)
110:       );
111:       const stdDev = Math.sqrt(
112:         squaredDiffs.reduce((sum, diff) => sum + diff, 0) / variances.length
113:       );
114:       const consistency = Math.max(0, 1 - stdDev / 7);
115: 
116: 
117:       let recommendedAdjustment = 0;
118:       if (Math.abs(averageVariance) > 1 && consistency > 0.6) {
119:         recommendedAdjustment = Math.round(averageVariance * 0.7);
120:       }
121: 
122:       return {
123:         averageVariance,
124:         consistency,
125:         recommendedAdjustment,
126:       };
127:     } catch (error) {
128:       console.error("Failed to get completion patterns:", error);
129:       return {
130:         averageVariance: 0,
131:         consistency: 0,
132:         recommendedAdjustment: 0,
133:       };
134:     }
135:   }
136: 
137:   static async getSchedulingAdjustments(
138:     plantId?: string
139:   ): Promise<SchedulingAdjustment[]> {
140:     try {
141:       const cutoffDate = addDays(new Date(), -60);
142: 
143:       let query = db.taskCompletions.where("scheduledDate").above(cutoffDate);
144: 
145:       if (plantId) {
146:         query = query.and(
147:           (completion: TaskCompletionRecord) => completion.plantId === plantId
148:         );
149:       }
150: 
151:       const completions = await query.toArray();
152: 
153: 
154:       const grouped = completions.reduce(
155:         (
156:           acc: Record<string, TaskCompletionRecord[]>,
157:           completion: TaskCompletionRecord
158:         ) => {
159:           const key = `${completion.plantId}-${completion.taskType}`;
160:           if (!acc[key]) {
161:             acc[key] = [];
162:           }
163:           acc[key].push(completion);
164:           return acc;
165:         },
166:         {}
167:       );
168: 
169:       const adjustments: SchedulingAdjustment[] = [];
170: 
171:       for (const [key, taskCompletions] of Object.entries(grouped)) {
172:         if (taskCompletions.length < 3) continue;
173: 
174:         const [plantId, taskType] = key.split("-");
175:         const patterns = await this.getCompletionPatterns(
176:           plantId,
177:           taskType as CareActivityType
178:         );
179: 
180:         if (Math.abs(patterns.recommendedAdjustment) > 0) {
181:           adjustments.push({
182:             plantId,
183:             taskType: taskType as CareActivityType,
184:             originalInterval: 7,
185:             adjustedInterval: 7 + patterns.recommendedAdjustment,
186:             reason:
187:               patterns.averageVariance > 0
188:                 ? `Tasks consistently completed ${Math.abs(
189:                     patterns.averageVariance
190:                   )} days late`
191:                 : `Tasks consistently completed ${Math.abs(
192:                     patterns.averageVariance
193:                   )} days early`,
194:             confidence: patterns.consistency,
195:           });
196:         }
197:       }
198: 
199:       return adjustments.sort((a, b) => b.confidence - a.confidence);
200:     } catch (error) {
201:       console.error("Failed to get scheduling adjustments:", error);
202:       return [];
203:     }
204:   }
205: }

================
File: src/services/taskGroupingService.ts
================
  1: import { UpcomingTask, TaskGroup } from "@/types/scheduling";
  2: 
  3: export class TaskGroupingService {
  4:   static groupTasksByActivity(tasks: UpcomingTask[]): TaskGroup[] {
  5:     const groups: TaskGroup[] = [
  6:       {
  7:         type: "watering",
  8:         title: "Watering",
  9:         emoji: "💧",
 10:         tasks: [],
 11:         isExpanded: false,
 12:       },
 13:       {
 14:         type: "fertilizing",
 15:         title: "Fertilizing",
 16:         emoji: "🌱",
 17:         tasks: [],
 18:         isExpanded: false,
 19:       },
 20:       {
 21:         type: "observation",
 22:         title: "Health Checks",
 23:         emoji: "👁",
 24:         tasks: [],
 25:         isExpanded: false,
 26:       },
 27:       {
 28:         type: "maintenance",
 29:         title: "Maintenance",
 30:         emoji: "✂️",
 31:         tasks: [],
 32:         isExpanded: false,
 33:       },
 34:     ];
 35: 
 36:     tasks.forEach((task) => {
 37:       const taskLower = task.task.toLowerCase();
 38: 
 39:       if (this.isWateringTask(taskLower)) {
 40:         groups.find((g) => g.type === "watering")?.tasks.push(task);
 41:       } else if (this.isFertilizingTask(taskLower)) {
 42:         groups.find((g) => g.type === "fertilizing")?.tasks.push(task);
 43:       } else if (this.isObservationTask(taskLower)) {
 44:         groups.find((g) => g.type === "observation")?.tasks.push(task);
 45:       } else if (this.isMaintenanceTask(taskLower)) {
 46:         groups.find((g) => g.type === "maintenance")?.tasks.push(task);
 47:       }
 48:     });
 49: 
 50: 
 51:     const nonEmptyGroups = groups.filter((group) => group.tasks.length > 0);
 52: 
 53:     nonEmptyGroups.forEach((group) => {
 54:       group.isExpanded = this.shouldExpandGroup(group);
 55:     });
 56: 
 57:     return nonEmptyGroups;
 58:   }
 59: 
 60:   static shouldExpandGroup(group: TaskGroup): boolean {
 61:     if (group.tasks.length === 0) return false;
 62: 
 63: 
 64:     if (group.tasks.some((task) => task.priority === "high")) {
 65:       return true;
 66:     }
 67: 
 68: 
 69:     if (group.tasks.some((task) => task.dueIn.includes("overdue"))) {
 70:       return true;
 71:     }
 72: 
 73:     return false;
 74:   }
 75: 
 76:   private static isWateringTask(taskLower: string): boolean {
 77:     return taskLower.includes("water") || taskLower.includes("moisture");
 78:   }
 79: 
 80:   private static isFertilizingTask(taskLower: string): boolean {
 81:     return (
 82:       taskLower.includes("fertilize") ||
 83:       taskLower.includes("feed") ||
 84:       taskLower.includes("nutrient")
 85:     );
 86:   }
 87: 
 88:   private static isObservationTask(taskLower: string): boolean {
 89:     return (
 90:       taskLower.includes("health") ||
 91:       taskLower.includes("check") ||
 92:       taskLower.includes("observe") ||
 93:       taskLower.includes("pest")
 94:     );
 95:   }
 96: 
 97:   private static isMaintenanceTask(taskLower: string): boolean {
 98:     return (
 99:       taskLower.includes("prune") ||
100:       taskLower.includes("transplant") ||
101:       taskLower.includes("clean") ||
102:       taskLower.includes("trim")
103:     );
104:   }
105: }

================
File: src/types/user.ts
================
 1: export interface UserSettings {
 2:   id: string;
 3: 
 4:   units: {
 5:     temperature: "fahrenheit" | "celsius";
 6:     volume: "ounces" | "liters";
 7:   };
 8: 
 9:   notifications: {
10:     careReminders: boolean;
11:     harvestAlerts: boolean;
12:   };
13: 
14:   location: {
15:     timezone: string;
16:     zipCode?: string;
17:   };
18: }

================
File: src/utils/cn.ts
================
1: import { type ClassValue, clsx } from "clsx";
2: import { twMerge } from "tailwind-merge";
3: 
4: export function cn(...inputs: ClassValue[]) {
5:   return twMerge(clsx(inputs));
6: }

================
File: src/utils/dateUtils.ts
================
 1: export function formatDate(date: Date): string {
 2:   return new Intl.DateTimeFormat("en-US", {
 3:     month: "short",
 4:     day: "numeric",
 5:     year: "numeric",
 6:   }).format(date);
 7: }
 8: 
 9: export function getDaysSincePlanting(plantedDate: Date): number {
10:   const now = new Date();
11:   const diffTime = Math.abs(now.getTime() - plantedDate.getTime());
12:   return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
13: }
14: 
15: export function formatDateTime(date: Date): string {
16:   return new Intl.DateTimeFormat("en-US", {
17:     month: "short",
18:     day: "numeric",
19:     hour: "numeric",
20:     minute: "2-digit",
21:   }).format(date);
22: }
23: 
24: export function formatTime(date: Date): string {
25:   return new Intl.DateTimeFormat("en-US", {
26:     hour: "numeric",
27:     minute: "2-digit",
28:   }).format(date);
29: }

================
File: src/utils/plantDisplay.ts
================
 1: import { PlantRecord } from "@/types/database";
 2: 
 3: 
 4: 
 5: 
 6: 
 7: export function getPlantDisplayName(plant: PlantRecord): string {
 8: 
 9:   if (plant.name?.trim()) {
10:     return plant.name.trim();
11:   }
12: 
13: 
14:   if (plant.varietyName?.trim()) {
15:     return plant.varietyName.trim();
16:   }
17: 
18:   return "Unknown Plant";
19: }

================
File: src/utils/waterConversion.ts
================
 1: import { WaterAmount } from "../types/database";
 2: export function convertToMl(amount: WaterAmount): number {
 3:   const conversions = {
 4:     ml: 1,
 5:     oz: 29.5735,
 6:     cups: 236.588,
 7:     liters: 1000,
 8:     gallons: 3785.41,
 9:   };
10:   return amount.value * conversions[amount.unit];
11: }
12: 
13: export function formatWaterAmount(amount: WaterAmount): string {
14:   return `${amount.value} ${amount.unit}`;
15: }

================
File: src/index.css
================
 1: :root {
 2:   font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
 3:   line-height: 1.5;
 4:   font-weight: 400;
 5: 
 6:   color-scheme: light dark;
 7:   color: rgba(255, 255, 255, 0.87);
 8:   background-color: #242424;
 9: 
10:   font-synthesis: none;
11:   text-rendering: optimizeLegibility;
12:   -webkit-font-smoothing: antialiased;
13:   -moz-osx-font-smoothing: grayscale;
14: }
15: 
16: a {
17:   font-weight: 500;
18:   color: #646cff;
19:   text-decoration: inherit;
20: }
21: a:hover {
22:   color: #535bf2;
23: }
24: 
25: body {
26:   margin: 0;
27:   display: flex;
28:   place-items: center;
29:   min-width: 320px;
30:   min-height: 100vh;
31: }
32: 
33: h1 {
34:   font-size: 3.2em;
35:   line-height: 1.1;
36: }
37: 
38: button {
39:   border-radius: 8px;
40:   border: 1px solid transparent;
41:   padding: 0.6em 1.2em;
42:   font-size: 1em;
43:   font-weight: 500;
44:   font-family: inherit;
45:   background-color: #1a1a1a;
46:   cursor: pointer;
47:   transition: border-color 0.25s;
48: }
49: button:hover {
50:   border-color: #646cff;
51: }
52: button:focus,
53: button:focus-visible {
54:   outline: 4px auto -webkit-focus-ring-color;
55: }
56: 
57: @media (prefers-color-scheme: light) {
58:   :root {
59:     color: #213547;
60:     background-color: #ffffff;
61:   }
62:   a:hover {
63:     color: #747bff;
64:   }
65:   button {
66:     background-color: #f9f9f9;
67:   }
68: }

================
File: src/jest.polyfills.ts
================
 1: import { TextDecoder, TextEncoder } from "util";
 2: 
 3: Object.assign(global, { TextDecoder, TextEncoder });
 4: 
 5: 
 6: Object.defineProperty(global, "importMeta", {
 7:   value: {
 8:     env: {
 9:       VITE_FIREBASE_API_KEY: "test-api-key",
10:       VITE_FIREBASE_AUTH_DOMAIN: "test-project.firebaseapp.com",
11:       VITE_FIREBASE_PROJECT_ID: "test-project",
12:       VITE_FIREBASE_STORAGE_BUCKET: "test-project.appspot.com",
13:       VITE_FIREBASE_MESSAGING_SENDER_ID: "123456789",
14:       VITE_FIREBASE_APP_ID: "test-app-id",
15:     },
16:   },
17: });
18: 
19: 
20: declare global {
21:   const importMeta: {
22:     env: {
23:       VITE_FIREBASE_API_KEY: string;
24:       VITE_FIREBASE_AUTH_DOMAIN: string;
25:       VITE_FIREBASE_PROJECT_ID: string;
26:       VITE_FIREBASE_STORAGE_BUCKET: string;
27:       VITE_FIREBASE_MESSAGING_SENDER_ID: string;
28:       VITE_FIREBASE_APP_ID: string;
29:     };
30:   };
31: }

================
File: src/main.tsx
================
 1: import React from "react";
 2: import ReactDOM from "react-dom/client";
 3: import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 4: import { BrowserRouter } from "react-router-dom";
 5: import App from "./App.tsx";
 6: import "./styles/globals.css";
 7: 
 8: 
 9: const queryClient = new QueryClient({
10:   defaultOptions: {
11:     queries: {
12: 
13:       staleTime: 5 * 60 * 1000,
14: 
15:       gcTime: 24 * 60 * 60 * 1000,
16: 
17:       retry: (failureCount) => {
18: 
19:         if (!navigator.onLine) return false;
20:         return failureCount < 3;
21:       },
22:     },
23:   },
24: });
25: 
26: ReactDOM.createRoot(document.getElementById("root")!).render(
27:   <React.StrictMode>
28:     <QueryClientProvider client={queryClient}>
29:       <BrowserRouter>
30:         <App />
31:       </BrowserRouter>
32:     </QueryClientProvider>
33:   </React.StrictMode>
34: );

================
File: src/vite-env.d.ts
================
 1: interface ImportMetaEnv {
 2:   readonly VITE_FIREBASE_API_KEY: string;
 3:   readonly VITE_FIREBASE_AUTH_DOMAIN: string;
 4:   readonly VITE_FIREBASE_PROJECT_ID: string;
 5:   readonly VITE_FIREBASE_STORAGE_BUCKET: string;
 6:   readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string;
 7:   readonly VITE_FIREBASE_APP_ID: string;
 8: }
 9: 
10: interface ImportMeta {
11:   readonly env: ImportMetaEnv;
12: }

================
File: tests/e2e/pwa-functionality.spec.ts
================
 1: import { test, expect } from "@playwright/test";
 2: 
 3: test.describe("PWA Functionality", () => {
 4:   test.beforeEach(async ({ page }) => {
 5: 
 6:     await page.context().clearCookies();
 7:     await page.evaluate(() => {
 8:       localStorage.clear();
 9:       sessionStorage.clear();
10:     });
11:   });
12: 
13:   test("app loads and displays correctly", async ({ page }) => {
14:     await page.goto("/");
15: 
16:     await expect(page.getByText("🌱 SmartGarden")).toBeVisible();
17:     await expect(page.getByText("Active Plants")).toBeVisible();
18:     await expect(page.getByText("Tasks Due")).toBeVisible();
19:   });
20: 
21:   test("offline functionality works", async ({ page, context }) => {
22: 
23:     await page.goto("/");
24:     await expect(page.getByText("SmartGarden")).toBeVisible();
25: 
26: 
27:     await context.setOffline(true);
28: 
29: 
30:     await page.reload();
31: 
32: 
33:     await expect(page.getByText("SmartGarden")).toBeVisible();
34: 
35: 
36:     await expect(page.getByText(/offline/i)).toBeVisible();
37:   });
38: 
39:   test("plant registration flow", async ({ page }) => {
40:     await page.goto("/");
41: 
42: 
43:     await page.getByText("Add Your First Plant").click();
44: 
45: 
46:     await page.selectOption('[name="varietyId"]', { index: 1 });
47:     await page.fill('[name="name"]', "My Test Plant");
48:     await page.fill('[name="location"]', "Test Location");
49:     await page.fill('[name="container"]', "Test Container");
50: 
51: 
52:     await page.getByText("Register Plant").click();
53: 
54: 
55:     await expect(page.getByText("My Test Plant")).toBeVisible();
56:   });
57: 
58:   test("data persists across page reloads", async ({ page }) => {
59:     await page.goto("/add-plant");
60: 
61: 
62:     await page.selectOption('[name="varietyId"]', { index: 1 });
63:     await page.fill('[name="name"]', "Persistent Plant");
64:     await page.fill('[name="location"]', "Kitchen");
65:     await page.fill('[name="container"]', "4 inch pot");
66:     await page.getByText("Register Plant").click();
67: 
68: 
69:     await page.reload();
70: 
71: 
72:     await expect(page.getByText("Persistent Plant")).toBeVisible();
73:     await expect(page.getByText("1")).toBeVisible();
74:   });
75: 
76:   test("responsive design on mobile viewport", async ({ page }) => {
77: 
78:     await page.setViewportSize({ width: 375, height: 667 });
79:     await page.goto("/");
80: 
81: 
82:     const navItems = page.locator("nav a");
83:     await expect(navItems.first()).toBeVisible();
84: 
85: 
86:     const buttonSize = await page.getByText("Add Plant").boundingBox();
87:     expect(buttonSize?.height).toBeGreaterThanOrEqual(44);
88:   });
89: });

================
File: eslint.config.js
================
 1: import js from '@eslint/js'
 2: import globals from 'globals'
 3: import reactHooks from 'eslint-plugin-react-hooks'
 4: import reactRefresh from 'eslint-plugin-react-refresh'
 5: import tseslint from 'typescript-eslint'
 6: 
 7: export default tseslint.config(
 8:   { ignores: ['dist'] },
 9:   {
10:     extends: [js.configs.recommended, ...tseslint.configs.recommended],
11:     files: ['**/*.{ts,tsx}'],
12:     languageOptions: {
13:       ecmaVersion: 2020,
14:       globals: globals.browser,
15:     },
16:     plugins: {
17:       'react-hooks': reactHooks,
18:       'react-refresh': reactRefresh,
19:     },
20:     rules: {
21:       ...reactHooks.configs.recommended.rules,
22:       'react-refresh/only-export-components': [
23:         'warn',
24:         { allowConstantExport: true },
25:       ],
26:     },
27:   },
28: )

================
File: postcss.config.js
================
1: export default {
2:   plugins: {
3:     tailwindcss: {},
4:     autoprefixer: {},
5:   },
6: }

================
File: repomix.config.json
================
 1: {
 2:   "output": {
 3:     "style": "plain",
 4:     "filePath": "custom-output.txt",
 5:     "removeComments": true,
 6:     "showLineNumbers": true,
 7:     "topFilesLength": 10
 8:   },
 9:   "ignore": {
10:     "customPatterns": [
11:       "logs",
12:       "*.log",
13:       "npm-debug.log*",
14:       "yarn-debug.log*",
15:       "yarn-error.log*",
16:       "pnpm-debug.log*",
17:       "lerna-debug.log*",
18:       ".cache/",
19:       ".parcel-cache/",
20:       "node_modules",
21:       "dist",
22:       "dist-ssr",
23:       "*.local",
24:       ".vscode/*",
25:       "*.suo",
26:       "*.ntvs*",
27:       "*.njsproj",
28:       "*.sln",
29:       "*.sw?",
30:       "._*",
31:       ".Spotlight-V100",
32:       ".Trashes",
33:       "ehthumbs.db",
34:       "Thumbs.db",
35:       ".vscode/",
36:       ".idea/",
37:       ".env.local",
38:       ".env.development.local",
39:       ".env.test.local",
40:       ".env.production.local",
41:       "*.tmp",
42:       "*.temp"
43:     ]
44:   }
45: }

================
File: tsconfig.app.json
================
 1: {
 2:   "compilerOptions": {
 3:     "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
 4:     "target": "ES2020",
 5:     "useDefineForClassFields": true,
 6:     "lib": ["ES2020", "DOM", "DOM.Iterable"],
 7:     "module": "ESNext",
 8:     "skipLibCheck": true,
 9: 
10:     /* Bundler mode */
11:     "moduleResolution": "bundler",
12:     "allowImportingTsExtensions": true,
13:     "verbatimModuleSyntax": true,
14:     "moduleDetection": "force",
15:     "noEmit": true,
16:     "jsx": "react-jsx",
17: 
18:     /* Linting */
19:     "strict": true,
20:     "noUnusedLocals": true,
21:     "noUnusedParameters": true,
22:     "erasableSyntaxOnly": true,
23:     "noFallthroughCasesInSwitch": true,
24:     "noUncheckedSideEffectImports": true
25:   },
26:   "include": ["src"]
27: }

================
File: tsconfig.node.json
================
 1: {
 2:   "compilerOptions": {
 3:     "composite": true,
 4:     "skipLibCheck": true,
 5:     "module": "ESNext",
 6:     "moduleResolution": "bundler",
 7:     "allowSyntheticDefaultImports": true,
 8:     "strict": true,
 9:     "noEmit": true
10:   },
11:   "include": ["vite.config.ts"]
12: }

================
File: tsconfig.tsbuildinfo
================
1: {"root":["./src/app.tsx","./src/jest.polyfills.ts","./src/main.tsx","./src/setuptests.ts","./src/vite-env.d.ts","./src/__tests__/components/addplant.test.tsx","./src/__tests__/components/bulkactivitymodal.test.tsx","./src/__tests__/components/carelogform.test.tsx","./src/__tests__/components/dashboard.test.tsx","./src/__tests__/components/logcare.test.tsx","./src/__tests__/components/plantregistrationform.test.tsx","./src/__tests__/components/plantremindersettings.test.tsx","./src/__tests__/components/plantstagedisplay.test.tsx","./src/__tests__/components/reminderpreferencessection.test.tsx","./src/__tests__/components/soilmixtureselector.test.tsx","./src/__tests__/database/plantservice.test.ts","./src/__tests__/database/varietyservice.test.ts","./src/__tests__/e2e/plant-registration.spec.ts","./src/__tests__/integration/plantdetailremindersettings.test.tsx","./src/__tests__/integration/plantregistrationflow.test.tsx","./src/__tests__/integration/smartdefaultsintegration.test.tsx","./src/__tests__/integration/stagecalculationdisplay.test.tsx","./src/__tests__/integration/taskgroupingservice.test.tsx","./src/__tests__/services/careschedulingservice.test.ts","./src/__tests__/services/smartdefaultsservice.test.ts","./src/__tests__/setup/mockfirebase.ts","./src/__tests__/utils/growthstage.test.ts","./src/__tests__/utils/plantdisplay.test.ts","./src/__tests__/utils/plantgrouping.test.ts","./src/__tests__/utils/plantregistration.test.ts","./src/__tests__/utils/testhelpers.tsx","./src/__tests__/utils/varietygrowthstages.test.ts","./src/components/authform.tsx","./src/components/navigation.tsx","./src/components/layouts/emptystate.tsx","./src/components/layouts/welcome.tsx","./src/components/plant/bulkactivitymodal.tsx","./src/components/plant/careactivityitem.tsx","./src/components/plant/carehistory.tsx","./src/components/plant/customvarietyform.tsx","./src/components/plant/nextactivitycard.tsx","./src/components/plant/plantgroupcard.tsx","./src/components/plant/plantinfocard.tsx","./src/components/plant/plantregistrationform.tsx","./src/components/plant/plantremindersettings.tsx","./src/components/plant/plantstagedisplay.tsx","./src/components/plant/reminderpreferencessection.tsx","./src/components/plant/soilmixtureselector.tsx","./src/components/ui/badge.tsx","./src/components/ui/button.tsx","./src/components/ui/card.tsx","./src/components/ui/darkmodetoggle.tsx","./src/components/ui/input.tsx","./src/components/ui/loadingspinner.tsx","./src/components/ui/locationtoggle.tsx","./src/components/ui/offlineindicator.tsx","./src/components/ui/statusbadge.tsx","./src/components/ui/switch.tsx","./src/data/seedvarieties.ts","./src/db/seeddata.ts","./src/hooks/useappinitialization.ts","./src/hooks/usedarkmode.ts","./src/hooks/usedynamicstage.ts","./src/hooks/usefirebaseauth.ts","./src/hooks/usefirebasecareactivities.ts","./src/hooks/usefirebaseplants.ts","./src/hooks/usefirsttimeuser.ts","./src/hooks/usenextplanttask.ts","./src/pages/analytics/index.tsx","./src/pages/care/carelogform.tsx","./src/pages/care/logcare.tsx","./src/pages/care/photocapture.tsx","./src/pages/care/quickcompletionbuttons.tsx","./src/pages/care/index.tsx","./src/pages/dashboard/taskgroup.tsx","./src/pages/dashboard/taskitem.tsx","./src/pages/dashboard/index.tsx","./src/pages/plants/addplant.tsx","./src/pages/plants/plantdetail.tsx","./src/pages/plants/plants.tsx","./src/pages/settings/index.tsx","./src/services/bypassservice.ts","./src/services/bulkactivityservice.ts","./src/services/careschedulingservice.ts","./src/services/dynamicschedulingservice.ts","./src/services/smartdefaultsservice.ts","./src/services/taskgroupingservice.ts","./src/services/firebase/authservice.ts","./src/services/firebase/careactivityservice.ts","./src/services/firebase/config.ts","./src/services/firebase/plantservice.ts","./src/services/firebase/__mocks__/config.ts","./src/types/core.ts","./src/types/database.ts","./src/types/firebase.ts","./src/types/index.ts","./src/types/scheduling.ts","./src/types/user.ts","./src/utils/cn.ts","./src/utils/dateutils.ts","./src/utils/growthstage.ts","./src/utils/plantdisplay.ts","./src/utils/plantgrouping.ts","./src/utils/plantstage.ts","./src/utils/waterconversion.ts","./vite.config.ts"],"errors":true,"version":"5.8.3"}

================
File: vite.config.ts
================
 1: import { defineConfig } from "vite";
 2: import react from "@vitejs/plugin-react";
 3: import { VitePWA } from "vite-plugin-pwa";
 4: import path from "path";
 5: 
 6: export default defineConfig({
 7:   plugins: [
 8:     react(),
 9:     VitePWA({
10:       registerType: "autoUpdate",
11:       workbox: {
12:         globPatterns: ["**/*.{js,css,html,ico,png,svg,jpg,jpeg}"],
13:         runtimeCaching: [
14:           {
15:             urlPattern: /^https:\/\/.*\.(png|jpg|jpeg|svg|gif)$/,
16:             handler: "CacheFirst",
17:             options: {
18:               cacheName: "images",
19:               expiration: {
20:                 maxEntries: 100,
21:                 maxAgeSeconds: 60 * 60 * 24 * 30,
22:               },
23:             },
24:           },
25:         ],
26:       },
27:     }),
28:   ],
29:   resolve: {
30:     alias: {
31:       "@": path.resolve(__dirname, "./src"),
32:     },
33:   },
34:   server: {
35:     host: "0.0.0.0",
36:     port: 5173,
37:   },
38: });

================
File: src/__tests__/components/CareLogForm.test.tsx
================
  1: import { describe, it, expect, beforeEach } from "@jest/globals";
  2: import { render, screen, waitFor } from "@testing-library/react";
  3: import userEvent from "@testing-library/user-event";
  4: import { MemoryRouter } from "react-router-dom";
  5: import { CareLogForm } from "@/pages/care/CareLogForm";
  6: import { initializeDatabase } from "@/db/seedData";
  7: import { plantService } from "@/types/database";
  8: 
  9: 
 10: const renderWithRouter = (
 11:   component: React.ReactElement,
 12:   initialEntries: string[] = ["/log-care"]
 13: ) => {
 14:   return render(
 15:     <MemoryRouter initialEntries={initialEntries}>{component}</MemoryRouter>
 16:   );
 17: };
 18: 
 19: describe("CareLogForm Pre-Selection", () => {
 20:   beforeEach(async () => {
 21:     await initializeDatabase();
 22:     const { db } = await import("@/types/database");
 23:     await db.plants.clear();
 24:   });
 25: 
 26:   it("pre-selects plant when preselectedPlantId is provided", async () => {
 27:     const plantId = await plantService.addPlant({
 28:       varietyId: "test-variety",
 29:       varietyName: "Test Variety",
 30:       name: "Test Plant",
 31:       plantedDate: new Date(),
 32:       location: "Location 1",
 33:       container: "Container 1",
 34:       currentStage: "vegetative",
 35:       isActive: true,
 36:     });
 37: 
 38:     const mockOnSuccess = jest.fn();
 39: 
 40:     renderWithRouter(
 41:       <CareLogForm onSuccess={mockOnSuccess} preselectedPlantId={plantId} />
 42:     );
 43: 
 44:     await waitFor(() => {
 45:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
 46:       expect(plantSelect.value).toBe(plantId);
 47:     });
 48:   });
 49: 
 50:   it("shows normal plant selection when no preselectedPlantId is provided", async () => {
 51:     await plantService.addPlant({
 52:       varietyId: "test-variety",
 53:       varietyName: "Test Variety",
 54:       name: "Test Plant",
 55:       plantedDate: new Date(),
 56:       location: "Location 1",
 57:       container: "Container 1",
 58:       currentStage: "vegetative",
 59:       isActive: true,
 60:     });
 61: 
 62:     const mockOnSuccess = jest.fn();
 63: 
 64:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
 65: 
 66: 
 67:     await waitFor(() => {
 68:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
 69:       expect(plantSelect.value).toBe("");
 70:     });
 71: 
 72:     // Then check that the plant option appears
 73:     await waitFor(() => {
 74:       expect(screen.getByText("Test Plant - Location 1")).toBeInTheDocument();
 75:     });
 76:   });
 77: 
 78:   it("allows user to change pre-selected plant", async () => {
 79:     const plant1Id = await plantService.addPlant({
 80:       varietyId: "test-variety-1",
 81:       varietyName: "Plant One",
 82:       name: "Plant One",
 83:       plantedDate: new Date(),
 84:       location: "Location 1",
 85:       container: "Container 1",
 86:       currentStage: "vegetative",
 87:       isActive: true,
 88:     });
 89: 
 90:     const plant2Id = await plantService.addPlant({
 91:       varietyId: "test-variety-2",
 92:       varietyName: "Plant Two",
 93:       name: "Plant Two",
 94:       plantedDate: new Date(),
 95:       location: "Location 2",
 96:       container: "Container 2",
 97:       currentStage: "vegetative",
 98:       isActive: true,
 99:     });
100: 
101:     const mockOnSuccess = jest.fn();
102:     const user = userEvent.setup();
103: 
104:     renderWithRouter(
105:       <CareLogForm onSuccess={mockOnSuccess} preselectedPlantId={plant1Id} />
106:     );
107: 
108: 
109:     await waitFor(() => {
110:       expect(screen.getByText("Plant One - Location 1")).toBeInTheDocument();
111:       expect(screen.getByText("Plant Two - Location 2")).toBeInTheDocument();
112:     });
113: 
114:     await waitFor(() => {
115:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
116:       expect(plantSelect.value).toBe(plant1Id);
117:     });
118: 
119:     const plantSelect = screen.getByLabelText(/Plant/i);
120:     await user.selectOptions(plantSelect, plant2Id);
121: 
122:     expect((plantSelect as HTMLSelectElement).value).toBe(plant2Id);
123:   });
124: 
125:   it("renders form with basic activity fields", async () => {
126:     const mockOnSuccess = jest.fn();
127: 
128:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
129: 
130:     await waitFor(() => {
131:       expect(screen.getByText("Log Care Activity")).toBeInTheDocument();
132:       expect(screen.getByLabelText(/Plant/i)).toBeInTheDocument();
133:       expect(screen.getByLabelText(/Activity Type/i)).toBeInTheDocument();
134:       expect(screen.getByLabelText(/Date/i)).toBeInTheDocument();
135:     });
136: 
137:     expect(screen.getByText("💧 Watering")).toBeInTheDocument();
138:     expect(screen.getByText("🌱 Fertilizing")).toBeInTheDocument();
139:     expect(screen.getByText("👁️ Observation")).toBeInTheDocument();
140:   });
141: 
142:   it("shows watering fields when water activity is selected", async () => {
143:     const mockOnSuccess = jest.fn();
144: 
145:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
146: 
147:     await waitFor(() => {
148:       expect(screen.getByText("Water Amount *")).toBeInTheDocument();
149:     });
150: 
151:     expect(screen.getByPlaceholderText("Amount")).toBeInTheDocument();
152: 
153:     expect(screen.getByText("oz")).toBeInTheDocument();
154:     expect(screen.getByText("ml")).toBeInTheDocument();
155:     expect(screen.getByText("cups")).toBeInTheDocument();
156:   });
157: 
158:   it("displays proper plant formatting in dropdown options", async () => {
159:     await plantService.addPlant({
160:       varietyId: "test-variety",
161:       varietyName: "Cherry Tomato",
162:       name: "My Cherry Plant",
163:       plantedDate: new Date(),
164:       location: "Window Sill",
165:       container: "5 gallon pot",
166:       currentStage: "flowering",
167:       isActive: true,
168:     });
169: 
170:     const mockOnSuccess = jest.fn();
171: 
172:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
173: 
174:     await waitFor(() => {
175:       const expectedText = "My Cherry Plant - Window Sill";
176:       expect(screen.getByText(expectedText)).toBeInTheDocument();
177:     });
178:   });
179: 
180:   it("handles plant without custom name correctly", async () => {
181:     await plantService.addPlant({
182:       varietyId: "test-variety",
183:       varietyName: "Roma Tomato",
184:       plantedDate: new Date(),
185:       location: "Greenhouse",
186:       container: "3 gallon pot",
187:       currentStage: "fruiting",
188:       isActive: true,
189:     });
190: 
191:     const mockOnSuccess = jest.fn();
192: 
193:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
194: 
195:     await waitFor(() => {
196:       const expectedText = "Roma Tomato - Greenhouse";
197:       expect(screen.getByText(expectedText)).toBeInTheDocument();
198:     });
199:   });
200: });

================
File: src/__tests__/components/PlantRegistrationForm.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
  4: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  5: import { varietyService } from "@/types/database";
  6: import toast from "react-hot-toast";
  7: 
  8: 
  9: jest.mock("@/hooks/useFirebasePlants");
 10: jest.mock("@/types/database");
 11: jest.mock("react-hot-toast");
 12: 
 13: 
 14: jest.mock("@/components/plant/SoilMixtureSelector", () => ({
 15:   __esModule: true,
 16:   default: ({
 17:     onMixtureChange,
 18:     selectedMixture,
 19:   }: {
 20:     onMixtureChange: (mixture: string) => void;
 21:     selectedMixture?: string;
 22:   }) => (
 23:     <div data-testid="soil-mixture-selector">
 24:       <button
 25:         onClick={() => onMixtureChange("test-mixture")}
 26:         data-testid="select-soil-mixture"
 27:       >
 28:         Select Soil Mixture
 29:       </button>
 30:       {selectedMixture && (
 31:         <span data-testid="selected-mixture">{selectedMixture}</span>
 32:       )}
 33:     </div>
 34:   ),
 35: }));
 36: 
 37: jest.mock("@/components/plant/ReminderPreferencesSection", () => ({
 38:   __esModule: true,
 39:   default: ({
 40:     onChange,
 41:     preferences,
 42:   }: {
 43:     onChange: (preferences: Record<string, boolean>) => void;
 44:     preferences: Record<string, boolean>;
 45:   }) => (
 46:     <div data-testid="reminder-preferences">
 47:       <button
 48:         onClick={() =>
 49:           onChange({ ...preferences, watering: !preferences.watering })
 50:         }
 51:         data-testid="toggle-watering"
 52:       >
 53:         Toggle Watering
 54:       </button>
 55:     </div>
 56:   ),
 57: }));
 58: 
 59: jest.mock("@/components/plant/CustomVarietyForm", () => ({
 60:   CustomVarietyForm: ({
 61:     onSuccess,
 62:     onCancel,
 63:   }: {
 64:     onSuccess: (varietyId: string) => void;
 65:     onCancel: () => void;
 66:   }) => (
 67:     <div data-testid="custom-variety-form">
 68:       <button
 69:         onClick={() => onSuccess("new-variety-id")}
 70:         data-testid="save-custom-variety"
 71:       >
 72:         Save Custom Variety
 73:       </button>
 74:       <button onClick={onCancel} data-testid="cancel-custom-variety">
 75:         Cancel
 76:       </button>
 77:     </div>
 78:   ),
 79: }));
 80: 
 81: jest.mock("@/components/ui/LoadingSpinner", () => ({
 82:   LoadingSpinner: () => <div data-testid="loading-spinner">Loading...</div>,
 83: }));
 84: 
 85: jest.mock("react-router-dom", () => ({
 86:   ...jest.requireActual("react-router-dom"),
 87:   useNavigate: () => jest.fn(),
 88: }));
 89: 
 90: const mockCreatePlant = jest.fn();
 91: const mockVarieties = [
 92:   {
 93:     id: "tomato-1",
 94:     name: "Cherry Tomato",
 95:     category: "fruiting-plants" as const,
 96:     growthTimeline: {
 97:       germination: 7,
 98:       seedling: 14,
 99:       vegetative: 28,
100:       maturation: 60,
101:     },
102:     isCustom: false,
103:     createdAt: new Date(),
104:   },
105:   {
106:     id: "basil-1",
107:     name: "Sweet Basil",
108:     category: "herbs" as const,
109:     growthTimeline: {
110:       germination: 5,
111:       seedling: 10,
112:       vegetative: 21,
113:       maturation: 45,
114:     },
115:     isCustom: false,
116:     createdAt: new Date(),
117:   },
118: ];
119: 
120: describe("PlantRegistrationForm", () => {
121:   const user = userEvent.setup();
122: 
123:   beforeEach(() => {
124:     jest.clearAllMocks();
125: 
126:     (useFirebasePlants as jest.Mock).mockReturnValue({
127:       createPlant: mockCreatePlant,
128:     });
129: 
130:     (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
131:       mockVarieties
132:     );
133:     mockCreatePlant.mockResolvedValue("new-plant-id");
134: 
135:     (toast.success as jest.Mock).mockImplementation(() => {});
136:     (toast.error as jest.Mock).mockImplementation(() => {});
137:   });
138: 
139:   const renderForm = (props = {}) => {
140:     return render(<PlantRegistrationForm {...props} />);
141:   };
142: 
143:   describe("Initial Rendering", () => {
144:     it("renders loading state initially", () => {
145:       renderForm();
146:       expect(
147:         screen.getByText("Loading plant varieties...")
148:       ).toBeInTheDocument();
149:     });
150: 
151:     it("renders form after varieties load", async () => {
152:       renderForm();
153: 
154:       await waitFor(() => {
155:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
156:       });
157: 
158:       expect(screen.getByLabelText(/plant variety/i)).toBeInTheDocument();
159:       expect(screen.getByLabelText(/planting date/i)).toBeInTheDocument();
160:     });
161:   });
162: 
163:   describe("Quantity Management", () => {
164:     beforeEach(async () => {
165:       renderForm();
166:       await waitFor(() => {
167:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
168:       });
169: 
170: 
171:       const growBagButton = screen.getByTestId("container-type-grow-bag");
172:       await user.click(growBagButton);
173:     });
174: 
175:     it("allows increasing and decreasing quantity", async () => {
176:       await waitFor(() => {
177:         expect(screen.getByTestId("quantity-input")).toBeInTheDocument();
178:       });
179: 
180:       const quantityInput = screen.getByTestId("quantity-input");
181:       const incrementButton = screen.getByLabelText("Increase quantity");
182:       const decrementButton = screen.getByLabelText("Decrease quantity");
183: 
184:       expect(quantityInput).toHaveValue(1);
185:       expect(decrementButton).toBeDisabled();
186: 
187:       await user.click(incrementButton);
188:       expect(quantityInput).toHaveValue(2);
189:       expect(decrementButton).not.toBeDisabled();
190: 
191:       await user.click(decrementButton);
192:       expect(quantityInput).toHaveValue(1);
193:       expect(decrementButton).toBeDisabled();
194:     });
195:   });
196: 
197: 
198: 
199: 
200:   describe("Container Selection", () => {
201:     beforeEach(async () => {
202:       renderForm();
203:       await waitFor(() => {
204:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
205:       });
206:     });
207: 
208:     it("shows container type options", () => {
209:       expect(screen.getByTestId("container-type-grow-bag")).toBeInTheDocument();
210:       expect(screen.getByTestId("container-type-pot")).toBeInTheDocument();
211:       expect(
212:         screen.getByTestId("container-type-cell-tray")
213:       ).toBeInTheDocument();
214:       expect(
215:         screen.getByTestId("container-type-raised-bed")
216:       ).toBeInTheDocument();
217:     });
218: 
219:     it("auto-selects container size when container type is selected", async () => {
220:       const growBagButton = screen.getByTestId("container-type-grow-bag");
221:       await user.click(growBagButton);
222: 
223:       await waitFor(() => {
224:         expect(screen.getByText("Container Size *")).toBeInTheDocument();
225:       });
226: 
227: 
228:       await waitFor(() => {
229:         const sizeSelect = screen.getByDisplayValue(
230:           "1 Gallon"
231:         ) as HTMLSelectElement;
232:         expect(sizeSelect).toBeInTheDocument();
233:         expect(sizeSelect.value).toBe("1-gallon");
234:       });
235:     });
236:   });
237: 
238:   describe("Form Validation", () => {
239:     beforeEach(async () => {
240:       renderForm();
241:       await waitFor(() => {
242:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
243:       });
244:     });
245: 
246:     it("enables form submission when all required fields are filled", async () => {
247: 
248:       const varietySelect = screen.getByLabelText(/plant variety/i);
249:       await user.selectOptions(varietySelect, "tomato-1");
250: 
251: 
252:       const growBagButton = screen.getByTestId("container-type-grow-bag");
253:       await user.click(growBagButton);
254: 
255: 
256:       await waitFor(() => {
257:         const sizeSelect = screen.getByDisplayValue("1 Gallon");
258:         expect(sizeSelect).toBeInTheDocument();
259: 
260:         expect((sizeSelect as HTMLSelectElement).value).toBe("1-gallon");
261:       });
262: 
263: 
264:       const selectSoilButton = screen.getByTestId("select-soil-mixture");
265:       await user.click(selectSoilButton);
266: 
267: 
268:       await waitFor(() => {
269:         const submitButton = screen.getByRole("button", {
270:           name: /register plant/i,
271:         });
272:         expect(submitButton).toBeEnabled();
273:       });
274:     });
275:   });
276: 
277: 
278:   describe("Form Submission", () => {
279:     beforeEach(async () => {
280:       renderForm();
281:       await waitFor(() => {
282:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
283:       });
284:     });
285: 
286:     const fillForm = async () => {
287: 
288:       const varietySelect = screen.getByLabelText(/plant variety/i);
289:       await user.selectOptions(varietySelect, "tomato-1");
290: 
291: 
292:       const growBagButtons = screen.getAllByTestId("container-type-grow-bag");
293:       await user.click(growBagButtons[0]);
294: 
295: 
296:       await waitFor(() => {
297:         expect(screen.getByDisplayValue("1 Gallon")).toBeInTheDocument();
298:       });
299: 
300: 
301:       const selectSoilButton = screen.getByTestId("select-soil-mixture");
302:       await user.click(selectSoilButton);
303:     };
304: 
305:     it.skip("calls onSuccess callback after successful submission", async () => {
306:       const mockOnSuccess = jest.fn();
307:       render(<PlantRegistrationForm onSuccess={mockOnSuccess} />);
308: 
309:       await waitFor(() => {
310:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
311:       });
312: 
313:       await fillForm();
314: 
315:       const submitButton = screen.getByRole("button", {
316:         name: /register plant/i,
317:       });
318: 
319:       await user.click(submitButton);
320: 
321:       await waitFor(() => {
322:         expect(mockCreatePlant).toHaveBeenCalled();
323:         expect(mockOnSuccess).toHaveBeenCalled();
324:       });
325:     });
326: 
327:     it("submits form with valid data", async () => {
328:       await fillForm();
329: 
330:       const submitButton = screen.getByRole("button", {
331:         name: /register plant/i,
332:       });
333: 
334:       await user.click(submitButton);
335: 
336:       await waitFor(() => {
337:         expect(mockCreatePlant).toHaveBeenCalledWith(
338:           expect.objectContaining({
339:             varietyId: "tomato-1",
340:             varietyName: "Cherry Tomato",
341:             currentStage: "germination",
342:             location: "Indoor",
343:             container: expect.stringContaining("1 Gallon"),
344:             isActive: true,
345:           })
346:         );
347:       });
348:     });
349: 
350:     it("handles submission errors gracefully", async () => {
351:       mockCreatePlant.mockRejectedValueOnce(new Error("Network error"));
352: 
353:       await fillForm();
354: 
355:       const submitButton = screen.getByRole("button", {
356:         name: /register plant/i,
357:       });
358: 
359:       await user.click(submitButton);
360: 
361:       await waitFor(() => {
362:         expect(toast.error).toHaveBeenCalledWith("Network error");
363:       });
364:     });
365: 
366:     it.skip("shows loading state during submission", async () => {
367:       let resolveCreatePlant: (value: string) => void;
368:       const createPlantPromise = new Promise<string>((resolve) => {
369:         resolveCreatePlant = resolve;
370:       });
371:       mockCreatePlant.mockReturnValueOnce(createPlantPromise);
372: 
373:       await fillForm();
374: 
375:       const submitButton = screen.getByRole("button", {
376:         name: /register plant/i,
377:       });
378: 
379:       await user.click(submitButton);
380: 
381:       expect(screen.getByText(/registering.../i)).toBeInTheDocument();
382: 
383:       resolveCreatePlant!("plant-id");
384: 
385:       await waitFor(() => {
386:         expect(screen.queryByText(/registering.../i)).not.toBeInTheDocument();
387:       });
388:     });
389:   });
390: 
391:   describe("Accessibility", () => {
392:     beforeEach(async () => {
393:       renderForm();
394:       await waitFor(() => {
395:         expect(screen.getByText("Register Your Plant")).toBeInTheDocument();
396:       });
397:     });
398: 
399:     it("has proper form labels", () => {
400:       expect(screen.getByLabelText(/plant variety/i)).toBeInTheDocument();
401:       expect(screen.getByLabelText(/planting date/i)).toBeInTheDocument();
402:     });
403: 
404:     it("has proper ARIA attributes for buttons", () => {
405:       const growBagButton = screen.getByTestId("container-type-grow-bag");
406:       expect(growBagButton).toHaveAttribute("type", "button");
407:     });
408:   });
409: });

================
File: src/__tests__/database/varietyService.test.ts
================
  1: import { varietyService } from "../../types/database";
  2: import { initializeDatabase } from "../../db/seedData";
  3: import { seedVarieties } from "../../data/seedVarieties";
  4: 
  5: describe("varietyService", () => {
  6:   beforeEach(async () => {
  7: 
  8:     const db = await import("../../types/database").then((m) => m.db);
  9:     await db.varieties.clear();
 10:   });
 11: 
 12:   describe("seedVarieties data integrity", () => {
 13:     it("should have valid growth timelines for all varieties", () => {
 14:       seedVarieties.forEach((variety) => {
 15:         expect(variety.growthTimeline.germination).toBeGreaterThanOrEqual(0);
 16:         expect(variety.growthTimeline.seedling).toBeGreaterThan(0);
 17:         expect(variety.growthTimeline.vegetative).toBeGreaterThan(0);
 18:         expect(variety.growthTimeline.maturation).toBeGreaterThan(0);
 19: 
 20: 
 21: 
 22:         expect(variety.growthTimeline.maturation).toBeLessThan(2000);
 23: 
 24: 
 25:         expect(variety.growthTimeline.germination).toBeLessThanOrEqual(
 26:           variety.growthTimeline.seedling
 27:         );
 28:       });
 29:     });
 30: 
 31:     it("should have valid categories for all varieties", () => {
 32:       const validCategories = [
 33:         "root-vegetables",
 34:         "leafy-greens",
 35:         "herbs",
 36:         "berries",
 37:         "fruiting-plants",
 38:       ];
 39: 
 40:       seedVarieties.forEach((variety) => {
 41:         expect(validCategories).toContain(variety.category);
 42:       });
 43:     });
 44: 
 45:     it("should have productive lifespan for everbearing varieties", () => {
 46:       const everbearingVarieties = seedVarieties.filter((v) => v.isEverbearing);
 47: 
 48:       everbearingVarieties.forEach((variety) => {
 49:         expect(variety.productiveLifespan).toBeDefined();
 50:         expect(variety.productiveLifespan).toBeGreaterThan(0);
 51:       });
 52:     });
 53:   });
 54: 
 55:   describe("comprehensive variety coverage", () => {
 56:     beforeEach(async () => {
 57:       await initializeDatabase();
 58:     });
 59: 
 60:     it("should include all expected varieties from the comprehensive plan", async () => {
 61:       const varieties = await varietyService.getAllVarieties();
 62:       const varietyNames = varieties.map((v) => v.name);
 63: 
 64: 
 65:       expect(varietyNames).toContain("Little Finger Carrots");
 66:       expect(varietyNames).toContain("Detroit Dark Red Beets");
 67:       expect(varietyNames).toContain("Beauregard Sweet Potatoes");
 68: 
 69: 
 70:       expect(varietyNames).toContain("Astro Arugula");
 71:       expect(varietyNames).toContain("Baby's Leaf Spinach");
 72: 
 73: 
 74:       expect(varietyNames).toContain("Greek Oregano");
 75:       expect(varietyNames).toContain("English Thyme");
 76:       expect(varietyNames).toContain("Rosemary");
 77:       expect(varietyNames).toContain("Italian Flat Leaf Parsley");
 78:       expect(varietyNames).toContain("Greek Dwarf Basil");
 79: 
 80: 
 81:       expect(varietyNames).toContain("Albion Strawberries");
 82:       expect(varietyNames).toContain("Caroline Raspberries");
 83: 
 84: 
 85:       expect(varietyNames).toContain("Boston Pickling Cucumber");
 86:       expect(varietyNames).toContain("Sugar Snap Peas");
 87:     });
 88: 
 89:     it("should include lettuce varieties", async () => {
 90:       const varieties = await varietyService.getAllVarieties();
 91:       const varietyNames = varieties.map((v) => v.name);
 92: 
 93: 
 94:       const lettuceVarieties = varietyNames.filter(
 95:         (name) =>
 96:           name.toLowerCase().includes("lettuce") ||
 97:           name.toLowerCase().includes("may queen") ||
 98:           name.toLowerCase().includes("butter")
 99:       );
100: 
101: 
102: 
103: 
104:       expect(lettuceVarieties.length).toBeGreaterThan(0);
105:     });
106: 
107:     it("should have comprehensive protocols for complex varieties", async () => {
108:       const varieties = await varietyService.getAllVarieties();
109: 
110: 
111:       const strawberries = varieties.find(
112:         (v) => v.name === "Albion Strawberries"
113:       );
114:       expect(strawberries?.protocols?.lighting).toBeDefined();
115:       expect(strawberries?.protocols?.watering).toBeDefined();
116:       expect(strawberries?.protocols?.fertilization).toBeDefined();
117:       expect(strawberries?.protocols?.environment).toBeDefined();
118:       expect(strawberries?.protocols?.soilMixture).toBeDefined();
119:       expect(strawberries?.protocols?.specialRequirements).toBeDefined();
120: 
121: 
122:       const cucumber = varieties.find(
123:         (v) => v.name === "Boston Pickling Cucumber"
124:       );
125:       expect(cucumber?.protocols?.lighting?.seedling?.ppfd).toBeDefined();
126:       expect(cucumber?.protocols?.lighting?.flowering?.notes).toBeDefined();
127:       expect(cucumber?.protocols?.watering?.seedling?.trigger).toBeDefined();
128:     });
129: 
130:     it("should correctly categorize varieties", async () => {
131:       const varieties = await varietyService.getAllVarieties();
132: 
133:       const rootVegetables = varieties.filter(
134:         (v) => v.category === "root-vegetables"
135:       );
136:       const leafyGreens = varieties.filter(
137:         (v) => v.category === "leafy-greens"
138:       );
139:       const herbs = varieties.filter((v) => v.category === "herbs");
140:       const berries = varieties.filter((v) => v.category === "berries");
141:       const fruitingPlants = varieties.filter(
142:         (v) => v.category === "fruiting-plants"
143:       );
144: 
145:       expect(rootVegetables.length).toBeGreaterThan(0);
146:       expect(leafyGreens.length).toBeGreaterThan(0);
147:       expect(herbs.length).toBeGreaterThan(0);
148:       expect(berries.length).toBeGreaterThan(0);
149:       expect(fruitingPlants.length).toBeGreaterThan(0);
150: 
151: 
152:       expect(
153:         rootVegetables.some((v) => v.name === "Little Finger Carrots")
154:       ).toBe(true);
155:       expect(leafyGreens.some((v) => v.name === "Astro Arugula")).toBe(true);
156:       expect(herbs.some((v) => v.name === "English Thyme")).toBe(true);
157:       expect(berries.some((v) => v.name === "Albion Strawberries")).toBe(true);
158:       expect(
159:         fruitingPlants.some((v) => v.name === "Boston Pickling Cucumber")
160:       ).toBe(true);
161:     });
162: 
163:     it("should list all available varieties for debugging", async () => {
164:       const varieties = await varietyService.getAllVarieties();
165: 
166: 
167: 
168: 
169: 
170:       expect(varieties.length).toBeGreaterThan(0);
171:     });
172:   });
173: 
174:   describe("protocol structure validation", () => {
175:     beforeEach(async () => {
176:       await initializeDatabase();
177:     });
178: 
179:     it("should have valid lighting protocols where present", async () => {
180:       const varieties = await varietyService.getAllVarieties();
181: 
182:       varieties.forEach((variety) => {
183:         if (variety.protocols?.lighting) {
184:           Object.entries(variety.protocols.lighting).forEach(([, protocol]) => {
185:             expect(protocol.ppfd?.min).toBeGreaterThan(0);
186:             expect(protocol.ppfd?.max).toBeGreaterThanOrEqual(
187:               protocol.ppfd.min
188:             );
189:             expect(protocol.ppfd?.unit).toBe("µmol/m²/s");
190:             expect(protocol.photoperiod?.hours).toBeGreaterThan(0);
191:             expect(protocol.photoperiod?.hours).toBeLessThanOrEqual(24);
192:             expect(protocol.dli?.min).toBeGreaterThan(0);
193:             expect(protocol.dli?.max).toBeGreaterThanOrEqual(protocol.dli.min);
194:             expect(protocol.dli?.unit).toBe("mol/m²/day");
195: 
196: 
197: 
198: 
199:           });
200:         }
201:       });
202:     });
203: 
204:     it("should have valid watering protocols where present", async () => {
205:       const varieties = await varietyService.getAllVarieties();
206: 
207:       varieties.forEach((variety) => {
208:         if (variety.protocols?.watering) {
209:           Object.entries(variety.protocols.watering).forEach(([, protocol]) => {
210:             expect(protocol.trigger?.moistureLevel).toBeDefined();
211:             expect(protocol.target?.moistureLevel).toBeDefined();
212:             expect(protocol.volume?.amount).toBeDefined();
213:             expect(protocol.volume?.frequency).toBeDefined();
214: 
215: 
216: 
217: 
218:           });
219:         }
220:       });
221:     });
222: 
223:     it("should have valid soil mixture percentages where present", async () => {
224:       const varieties = await varietyService.getAllVarieties();
225: 
226:       varieties.forEach((variety) => {
227:         if (variety.protocols?.soilMixture?.components) {
228:           const percentages = variety.protocols.soilMixture.components
229:             ? Object.values(variety.protocols.soilMixture.components)
230:             : [];
231:           const total = percentages.reduce(
232:             (sum: number, pct: number) => sum + pct,
233:             0
234:           );
235: 
236: 
237:           expect(total).toBeCloseTo(100, 1);
238: 
239:           percentages.forEach((pct) => {
240:             expect(pct).toBeGreaterThan(0);
241:             expect(pct).toBeLessThanOrEqual(100);
242:           });
243:         }
244:       });
245:     });
246: 
247:     it("should have valid pH ranges where present", async () => {
248:       const varieties = await varietyService.getAllVarieties();
249: 
250:       varieties.forEach((variety) => {
251:         if (variety.protocols?.environment?.pH) {
252:           const { min, max, optimal } = variety.protocols.environment.pH;
253:           expect(min).toBeGreaterThan(0);
254:           expect(min).toBeLessThan(14);
255:           expect(max).toBeGreaterThan(min);
256:           expect(max).toBeLessThan(14);
257: 
258:           if (optimal) {
259:             expect(optimal).toBeGreaterThanOrEqual(min);
260:             expect(optimal).toBeLessThanOrEqual(max);
261:           }
262:         }
263:       });
264:     });
265:   });
266: 
267:   describe("perennial herb maturation times", () => {
268:     it("should handle long maturation times for perennial herbs", () => {
269: 
270:       const rosemary = seedVarieties.find((v) => v.name === "Rosemary");
271:       expect(rosemary?.growthTimeline.maturation).toBe(730);
272: 
273: 
274:       const thyme = seedVarieties.find((v) => v.name === "English Thyme");
275:       expect(thyme?.growthTimeline.maturation).toBe(365);
276: 
277: 
278:       const oregano = seedVarieties.find((v) => v.name === "Greek Oregano");
279:       expect(oregano?.growthTimeline.maturation).toBeLessThan(120);
280:     });
281:   });
282: 
283:   describe("duplicate detection", () => {
284:     it("should not have duplicate varieties after initialization", async () => {
285:       await initializeDatabase();
286: 
287:       const varieties = await varietyService.getAllVarieties();
288:       const varietyNames = varieties.map((v) => v.name);
289:       const uniqueNames = new Set(varietyNames);
290: 
291:       if (varietyNames.length !== uniqueNames.size) {
292:         console.error("Duplicate varieties found:");
293:         const duplicates = varietyNames.filter(
294:           (name, index) => varietyNames.indexOf(name) !== index
295:         );
296:         console.error("Duplicates:", [...new Set(duplicates)]);
297:         console.error("All varieties:", varietyNames);
298:       }
299: 
300:       expect(varietyNames.length).toBe(uniqueNames.size);
301:     });
302: 
303:     it("should not create duplicates when initialization is called multiple times", async () => {
304:       await initializeDatabase();
305:       await initializeDatabase();
306:       await initializeDatabase();
307: 
308:       const varieties = await varietyService.getAllVarieties();
309:       const varietyNames = varieties.map((v) => v.name);
310:       const uniqueNames = new Set(varietyNames);
311: 
312:       if (varietyNames.length !== uniqueNames.size) {
313:         console.error(
314:           "Duplicate varieties found after multiple initializations:"
315:         );
316:         const duplicates = varietyNames.filter(
317:           (name, index) => varietyNames.indexOf(name) !== index
318:         );
319:         console.error("Duplicates:", [...new Set(duplicates)]);
320:       }
321: 
322:       expect(varietyNames.length).toBe(uniqueNames.size);
323:     });
324: 
325:     it("should handle existing database state correctly", async () => {
326: 
327:       await varietyService.addVariety({
328:         name: "Test Variety",
329:         category: "herbs",
330:         growthTimeline: {
331:           germination: 7,
332:           seedling: 14,
333:           vegetative: 21,
334:           maturation: 60,
335:         },
336:       });
337: 
338:       const beforeCount = (await varietyService.getAllVarieties()).length;
339: 
340: 
341:       await initializeDatabase();
342: 
343:       const afterCount = (await varietyService.getAllVarieties()).length;
344:       const varieties = await varietyService.getAllVarieties();
345: 
346: 
347:       expect(afterCount).toBe(beforeCount + seedVarieties.length);
348:       expect(varieties.some((v) => v.name === "Test Variety")).toBe(true);
349:     });
350:   });
351: 
352:   describe("everbearing varieties", () => {
353:     beforeEach(async () => {
354:       await initializeDatabase();
355:     });
356: 
357:     it("should correctly identify everbearing varieties", async () => {
358:       const varieties = await varietyService.getAllVarieties();
359: 
360:       const everbearingVarieties = varieties.filter(
361:         (v) => seedVarieties.find((sv) => sv.name === v.name)?.isEverbearing
362:       );
363: 
364: 
365:       const everbearingNames = everbearingVarieties.map((v) => v.name);
366:       expect(everbearingNames).toContain("Albion Strawberries");
367:       expect(everbearingNames).toContain("Caroline Raspberries");
368:       expect(everbearingNames).toContain("Astro Arugula");
369:     });
370: 
371:     it("should have succession protocols for appropriate varieties", async () => {
372:       const varieties = await varietyService.getAllVarieties();
373: 
374:       const arugula = varieties.find((v) => v.name === "Astro Arugula");
375:       const carrotProtocols = seedVarieties.find(
376:         (v) => v.name === "Little Finger Carrots"
377:       )?.protocols;
378: 
379: 
380:       expect(arugula).toBeDefined();
381: 
382: 
383:       expect(carrotProtocols?.succession).toBeDefined();
384:       expect(carrotProtocols?.succession?.interval).toBeGreaterThan(0);
385:     });
386:   });
387: 
388:   describe("comprehensive protocol features", () => {
389:     beforeEach(async () => {
390:       await initializeDatabase();
391:     });
392: 
393:     it("should have stage-specific fertilization protocols", async () => {
394:       const varieties = await varietyService.getAllVarieties();
395:       const strawberries = varieties.find(
396:         (v) => v.name === "Albion Strawberries"
397:       );
398: 
399:       if (strawberries?.protocols?.fertilization) {
400:         Object.entries(strawberries.protocols.fertilization).forEach(
401:           ([, protocol]) => {
402:             if (protocol.products && protocol.products.length > 0) {
403:               protocol.products.forEach((product) => {
404:                 expect(product.name).toBeDefined();
405:                 expect(product.dilution).toBeDefined();
406:                 expect(product.frequency).toBeDefined();
407:               });
408:             }
409:           }
410:         );
411:       }
412:     });
413: 
414:     it("should have container requirements for varieties", async () => {
415:       const varieties = await varietyService.getAllVarieties();
416:       const cucumber = varieties.find(
417:         (v) => v.name === "Boston Pickling Cucumber"
418:       );
419: 
420:       expect(cucumber?.protocols?.container?.depth).toBeDefined();
421:       expect(cucumber?.protocols?.specialRequirements).toBeDefined();
422:       expect(cucumber?.protocols?.specialRequirements?.length).toBeGreaterThan(
423:         0
424:       );
425:     });
426: 
427:     it("should have environmental constraints for sensitive varieties", async () => {
428:       const varieties = await varietyService.getAllVarieties();
429:       const carrots = varieties.find((v) => v.name === "Little Finger Carrots");
430: 
431:       if (carrots?.protocols?.environment?.constraints) {
432:         carrots.protocols.environment.constraints.forEach((constraint: any) => {
433:           expect(constraint.description).toBeDefined();
434:           expect(constraint.parameter).toBeDefined();
435:           expect(constraint.consequence).toBeDefined();
436:         });
437:       }
438:     });
439:   });
440: });

================
File: src/__tests__/integration/smartDefaultsIntegration.test.tsx
================
  1: import { render, screen, waitFor } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { MemoryRouter } from "react-router-dom";
  4: import { CareLogForm } from "@/pages/care/CareLogForm";
  5: import { initializeDatabase } from "@/db/seedData";
  6: import { plantService, varietyService } from "@/types/database";
  7: 
  8: 
  9: jest.mock("@/types/database", () => {
 10:   const originalModule = jest.requireActual("@/types/database");
 11:   return {
 12:     ...originalModule,
 13:     plantService: {
 14:       ...originalModule.plantService,
 15:       getActivePlants: jest.fn(),
 16:     },
 17:   };
 18: });
 19: 
 20: const renderWithRouter = (
 21:   component: React.ReactElement,
 22:   initialEntries: string[] = ["/log-care"]
 23: ) => {
 24:   return render(
 25:     <MemoryRouter initialEntries={initialEntries}>{component}</MemoryRouter>
 26:   );
 27: };
 28: 
 29: describe("Smart Defaults Integration", () => {
 30:   beforeEach(async () => {
 31:     await initializeDatabase();
 32:     const { db } = await import("@/types/database");
 33:     await db.plants.clear();
 34: 
 35: 
 36:     jest.clearAllMocks();
 37:   });
 38: 
 39:   it("should show smart watering suggestions when plant is selected", async () => {
 40:     const varieties = await varietyService.getAllVarieties();
 41: 
 42: 
 43:     const testVariety = varieties.find(
 44:       (v) =>
 45:         v.category === "fruiting-plants" &&
 46:         (v.name.toLowerCase().includes("cucumber") ||
 47:           v.name.toLowerCase().includes("peas"))
 48:     );
 49: 
 50:     console.log(
 51:       "Available varieties:",
 52:       varieties.map((v) => ({ name: v.name, category: v.category }))
 53:     );
 54:     expect(testVariety).toBeDefined();
 55: 
 56: 
 57:     const plantId = await plantService.addPlant({
 58:       varietyId: testVariety!.id,
 59:       varietyName: testVariety!.name,
 60:       name: "Test Plant",
 61:       plantedDate: new Date(),
 62:       currentStage: "vegetative",
 63:       location: "Indoor",
 64:       container: "5 gallon pot",
 65:       isActive: true,
 66:     });
 67: 
 68: 
 69:     const createdPlant = await plantService.getPlant(plantId);
 70:     expect(createdPlant).toBeDefined();
 71: 
 72: 
 73:     const mockGetActivePlants =
 74:       plantService.getActivePlants as jest.MockedFunction<
 75:         typeof plantService.getActivePlants
 76:       >;
 77:     mockGetActivePlants.mockResolvedValue([createdPlant!]);
 78: 
 79:     const mockOnSuccess = jest.fn();
 80:     const user = userEvent.setup();
 81: 
 82:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
 83: 
 84:     await waitFor(() => {
 85:       expect(screen.getByLabelText(/Plant/i)).toBeInTheDocument();
 86:     });
 87: 
 88: 
 89:     await waitFor(() => {
 90:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
 91:       const options = Array.from(plantSelect.options).map(
 92:         (option) => option.value
 93:       );
 94:       expect(options).toContain(plantId);
 95:     });
 96: 
 97:     const plantSelect = screen.getByLabelText(/Plant/i);
 98:     await user.selectOptions(plantSelect, plantId);
 99: 
100: 
101:     await waitFor(() => {
102:       const smartSuggestions = screen.queryByText(/Smart Suggestion/i);
103:       if (smartSuggestions) {
104:         expect(smartSuggestions).toBeInTheDocument();
105:       } else {
106: 
107:         expect(screen.getByPlaceholderText("Amount")).toBeInTheDocument();
108:       }
109:     });
110:   });
111: 
112:   it("should auto-fill water amount when using smart suggestions", async () => {
113:     const varieties = await varietyService.getAllVarieties();
114: 
115: 
116:     const testVariety = varieties.find(
117:       (v) =>
118:         v.category === "fruiting-plants" &&
119:         (v.name.toLowerCase().includes("cucumber") ||
120:           v.name.toLowerCase().includes("peas"))
121:     );
122:     expect(testVariety).toBeDefined();
123: 
124:     const plantId = await plantService.addPlant({
125:       varietyId: testVariety!.id,
126:       varietyName: testVariety!.name,
127:       name: "Test Plant",
128:       plantedDate: new Date(),
129:       currentStage: "vegetative",
130:       location: "Indoor",
131:       container: "5 gallon pot",
132:       isActive: true,
133:     });
134: 
135:     const createdPlant = await plantService.getPlant(plantId);
136:     expect(createdPlant).toBeDefined();
137: 
138: 
139:     const mockGetActivePlants =
140:       plantService.getActivePlants as jest.MockedFunction<
141:         typeof plantService.getActivePlants
142:       >;
143:     mockGetActivePlants.mockResolvedValue([createdPlant!]);
144: 
145:     const mockOnSuccess = jest.fn();
146:     const user = userEvent.setup();
147: 
148:     renderWithRouter(<CareLogForm onSuccess={mockOnSuccess} />);
149: 
150:     await waitFor(() => {
151:       expect(screen.getByLabelText(/Plant/i)).toBeInTheDocument();
152:     });
153: 
154: 
155:     await waitFor(() => {
156:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
157:       const options = Array.from(plantSelect.options).map(
158:         (option) => option.value
159:       );
160:       expect(options).toContain(plantId);
161:     });
162: 
163:     const plantSelect = screen.getByLabelText(/Plant/i);
164:     await user.selectOptions(plantSelect, plantId);
165: 
166: 
167:     await waitFor(() => {
168:       const waterAmountInput = screen.getByPlaceholderText(
169:         "Amount"
170:       ) as HTMLInputElement;
171:       expect(waterAmountInput).toBeInTheDocument();
172:     });
173:   });
174: 
175:   it("should show quick completion buttons", async () => {
176:     const varieties = await varietyService.getAllVarieties();
177: 
178: 
179:     const testVariety = varieties.find(
180:       (v) =>
181:         v.category === "fruiting-plants" &&
182:         (v.name.toLowerCase().includes("cucumber") ||
183:           v.name.toLowerCase().includes("peas"))
184:     );
185:     expect(testVariety).toBeDefined();
186: 
187:     const plantId = await plantService.addPlant({
188:       varietyId: testVariety!.id,
189:       varietyName: testVariety!.name,
190:       name: "Test Plant",
191:       plantedDate: new Date(),
192:       currentStage: "vegetative",
193:       location: "Indoor",
194:       container: "5 gallon pot",
195:       isActive: true,
196:     });
197: 
198:     const createdPlant = await plantService.getPlant(plantId);
199:     expect(createdPlant).toBeDefined();
200: 
201: 
202:     const mockGetActivePlants =
203:       plantService.getActivePlants as jest.MockedFunction<
204:         typeof plantService.getActivePlants
205:       >;
206:     mockGetActivePlants.mockResolvedValue([createdPlant!]);
207: 
208:     const user = userEvent.setup();
209: 
210:     renderWithRouter(<CareLogForm onSuccess={jest.fn()} />);
211: 
212:     await waitFor(() => {
213:       expect(screen.getByLabelText(/Plant/i)).toBeInTheDocument();
214:     });
215: 
216: 
217:     await waitFor(() => {
218:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
219:       const options = Array.from(plantSelect.options).map(
220:         (option) => option.value
221:       );
222:       expect(options).toContain(plantId);
223:     });
224: 
225:     const plantSelect = screen.getByLabelText(/Plant/i);
226:     await user.selectOptions(plantSelect, plantId);
227: 
228: 
229:     await waitFor(() => {
230:       expect(screen.getByPlaceholderText("Amount")).toBeInTheDocument();
231:     });
232:   });
233: 
234:   it("should show fertilizer suggestions when fertilizer activity is selected", async () => {
235:     const varieties = await varietyService.getAllVarieties();
236: 
237: 
238:     const testVariety = varieties.find(
239:       (v) =>
240:         v.category === "fruiting-plants" &&
241:         (v.name.toLowerCase().includes("cucumber") ||
242:           v.name.toLowerCase().includes("peas"))
243:     );
244:     expect(testVariety).toBeDefined();
245: 
246:     const plantId = await plantService.addPlant({
247:       varietyId: testVariety!.id,
248:       varietyName: testVariety!.name,
249:       name: "Test Plant",
250:       plantedDate: new Date(),
251:       currentStage: "vegetative",
252:       location: "Indoor",
253:       container: "5 gallon pot",
254:       isActive: true,
255:     });
256: 
257:     const createdPlant = await plantService.getPlant(plantId);
258:     expect(createdPlant).toBeDefined();
259: 
260: 
261:     const mockGetActivePlants =
262:       plantService.getActivePlants as jest.MockedFunction<
263:         typeof plantService.getActivePlants
264:       >;
265:     mockGetActivePlants.mockResolvedValue([createdPlant!]);
266: 
267:     const user = userEvent.setup();
268: 
269:     renderWithRouter(<CareLogForm onSuccess={jest.fn()} />);
270: 
271:     await waitFor(() => {
272:       expect(screen.getByLabelText(/Plant/i)).toBeInTheDocument();
273:     });
274: 
275: 
276:     await waitFor(() => {
277:       const plantSelect = screen.getByLabelText(/Plant/i) as HTMLSelectElement;
278:       const options = Array.from(plantSelect.options).map(
279:         (option) => option.value
280:       );
281:       expect(options).toContain(plantId);
282:     });
283: 
284:     const plantSelect = screen.getByLabelText(/Plant/i);
285:     await user.selectOptions(plantSelect, plantId);
286: 
287: 
288:     const activitySelect = screen.getByLabelText(/Activity Type/i);
289:     await user.selectOptions(activitySelect, "fertilize");
290: 
291: 
292:     await waitFor(() => {
293:       expect(screen.getByLabelText(/Fertilizer Product/i)).toBeInTheDocument();
294:       expect(screen.getByLabelText(/Dilution Ratio/i)).toBeInTheDocument();
295:       expect(screen.getByLabelText(/Application Amount/i)).toBeInTheDocument();
296:     });
297:   });
298: });

================
File: src/components/layouts/EmptyState.tsx
================
 1: import React from "react";
 2: import { Card, CardContent } from "@/components/ui/Card";
 3: import { Button } from "@/components/ui/Button";
 4: import { Link } from "react-router-dom";
 5: 
 6: interface EmptyStateProps {
 7:   title: string;
 8:   description: string;
 9:   icon: string;
10:   actionLabel: string;
11:   actionTo: string;
12:   showWelcome?: boolean;
13: }
14: 
15: const EmptyState: React.FC<EmptyStateProps> = ({
16:   title,
17:   description,
18:   icon,
19:   actionLabel,
20:   actionTo,
21:   showWelcome = false,
22: }) => {
23:   return (
24:     <div className="flex items-center justify-center min-h-96">
25:       <Card className="w-full max-w-md mx-4 shadow-sm border border-border">
26:         <CardContent className="text-center py-12 px-6 space-y-6">
27:           {showWelcome && (
28:             <div className="mb-8">
29:               <h1 className="text-3xl font-bold text-foreground mb-2">
30:                 🌱 Welcome to SmartGarden
31:               </h1>
32:               <p className="text-muted-foreground">
33:                 Your digital gardening companion
34:               </p>
35:             </div>
36:           )}
37: 
38:           <div className="text-6xl mb-4" role="img" aria-label={title}>
39:             {icon}
40:           </div>
41: 
42:           <div className="space-y-3">
43:             <h2 className="text-xl font-semibold text-foreground">{title}</h2>
44:             <p className="text-muted-foreground leading-relaxed">
45:               {description}
46:             </p>
47:           </div>
48: 
49:           <div className="pt-4">
50:             <Link to={actionTo} className="block">
51:               <Button size="lg" className="w-full">
52:                 {actionLabel}
53:               </Button>
54:             </Link>
55:           </div>
56: 
57:           {showWelcome && (
58:             <div className="pt-6 border-t border-gray-100">
59:               <p className="text-sm text-muted-foreground">
60:                 Need help getting started?{" "}
61:                 <button
62:                   className="text-green-700 underline hover:text-green-800"
63:                   onClick={() => {
64:                     console.log("Show tutorial");
65:                   }}
66:                 >
67:                   View quick tutorial
68:                 </button>
69:               </p>
70:             </div>
71:           )}
72:         </CardContent>
73:       </Card>
74:     </div>
75:   );
76: };
77: 
78: export default EmptyState;

================
File: src/components/plant/CareActivityItem.tsx
================
  1: import React, { useState } from "react";
  2: import {
  3:   CareRecord,
  4:   WateringDetails,
  5:   FertilizingDetails,
  6:   ObservationDetails,
  7:   HarvestDetails,
  8:   TransplantDetails,
  9: } from "@/types/database";
 10: import { formatDateTime } from "@/utils/dateUtils";
 11: 
 12: interface CareActivityItemProps {
 13:   activity: CareRecord;
 14: }
 15: 
 16: const CareActivityItem: React.FC<CareActivityItemProps> = ({ activity }) => {
 17:   const [isExpanded, setIsExpanded] = useState(false);
 18: 
 19:   const getActivityIcon = (type: string): string => {
 20:     switch (type) {
 21:       case "water":
 22:         return "💧";
 23:       case "fertilize":
 24:         return "🌱";
 25:       case "observe":
 26:         return "👁️";
 27:       case "harvest":
 28:         return "🌾";
 29:       case "transplant":
 30:         return "🏺";
 31:       default:
 32:         return "📋";
 33:     }
 34:   };
 35: 
 36:   const getActivityTitle = (activity: CareRecord): string => {
 37:     switch (activity.type) {
 38:       case "water": {
 39:         const waterDetails = activity.details as WateringDetails;
 40:         return `Watering (${waterDetails.amount.value} ${waterDetails.amount.unit})`;
 41:       }
 42:       case "fertilize": {
 43:         const fertilizeDetails = activity.details as FertilizingDetails;
 44:         return `Fertilized with ${fertilizeDetails.product}`;
 45:       }
 46:       case "observe": {
 47:         const observeDetails = activity.details as ObservationDetails;
 48:         return `Health Check (${observeDetails.healthAssessment})`;
 49:       }
 50:       case "harvest": {
 51:         const harvestDetails = activity.details as HarvestDetails;
 52:         return `Harvested ${harvestDetails.amount}`;
 53:       }
 54:       case "transplant": {
 55:         const transplantDetails = activity.details as TransplantDetails;
 56:         return `Transplanted to ${transplantDetails.toContainer}`;
 57:       }
 58:       default:
 59:         return "Care Activity";
 60:     }
 61:   };
 62: 
 63:   const renderActivityDetails = (activity: CareRecord) => {
 64:     switch (activity.type) {
 65:       case "water": {
 66:         const waterDetails = activity.details as WateringDetails;
 67:         return (
 68:           <div className="space-y-2">
 69:             <div className="grid grid-cols-2 gap-4 text-sm">
 70:               <div>
 71:                 <span className="font-medium text-muted-foreground">
 72:                   Amount:
 73:                 </span>
 74:                 <div>
 75:                   {waterDetails.amount.value} {waterDetails.amount.unit}
 76:                 </div>
 77:               </div>
 78:               {waterDetails.method && (
 79:                 <div>
 80:                   <span className="font-medium text-muted-foreground">
 81:                     Method:
 82:                   </span>
 83:                   <div>{waterDetails.method.replace("-", " ")}</div>
 84:                 </div>
 85:               )}
 86:             </div>
 87:             {waterDetails.moistureReading && (
 88:               <div>
 89:                 <span className="font-medium text-muted-foreground">
 90:                   Moisture Reading:
 91:                 </span>
 92:                 <div className="text-sm">
 93:                   Before: {waterDetails.moistureReading.before}/10 → After:{" "}
 94:                   {waterDetails.moistureReading.after}/10
 95:                 </div>
 96:               </div>
 97:             )}
 98:             {waterDetails.runoffObserved !== undefined && (
 99:               <div>
100:                 <span className="font-medium text-muted-foreground">
101:                   Runoff:
102:                 </span>
103:                 <div className="text-sm">
104:                   {waterDetails.runoffObserved ? "Yes" : "No"}
105:                 </div>
106:               </div>
107:             )}
108:           </div>
109:         );
110:       }
111: 
112:       case "fertilize": {
113:         const fertilizeDetails = activity.details as FertilizingDetails;
114:         return (
115:           <div className="space-y-2">
116:             <div className="grid grid-cols-2 gap-4 text-sm">
117:               <div>
118:                 <span className="font-medium text-muted-foreground">
119:                   Product:
120:                 </span>
121:                 <div>{fertilizeDetails.product}</div>
122:               </div>
123:               <div>
124:                 <span className="font-medium text-muted-foreground">
125:                   Dilution:
126:                 </span>
127:                 <div>{fertilizeDetails.dilution}</div>
128:               </div>
129:               <div>
130:                 <span className="font-medium text-muted-foreground">
131:                   Amount:
132:                 </span>
133:                 <div>{fertilizeDetails.amount}</div>
134:               </div>
135:             </div>
136:           </div>
137:         );
138:       }
139:       case "observe": {
140:         const observeDetails = activity.details as ObservationDetails;
141:         return (
142:           <div className="space-y-2">
143:             <div>
144:               <span className="font-medium text-muted-foreground">
145:                 Health Assessment:
146:               </span>
147:               <div className="text-sm capitalize">
148:                 {observeDetails.healthAssessment}
149:               </div>
150:             </div>
151:             <div>
152:               <span className="font-medium text-muted-foreground">
153:                 Observations:
154:               </span>
155:               <div className="text-sm">{observeDetails.observations}</div>
156:             </div>
157:             {observeDetails.photos && observeDetails.photos.length > 0 && (
158:               <div>
159:                 <span className="font-medium text-muted-foreground">
160:                   Photos:
161:                 </span>
162:                 <div className="text-sm">
163:                   {observeDetails.photos.length} photo(s) attached
164:                 </div>
165:               </div>
166:             )}
167:           </div>
168:         );
169:       }
170: 
171:       case "harvest": {
172:         const harvestDetails = activity.details as HarvestDetails;
173:         return (
174:           <div className="space-y-2">
175:             <div className="grid grid-cols-2 gap-4 text-sm">
176:               <div>
177:                 <span className="font-medium text-muted-foreground">
178:                   Amount:
179:                 </span>
180:                 <div>{harvestDetails.amount}</div>
181:               </div>
182:               <div>
183:                 <span className="font-medium text-muted-foreground">
184:                   Quality:
185:                 </span>
186:                 <div className="capitalize">{harvestDetails.quality}</div>
187:               </div>
188:             </div>
189:             {harvestDetails.method && (
190:               <div>
191:                 <span className="font-medium text-muted-foreground">
192:                   Method:
193:                 </span>
194:                 <div className="text-sm">{harvestDetails.method}</div>
195:               </div>
196:             )}
197:           </div>
198:         );
199:       }
200: 
201:       case "transplant": {
202:         const transplantDetails = activity.details as TransplantDetails;
203:         return (
204:           <div className="space-y-2">
205:             <div className="grid grid-cols-2 gap-4 text-sm">
206:               <div>
207:                 <span className="font-medium text-muted-foreground">From:</span>
208:                 <div>{transplantDetails.fromContainer}</div>
209:               </div>
210:               <div>
211:                 <span className="font-medium text-muted-foreground">To:</span>
212:                 <div>{transplantDetails.toContainer}</div>
213:               </div>
214:             </div>
215:             <div>
216:               <span className="font-medium text-muted-foreground">Reason:</span>
217:               <div className="text-sm">{transplantDetails.reason}</div>
218:             </div>
219:           </div>
220:         );
221:       }
222: 
223:       default:
224:         return null;
225:     }
226:   };
227: 
228:   return (
229:     <div className="border border-border rounded-lg">
230:       <div
231:         className="p-4 cursor-pointer hover:bg-background transition-colors"
232:         onClick={() => setIsExpanded(!isExpanded)}
233:       >
234:         <div className="flex items-start gap-3">
235:           <div className="text-xl">{getActivityIcon(activity.type)}</div>
236:           <div className="flex-1 min-w-0">
237:             <div className="flex items-start justify-between">
238:               <div>
239:                 <h4 className="font-medium text-foreground text-sm">
240:                   {getActivityTitle(activity)}
241:                 </h4>
242:                 <p className="text-xs text-muted-foreground mt-1">
243:                   {formatDateTime(activity.date)}
244:                 </p>
245:               </div>
246:               <svg
247:                 className={`w-4 h-4 text-muted-foreground transition-transform ${
248:                   isExpanded ? "rotate-180" : ""
249:                 }`}
250:                 fill="none"
251:                 stroke="currentColor"
252:                 viewBox="0 0 24 24"
253:               >
254:                 <path
255:                   strokeLinecap="round"
256:                   strokeLinejoin="round"
257:                   strokeWidth={2}
258:                   d="M19 9l-7 7-7-7"
259:                 />
260:               </svg>
261:             </div>
262:           </div>
263:         </div>
264:       </div>
265: 
266:       {isExpanded && (
267:         <div className="px-4 pb-4 border-t border-gray-100 bg-background">
268:           <div className="pt-3">
269:             {renderActivityDetails(activity)}
270: 
271:             {activity.details.notes && (
272:               <div className="mt-3 pt-3 border-t border-border">
273:                 <span className="font-medium text-muted-foreground">
274:                   Notes:
275:                 </span>
276:                 <div className="text-sm text-foreground mt-1">
277:                   {activity.details.notes}
278:                 </div>
279:               </div>
280:             )}
281:           </div>
282:         </div>
283:       )}
284:     </div>
285:   );
286: };
287: 
288: export default CareActivityItem;

================
File: src/components/plant/PlantStageDisplay.tsx
================
 1: import { PlantRecord } from "@/types/database";
 2: import { useDynamicStage } from "@/hooks/useDynamicStage";
 3: 
 4: interface PlantStageDisplayProps {
 5:   plant: PlantRecord;
 6:   showEmoji?: boolean;
 7:   className?: string;
 8: }
 9: 
10: const PlantStageDisplay = ({
11:   plant,
12:   showEmoji = false,
13:   className = "text-sm font-medium text-muted-foreground capitalize",
14: }: PlantStageDisplayProps) => {
15:   const calculatedStage = useDynamicStage(plant);
16: 
17:   return (
18:     <div className={className}>
19:       {showEmoji && <span className="mr-1">🌱</span>}
20:       Stage: {calculatedStage}
21:     </div>
22:   );
23: };
24: 
25: export default PlantStageDisplay;

================
File: src/components/plant/ReminderPreferencesSection.tsx
================
 1: import { Switch } from "@/components/ui/Switch";
 2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
 3: 
 4: 
 5: interface ReminderPreferences {
 6:   watering: boolean;
 7:   fertilizing: boolean;
 8:   observation: boolean;
 9:   lighting: boolean;
10:   pruning: boolean;
11: }
12: 
13: interface ReminderPreferencesProps {
14:   preferences: ReminderPreferences;
15:   onChange: (preferences: ReminderPreferences) => void;
16: }
17: 
18: const ReminderPreferencesSection = ({
19:   preferences,
20:   onChange,
21: }: ReminderPreferencesProps) => {
22:   const handleToggle = (key: keyof ReminderPreferences) => {
23:     onChange({
24:       ...preferences,
25:       [key]: !preferences[key],
26:     });
27:   };
28: 
29:   const reminderTypes = [
30:     {
31:       key: "watering" as const,
32:       label: "Watering",
33:       icon: "💧",
34:       description: "Get notified when watering is due",
35:     },
36:     {
37:       key: "fertilizing" as const,
38:       label: "Fertilizing",
39:       icon: "🌱",
40:       description: "Reminders for feeding schedule",
41:     },
42:     {
43:       key: "observation" as const,
44:       label: "Health Checks",
45:       icon: "👁️",
46:       description: "Regular observation reminders",
47:     },
48:     {
49:       key: "lighting" as const,
50:       label: "Lighting",
51:       icon: "💡",
52:       description: "Light schedule adjustments",
53:     },
54:     {
55:       key: "pruning" as const,
56:       label: "Maintenance",
57:       icon: "✂️",
58:       description: "Pruning and maintenance tasks",
59:     },
60:   ];
61: 
62:   return (
63:     <Card className="border-emerald-200 bg-emerald-50/30">
64:       <CardHeader className="pb-3">
65:         <CardTitle className="text-lg flex items-center gap-2">
66:           <span>🔔</span>
67:           Reminder Preferences
68:         </CardTitle>
69:         <p className="text-sm text-muted-foreground">
70:           Choose which types of care reminders you'd like to receive for this
71:           plant
72:         </p>
73:       </CardHeader>
74:       <CardContent className="space-y-3">
75:         {reminderTypes.map(({ key, label, icon, description }) => (
76:           <div
77:             key={key}
78:             className="flex items-center justify-between p-3 rounded-lg border border-emerald-100 bg-card/50 hover:bg-card/80 transition-colors"
79:           >
80:             <div className="flex-1">
81:               <div className="flex items-center gap-2 mb-1">
82:                 <span className="text-lg">{icon}</span>
83:                 <span className="font-medium text-foreground">{label}</span>
84:               </div>
85:               <p className="text-sm text-muted-foreground">{description}</p>
86:             </div>
87:             <Switch
88:               checked={preferences[key]}
89:               onCheckedChange={() => handleToggle(key)}
90:               className="ml-4"
91:             />
92:           </div>
93:         ))}
94:       </CardContent>
95:     </Card>
96:   );
97: };
98: 
99: export default ReminderPreferencesSection;

================
File: src/components/ui/Button.tsx
================
  1: import React from "react";
  2: import { cn } from "@/utils/cn";
  3: 
  4: interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  5:   variant?: "primary" | "secondary" | "outline" | "ghost" | "destructive";
  6:   size?: "sm" | "md" | "lg" | "xl";
  7:   children: React.ReactNode;
  8:   loading?: boolean;
  9:   leftIcon?: React.ReactNode;
 10:   rightIcon?: React.ReactNode;
 11: }
 12: 
 13: export const Button: React.FC<ButtonProps> = ({
 14:   variant = "primary",
 15:   size = "md",
 16:   className,
 17:   children,
 18:   loading = false,
 19:   leftIcon,
 20:   rightIcon,
 21:   disabled,
 22:   ...props
 23: }) => {
 24:   const baseClasses = [
 25:     "inline-flex items-center justify-center",
 26:     "font-bold tracking-wide",
 27:     "rounded-2xl",
 28:     "transition-all duration-200 ease-out",
 29:     "focus:outline-none focus:ring-4 focus:ring-offset-0",
 30:     "active:scale-95",
 31:     "disabled:opacity-50 disabled:cursor-not-allowed disabled:active:scale-100",
 32:     "select-none",
 33:     "relative overflow-hidden",
 34:   ].join(" ");
 35: 
 36:   const variantClasses = {
 37:     primary: [
 38:       "bg-gradient-to-r from-emerald-500 to-green-600",
 39:       "text-white",
 40:       "hover:from-emerald-600 hover:to-green-700",
 41:       "active:from-emerald-700 active:to-green-800",
 42:       "focus:ring-emerald-400/50",
 43:       "shadow-lg shadow-emerald-500/25",
 44:       "hover:shadow-xl hover:shadow-emerald-500/30",
 45:       "border-0",
 46:     ].join(" "),
 47: 
 48:     secondary: [
 49:       "bg-gradient-to-r from-amber-400 to-orange-500",
 50:       "text-white",
 51:       "hover:from-amber-500 hover:to-orange-600",
 52:       "focus:ring-amber-400/50",
 53:       "shadow-lg shadow-amber-400/25",
 54:       "border-0",
 55:     ].join(" "),
 56: 
 57:     outline: [
 58:       "bg-card text-primary",
 59:       "hover:bg-muted hover:text-primary",
 60:       "active:bg-muted",
 61:       "focus:ring-ring/50",
 62:       "border-2 border-border",
 63:       "hover:border-ring",
 64:       "shadow-sm hover:shadow-md",
 65:     ].join(" "),
 66: 
 67:     ghost: [
 68:       "bg-transparent text-muted-foreground",
 69:       "hover:bg-muted hover:text-foreground",
 70:       "active:bg-muted",
 71:       "focus:ring-ring/50",
 72:       "border-0",
 73:       "shadow-none",
 74:     ].join(" "),
 75: 
 76:     destructive: [
 77:       "bg-gradient-to-r from-red-500 to-red-600",
 78:       "text-white",
 79:       "hover:from-red-600 hover:to-red-700",
 80:       "active:from-red-700 active:to-red-800",
 81:       "focus:ring-red-400/50",
 82:       "shadow-lg shadow-red-500/25",
 83:       "hover:shadow-xl hover:shadow-red-500/30",
 84:       "border-0",
 85:     ].join(" "),
 86:   };
 87: 
 88:   const sizeClasses = {
 89:     sm: "px-3 py-1.5 text-sm gap-1.5",
 90:     md: "px-4 py-2 text-base gap-2",
 91:     lg: "px-6 py-3 text-lg gap-2.5",
 92:     xl: "px-8 py-4 text-xl gap-3",
 93:   };
 94: 
 95:   const isDisabled = disabled || loading;
 96: 
 97:   return (
 98:     <button
 99:       className={cn(
100:         baseClasses,
101:         variantClasses[variant],
102:         sizeClasses[size],
103:         className
104:       )}
105:       disabled={isDisabled}
106:       {...props}
107:     >
108:       {loading && (
109:         <div className="absolute inset-0 flex items-center justify-center">
110:           <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
111:         </div>
112:       )}
113: 
114:       <div className={cn("flex items-center gap-2", loading && "opacity-0")}>
115:         {leftIcon && <span className="flex-shrink-0">{leftIcon}</span>}
116:         <span>{children}</span>
117:         {rightIcon && <span className="flex-shrink-0">{rightIcon}</span>}
118:       </div>
119:     </button>
120:   );
121: };

================
File: src/components/ui/Card.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface CardProps {
 5:   children: React.ReactNode;
 6:   className?: string;
 7: }
 8: 
 9: interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {
10:   children: React.ReactNode;
11:   className?: string;
12: }
13: export function Card({ children, className }: CardProps) {
14:   return (
15:     <div
16:       className={cn(
17:         "rounded-lg border bg-card text-card-foreground shadow-sm",
18:         className
19:       )}
20:     >
21:       {children}
22:     </div>
23:   );
24: }
25: 
26: export function CardHeader({ children, className }: CardProps) {
27:   return (
28:     <div className={cn("px-6 py-4 border-b border-border", className)}>
29:       {children}
30:     </div>
31:   );
32: }
33: 
34: export function CardContent({
35:   children,
36:   className,
37:   ...props
38: }: CardContentProps) {
39:   return (
40:     <div
41:       className={cn(
42:         "p-6 pt-0 text-card-foreground",
43: 
44:         className
45:       )}
46:       {...props}
47:     >
48:       {children}
49:     </div>
50:   );
51: }
52: 
53: export function CardTitle({ children, className }: CardProps) {
54:   return (
55:     <h3
56:       className={cn(
57:         "text-2xl font-semibold leading-none tracking-tight text-card-foreground",
58: 
59:         className
60:       )}
61:     >
62:       {children}
63:     </h3>
64:   );
65: }

================
File: src/components/ui/DarkModeToggle.tsx
================
 1: import React from "react";
 2: import { useDarkMode } from "@/hooks/useDarkMode";
 3: import { cn } from "@/utils/cn";
 4: 
 5: interface DarkModeToggleProps {
 6:   size?: "sm" | "md" | "lg";
 7:   className?: string;
 8:   showLabels?: boolean;
 9: }
10: 
11: export const DarkModeToggle: React.FC<DarkModeToggleProps> = ({
12:   size = "md",
13:   className,
14:   showLabels = false,
15: }) => {
16:   const { isDarkMode, toggleDarkMode } = useDarkMode();
17: 
18:   const sizeClasses = {
19:     sm: {
20:       button: "w-12 h-6",
21:       circle: "w-4 h-4",
22:       translate: "translate-x-6",
23:       icon: "text-xs",
24:     },
25:     md: {
26:       button: "w-14 h-7",
27:       circle: "w-5 h-5",
28:       translate: "translate-x-7",
29:       icon: "text-sm",
30:     },
31:     lg: {
32:       button: "w-16 h-8",
33:       circle: "w-6 h-6",
34:       translate: "translate-x-8",
35:       icon: "text-base",
36:     },
37:   };
38: 
39:   const sizes = sizeClasses[size];
40: 
41:   return (
42:     <div className={cn("flex items-center gap-2", className)}>
43:       {showLabels && (
44:         <span
45:           className={cn(
46:             "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
47:             sizes.button,
48:             isDarkMode
49:               ? "bg-emerald-600 hover:bg-emerald-700"
50:               : "bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-background0"
51:           )}
52:         >
53:           ☀️
54:         </span>
55:       )}
56: 
57:       <button
58:         type="button"
59:         onClick={toggleDarkMode}
60:         className={cn(
61:           "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
62:           sizes.button,
63:           isDarkMode
64:             ? "bg-emerald-600 hover:bg-emerald-700"
65:             : "bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-background0"
66:         )}
67:         aria-label={`Switch to ${isDarkMode ? "light" : "dark"} mode`}
68:       >
69:         <span
70:           className={cn(
71:             "pointer-events-none inline-block rounded-full bg-card shadow transform ring-0 transition duration-200 ease-in-out flex items-center justify-center",
72:             sizes.circle,
73:             isDarkMode ? sizes.translate : "translate-x-0"
74:           )}
75:         >
76:           <span className={cn(sizes.icon)}>{isDarkMode ? "🌙" : "☀️"}</span>
77:         </span>
78:       </button>
79: 
80:       {showLabels && (
81:         <span
82:           className={cn(
83:             "text-sm font-medium transition-colors",
84:             isDarkMode
85:               ? "text-emerald-700 dark:text-emerald-500"
86:               : "text-muted-foreground dark:text-muted-foreground"
87:           )}
88:         >
89:           🌙
90:         </span>
91:       )}
92:     </div>
93:   );
94: };

================
File: src/components/ui/LocationToggle.tsx
================
 1: import React from "react";
 2: import { cn } from "@/utils/cn";
 3: 
 4: interface LocationToggleProps {
 5:   isOutdoor: boolean;
 6:   onChange: (isOutdoor: boolean) => void;
 7:   disabled?: boolean;
 8:   className?: string;
 9: }
10: 
11: export const LocationToggle: React.FC<LocationToggleProps> = ({
12:   isOutdoor,
13:   onChange,
14:   disabled = false,
15:   className,
16: }) => {
17:   return (
18:     <div
19:       className={cn("relative inline-flex rounded-lg p-1 bg-muted", className)}
20:     >
21:       <button
22:         type="button"
23:         disabled={disabled}
24:         onClick={() => onChange(false)}
25:         className={cn(
26:           "relative flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
27:           !isOutdoor
28:             ? "bg-card text-emerald-700 shadow-sm"
29:             : "text-muted-foreground hover:text-foreground",
30:           disabled && "opacity-50 cursor-not-allowed"
31:         )}
32:       >
33:         <span className="text-lg">🏠</span>
34:         <span>Indoor</span>
35:       </button>
36: 
37:       <button
38:         type="button"
39:         disabled={disabled}
40:         onClick={() => onChange(true)}
41:         className={cn(
42:           "relative flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
43:           isOutdoor
44:             ? "bg-card text-emerald-700 shadow-sm"
45:             : "text-muted-foreground hover:text-foreground",
46:           disabled && "opacity-50 cursor-not-allowed"
47:         )}
48:       >
49:         <span className="text-lg">🌞</span>
50:         <span>Outdoor</span>
51:       </button>
52:     </div>
53:   );
54: };

================
File: src/components/ui/Switch.tsx
================
  1: import React from "react";
  2: import { cn } from "@/utils/cn";
  3: 
  4: interface SwitchProps {
  5:   checked: boolean;
  6:   onCheckedChange: (checked: boolean) => void;
  7:   disabled?: boolean;
  8:   leftLabel?: string;
  9:   rightLabel?: string;
 10:   leftIcon?: React.ReactNode;
 11:   rightIcon?: React.ReactNode;
 12:   size?: "sm" | "md" | "lg";
 13:   className?: string;
 14:   id?: string;
 15:   "aria-label"?: string;
 16:   "aria-labelledby"?: string;
 17: }
 18: 
 19: export const Switch: React.FC<SwitchProps> = ({
 20:   checked,
 21:   onCheckedChange,
 22:   disabled = false,
 23:   leftLabel,
 24:   rightLabel,
 25:   leftIcon,
 26:   rightIcon,
 27:   size = "md",
 28:   className,
 29:   id,
 30:   "aria-label": ariaLabel,
 31:   "aria-labelledby": ariaLabelledBy,
 32: }) => {
 33:   const sizeClasses = {
 34:     sm: {
 35:       track: "w-10 h-5",
 36:       thumb: "w-4 h-4",
 37:       translate: "translate-x-5",
 38:       text: "text-sm",
 39:       gap: "gap-2",
 40:     },
 41:     md: {
 42:       track: "w-12 h-6",
 43:       thumb: "w-5 h-5",
 44:       translate: "translate-x-6",
 45:       text: "text-base",
 46:       gap: "gap-3",
 47:     },
 48:     lg: {
 49:       track: "w-14 h-7",
 50:       thumb: "w-6 h-6",
 51:       translate: "translate-x-7",
 52:       text: "text-lg",
 53:       gap: "gap-4",
 54:     },
 55:   };
 56: 
 57:   const sizes = sizeClasses[size];
 58: 
 59:   return (
 60:     <div className={cn("flex items-center", sizes.gap, className)}>
 61:       {}
 62:       {(leftLabel || leftIcon) && (
 63:         <div
 64:           className={cn(
 65:             "flex items-center gap-2 transition-colors duration-200",
 66:             sizes.text,
 67:             !checked
 68:               ? "text-emerald-700 font-semibold"
 69:               : "text-muted-foreground",
 70:             disabled && "opacity-50"
 71:           )}
 72:         >
 73:           {leftIcon && <span className="flex-shrink-0">{leftIcon}</span>}
 74:           {leftLabel && <span>{leftLabel}</span>}
 75:         </div>
 76:       )}
 77: 
 78:       {}
 79:       <button
 80:         type="button"
 81:         role="switch"
 82:         aria-checked={checked}
 83:         aria-label={ariaLabel}
 84:         aria-labelledby={ariaLabelledBy}
 85:         id={id}
 86:         disabled={disabled}
 87:         onClick={() => onCheckedChange(!checked)}
 88:         className={cn(
 89:           "relative inline-flex flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2",
 90:           sizes.track,
 91:           checked
 92:             ? "bg-emerald-600 hover:bg-emerald-700"
 93:             : "bg-gray-300 hover:bg-gray-400",
 94:           disabled && "cursor-not-allowed opacity-50 hover:bg-gray-300"
 95:         )}
 96:       >
 97:         <span
 98:           className={cn(
 99:             "pointer-events-none inline-block rounded-full bg-card shadow transform ring-0 transition duration-200 ease-in-out",
100:             sizes.thumb,
101:             checked ? sizes.translate : "translate-x-0"
102:           )}
103:         />
104:       </button>
105: 
106:       {}
107:       {(rightLabel || rightIcon) && (
108:         <div
109:           className={cn(
110:             "flex items-center gap-2 transition-colors duration-200",
111:             sizes.text,
112:             checked
113:               ? "text-emerald-700 font-semibold"
114:               : "text-muted-foreground",
115:             disabled && "opacity-50"
116:           )}
117:         >
118:           {rightIcon && <span className="flex-shrink-0">{rightIcon}</span>}
119:           {rightLabel && <span>{rightLabel}</span>}
120:         </div>
121:       )}
122:     </div>
123:   );
124: };

================
File: src/data/seedVarieties.ts
================
   1: import { PlantCategory } from "@/types";
   2: 
   3: interface StageSpecificWateringProtocol {
   4:   [stageName: string]: {
   5:     trigger: {
   6:       moistureLevel: string | number;
   7:       description?: string;
   8:     };
   9:     target: {
  10:       moistureLevel: string | number;
  11:       description?: string;
  12:     };
  13:     volume: {
  14:       amount: string;
  15:       frequency: string;
  16:       perPlant?: boolean;
  17:     };
  18:     notes?: string[];
  19:   };
  20: }
  21: 
  22: interface StageSpecificLightingProtocol {
  23:   [stageName: string]: {
  24:     ppfd: {
  25:       min: number;
  26:       max: number;
  27:       optimal?: number;
  28:       unit: "µmol/m²/s";
  29:     };
  30:     photoperiod: {
  31:       hours: number;
  32:       maxHours?: number;
  33:       minHours?: number;
  34:       constraint?: string;
  35:     };
  36:     dli: {
  37:       min: number;
  38:       max: number;
  39:       unit: "mol/m²/day";
  40:     };
  41:     notes?: string[];
  42:   };
  43: }
  44: 
  45: interface StageSpecificFertilizationProtocol {
  46:   [stageName: string]: {
  47:     products?: {
  48:       name: string;
  49:       dilution: string;
  50:       amount: string;
  51:       frequency: string;
  52:       method?: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
  53:     }[];
  54:     timing?: string;
  55:     specialInstructions?: string[];
  56:     notes?: string[];
  57:   };
  58: }
  59: 
  60: 
  61: interface EnvironmentalProtocol {
  62:   temperature?: {
  63:     min?: number;
  64:     max?: number;
  65:     optimal?: number;
  66:     unit: "F" | "C";
  67:     criticalMax?: number;
  68:     criticalMin?: number;
  69:     stage?: string;
  70:   };
  71:   humidity?: {
  72:     min?: number;
  73:     max?: number;
  74:     optimal?: number;
  75:     criticalForStage?: string;
  76:   };
  77:   pH: {
  78:     min: number;
  79:     max: number;
  80:     optimal: number;
  81:   };
  82:   specialConditions?: string[];
  83:   constraints?: {
  84:     description: string;
  85:     parameter: "temperature" | "humidity" | "light" | "other";
  86:     threshold: number;
  87:     consequence: string;
  88:   }[];
  89: }
  90: 
  91: interface SoilMixture {
  92:   components: {
  93:     [component: string]: number;
  94:   };
  95:   amendments?: {
  96:     [amendment: string]: string;
  97:   };
  98: }
  99: 
 100: interface ContainerRequirements {
 101:   minSize?: string;
 102:   depth: string;
 103:   drainage?: string;
 104:   staging?: {
 105:     seedling?: string;
 106:     intermediate?: string;
 107:     final: string;
 108:   };
 109: }
 110: 
 111: interface SuccessionProtocol {
 112:   interval: number;
 113:   method: "continuous" | "zoned" | "single";
 114:   harvestMethod: "cut-and-come-again" | "single-harvest" | "selective";
 115:   productiveWeeks?: number;
 116:   notes?: string[];
 117: }
 118: 
 119: interface ComprehensivePlantProtocols {
 120:   lighting?: StageSpecificLightingProtocol;
 121:   watering?: StageSpecificWateringProtocol;
 122:   fertilization?: StageSpecificFertilizationProtocol;
 123:   environment?: EnvironmentalProtocol;
 124:   soilMixture?: SoilMixture;
 125:   container?: ContainerRequirements;
 126:   succession?: SuccessionProtocol;
 127:   specialRequirements?: string[];
 128: }
 129: 
 130: export interface SeedVariety {
 131:   name: string;
 132:   category: PlantCategory;
 133:   growthTimeline: {
 134:     germination: number;
 135:     seedling: number;
 136:     vegetative: number;
 137:     maturation: number;
 138:   };
 139:   protocols?: ComprehensivePlantProtocols;
 140:   isEverbearing?: boolean;
 141:   productiveLifespan?: number;
 142: }
 143: 
 144: 
 145: 
 146: 
 147: 
 148: 
 149: 
 150: 
 151: export const seedVarieties: SeedVariety[] = [
 152:   {
 153:     name: "Boston Pickling Cucumber",
 154:     category: "fruiting-plants",
 155:     isEverbearing: false,
 156:     productiveLifespan: 70,
 157:     growthTimeline: {
 158:       germination: 7,
 159:       seedling: 14,
 160:       vegetative: 21,
 161:       maturation: 50,
 162:     },
 163:     protocols: {
 164:       lighting: {
 165:         seedling: {
 166:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
 167:           photoperiod: { hours: 12, maxHours: 16 },
 168:           dli: { min: 8.6, max: 23.0, unit: "mol/m²/day" },
 169:           notes: [
 170:             "Start feeding 2-3 weeks post-germination with balanced liquid fertilizer",
 171:             "Half strength during establishment to avoid nutrient burn",
 172:           ],
 173:         },
 174:         vegetativeGrowth: {
 175:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
 176:           photoperiod: { hours: 14, maxHours: 16 },
 177:           dli: { min: 20.2, max: 34.6, unit: "mol/m²/day" },
 178:           notes: [
 179:             "Vigorous vine growth requires high light intensity",
 180:             "Higher nitrogen during this phase supports leaf and vine development",
 181:           ],
 182:         },
 183:         flowering: {
 184:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 185:           photoperiod: { hours: 14, maxHours: 16 },
 186:           dli: { min: 28.8, max: 40.3, unit: "mol/m²/day" },
 187:           notes: [
 188:             "Critical phase - flower production determines fruit yield",
 189:             "Hand pollination required daily during flowering period",
 190:           ],
 191:         },
 192:         fruitingHarvesting: {
 193:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 194:           photoperiod: { hours: 14, maxHours: 16 },
 195:           dli: { min: 28.8, max: 40.3, unit: "mol/m²/day" },
 196:           notes: [
 197:             "Harvest 8-10 days after fruit set",
 198:             "Regular picking encourages continued production",
 199:           ],
 200:         },
 201:       },
 202:       watering: {
 203:         seedling: {
 204:           trigger: { moistureLevel: "consistent moisture" },
 205:           target: { moistureLevel: "adequate but not waterlogged" },
 206:           volume: {
 207:             amount: "as needed for establishment",
 208:             frequency: "daily monitoring",
 209:           },
 210:           notes: ["Heavy feeders require consistent moisture from start"],
 211:         },
 212:         vegetativeGrowth: {
 213:           trigger: { moistureLevel: "when top inch dry" },
 214:           target: { moistureLevel: "thoroughly moist" },
 215:           volume: { amount: "heavy watering", frequency: "as soil indicates" },
 216:           notes: [
 217:             "Consistent moisture critical - never allow drought stress",
 218:             "Container growing requires more frequent attention than ground cultivation",
 219:           ],
 220:         },
 221:         flowering: {
 222:           trigger: { moistureLevel: "when top inch dry" },
 223:           target: { moistureLevel: "thoroughly moist" },
 224:           volume: {
 225:             amount: "heavy watering",
 226:             frequency: "consistent schedule",
 227:           },
 228:           notes: [
 229:             "Water stress during flowering dramatically reduces fruit set",
 230:             "Morning watering preferred to allow leaves to dry before evening",
 231:           ],
 232:         },
 233:         fruitingHarvesting: {
 234:           trigger: { moistureLevel: "when top inch dry" },
 235:           target: { moistureLevel: "thoroughly moist" },
 236:           volume: {
 237:             amount: "heavy watering",
 238:             frequency: "daily during peak production",
 239:           },
 240:           notes: [
 241:             "Fruit development requires enormous water uptake",
 242:             "Inconsistent watering causes bitter or malformed fruit",
 243:           ],
 244:         },
 245:       },
 246:       fertilization: {
 247:         seedling: {
 248:           products: [
 249:             {
 250:               name: "Balanced liquid fertilizer",
 251:               dilution: "half strength",
 252:               amount: "light application",
 253:               frequency: "start 2-3 weeks post-germination",
 254:             },
 255:           ],
 256:           timing: "Weeks 2-4",
 257:           notes: ["Gentle introduction to feeding - young roots are sensitive"],
 258:         },
 259:         vegetativeGrowth: {
 260:           products: [
 261:             {
 262:               name: "Balanced liquid fertilizer",
 263:               dilution: "full strength",
 264:               amount: "regular application",
 265:               frequency: "every 1-2 weeks",
 266:             },
 267:           ],
 268:           timing: "Weeks 4-8",
 269:           notes: ["Higher nitrogen during vine development phase"],
 270:         },
 271:         flowering: {
 272:           products: [
 273:             {
 274:               name: "Higher P-K fertilizer (tomato/bloom booster)",
 275:               dilution: "as directed",
 276:               amount: "regular application",
 277:               frequency: "every 1-2 weeks",
 278:             },
 279:           ],
 280:           timing: "When first flowers appear",
 281:           notes: [
 282:             "Switch from nitrogen-heavy to phosphorus-potassium emphasis",
 283:             "Supports flower production and fruit development",
 284:           ],
 285:         },
 286:         fruitingHarvesting: {
 287:           products: [
 288:             {
 289:               name: "Higher P-K fertilizer",
 290:               dilution: "as directed",
 291:               amount: "consistent application",
 292:               frequency: "every 1-2 weeks",
 293:             },
 294:           ],
 295:           timing: "Throughout harvest period",
 296:           notes: ["Continuous fruiting demands consistent nutrition"],
 297:         },
 298:       },
 299:       environment: {
 300:         pH: { min: 5.8, max: 6.5, optimal: 6.2 },
 301:       },
 302:       soilMixture: {
 303:         components: {
 304:           "coco coir": 30,
 305:           perlite: 25,
 306:           vermiculite: 25,
 307:           compost: 20,
 308:         },
 309:         amendments: {
 310:           "well-rotted manure": "3 tbsp per gallon",
 311:           "bone meal": "1 tbsp per gallon",
 312:         },
 313:       },
 314:       container: {
 315:         minSize: "≥2-3 gallons",
 316:         depth: "18-24 inches minimum",
 317:         staging: {
 318:           seedling: "4 inch pot or cell tray with deeper cells",
 319:           final: "Large container or main bed section",
 320:         },
 321:       },
 322:       succession: {
 323:         interval: 21,
 324:         method: "continuous",
 325:         harvestMethod: "selective",
 326:         productiveWeeks: 8,
 327:         notes: [
 328:           "Succession every 3-4 weeks for overlapping production",
 329:           "Each plant produces for 6-8 weeks once fruiting begins",
 330:         ],
 331:       },
 332:       specialRequirements: [
 333:         "A-frame trellis essential for vine support and light exposure",
 334:         "Hand pollination critical - transfer pollen from male to female flowers daily",
 335:         "Female flowers identifiable by tiny cucumber at base",
 336:         "Harvest regularly to encourage continued production",
 337:         "Heavy feeders requiring rich, well-draining soil",
 338:       ],
 339:     },
 340:   },
 341: 
 342:   {
 343:     name: "Sugar Snap Peas",
 344:     category: "fruiting-plants",
 345:     isEverbearing: true,
 346:     productiveLifespan: 56,
 347:     growthTimeline: {
 348:       germination: 10,
 349:       seedling: 14,
 350:       vegetative: 21,
 351:       maturation: 60,
 352:     },
 353:     protocols: {
 354:       lighting: {
 355:         germinationEmergence: {
 356:           ppfd: { min: 100, max: 250, unit: "µmol/m²/s" },
 357:           photoperiod: { hours: 14, maxHours: 16 },
 358:           dli: { min: 5.0, max: 14.4, unit: "mol/m²/day" },
 359:           notes: ["Keep soil consistently moist during germination period"],
 360:         },
 361:         seedling: {
 362:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
 363:           photoperiod: { hours: 14, maxHours: 16 },
 364:           dli: { min: 11.5, max: 23.0, unit: "mol/m²/day" },
 365:           notes: [
 366:             "First true leaves and tendrils developing - watch for climbing behavior",
 367:           ],
 368:         },
 369:         vegetativeVining: {
 370:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
 371:           photoperiod: { hours: 14, maxHours: 16 },
 372:           dli: { min: 23.0, max: 34.6, unit: "mol/m²/day" },
 373:           notes: ["Rapid vine growth - ensure trellis support is adequate"],
 374:         },
 375:         flowerBudFormation: {
 376:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 377:           photoperiod: { hours: 12, maxHours: 14 },
 378:           dli: { min: 21.6, max: 35.3, unit: "mol/m²/day" },
 379:           notes: [
 380:             "Slight photoperiod reduction can encourage flowering",
 381:             "Monitor for first flower buds around days 40-50",
 382:           ],
 383:         },
 384:         podSetMaturation: {
 385:           ppfd: { min: 500, max: 700, unit: "µmol/m²/s" },
 386:           photoperiod: { hours: 12 },
 387:           dli: { min: 21.6, max: 30.2, unit: "mol/m²/day" },
 388:           notes: [
 389:             "Harvest pods when plump but before peas become starchy",
 390:             "Regular harvesting encourages continued pod production",
 391:           ],
 392:         },
 393:       },
 394:       watering: {
 395:         germinationEmergence: {
 396:           trigger: { moistureLevel: "3-4" },
 397:           target: { moistureLevel: "7-8" },
 398:           volume: { amount: "16-24 oz (470-710 mL)", frequency: "3x/week" },
 399:           notes: [
 400:             "Keep consistently moist but not waterlogged during germination",
 401:           ],
 402:         },
 403:         seedling: {
 404:           trigger: { moistureLevel: "3-4" },
 405:           target: { moistureLevel: "7-8" },
 406:           volume: { amount: "20-32 oz (590-945 mL)", frequency: "3x/week" },
 407:           notes: ["Establishing root system requires consistent moisture"],
 408:         },
 409:         vegetativeVining: {
 410:           trigger: { moistureLevel: "3-4" },
 411:           target: { moistureLevel: "7-8" },
 412:           volume: { amount: "32-42 oz (945-1240 mL)", frequency: "3-4x/week" },
 413:           notes: ["Rapid vine growth increases water demands significantly"],
 414:         },
 415:         flowerBudFormation: {
 416:           trigger: { moistureLevel: "3-4" },
 417:           target: { moistureLevel: "7-8" },
 418:           volume: { amount: "40-48 oz (1180-1419 mL)", frequency: "4x/week" },
 419:           notes: [
 420:             "Critical period - water stress reduces flower and pod formation",
 421:           ],
 422:         },
 423:         podSetMaturation: {
 424:           trigger: { moistureLevel: "3-4" },
 425:           target: { moistureLevel: "7-8" },
 426:           volume: { amount: "40-54 oz (1180-1600 mL)", frequency: "3-4x/week" },
 427:           notes: ["Pod filling requires substantial water uptake"],
 428:         },
 429:       },
 430:       fertilization: {
 431:         germinationEmergence: {
 432:           products: [
 433:             {
 434:               name: "Rhizobium leguminosarum inoculant",
 435:               dilution: "as directed",
 436:               amount: "apply to seed or planting hole",
 437:               frequency: "at sowing",
 438:               method: "soil-drench",
 439:             },
 440:           ],
 441:           timing: "At sowing",
 442:           notes: [
 443:             "Inoculant enables nitrogen fixation - critical for pea nutrition",
 444:             "Soil pre-amended with gypsum, bone meal, and kelp meal",
 445:           ],
 446:         },
 447:         seedling: {
 448:           products: [
 449:             {
 450:               name: "5-10-10 fertilizer (light dose)",
 451:               dilution: "as directed for containers",
 452:               amount: "light application",
 453:               frequency: "early in containers if needed",
 454:             },
 455:           ],
 456:           timing: "Days 14-20",
 457:           notes: ["Minimal nitrogen needed - peas fix their own nitrogen"],
 458:         },
 459:         vegetativeVining: {
 460:           products: [
 461:             {
 462:               name: "Fish emulsion/fish+kelp (optional)",
 463:               dilution: "as directed",
 464:               amount: "light application",
 465:               frequency: "weekly/biweekly if desired",
 466:             },
 467:             {
 468:               name: "Worm casting top-dress",
 469:               dilution: "N/A",
 470:               amount: "light sprinkle around base",
 471:               frequency: "monthly",
 472:               method: "top-dress",
 473:             },
 474:           ],
 475:           timing: "Weeks 3-6",
 476:           notes: [
 477:             "Light feeding only - excessive nitrogen reduces pod production",
 478:           ],
 479:         },
 480:         flowerBudFormation: {
 481:           products: [
 482:             {
 483:               name: "Bone meal side-dress",
 484:               dilution: "N/A",
 485:               amount: "light application around base",
 486:               frequency: "one-time",
 487:               method: "top-dress",
 488:             },
 489:             {
 490:               name: "Kelp/sea-mineral (if continuing liquid feed)",
 491:               dilution: "as directed",
 492:               amount: "dilute application",
 493:               frequency: "if needed",
 494:             },
 495:           ],
 496:           timing: "Weeks 6-8",
 497:           notes: [
 498:             "Reduce nitrogen completely",
 499:             "Boost phosphorus and potassium for flower and pod development",
 500:           ],
 501:         },
 502:         podSetMaturation: {
 503:           products: [
 504:             {
 505:               name: "Light feeding only if needed",
 506:               dilution: "very dilute",
 507:               amount: "minimal",
 508:               frequency: "rarely",
 509:             },
 510:           ],
 511:           timing: "Days 60-70+",
 512:           notes: [
 513:             "Minimal feeding during harvest - focus on consistent watering",
 514:           ],
 515:         },
 516:       },
 517:       environment: {
 518:         pH: { min: 6.2, max: 6.8, optimal: 6.5 },
 519:       },
 520:       soilMixture: {
 521:         components: {
 522:           "coco coir": 35,
 523:           perlite: 20,
 524:           vermiculite: 20,
 525:           compost: 15,
 526:           "worm castings": 5,
 527:           biochar: 5,
 528:         },
 529:         amendments: {
 530:           gypsum: "½ cup per 15-gal bag",
 531:           "bone meal": "2-3 Tbsp forked into top 4-6 inches",
 532:           "kelp meal": "2 Tbsp into top 4-6 inches",
 533:           "basalt rock dust (optional)": "¼ cup for additional micronutrients",
 534:         },
 535:       },
 536:       container: {
 537:         minSize: "≥2-3 gallons (15-gallon preferred)",
 538:         depth: "12 inches minimum",
 539:       },
 540:       succession: {
 541:         interval: 14,
 542:         method: "continuous",
 543:         harvestMethod: "selective",
 544:         productiveWeeks: 6,
 545:         notes: [
 546:           "Succession every 2-3 weeks for continuous harvest",
 547:           "Each planting productive for 6-8 weeks once podding begins",
 548:         ],
 549:       },
 550:       specialRequirements: [
 551:         "Rhizobium inoculant essential for nitrogen fixation",
 552:         "A-frame trellis or netting required for climbing support",
 553:         "Self-pollinating but benefits from gentle daily shaking of flowers",
 554:         "Harvest pods when full but before peas become starchy",
 555:         "Cool-season crop - performs best in moderate temperatures",
 556:         "Succession planting every 2-3 weeks extends harvest window",
 557:       ],
 558:     },
 559:   },
 560:   {
 561:     name: "Greek Dwarf Basil",
 562:     category: "herbs",
 563:     isEverbearing: true,
 564:     productiveLifespan: 84,
 565:     growthTimeline: {
 566:       germination: 7,
 567:       seedling: 21,
 568:       vegetative: 28,
 569:       maturation: 56,
 570:     },
 571:     protocols: {
 572:       lighting: {
 573:         seedling: {
 574:           ppfd: { min: 100, max: 400, unit: "µmol/m²/s" },
 575:           photoperiod: { hours: 12, maxHours: 16 },
 576:           dli: { min: 4.3, max: 23.0, unit: "mol/m²/day" },
 577:           notes: [
 578:             "Basil loves warmth - keep soil consistently warm during germination",
 579:             "Small plants emerge with initial characteristic basil leaves",
 580:           ],
 581:         },
 582:         vegetative: {
 583:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
 584:           photoperiod: { hours: 14, maxHours: 16 },
 585:           dli: { min: 23.0, max: 34.6, unit: "mol/m²/day" },
 586:           notes: [
 587:             "Pinching off growing tips encourages bushier growth",
 588:             "Higher light intensity produces more essential oils and stronger flavor",
 589:           ],
 590:         },
 591:         flowering: {
 592:           ppfd: { min: 600, max: 1000, unit: "µmol/m²/s" },
 593:           photoperiod: { hours: 14, maxHours: 16 },
 594:           dli: { min: 34.6, max: 57.6, unit: "mol/m²/day" },
 595:           notes: [
 596:             "Flowering usually occurs around 6-8 weeks after planting",
 597:             "Pinch flower buds immediately to extend leaf harvest period",
 598:           ],
 599:         },
 600:       },
 601:       watering: {
 602:         seedling: {
 603:           trigger: { moistureLevel: "when surface begins to dry" },
 604:           target: { moistureLevel: "evenly moist but not waterlogged" },
 605:           volume: {
 606:             amount: "light applications",
 607:             frequency: "daily monitoring",
 608:           },
 609:           notes: [
 610:             "Consistent moisture during establishment phase",
 611:             "Avoid overwatering which can cause damping-off disease",
 612:           ],
 613:         },
 614:         vegetative: {
 615:           trigger: { moistureLevel: "when top inch becomes dry" },
 616:           target: { moistureLevel: "thoroughly moist" },
 617:           volume: {
 618:             amount: "moderate watering",
 619:             frequency: "every 2-3 days typically",
 620:           },
 621:           notes: [
 622:             "Allow slight drying between waterings once established",
 623:             "Deep, less frequent watering encourages strong root development",
 624:           ],
 625:         },
 626:         flowering: {
 627:           trigger: { moistureLevel: "when top inch becomes dry" },
 628:           target: { moistureLevel: "adequately moist" },
 629:           volume: {
 630:             amount: "consistent applications",
 631:             frequency: "as soil indicates",
 632:           },
 633:           notes: [
 634:             "Maintain consistent moisture during active harvest period",
 635:             "Avoid getting water on leaves to prevent fungal issues",
 636:           ],
 637:         },
 638:       },
 639:       fertilization: {
 640:         seedling: {
 641:           products: [
 642:             {
 643:               name: "Bio-Tone starter fertilizer",
 644:               dilution: "0.5 teaspoon per container",
 645:               amount: "light application at transplanting",
 646:               frequency: "one-time at transplant",
 647:               method: "mix-in-soil",
 648:             },
 649:           ],
 650:           timing: "At transplant to larger container",
 651:           notes: [
 652:             "Gentle introduction to feeding - basil responds well to organic fertilizers",
 653:           ],
 654:         },
 655:         vegetative: {
 656:           products: [
 657:             {
 658:               name: "Balanced organic fertilizer or compost tea",
 659:               dilution: "half strength initially",
 660:               amount: "light but regular feeding",
 661:               frequency: "every 2-3 weeks",
 662:             },
 663:           ],
 664:           timing: "Active growth phase",
 665:           notes: [
 666:             "Avoid excessive nitrogen which reduces essential oil concentration",
 667:             "Organic fertilizers produce better flavor than synthetic",
 668:           ],
 669:         },
 670:         flowering: {
 671:           products: [
 672:             {
 673:               name: "Reduced feeding if flowers are pinched",
 674:               dilution: "very light",
 675:               amount: "minimal applications",
 676:               frequency: "monthly if needed",
 677:             },
 678:           ],
 679:           timing: "If flowering occurs",
 680:           notes: [
 681:             "Reduce feeding to maintain leaf quality",
 682:             "Focus on preventing flowering rather than supporting it",
 683:           ],
 684:         },
 685:       },
 686:       environment: {
 687:         temperature: { min: 65, max: 80, optimal: 75, unit: "F" },
 688:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
 689:       },
 690:       soilMixture: {
 691:         components: {
 692:           "coco coir": 40,
 693:           perlite: 30,
 694:           vermiculite: 20,
 695:           compost: 10,
 696:         },
 697:         amendments: {
 698:           "worm castings": "1 tbsp per gallon",
 699:           "Bio-Tone": "0.5 teaspoon per container",
 700:         },
 701:       },
 702:       container: {
 703:         minSize: "2-gallon container (8 inch diameter)",
 704:         depth: "6-8 inches adequate for compact variety",
 705:       },
 706:       succession: {
 707:         interval: 14,
 708:         method: "continuous",
 709:         harvestMethod: "cut-and-come-again",
 710:         productiveWeeks: 8,
 711:         notes: [
 712:           "Succession every 2-3 weeks ensures continuous fresh leaves",
 713:           "Pinch flowers immediately to extend productive harvest period",
 714:         ],
 715:       },
 716:       specialRequirements: [
 717:         "Warmth-loving plant - keep soil temperature above 65°F",
 718:         "Pinch growing tips regularly to encourage bushy growth",
 719:         "Remove flower buds immediately to maintain leaf production",
 720:         "Harvest frequently to encourage new growth",
 721:         "Prefers well-draining soil - avoid waterlogged conditions",
 722:       ],
 723:     },
 724:   },
 725: 
 726:   {
 727:     name: "English Thyme",
 728:     category: "herbs",
 729:     isEverbearing: true,
 730:     productiveLifespan: 1095,
 731:     growthTimeline: {
 732:       germination: 14,
 733:       seedling: 21,
 734:       vegetative: 84,
 735:       maturation: 365,
 736:     },
 737:     protocols: {
 738:       lighting: {
 739:         seedling: {
 740:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
 741:           photoperiod: { hours: 10, maxHours: 14 },
 742:           dli: { min: 3.6, max: 15.1, unit: "mol/m²/day" },
 743:           notes: [
 744:             "Tiny seedlings emerge slowly - patience required",
 745:             "Soil temperature between 68-77°F critical for germination",
 746:           ],
 747:         },
 748:         vegetative: {
 749:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
 750:           photoperiod: { hours: 12, maxHours: 16 },
 751:           dli: { min: 13.0, max: 34.6, unit: "mol/m²/day" },
 752:           notes: [
 753:             "Leaves grow to about 1 inch long, becoming dark green and aromatic",
 754:             "Plant develops characteristic low, spreading growth habit",
 755:           ],
 756:         },
 757:         flowering: {
 758:           ppfd: { min: 600, max: 900, unit: "µmol/m²/s" },
 759:           photoperiod: { hours: 14, maxHours: 16 },
 760:           dli: { min: 30.2, max: 51.8, unit: "mol/m²/day" },
 761:           notes: [
 762:             "Small flowers appear in late spring to early summer",
 763:             "Flowers can be pink, lavender, or white depending on variety",
 764:           ],
 765:         },
 766:       },
 767:       watering: {
 768:         seedling: {
 769:           trigger: { moistureLevel: "when surface begins to dry" },
 770:           target: { moistureLevel: "barely moist" },
 771:           volume: {
 772:             amount: "very light applications",
 773:             frequency: "careful monitoring",
 774:           },
 775:           notes: [
 776:             "Critical period - overwatering kills more thyme seedlings than drought",
 777:             "Use spray bottle for gentle moisture application",
 778:           ],
 779:         },
 780:         vegetative: {
 781:           trigger: { moistureLevel: "when soil is dry 1-2 inches down" },
 782:           target: { moistureLevel: "lightly moist throughout" },
 783:           volume: {
 784:             amount: "moderate watering",
 785:             frequency: "infrequent but thorough",
 786:           },
 787:           notes: [
 788:             "Allow significant drying between waterings",
 789:             "Thyme tolerates drought better than excess moisture",
 790:           ],
 791:         },
 792:         flowering: {
 793:           trigger: { moistureLevel: "when soil is quite dry" },
 794:           target: { moistureLevel: "lightly moist" },
 795:           volume: {
 796:             amount: "minimal watering",
 797:             frequency: "only when necessary",
 798:           },
 799:           notes: [
 800:             "Established thyme is extremely drought tolerant",
 801:             "Excess water dilutes essential oils and reduces flavor intensity",
 802:           ],
 803:         },
 804:       },
 805:       fertilization: {
 806:         seedling: {
 807:           products: [
 808:             {
 809:               name: "Crushed oyster shell",
 810:               dilution: "0.5 teaspoon per container",
 811:               amount: "mixed into soil at planting",
 812:               frequency: "one-time soil amendment",
 813:               method: "mix-in-soil",
 814:             },
 815:           ],
 816:           timing: "At transplanting",
 817:           notes: [
 818:             "Provides slow-release calcium and helps with drainage",
 819:             "Mediterranean herbs prefer slightly alkaline conditions",
 820:           ],
 821:         },
 822:         vegetative: {
 823:           products: [
 824:             {
 825:               name: "Very dilute compost tea (optional)",
 826:               dilution: "quarter strength or less",
 827:               amount: "minimal application",
 828:               frequency: "monthly if at all",
 829:             },
 830:           ],
 831:           timing: "Growing season only",
 832:           notes: [
 833:             "Thyme actually performs better in lean soils",
 834:             "Too much fertility produces weak, less flavorful growth",
 835:           ],
 836:         },
 837:         flowering: {
 838:           notes: [
 839:             "No fertilization needed during flowering period",
 840:             "Plant has adapted to survive on minimal nutrients",
 841:           ],
 842:         },
 843:       },
 844:       environment: {
 845:         temperature: { min: 60, max: 80, optimal: 70, unit: "F" },
 846:         humidity: { min: 30, max: 50, optimal: 40 },
 847:         pH: { min: 6.0, max: 8.0, optimal: 6.5 },
 848:       },
 849:       soilMixture: {
 850:         components: {
 851:           "coco coir": 40,
 852:           perlite: 30,
 853:           "coarse sand": 20,
 854:           vermiculite: 10,
 855:         },
 856:         amendments: {
 857:           compost: "0.5 tablespoon per container (minimal)",
 858:           "crushed oyster shell": "0.5 teaspoon per container",
 859:         },
 860:       },
 861:       container: {
 862:         minSize: "2-gallon pot (8 inch diameter)",
 863:         depth: "6-8 inches adequate",
 864:         drainage: "Excellent drainage absolutely essential",
 865:       },
 866:       specialRequirements: [
 867:         "Excellent drainage absolutely critical - will not tolerate wet feet",
 868:         "Prefers lean, mineral soils over rich organic matter",
 869:         "Drought tolerant once established - err on side of underwatering",
 870:         "Benefits from good air circulation to prevent fungal issues",
 871:         "Harvest by cutting stems above woody growth to encourage branching",
 872:         "Extremely long-lived perennial if drainage requirements are met",
 873:       ],
 874:     },
 875:   },
 876: 
 877:   {
 878:     name: "Greek Oregano",
 879:     category: "herbs",
 880:     isEverbearing: true,
 881:     productiveLifespan: 730,
 882:     growthTimeline: {
 883:       germination: 14,
 884:       seedling: 28,
 885:       vegetative: 56,
 886:       maturation: 90,
 887:     },
 888:     protocols: {
 889:       lighting: {
 890:         seedling: {
 891:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
 892:           photoperiod: { hours: 10, maxHours: 14 },
 893:           dli: { min: 3.6, max: 15.1, unit: "mol/m²/day" },
 894:           notes: [
 895:             "Seeds germinate at 65-70°F soil temperature",
 896:             "Transplant when seedlings have four true leaves",
 897:           ],
 898:         },
 899:         vegetative: {
 900:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
 901:           photoperiod: { hours: 12, maxHours: 16 },
 902:           dli: { min: 13.0, max: 34.6, unit: "mol/m²/day" },
 903:           notes: [
 904:             "Plant develops more leaves and branches during this phase",
 905:             "Pinching and pruning encourage bushy growth habit",
 906:           ],
 907:         },
 908:         flowering: {
 909:           ppfd: { min: 500, max: 750, unit: "µmol/m²/s" },
 910:           photoperiod: { hours: 14, maxHours: 16 },
 911:           dli: { min: 25.2, max: 43.2, unit: "mol/m²/day" },
 912:           notes: [
 913:             "Small white flowers appear as plant reaches maturity",
 914:             "Harvest often best when plant is beginning to flower",
 915:           ],
 916:         },
 917:       },
 918:       watering: {
 919:         seedling: {
 920:           trigger: { moistureLevel: "when surface starts to dry" },
 921:           target: { moistureLevel: "evenly moist but not saturated" },
 922:           volume: {
 923:             amount: "light, frequent applications",
 924:             frequency: "daily monitoring",
 925:           },
 926:           notes: [
 927:             "Keep soil consistently moist during establishment",
 928:             "Avoid waterlogging which can cause root rot",
 929:           ],
 930:         },
 931:         vegetative: {
 932:           trigger: { moistureLevel: "when top inch is dry" },
 933:           target: { moistureLevel: "moderately moist throughout" },
 934:           volume: {
 935:             amount: "thorough but infrequent watering",
 936:             frequency: "every 2-4 days",
 937:           },
 938:           notes: [
 939:             "Allow some drying between waterings to encourage strong roots",
 940:             "Deep watering less frequently better than frequent shallow watering",
 941:           ],
 942:         },
 943:         flowering: {
 944:           trigger: { moistureLevel: "when soil is quite dry" },
 945:           target: { moistureLevel: "lightly moist" },
 946:           volume: { amount: "minimal watering", frequency: "only as needed" },
 947:           notes: [
 948:             "Mature oregano is quite drought tolerant",
 949:             "Reduce watering to concentrate essential oils for better flavor",
 950:           ],
 951:         },
 952:       },
 953:       fertilization: {
 954:         seedling: {
 955:           products: [
 956:             {
 957:               name: "Light compost incorporation",
 958:               dilution: "0.5 tablespoon per container",
 959:               amount: "mixed into soil at planting",
 960:               frequency: "one-time soil preparation",
 961:               method: "mix-in-soil",
 962:             },
 963:           ],
 964:           timing: "At container preparation",
 965:           notes: [
 966:             "Light organic matter supports establishment without overfeeding",
 967:           ],
 968:         },
 969:         vegetative: {
 970:           products: [
 971:             {
 972:               name: "Dilute compost tea or fish emulsion",
 973:               dilution: "quarter to half strength",
 974:               amount: "light application",
 975:               frequency: "monthly during active growth",
 976:             },
 977:           ],
 978:           timing: "Growing season",
 979:           notes: [
 980:             "Light feeding only - oregano prefers lean conditions",
 981:             "Overfertilization reduces essential oil concentration",
 982:           ],
 983:         },
 984:         flowering: {
 985:           notes: [
 986:             "Cease fertilization when flowering begins",
 987:             "Lean conditions during flowering concentrate flavor compounds",
 988:           ],
 989:         },
 990:       },
 991:       environment: {
 992:         temperature: { min: 65, max: 85, optimal: 75, unit: "F" },
 993:         humidity: { min: 30, max: 60, optimal: 45 },
 994:         pH: { min: 6.0, max: 8.0, optimal: 6.8 },
 995:       },
 996:       soilMixture: {
 997:         components: {
 998:           "coco coir": 40,
 999:           perlite: 30,
1000:           "coarse sand": 20,
1001:           vermiculite: 10,
1002:         },
1003:         amendments: {
1004:           compost: "0.5 tablespoon per container",
1005:           "crushed oyster shell": "0.5 teaspoon per container",
1006:         },
1007:       },
1008:       container: {
1009:         minSize: "12 inch diameter pot",
1010:         depth: "6-8 inches adequate for root system",
1011:       },
1012:       succession: {
1013:         interval: 0,
1014:         method: "single",
1015:         harvestMethod: "cut-and-come-again",
1016:         notes: [
1017:           "Harvest by cutting top third of stems above a node",
1018:           "Regular harvesting encourages new branching and continued production",
1019:         ],
1020:       },
1021:       specialRequirements: [
1022:         "Requires excellent drainage - will not tolerate waterlogged soil",
1023:         "Benefits from slightly alkaline soil conditions",
1024:         "Regular harvesting by cutting stems encourages bushier growth",
1025:         "Can be somewhat invasive if allowed to spread naturally",
1026:         "Winter protection may be needed in very cold climates",
1027:       ],
1028:     },
1029:   },
1030: 
1031:   {
1032:     name: "Albion Strawberries",
1033:     category: "berries",
1034:     isEverbearing: true,
1035:     productiveLifespan: 730,
1036:     growthTimeline: {
1037:       germination: 14,
1038:       seedling: 28,
1039:       vegetative: 42,
1040:       maturation: 90,
1041:     },
1042:     protocols: {
1043:       lighting: {
1044:         establishment: {
1045:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1046:           photoperiod: {
1047:             hours: 14,
1048:             maxHours: 16,
1049:             constraint: "day-neutral varieties require consistent photoperiod",
1050:           },
1051:           dli: { min: 10.1, max: 11.5, unit: "mol/m²/day" },
1052:           notes: [
1053:             "Remove flowers for the first 4-6 weeks to encourage strong plant establishment",
1054:             "Focus energy on root and crown development",
1055:           ],
1056:         },
1057:         vegetative: {
1058:           ppfd: { min: 300, max: 400, unit: "µmol/m²/s" },
1059:           photoperiod: {
1060:             hours: 16,
1061:             constraint:
1062:               "consistent 16h photoperiod is critical for continuous production",
1063:           },
1064:           dli: { min: 17.3, max: 23.0, unit: "mol/m²/day" },
1065:           notes: [
1066:             "Remove ALL runners as soon as they are spotted - check weekly",
1067:             "Energy must go to fruit production, not vegetative reproduction",
1068:           ],
1069:         },
1070:         flowering: {
1071:           ppfd: { min: 350, max: 400, unit: "µmol/m²/s" },
1072:           photoperiod: {
1073:             hours: 16,
1074:             constraint:
1075:               "critical for continuous flowering in day-neutral types",
1076:           },
1077:           dli: { min: 20.2, max: 23.0, unit: "mol/m²/day" },
1078:           notes: [
1079:             "Hand pollination is critical indoors",
1080:             "Use a small brush to transfer pollen every 1-2 days",
1081:           ],
1082:         },
1083:         fruiting: {
1084:           ppfd: { min: 450, max: 500, unit: "µmol/m²/s" },
1085:           photoperiod: { hours: 16 },
1086:           dli: { min: 25.9, max: 28.8, unit: "mol/m²/day" },
1087:           notes: [
1088:             "Higher light intensity supports fruit development and sugar accumulation",
1089:           ],
1090:         },
1091:         ongoingProduction: {
1092:           ppfd: { min: 350, max: 400, unit: "µmol/m²/s" },
1093:           photoperiod: { hours: 16 },
1094:           dli: { min: 20.2, max: 23.0, unit: "mol/m²/day" },
1095:           notes: [
1096:             "Monthly flush with pH-adjusted plain water until 20-30% runoff",
1097:             "Prevents salt buildup from intensive feeding",
1098:           ],
1099:         },
1100:       },
1101:       watering: {
1102:         establishment: {
1103:           trigger: { moistureLevel: "3-4" },
1104:           target: { moistureLevel: "6-7" },
1105:           volume: {
1106:             amount:
1107:               "5-gal: 20-30 oz (590-890 mL), 2-gal hanging: 8-10 oz (235-300 mL)",
1108:             frequency: "3-4x/week",
1109:             perPlant: true,
1110:           },
1111:           notes: [
1112:             "Remove flowers for first 4-6 weeks to encourage establishment",
1113:           ],
1114:         },
1115:         vegetative: {
1116:           trigger: { moistureLevel: "3-4" },
1117:           target: { moistureLevel: "6-7" },
1118:           volume: {
1119:             amount:
1120:               "5-gal: 25-35 oz (740-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1121:             frequency: "3-5x/week",
1122:             perPlant: true,
1123:           },
1124:           notes: [
1125:             "Remove ALL runners as soon as spotted - weekly checks essential",
1126:           ],
1127:         },
1128:         flowering: {
1129:           trigger: { moistureLevel: "3-4" },
1130:           target: { moistureLevel: "6-7" },
1131:           volume: {
1132:             amount:
1133:               "5-gal: 30-35 oz (890-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1134:             frequency: "4-5x/week",
1135:             perPlant: true,
1136:           },
1137:           notes: [
1138:             "Consistent moisture critical during flower and early fruit development",
1139:           ],
1140:         },
1141:         fruiting: {
1142:           trigger: { moistureLevel: "3-4" },
1143:           target: { moistureLevel: "6-7" },
1144:           volume: {
1145:             amount:
1146:               "5-gal: 30-35 oz (890-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1147:             frequency: "4-5x/week",
1148:             perPlant: true,
1149:           },
1150:         },
1151:         ongoingProduction: {
1152:           trigger: { moistureLevel: "3-4" },
1153:           target: { moistureLevel: "6-7" },
1154:           volume: {
1155:             amount:
1156:               "5-gal: 25-35 oz (740-1030 mL), 2-gal hanging: 10-13 oz (300-385 mL)",
1157:             frequency: "3-5x/week",
1158:             perPlant: true,
1159:           },
1160:           notes: [
1161:             "Monthly flush: irrigate with pH-adjusted plain water until 20-30% runoff",
1162:           ],
1163:         },
1164:       },
1165:       fertilization: {
1166:         establishment: {
1167:           products: [
1168:             {
1169:               name: "Neptune's Harvest Fish + Seaweed",
1170:               dilution: "½ strength, 0.5 Tbsp/gal",
1171:               amount: "Week 2 application",
1172:               frequency: "one-time during establishment",
1173:             },
1174:             {
1175:               name: "Bone meal",
1176:               dilution: "1 Tbsp/5gal",
1177:               amount: "mixed at planting",
1178:               frequency: "at planting",
1179:               method: "mix-in-soil",
1180:             },
1181:           ],
1182:           timing: "Weeks 0-3",
1183:           notes: ["Remove flowers for first 4-6 weeks"],
1184:         },
1185:         vegetative: {
1186:           products: [
1187:             {
1188:               name: "Neptune's Harvest",
1189:               dilution: "½ strength",
1190:               amount: "Week 4, 6 applications",
1191:               frequency: "bi-weekly",
1192:             },
1193:             {
1194:               name: "Neptune's Harvest",
1195:               dilution: "full strength, 1 Tbsp/gal",
1196:               amount: "Week 5, 7 applications",
1197:               frequency: "bi-weekly",
1198:             },
1199:           ],
1200:           timing: "Weeks 4-6",
1201:           notes: [
1202:             "Remove flowers for first 4-6 weeks",
1203:             "Remove ALL runners weekly",
1204:           ],
1205:         },
1206:         flowering: {
1207:           products: [
1208:             {
1209:               name: "Espoma Berry-Tone",
1210:               dilution: "2 Tbsp/bag",
1211:               amount: "Week 8 application",
1212:               frequency: "one-time",
1213:               method: "top-dress",
1214:             },
1215:             {
1216:               name: "Kelp/sea-mineral",
1217:               dilution: "1 Tbsp/gal",
1218:               amount: "Week 9, 11 applications",
1219:               frequency: "bi-weekly",
1220:             },
1221:             {
1222:               name: "Bone meal",
1223:               dilution: "½ Tbsp/bag",
1224:               amount: "Week 10 application",
1225:               frequency: "one-time",
1226:               method: "top-dress",
1227:             },
1228:           ],
1229:           timing: "Weeks 7-8",
1230:           notes: ["Hand pollinate every 1-2 days during flowering"],
1231:         },
1232:         fruiting: {
1233:           products: [
1234:             {
1235:               name: "Kelp/sea-mineral",
1236:               dilution: "1 Tbsp/gal",
1237:               amount: "Week 13, 15 applications",
1238:               frequency: "bi-weekly",
1239:             },
1240:             {
1241:               name: "Fish & Seaweed + high-K supplement",
1242:               dilution: "as directed",
1243:               amount: "bi-weekly applications",
1244:               frequency: "every 2 weeks",
1245:             },
1246:           ],
1247:           timing: "Weeks 9-13",
1248:           notes: ["Harvest begins 4-5 weeks after flowering"],
1249:         },
1250:         ongoingProduction: {
1251:           products: [
1252:             {
1253:               name: "Kelp",
1254:               dilution: "1 Tbsp/gal",
1255:               amount: "Week 1 of cycle",
1256:               frequency: "alternating 2-week cycle",
1257:             },
1258:             {
1259:               name: "Berry-Tone",
1260:               dilution: "1 Tbsp/bag",
1261:               amount: "Week 3 of cycle",
1262:               frequency: "alternating 2-week cycle",
1263:               method: "top-dress",
1264:             },
1265:           ],
1266:           timing: "Week 14+",
1267:           notes: [
1268:             "Monthly flush with pH-adjusted water to prevent salt buildup",
1269:           ],
1270:         },
1271:       },
1272:       environment: {
1273:         pH: { min: 5.8, max: 6.5, optimal: 6.2 },
1274:       },
1275:       soilMixture: {
1276:         components: {
1277:           "coco coir": 35,
1278:           perlite: 25,
1279:           compost: 20,
1280:           "worm castings": 15,
1281:           vermiculite: 5,
1282:         },
1283:         amendments: {
1284:           "bone meal": "1 Tbsp per gallon of mix at planting",
1285:           "rock dust": "¼ cup per 5-gal bag",
1286:         },
1287:       },
1288:       specialRequirements: [
1289:         "Day-neutral varieties require consistent 16-hour photoperiod for continuous production",
1290:         "Hand pollination essential indoors - use small brush every 1-2 days during flowering",
1291:         "Remove ALL runners immediately to focus energy on fruit production",
1292:         "Remove flowers for first 4-6 weeks to establish strong root system",
1293:         "Monthly salt flush prevents nutrient lockout from intensive feeding",
1294:         "Replace plants every 2 years when productivity declines",
1295:       ],
1296:     },
1297:   },
1298: 
1299:   {
1300:     name: "Caroline Raspberries",
1301:     category: "berries",
1302:     isEverbearing: true,
1303:     productiveLifespan: 1095,
1304:     growthTimeline: {
1305:       germination: 0,
1306:       seedling: 21,
1307:       vegetative: 42,
1308:       maturation: 120,
1309:     },
1310:     protocols: {
1311:       lighting: {
1312:         caneEstablishment: {
1313:           ppfd: { min: 200, max: 300, unit: "µmol/m²/s" },
1314:           photoperiod: { hours: 16, maxHours: 18 },
1315:           dli: { min: 11.5, max: 19.4, unit: "mol/m²/day" },
1316:           notes: [
1317:             "Focus on establishing strong root system and cane structure",
1318:           ],
1319:         },
1320:         vegetative: {
1321:           ppfd: { min: 300, max: 400, unit: "µmol/m²/s" },
1322:           photoperiod: { hours: 16 },
1323:           dli: { min: 17.3, max: 23.0, unit: "mol/m²/day" },
1324:         },
1325:         floweringFruiting: {
1326:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
1327:           photoperiod: { hours: 14, maxHours: 16 },
1328:           dli: { min: 22.7, max: 34.6, unit: "mol/m²/day" },
1329:           notes: [
1330:             "Higher light intensity supports fruit development and sugar content",
1331:           ],
1332:         },
1333:         ongoing: {
1334:           ppfd: { min: 350, max: 500, unit: "µmol/m²/s" },
1335:           photoperiod: { hours: 16 },
1336:           dli: { min: 20.2, max: 28.8, unit: "mol/m²/day" },
1337:         },
1338:       },
1339:       watering: {
1340:         caneEstablishment: {
1341:           trigger: { moistureLevel: "3-4" },
1342:           target: { moistureLevel: "6-7" },
1343:           volume: {
1344:             amount: "monitor with soil moisture meter",
1345:             frequency: "as needed",
1346:           },
1347:           notes: ["Always water until slight drainage occurs"],
1348:         },
1349:         vegetative: {
1350:           trigger: { moistureLevel: "3-4" },
1351:           target: { moistureLevel: "6-7" },
1352:           volume: {
1353:             amount: "monitor with soil moisture meter",
1354:             frequency: "as needed",
1355:           },
1356:         },
1357:         floweringFruiting: {
1358:           trigger: { moistureLevel: "3-4" },
1359:           target: { moistureLevel: "7-8" },
1360:           volume: {
1361:             amount: "monitor with soil moisture meter",
1362:             frequency: "as needed",
1363:           },
1364:           notes: ["Higher moisture during fruit development"],
1365:         },
1366:         ongoing: {
1367:           trigger: { moistureLevel: "3-4" },
1368:           target: { moistureLevel: "6-7" },
1369:           volume: {
1370:             amount: "monitor with soil moisture meter",
1371:             frequency: "as needed",
1372:           },
1373:         },
1374:       },
1375:       fertilization: {
1376:         caneEstablishment: {
1377:           products: [
1378:             {
1379:               name: "Compost top-dress",
1380:               dilution: "1-2 inches",
1381:               amount: "at planting",
1382:               frequency: "at planting",
1383:               method: "top-dress",
1384:             },
1385:           ],
1386:         },
1387:         vegetative: {
1388:           products: [
1389:             {
1390:               name: "Fish Emulsion",
1391:               dilution: "1-2 tbsp/gallon",
1392:               amount: "as needed",
1393:               frequency: "every 2-4 weeks",
1394:             },
1395:           ],
1396:         },
1397:         floweringFruiting: {
1398:           products: [
1399:             {
1400:               name: "Liquid Kelp + balanced organic fertilizer",
1401:               dilution: "as directed",
1402:               amount: "as needed",
1403:               frequency: "every 2-3 weeks",
1404:             },
1405:             {
1406:               name: "Kelp Extract + K-rich formula",
1407:               dilution: "as directed",
1408:               amount: "as needed",
1409:               frequency: "every 1-2 weeks",
1410:             },
1411:           ],
1412:           notes: ["Higher potassium supports fruit development and flavor"],
1413:         },
1414:         ongoing: {
1415:           products: [
1416:             {
1417:               name: "Aerobically brewed compost tea",
1418:               dilution: "as brewed",
1419:               amount: "monthly applications",
1420:               frequency: "monthly",
1421:             },
1422:           ],
1423:         },
1424:       },
1425:       environment: {
1426:         pH: { min: 5.8, max: 6.5, optimal: 6.0 },
1427:       },
1428:       soilMixture: {
1429:         components: {
1430:           "compost (equal parts worm castings and composted manure)": 50,
1431:           "peat moss": 20,
1432:           perlite: 20,
1433:           "pine bark fines": 10,
1434:         },
1435:         amendments: {
1436:           "bone meal": "2.7 tbsp per 10-gallon container",
1437:           "dried blood meal": "1.3 tbsp per 10-gallon container",
1438:         },
1439:       },
1440:       container: {
1441:         minSize: "2 × 10-gallon containers per plant",
1442:         depth: "12 inches minimum",
1443:       },
1444:       specialRequirements: [
1445:         "Primocane-fruiting variety produces on current year's canes",
1446:         "Requires strong trellis system for support",
1447:         "Prune spent canes after harvest to encourage new growth",
1448:         "Benefits from good air circulation to prevent fungal issues",
1449:         "Hand pollination by gently shaking plants during flowering",
1450:       ],
1451:     },
1452:   },
1453:   {
1454:     name: "Little Finger Carrots",
1455:     category: "root-vegetables",
1456:     isEverbearing: false,
1457:     growthTimeline: {
1458:       germination: 14,
1459:       seedling: 14,
1460:       vegetative: 28,
1461:       maturation: 70,
1462:     },
1463:     protocols: {
1464:       lighting: {
1465:         germination: {
1466:           ppfd: { min: 100, max: 150, unit: "µmol/m²/s" },
1467:           photoperiod: {
1468:             hours: 12,
1469:             maxHours: 12,
1470:             constraint: "strict maximum to prevent bolting",
1471:           },
1472:           dli: { min: 4.3, max: 6.5, unit: "mol/m²/day" },
1473:           notes: [
1474:             "Maintain consistent moisture",
1475:             "Critical photoperiod control",
1476:           ],
1477:         },
1478:         seedling: {
1479:           ppfd: { min: 150, max: 300, unit: "µmol/m²/s" },
1480:           photoperiod: {
1481:             hours: 12,
1482:             maxHours: 12,
1483:             constraint: "photoperiods >12h may trigger premature bolting",
1484:           },
1485:           dli: { min: 6.5, max: 13.0, unit: "mol/m²/day" },
1486:           notes: ["Critical photoperiod - max 12 hours"],
1487:         },
1488:         vegetative: {
1489:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1490:           photoperiod: {
1491:             hours: 12,
1492:             maxHours: 12,
1493:             constraint:
1494:               "photoperiods >12h may trigger premature bolting, especially if warm",
1495:           },
1496:           dli: { min: 8.6, max: 8.6, unit: "mol/m²/day" },
1497:           notes: ["Strict 12-hour maximum", "Especially critical if warm"],
1498:         },
1499:         rootDevelopment: {
1500:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
1501:           photoperiod: {
1502:             hours: 12,
1503:             maxHours: 12,
1504:             constraint: "maintain strict limit",
1505:           },
1506:           dli: { min: 13.0, max: 25.9, unit: "mol/m²/day" },
1507:           notes: [
1508:             "Consistent moisture prevents splitting",
1509:             "21-day succession",
1510:           ],
1511:         },
1512:       },
1513:       watering: {
1514:         germination: {
1515:           trigger: {
1516:             moistureLevel: "surface dry",
1517:             description: "Keep surface moist",
1518:           },
1519:           target: { moistureLevel: "6-7", description: "top inch" },
1520:           volume: { amount: "8-12 oz", frequency: "daily" },
1521:           notes: ["Maintain consistent moisture"],
1522:         },
1523:         seedling: {
1524:           trigger: { moistureLevel: "4-5" },
1525:           target: { moistureLevel: "6-7" },
1526:           volume: { amount: "16-24 oz", frequency: "every 2-3 days" },
1527:         },
1528:         vegetative: {
1529:           trigger: { moistureLevel: "3-4" },
1530:           target: { moistureLevel: "6-7" },
1531:           volume: { amount: "24-32 oz", frequency: "every 2-4 days" },
1532:           notes: [
1533:             "Photoperiods >12h may trigger premature bolting, especially if warm",
1534:           ],
1535:         },
1536:         rootDevelopment: {
1537:           trigger: { moistureLevel: "3-4" },
1538:           target: { moistureLevel: "6-7" },
1539:           volume: { amount: "32-40 oz", frequency: "every 3-4 days" },
1540:           notes: [
1541:             "Consistent moisture prevents splitting",
1542:             "21-day succession",
1543:           ],
1544:         },
1545:       },
1546:       fertilization: {
1547:         germination: {
1548:           notes: ["None until true leaves appear"],
1549:         },
1550:         seedling: {
1551:           products: [
1552:             {
1553:               name: "Worm Casting Tea",
1554:               dilution: "1 part castings:10 parts water, steep 12-24h",
1555:               amount: "apply as needed",
1556:               frequency: "every 1-2 weeks",
1557:             },
1558:             {
1559:               name: "Fish Emulsion (alternative)",
1560:               dilution: "0.5-1 Tbsp/gal",
1561:               amount: "apply as needed",
1562:               frequency: "every 2-3 weeks",
1563:             },
1564:           ],
1565:           timing: "Weeks 3-5",
1566:         },
1567:         vegetative: {
1568:           products: [
1569:             {
1570:               name: "Lower-N Fish Emulsion",
1571:               dilution: "1 Tbsp/gal",
1572:               amount: "apply as needed",
1573:               frequency: "every 2-3 weeks",
1574:             },
1575:             {
1576:               name: "Worm Casting Tea",
1577:               dilution: "1 part castings:10 parts water",
1578:               amount: "apply as needed",
1579:               frequency: "every 1-2 weeks",
1580:             },
1581:             {
1582:               name: "Liquid Kelp/Seaweed Extract",
1583:               dilution: "1-2 Tbsp/gal",
1584:               amount: "apply as needed",
1585:               frequency: "every 2-3 weeks",
1586:             },
1587:           ],
1588:           timing: "Weeks 5/6 to Harvest",
1589:         },
1590:         rootDevelopment: {
1591:           products: [
1592:             {
1593:               name: "Continue same as vegetative",
1594:               dilution: "as above",
1595:               amount: "as above",
1596:               frequency: "as above",
1597:             },
1598:           ],
1599:         },
1600:       },
1601:       environment: {
1602:         pH: { min: 6.0, max: 6.8, optimal: 6.5 },
1603:       },
1604:       soilMixture: {
1605:         components: {
1606:           "coco coir": 40,
1607:           perlite: 30,
1608:           vermiculite: 25,
1609:           "coarse sand (2-4mm)": 5,
1610:         },
1611:       },
1612:       container: {
1613:         depth: "12 inches minimum",
1614:         staging: {
1615:           final:
1616:             "Direct sow only - avoid transplanting to prevent root deformities",
1617:         },
1618:       },
1619:       succession: {
1620:         interval: 21,
1621:         method: "zoned",
1622:         harvestMethod: "single-harvest",
1623:         notes: ["Divide bed into zones", "Sow new zone every 3 weeks"],
1624:       },
1625:       specialRequirements: [
1626:         "Strict 12-hour photoperiod maximum",
1627:         "Direct sow only - no transplanting",
1628:         "Stone-free soil essential for straight roots",
1629:         "Fresh manure causes forking - avoid",
1630:       ],
1631:     },
1632:   },
1633: 
1634:   {
1635:     name: "Astro Arugula",
1636:     category: "leafy-greens",
1637:     isEverbearing: true,
1638:     productiveLifespan: 56,
1639:     growthTimeline: {
1640:       germination: 5,
1641:       seedling: 14,
1642:       vegetative: 14,
1643:       maturation: 37,
1644:     },
1645:     protocols: {
1646:       lighting: {
1647:         germination: {
1648:           ppfd: { min: 70, max: 150, unit: "µmol/m²/s" },
1649:           photoperiod: { hours: 12, maxHours: 12 },
1650:           dli: { min: 3.0, max: 6.5, unit: "mol/m²/day" },
1651:           notes: ["Keep soil warm 60-70°F", "Even moisture"],
1652:         },
1653:         seedling: {
1654:           ppfd: { min: 150, max: 250, unit: "µmol/m²/s" },
1655:           photoperiod: { hours: 10, maxHours: 12 },
1656:           dli: { min: 5.4, max: 10.8, unit: "mol/m²/day" },
1657:           notes: ["Keep soil warm 60-70°F", "Even moisture"],
1658:         },
1659:         vegetative: {
1660:           ppfd: { min: 200, max: 250, unit: "µmol/m²/s" },
1661:           photoperiod: { hours: 10, maxHours: 12 },
1662:           dli: { min: 7.2, max: 10.8, unit: "mol/m²/day" },
1663:         },
1664:         postHarvestRegrowth: {
1665:           ppfd: { min: 200, max: 250, unit: "µmol/m²/s" },
1666:           photoperiod: { hours: 10, maxHours: 12 },
1667:           dli: { min: 7.2, max: 10.8, unit: "mol/m²/day" },
1668:           notes: ["14-day succession interval", "Cut-and-come-again"],
1669:         },
1670:       },
1671:       watering: {
1672:         germination: {
1673:           trigger: { moistureLevel: "3-4" },
1674:           target: { moistureLevel: "6-7" },
1675:           volume: { amount: "2-4 fl oz (60-120 mL)", frequency: "2-3x/week" },
1676:           notes: ["Keep soil warm (60-70°F)", "Even moisture"],
1677:         },
1678:         seedling: {
1679:           trigger: { moistureLevel: "3-4" },
1680:           target: { moistureLevel: "6-7" },
1681:           volume: { amount: "2-4 fl oz (60-120 mL)", frequency: "2-3x/week" },
1682:           notes: ["Keep soil warm (60-70°F)", "Even moisture"],
1683:         },
1684:         vegetative: {
1685:           trigger: { moistureLevel: "3-4" },
1686:           target: { moistureLevel: "6-7" },
1687:           volume: { amount: "8-12 fl oz (240-350 mL)", frequency: "2-3x/week" },
1688:         },
1689:         postHarvestRegrowth: {
1690:           trigger: { moistureLevel: "3-4" },
1691:           target: { moistureLevel: "6-7" },
1692:           volume: {
1693:             amount: "12-16 fl oz (350-470 mL)",
1694:             frequency: "2-3x/week",
1695:           },
1696:           notes: ["14-day succession interval"],
1697:         },
1698:       },
1699:       fertilization: {
1700:         germination: {
1701:           notes: ["None until true leaves appear"],
1702:         },
1703:         seedling: {
1704:           products: [
1705:             {
1706:               name: "Fish Emulsion",
1707:               dilution: "1-2 Tbsp/gal",
1708:               amount: "apply as needed",
1709:               frequency: "every 2 weeks",
1710:             },
1711:           ],
1712:         },
1713:         vegetative: {
1714:           products: [
1715:             {
1716:               name: "Fish Emulsion",
1717:               dilution: "1-2 Tbsp/gal",
1718:               amount: "apply as needed",
1719:               frequency: "every 2 weeks",
1720:             },
1721:           ],
1722:         },
1723:         postHarvestRegrowth: {
1724:           products: [
1725:             {
1726:               name: "Fish Emulsion",
1727:               dilution: "1-2 Tbsp/gal",
1728:               amount: "apply as needed",
1729:               frequency: "every 2 weeks",
1730:             },
1731:           ],
1732:         },
1733:       },
1734:       environment: {
1735:         temperature: { min: 60, max: 70, optimal: 65, unit: "F" },
1736:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
1737:       },
1738:       soilMixture: {
1739:         components: {
1740:           "coco coir": 40,
1741:           perlite: 25,
1742:           vermiculite: 25,
1743:           "worm castings": 10,
1744:         },
1745:         amendments: {
1746:           "additional compost or organic 4-4-4 granular fertilizer":
1747:             "½–1 cup per cubic foot",
1748:         },
1749:       },
1750:       container: {
1751:         depth: "4-6 inches",
1752:         staging: {
1753:           seedling: "Cell tray",
1754:           intermediate: "4 inch pot",
1755:           final: "4-6 inch pot or bed section",
1756:         },
1757:       },
1758:       succession: {
1759:         interval: 14,
1760:         method: "continuous",
1761:         harvestMethod: "cut-and-come-again",
1762:         productiveWeeks: 8,
1763:         notes: [
1764:           "Baby leaves ~21 days",
1765:           "Full flavor ~37-40 days",
1766:           "6-8 weeks productive per plant",
1767:         ],
1768:       },
1769:       specialRequirements: [
1770:         "Strict photoperiod control prevents bolting",
1771:         "Cut outer leaves only, leave center intact",
1772:         "Temperature control critical in warm conditions",
1773:       ],
1774:     },
1775:   },
1776:   {
1777:     name: "Detroit Dark Red Beets",
1778:     category: "root-vegetables",
1779:     isEverbearing: false,
1780:     growthTimeline: {
1781:       germination: 7,
1782:       seedling: 14,
1783:       vegetative: 21,
1784:       maturation: 60,
1785:     },
1786:     protocols: {
1787:       lighting: {
1788:         germination: {
1789:           ppfd: { min: 100, max: 200, unit: "µmol/m²/s" },
1790:           photoperiod: { hours: 12, maxHours: 14 },
1791:           dli: { min: 4.3, max: 10.1, unit: "mol/m²/day" },
1792:           notes: ["Ideal temp: 70-85°F for germination"],
1793:         },
1794:         vegetative: {
1795:           ppfd: { min: 250, max: 400, unit: "µmol/m²/s" },
1796:           photoperiod: { hours: 12, maxHours: 14 },
1797:           dli: { min: 10.8, max: 20.2, unit: "mol/m²/day" },
1798:           notes: ["Temperatures >75°F can cause bolting"],
1799:         },
1800:         rootDevelopment: {
1801:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
1802:           photoperiod: { hours: 12, maxHours: 14 },
1803:           dli: { min: 17.3, max: 30.2, unit: "mol/m²/day" },
1804:           notes: ["Maintain consistent moisture"],
1805:         },
1806:         maturation: {
1807:           ppfd: { min: 300, max: 450, unit: "µmol/m²/s" },
1808:           photoperiod: { hours: 12, maxHours: 14 },
1809:           dli: { min: 13.0, max: 22.7, unit: "mol/m²/day" },
1810:           notes: ["21-day succession"],
1811:         },
1812:       },
1813:       watering: {
1814:         germination: {
1815:           trigger: { moistureLevel: "surface dry" },
1816:           target: { moistureLevel: "7-8" },
1817:           volume: { amount: "8-12 oz per session", frequency: "daily misting" },
1818:           notes: ["Ideal temp: 70-85°F (21-29°C) for germination"],
1819:         },
1820:         vegetative: {
1821:           trigger: { moistureLevel: "4-5 (weeks 1-3), 3-4 (weeks 3-6)" },
1822:           target: { moistureLevel: "7-8 (weeks 1-3), 6-7 (weeks 3-6)" },
1823:           volume: {
1824:             amount: "16-20 oz (weeks 1-3), 20-24 oz (weeks 3-6)",
1825:             frequency: "every 2-3 days (weeks 1-3), every 3-4 days (weeks 3-6)",
1826:           },
1827:           notes: ["Temperatures >75°F (24°C) can cause bolting"],
1828:         },
1829:         rootDevelopment: {
1830:           trigger: { moistureLevel: "3-4" },
1831:           target: { moistureLevel: "6-7" },
1832:           volume: { amount: "24-28 oz", frequency: "every 3-4 days" },
1833:           notes: ["Maintain consistent moisture"],
1834:         },
1835:         maturation: {
1836:           trigger: { moistureLevel: "2-3" },
1837:           target: { moistureLevel: "5-6" },
1838:           volume: { amount: "20-24 oz", frequency: "every 4-5 days" },
1839:           notes: ["21-day succession"],
1840:         },
1841:       },
1842:       fertilization: {
1843:         germination: {
1844:           notes: ["None during germination"],
1845:         },
1846:         vegetative: {
1847:           products: [
1848:             {
1849:               name: "Diluted fish/kelp tea",
1850:               dilution: "¼ strength",
1851:               amount: "apply after 2nd true leaf",
1852:               frequency: "weeks 1-3",
1853:             },
1854:             {
1855:               name: "Worm castings + bone meal",
1856:               dilution: "1 tbsp worm castings + 1 tbsp bone meal per container",
1857:               amount: "at transplant",
1858:               frequency: "weeks 3-6",
1859:             },
1860:           ],
1861:         },
1862:         rootDevelopment: {
1863:           products: [
1864:             {
1865:               name: "Liquid kelp or fish + seaweed",
1866:               dilution: "1 tbsp/gal",
1867:               amount: "apply as needed",
1868:               frequency: "every 2 weeks",
1869:             },
1870:             {
1871:               name: "Kelp meal for boron",
1872:               dilution: "as directed",
1873:               amount: "supplement",
1874:               frequency: "as needed",
1875:             },
1876:           ],
1877:         },
1878:         maturation: {
1879:           notes: ["Stop feeding 10–14 days before harvest"],
1880:         },
1881:       },
1882:       environment: {
1883:         temperature: { min: 65, max: 75, optimal: 70, unit: "F" },
1884:         pH: { min: 6.5, max: 7.0, optimal: 6.8 },
1885:       },
1886:       soilMixture: {
1887:         components: {
1888:           "coco coir": 40,
1889:           perlite: 30,
1890:           vermiculite: 25,
1891:           "compost (or worm castings)": 5,
1892:         },
1893:         amendments: {
1894:           "compost or worm castings": "2 tbsp per gallon",
1895:           "Epsom salts": "1 tsp per gallon",
1896:           "bone meal": "1 tbsp per gallon",
1897:         },
1898:       },
1899:       container: {
1900:         depth: "10 inches minimum",
1901:       },
1902:       succession: {
1903:         interval: 21,
1904:         method: "zoned",
1905:         harvestMethod: "selective",
1906:         notes: ["Can harvest greens at 30-40 days", "Roots ready 50-70 days"],
1907:       },
1908:       specialRequirements: [
1909:         "Sensitive to boron deficiency",
1910:         "Avoid high nitrogen after seedling stage",
1911:         "Can be direct sown or carefully transplanted",
1912:       ],
1913:     },
1914:   },
1915: 
1916:   {
1917:     name: "Beauregard Sweet Potatoes",
1918:     category: "root-vegetables",
1919:     isEverbearing: false,
1920:     growthTimeline: {
1921:       germination: 14,
1922:       seedling: 21,
1923:       vegetative: 42,
1924:       maturation: 100,
1925:     },
1926:     protocols: {
1927:       lighting: {
1928:         slipProduction: {
1929:           ppfd: { min: 200, max: 200, optimal: 200, unit: "µmol/m²/s" },
1930:           photoperiod: { hours: 14, maxHours: 16 },
1931:           dli: { min: 10.1, max: 11.5, unit: "mol/m²/day" },
1932:           notes: ["High humidity 85-90%", "Temp: 75-80°F"],
1933:         },
1934:         vegetativeGrowth: {
1935:           ppfd: { min: 350, max: 600, unit: "µmol/m²/s" },
1936:           photoperiod: { hours: 14, maxHours: 16 },
1937:           dli: { min: 17.6, max: 34.6, unit: "mol/m²/day" },
1938:           notes: ["Vigorous vine growth phase"],
1939:         },
1940:         tuberDevelopment: {
1941:           ppfd: { min: 600, max: 800, unit: "µmol/m²/s" },
1942:           photoperiod: {
1943:             hours: 10,
1944:             maxHours: 12,
1945:             constraint: "reduce photoperiod to trigger tuber formation",
1946:           },
1947:           dli: { min: 21.6, max: 34.6, unit: "mol/m²/day" },
1948:           notes: ["Critical photoperiod reduction for tuberization"],
1949:         },
1950:         maturation: {
1951:           ppfd: { min: 500, max: 600, unit: "µmol/m²/s" },
1952:           photoperiod: { hours: 8, maxHours: 10 },
1953:           dli: { min: 14.4, max: 21.6, unit: "mol/m²/day" },
1954:           notes: ["Further photoperiod reduction"],
1955:         },
1956:       },
1957:       watering: {
1958:         slipProduction: {
1959:           trigger: { moistureLevel: "top 1 inch dry (~4-5)" },
1960:           target: { moistureLevel: "adequate moisture" },
1961:           volume: {
1962:             amount: "16-20 oz (470-590 mL)/plant",
1963:             frequency: "daily for first week, then every 1-2 days",
1964:           },
1965:           notes: ["High humidity (85-90%)", "Temp: 75-80°F (24-27°C)"],
1966:         },
1967:         vegetativeGrowth: {
1968:           trigger: { moistureLevel: "top 1-2 inches dry (~4)" },
1969:           target: { moistureLevel: "adequate moisture" },
1970:           volume: {
1971:             amount: "30-40 oz (890-1200 mL)/plant",
1972:             frequency: "2x per week",
1973:           },
1974:           notes: ["Vigorous vine growth phase"],
1975:         },
1976:         tuberDevelopment: {
1977:           trigger: { moistureLevel: "top 2 inches dry (~3-4)" },
1978:           target: { moistureLevel: "adequate moisture" },
1979:           volume: { amount: "40-48 oz (1200-1400 mL)", frequency: "2x/week" },
1980:           notes: ["Reduce photoperiod to trigger tuber formation"],
1981:         },
1982:         maturation: {
1983:           trigger: { moistureLevel: "top 2-3 inches dry (~3)" },
1984:           target: { moistureLevel: "minimal" },
1985:           volume: {
1986:             amount: "12-20 oz (350-590 mL)/plant",
1987:             frequency: "1x/week then stop completely 3-7 days pre-harvest",
1988:           },
1989:           notes: ["Final phase preparation"],
1990:         },
1991:       },
1992:       fertilization: {
1993:         slipProduction: {
1994:           products: [
1995:             {
1996:               name: "Beauregard: Soil amendments at planting",
1997:               dilution: "N/A",
1998:               amount: "soil prep",
1999:               frequency: "at planting",
2000:             },
2001:             {
2002:               name: "Jewel: Neptune's Harvest (likely ½ strength)",
2003:               dilution: "½ strength",
2004:               amount: "Wk 1 & 2",
2005:               frequency: "weekly",
2006:             },
2007:             {
2008:               name: "Tomato & Veg Formula (2-4-2)",
2009:               dilution: "as directed",
2010:               amount: "for establishment",
2011:               frequency: "Wk 1 & 2",
2012:             },
2013:           ],
2014:         },
2015:         vegetativeGrowth: {
2016:           products: [
2017:             {
2018:               name: "Beauregard: Blood Meal",
2019:               dilution: "0.5c bed / 5 Tbsp bag",
2020:               amount: "at Wk 4-5",
2021:               frequency: "once",
2022:             },
2023:             {
2024:               name: "Jewel: Blood Meal + Fish & Seaweed Blend",
2025:               dilution: "as directed",
2026:               amount: "Wk 4-5",
2027:               frequency: "as directed",
2028:             },
2029:           ],
2030:         },
2031:         tuberDevelopment: {
2032:           products: [
2033:             {
2034:               name: "Beauregard: Kelp Meal",
2035:               dilution: "0.75c bed / 7.5 Tbsp bag",
2036:               amount: "Wk 8-9",
2037:               frequency: "once",
2038:             },
2039:             {
2040:               name: "Foliar K₂SO₄",
2041:               dilution: "1-2 Tbsp/gal",
2042:               amount: "foliar spray",
2043:               frequency: "Wk 10-11",
2044:               method: "foliar-spray",
2045:             },
2046:             {
2047:               name: "2nd Kelp Meal",
2048:               dilution: "as above",
2049:               amount: "Wk 12-13",
2050:               frequency: "once",
2051:             },
2052:           ],
2053:         },
2054:         maturation: {
2055:           products: [
2056:             {
2057:               name: "Final K₂SO₄/KNO₃",
2058:               dilution: "as directed",
2059:               amount: "for skin set",
2060:               frequency: "2-3 wks pre-harvest",
2061:             },
2062:           ],
2063:           notes: ["Cease all feeding 3-4 wks pre-harvest"],
2064:         },
2065:       },
2066:       environment: {
2067:         temperature: {
2068:           min: 75,
2069:           max: 85,
2070:           optimal: 80,
2071:           unit: "F",
2072:           stage: "tuber development",
2073:         },
2074:         humidity: { min: 85, max: 90, optimal: 87 },
2075:         pH: { min: 5.8, max: 6.2, optimal: 6.0 },
2076:       },
2077:       soilMixture: {
2078:         components: {
2079:           "coco coir": 40,
2080:           perlite: 30,
2081:           vermiculite: 25,
2082:           "sandy loam": 5,
2083:         },
2084:         amendments: {
2085:           "well-rotted manure": "3 tbsp per gallon",
2086:         },
2087:       },
2088:       container: {
2089:         depth: "18-24 inches",
2090:         staging: {
2091:           final: "Large containers for extensive root system",
2092:         },
2093:       },
2094:       succession: {
2095:         interval: 0,
2096:         method: "single",
2097:         harvestMethod: "single-harvest",
2098:         notes: ["Long cycle (90-120 days) best for single large harvest"],
2099:       },
2100:       specialRequirements: [
2101:         "Post-harvest curing at 80-85°F with high humidity for 5-10 days",
2102:         "Critical photoperiod reduction for tuberization",
2103:         "Soil temperature 75-85°F optimal for tuber development",
2104:       ],
2105:     },
2106:   },
2107: 
2108:   {
2109:     name: "Baby's Leaf Spinach",
2110:     category: "leafy-greens",
2111:     isEverbearing: true,
2112:     productiveLifespan: 42,
2113:     growthTimeline: {
2114:       germination: 7,
2115:       seedling: 14,
2116:       vegetative: 14,
2117:       maturation: 45,
2118:     },
2119:     protocols: {
2120:       lighting: {
2121:         germination: {
2122:           ppfd: { min: 100, max: 150, unit: "µmol/m²/s" },
2123:           photoperiod: { hours: 12, maxHours: 14 },
2124:           dli: { min: 4.3, max: 7.6, unit: "mol/m²/day" },
2125:           notes: ["Keep consistent temperature"],
2126:         },
2127:         seedling: {
2128:           ppfd: { min: 150, max: 200, unit: "µmol/m²/s" },
2129:           photoperiod: { hours: 12, maxHours: 14 },
2130:           dli: { min: 6.5, max: 10.1, unit: "mol/m²/day" },
2131:         },
2132:         transplant: {
2133:           ppfd: { min: 200, max: 250, unit: "µmol/m²/s" },
2134:           photoperiod: { hours: 12, maxHours: 14 },
2135:           dli: { min: 8.6, max: 12.6, unit: "mol/m²/day" },
2136:         },
2137:         vegetativeHarvest: {
2138:           ppfd: { min: 250, max: 250, optimal: 250, unit: "µmol/m²/s" },
2139:           photoperiod: { hours: 12, maxHours: 14 },
2140:           dli: { min: 10.8, max: 12.6, unit: "mol/m²/day" },
2141:           notes: ["14-day succession interval"],
2142:         },
2143:       },
2144:       watering: {
2145:         germination: {
2146:           trigger: { moistureLevel: "less than 4" },
2147:           target: { moistureLevel: 6 },
2148:           volume: { amount: "mist as needed", frequency: "daily" },
2149:         },
2150:         seedling: {
2151:           trigger: { moistureLevel: "less than 4" },
2152:           target: { moistureLevel: 6 },
2153:           volume: { amount: "mist as needed", frequency: "as needed" },
2154:         },
2155:         transplant: {
2156:           trigger: { moistureLevel: "less than 4" },
2157:           target: { moistureLevel: 6 },
2158:           volume: {
2159:             amount: "water thoroughly to settle then as needed",
2160:             frequency: "as needed",
2161:           },
2162:         },
2163:         vegetativeHarvest: {
2164:           trigger: { moistureLevel: "less than 4" },
2165:           target: { moistureLevel: 6 },
2166:           volume: { amount: "~1 gal/week for bed", frequency: "as needed" },
2167:           notes: ["14-day succession interval"],
2168:         },
2169:       },
2170:       fertilization: {
2171:         germination: {
2172:           notes: ["None during germination"],
2173:         },
2174:         seedling: {
2175:           products: [
2176:             {
2177:               name: "Fish emulsion",
2178:               dilution: "2 Tbsp/gal",
2179:               amount: "around Wk 2 (1-2 true leaves)",
2180:               frequency: "every 2 weeks",
2181:             },
2182:           ],
2183:         },
2184:         transplant: {
2185:           products: [
2186:             {
2187:               name: "Fish emulsion",
2188:               dilution: "2 Tbsp/gal",
2189:               amount: "continue regimen",
2190:               frequency: "every 2 weeks",
2191:             },
2192:           ],
2193:         },
2194:         vegetativeHarvest: {
2195:           products: [
2196:             {
2197:               name: "Fish emulsion",
2198:               dilution: "2 Tbsp/gal",
2199:               amount: "continue regimen",
2200:               frequency: "every 2 weeks",
2201:             },
2202:           ],
2203:           notes: ["14-day succession interval"],
2204:         },
2205:       },
2206:       environment: {
2207:         pH: { min: 6.0, max: 7.5, optimal: 6.7 },
2208:       },
2209:       soilMixture: {
2210:         components: {
2211:           "coco coir": 35,
2212:           perlite: 25,
2213:           vermiculite: 15,
2214:           compost: 25,
2215:         },
2216:         amendments: {
2217:           "worm castings": "1 tbsp per gallon",
2218:         },
2219:       },
2220:       succession: {
2221:         interval: 14,
2222:         method: "continuous",
2223:         harvestMethod: "cut-and-come-again",
2224:         notes: ["Baby leaves ready 30-45 days", "Multiple harvests per plant"],
2225:       },
2226:       specialRequirements: [
2227:         "Highly sensitive to bolting - strict photoperiod control",
2228:         "Cool season crop - avoid temperatures above 75°F",
2229:         "Cut outer leaves only for continuous harvest",
2230:       ],
2231:     },
2232:   },
2233:   {
2234:     name: "Rosemary",
2235:     category: "herbs",
2236:     isEverbearing: true,
2237:     productiveLifespan: 1095,
2238:     growthTimeline: {
2239:       germination: 21,
2240:       seedling: 84,
2241:       vegetative: 365,
2242:       maturation: 730,
2243:     },
2244:     protocols: {
2245:       lighting: {
2246:         seedling: {
2247:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
2248:           photoperiod: { hours: 12, maxHours: 16 },
2249:           dli: { min: 4.3, max: 17.3, unit: "mol/m²/day" },
2250:           notes: [
2251:             "Starting from seed extremely challenging - low germination rates",
2252:             "Growth initially very slow - patience absolutely essential",
2253:             "Consider starting from cuttings for more reliable establishment",
2254:           ],
2255:         },
2256:         vegetative: {
2257:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
2258:           photoperiod: { hours: 14, maxHours: 16 },
2259:           dli: { min: 17.3, max: 34.6, unit: "mol/m²/day" },
2260:           notes: [
2261:             "Plant slowly develops into bush with woody stems and needle-like leaves",
2262:             "Growth accelerates significantly in second year",
2263:           ],
2264:         },
2265:         flowering: {
2266:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
2267:           photoperiod: { hours: 12, maxHours: 16 },
2268:           dli: { min: 8.6, max: 23.0, unit: "mol/m²/day" },
2269:           notes: [
2270:             "Small blue flowers appear along stems when mature",
2271:             "Pruning after flowering helps maintain compact shape",
2272:           ],
2273:         },
2274:       },
2275:       watering: {
2276:         seedling: {
2277:           trigger: { moistureLevel: "when surface becomes dry" },
2278:           target: { moistureLevel: "barely moist" },
2279:           volume: {
2280:             amount: "minimal applications",
2281:             frequency: "infrequent but careful",
2282:           },
2283:           notes: [
2284:             "Most critical phase - overwatering kills more rosemary than drought",
2285:             "Use spray bottle or very gentle watering to avoid disturbing tiny roots",
2286:           ],
2287:         },
2288:         vegetative: {
2289:           trigger: { moistureLevel: "when soil is dry 2-3 inches down" },
2290:           target: { moistureLevel: "lightly moist in root zone only" },
2291:           volume: {
2292:             amount: "deep but infrequent watering",
2293:             frequency: "weekly or less",
2294:           },
2295:           notes: [
2296:             "Allow substantial drying between waterings",
2297:             "Established rosemary can survive weeks without water",
2298:           ],
2299:         },
2300:         flowering: {
2301:           trigger: { moistureLevel: "when soil is quite dry throughout" },
2302:           target: { moistureLevel: "minimal moisture" },
2303:           volume: {
2304:             amount: "very light watering",
2305:             frequency: "only when absolutely necessary",
2306:           },
2307:           notes: [
2308:             "Mature rosemary is extremely drought tolerant",
2309:             "Excess water during flowering reduces essential oil concentration",
2310:           ],
2311:         },
2312:       },
2313:       fertilization: {
2314:         seedling: {
2315:           products: [
2316:             {
2317:               name: "Limestone",
2318:               dilution: "0.5 tbsp per gallon of soil mix",
2319:               amount: "incorporated during soil preparation",
2320:               frequency: "one-time soil amendment",
2321:               method: "mix-in-soil",
2322:             },
2323:           ],
2324:           timing: "Soil preparation",
2325:           notes: [
2326:             "Limestone provides calcium and raises pH to preferred alkaline range",
2327:             "No other fertilization needed during establishment",
2328:           ],
2329:         },
2330:         vegetative: {
2331:           products: [
2332:             {
2333:               name: "Very dilute compost tea (optional)",
2334:               dilution: "quarter strength maximum",
2335:               amount: "minimal application",
2336:               frequency: "2-3 times per growing season maximum",
2337:             },
2338:           ],
2339:           timing: "Spring growing season only",
2340:           notes: [
2341:             "Rosemary actually performs better with minimal nutrition",
2342:             "Rich soil produces weak growth susceptible to fungal problems",
2343:           ],
2344:         },
2345:         flowering: {
2346:           notes: [
2347:             "No fertilization during flowering or dormant periods",
2348:             "Plant has evolved to thrive in nutrient-poor Mediterranean soils",
2349:           ],
2350:         },
2351:       },
2352:       environment: {
2353:         temperature: { min: 55, max: 80, optimal: 68, unit: "F" },
2354:         humidity: { min: 20, max: 50, optimal: 35 },
2355:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2356:       },
2357:       soilMixture: {
2358:         components: {
2359:           "coco coir": 40,
2360:           perlite: 30,
2361:           "coarse sand": 25,
2362:           compost: 5,
2363:         },
2364:         amendments: {
2365:           limestone: "0.5 tbsp per gallon of mix",
2366:         },
2367:       },
2368:       container: {
2369:         minSize: "2-gallon pot minimum (12 inch diameter preferred)",
2370:         depth: "8-10 inches minimum for mature root system",
2371:         drainage: "Exceptional drainage absolutely critical",
2372:       },
2373:       specialRequirements: [
2374:         "Requires exceptional drainage - will die in waterlogged soil",
2375:         "Extremely sensitive to overwatering at all growth stages",
2376:         "Benefits from good air circulation to prevent fungal issues",
2377:         "Harvest by cutting stems, never pull or damage woody structure",
2378:         "May require winter protection or reduced watering in cold periods",
2379:         "Can live for many years if drainage and watering requirements are met",
2380:         "Consider propagation from cuttings rather than seed for better success",
2381:       ],
2382:     },
2383:   },
2384: 
2385:   {
2386:     name: "Italian Flat Leaf Parsley",
2387:     category: "herbs",
2388:     isEverbearing: true,
2389:     productiveLifespan: 365,
2390:     growthTimeline: {
2391:       germination: 21,
2392:       seedling: 42,
2393:       vegetative: 63,
2394:       maturation: 90,
2395:     },
2396:     protocols: {
2397:       lighting: {
2398:         seedling: {
2399:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
2400:           photoperiod: { hours: 12, maxHours: 16 },
2401:           dli: { min: 4.3, max: 17.3, unit: "mol/m²/day" },
2402:           notes: [
2403:             "Germination can take 2-4 weeks - be patient",
2404:             "Soak seeds 12-24 hours before planting to improve germination",
2405:           ],
2406:         },
2407:         vegetativeHarvest: {
2408:           ppfd: { min: 300, max: 600, unit: "µmol/m²/s" },
2409:           photoperiod: { hours: 14, maxHours: 16 },
2410:           dli: { min: 17.3, max: 34.6, unit: "mol/m²/day" },
2411:           notes: [
2412:             "Plant develops abundant, flavorful leaves with characteristic flat shape",
2413:             "Higher light produces more robust growth and stronger flavor",
2414:           ],
2415:         },
2416:         flowering: {
2417:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
2418:           photoperiod: { hours: 12, maxHours: 16 },
2419:           dli: { min: 8.6, max: 23.0, unit: "mol/m²/day" },
2420:           notes: [
2421:             "Bolting produces tall flower stalk with yellow-green flowers",
2422:             "Flowering makes leaves bitter - harvest before bolting occurs",
2423:           ],
2424:         },
2425:       },
2426:       watering: {
2427:         seedling: {
2428:           trigger: { moistureLevel: "when surface begins to dry" },
2429:           target: { moistureLevel: "consistently moist" },
2430:           volume: {
2431:             amount: "gentle, frequent applications",
2432:             frequency: "daily monitoring",
2433:           },
2434:           notes: [
2435:             "Consistent moisture critical during long germination period",
2436:             "Use fine spray to avoid disturbing seeds or tiny seedlings",
2437:           ],
2438:         },
2439:         vegetativeHarvest: {
2440:           trigger: { moistureLevel: "when top inch becomes dry" },
2441:           target: { moistureLevel: "evenly moist throughout" },
2442:           volume: {
2443:             amount: "thorough watering",
2444:             frequency: "every 2-3 days typically",
2445:           },
2446:           notes: [
2447:             "Unlike Mediterranean herbs, parsley prefers consistent moisture",
2448:             "Deeper root system benefits from thorough watering",
2449:           ],
2450:         },
2451:         flowering: {
2452:           trigger: { moistureLevel: "as vegetative stage" },
2453:           target: { moistureLevel: "consistently moist" },
2454:           volume: {
2455:             amount: "maintain regular watering",
2456:             frequency: "as needed",
2457:           },
2458:           notes: [
2459:             "Continue consistent watering even if plant begins to bolt",
2460:             "Consistent moisture may delay onset of flowering",
2461:           ],
2462:         },
2463:       },
2464:       fertilization: {
2465:         seedling: {
2466:           products: [
2467:             {
2468:               name: "Worm castings",
2469:               dilution: "1 tbsp per gallon of soil mix",
2470:               amount: "incorporated during soil preparation",
2471:               frequency: "one-time soil amendment",
2472:               method: "mix-in-soil",
2473:             },
2474:           ],
2475:           timing: "Soil preparation",
2476:           notes: [
2477:             "Gentle organic matter supports establishment without burning tender roots",
2478:           ],
2479:         },
2480:         vegetativeHarvest: {
2481:           products: [
2482:             {
2483:               name: "Balanced organic fertilizer or compost tea",
2484:               dilution: "half to full strength",
2485:               amount: "regular applications",
2486:               frequency: "every 2-3 weeks during active harvest",
2487:             },
2488:           ],
2489:           timing: "Throughout growing season",
2490:           notes: [
2491:             "Parsley is a moderate feeder requiring regular nutrition",
2492:             "Benefits from nitrogen for leaf production unlike Mediterranean herbs",
2493:           ],
2494:         },
2495:         flowering: {
2496:           products: [
2497:             {
2498:               name: "Reduce feeding if bolting occurs",
2499:               dilution: "light applications only",
2500:               amount: "minimal",
2501:               frequency: "monthly if needed",
2502:             },
2503:           ],
2504:           notes: [
2505:             "Focus on preventing bolting rather than supporting flower production",
2506:           ],
2507:         },
2508:       },
2509:       environment: {
2510:         temperature: { min: 60, max: 75, optimal: 68, unit: "F" },
2511:         humidity: { min: 40, max: 70, optimal: 55 },
2512:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2513:       },
2514:       soilMixture: {
2515:         components: {
2516:           "coco coir": 35,
2517:           perlite: 25,
2518:           vermiculite: 25,
2519:           compost: 15,
2520:         },
2521:         amendments: {
2522:           "worm castings": "1 tbsp per gallon",
2523:         },
2524:       },
2525:       container: {
2526:         minSize: "2-gallon container minimum",
2527:         depth: "8-12 inches - deeper than most herbs due to taproot",
2528:         drainage:
2529:           "Good drainage but retains more moisture than Mediterranean herbs",
2530:       },
2531:       succession: {
2532:         interval: 21,
2533:         method: "continuous",
2534:         harvestMethod: "cut-and-come-again",
2535:         notes: [
2536:           "Cut outer stems at base, leave center growing point intact",
2537:           "Succession planting every 3 weeks provides continuous fresh harvest",
2538:         ],
2539:       },
2540:       specialRequirements: [
2541:         "Unlike Mediterranean herbs, parsley needs consistent moisture and feeding",
2542:         "Deeper containers required to accommodate taproot development",
2543:         "Harvest outer stems regularly to encourage continued production",
2544:         "Cool-season crop that may bolt in hot weather",
2545:         "Biennial but typically grown as annual for best leaf quality",
2546:       ],
2547:     },
2548:   },
2549: 
2550:   {
2551:     name: "Garlic",
2552:     category: "herbs",
2553:     isEverbearing: false,
2554:     productiveLifespan: 240,
2555:     growthTimeline: {
2556:       germination: 14,
2557:       seedling: 28,
2558:       vegetative: 120,
2559:       maturation: 240,
2560:     },
2561:     protocols: {
2562:       lighting: {
2563:         earlyGrowth: {
2564:           ppfd: { min: 100, max: 300, unit: "µmol/m²/s" },
2565:           photoperiod: { hours: 10, maxHours: 14 },
2566:           dli: { min: 3.6, max: 15.1, unit: "mol/m²/day" },
2567:           notes: [
2568:             "Green shoots emerge from planted cloves",
2569:             "Plant establishes root system during this phase",
2570:           ],
2571:         },
2572:         bulbDevelopment: {
2573:           ppfd: { min: 400, max: 600, unit: "µmol/m²/s" },
2574:           photoperiod: { hours: 12, maxHours: 16 },
2575:           dli: { min: 17.3, max: 34.6, unit: "mol/m²/day" },
2576:           notes: [
2577:             "Occurs as daylight hours increase and soil temperatures rise above 60°F",
2578:             "Plant focuses energy on growing the bulb underground",
2579:           ],
2580:         },
2581:         maturation: {
2582:           ppfd: { min: 200, max: 400, unit: "µmol/m²/s" },
2583:           photoperiod: { hours: 8, maxHours: 12 },
2584:           dli: { min: 5.8, max: 17.3, unit: "mol/m²/day" },
2585:           notes: [
2586:             "Lower leaves begin to yellow and die back",
2587:             "Reduced light needs as plant approaches harvest",
2588:           ],
2589:         },
2590:       },
2591:       watering: {
2592:         earlyGrowth: {
2593:           trigger: { moistureLevel: "when top inch becomes dry" },
2594:           target: { moistureLevel: "evenly moist" },
2595:           volume: {
2596:             amount: "moderate applications",
2597:             frequency: "weekly typically",
2598:           },
2599:           notes: [
2600:             "Consistent moisture supports root development",
2601:             "Avoid waterlogging which can cause clove rot",
2602:           ],
2603:         },
2604:         bulbDevelopment: {
2605:           trigger: { moistureLevel: "when top 2 inches become dry" },
2606:           target: { moistureLevel: "adequately moist" },
2607:           volume: { amount: "regular watering", frequency: "every 5-7 days" },
2608:           notes: [
2609:             "Critical period for bulb formation requires consistent moisture",
2610:             "Monitor soil moisture more carefully during active bulbing",
2611:           ],
2612:         },
2613:         maturation: {
2614:           trigger: { moistureLevel: "allow significant drying" },
2615:           target: { moistureLevel: "minimal moisture" },
2616:           volume: {
2617:             amount: "reduce watering significantly",
2618:             frequency: "infrequent",
2619:           },
2620:           notes: [
2621:             "Reduce watering as harvest approaches to firm up bulbs",
2622:             "Stop watering completely 2-3 weeks before harvest",
2623:           ],
2624:         },
2625:       },
2626:       fertilization: {
2627:         earlyGrowth: {
2628:           products: [
2629:             {
2630:               name: "Well-rotted compost",
2631:               dilution: "2 tbsp per gallon of soil",
2632:               amount: "incorporated during soil preparation",
2633:               frequency: "one-time soil amendment",
2634:               method: "mix-in-soil",
2635:             },
2636:             {
2637:               name: "Bone meal",
2638:               dilution: "1 tsp per gallon",
2639:               amount: "mixed into soil at planting",
2640:               frequency: "one-time amendment",
2641:               method: "mix-in-soil",
2642:             },
2643:           ],
2644:           timing: "At planting",
2645:           notes: ["Slow-release nutrients support long growing cycle"],
2646:         },
2647:         bulbDevelopment: {
2648:           products: [
2649:             {
2650:               name: "Balanced liquid fertilizer (low nitrogen)",
2651:               dilution: "half strength",
2652:               amount: "light application",
2653:               frequency: "monthly during active bulbing",
2654:             },
2655:           ],
2656:           timing: "Spring growing season",
2657:           notes: [
2658:             "Moderate feeding during bulb development",
2659:             "Avoid high nitrogen which produces more leaves than bulb",
2660:           ],
2661:         },
2662:         maturation: {
2663:           notes: [
2664:             "Cease all fertilization 6-8 weeks before harvest",
2665:             "Allow plant to focus energy on bulb maturation",
2666:           ],
2667:         },
2668:       },
2669:       environment: {
2670:         temperature: { min: 50, max: 80, optimal: 65, unit: "F" },
2671:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2672:       },
2673:       soilMixture: {
2674:         components: {
2675:           "coco coir": 40,
2676:           perlite: 30,
2677:           vermiculite: 20,
2678:           compost: 10,
2679:         },
2680:         amendments: {
2681:           "well-rotted compost": "2 tbsp per gallon",
2682:           "bone meal": "1 tsp per gallon",
2683:         },
2684:       },
2685:       container: {
2686:         minSize: "2-gallon pot (8 inch diameter)",
2687:         depth: "6-8 inches adequate for bulb development",
2688:       },
2689:       succession: {
2690:         interval: 0,
2691:         method: "single",
2692:         harvestMethod: "single-harvest",
2693:         notes: [
2694:           "Plant cloves in fall for summer harvest",
2695:           "Harvest when lower leaves begin to brown but upper leaves still green",
2696:         ],
2697:       },
2698:       specialRequirements: [
2699:         "Requires cold period for proper bulb formation - may need refrigeration",
2700:         "Plant individual cloves pointed end up, 2 inches deep",
2701:         "Harvest timing critical - too early gives small bulbs, too late causes splitting",
2702:         "Cure harvested bulbs in warm, dry, well-ventilated area for storage",
2703:         "Remove flower stalks (scapes) to encourage bulb development",
2704:       ],
2705:     },
2706:   },
2707:   {
2708:     name: "May Queen Lettuce",
2709:     category: "leafy-greens",
2710:     isEverbearing: true,
2711:     productiveLifespan: 63,
2712:     growthTimeline: {
2713:       germination: 7,
2714:       seedling: 20,
2715:       vegetative: 35,
2716:       maturation: 56,
2717:     },
2718:     protocols: {
2719:       lighting: {
2720:         germination: {
2721:           ppfd: { min: 100, max: 150, unit: "µmol/m²/s" },
2722:           photoperiod: { hours: 10, maxHours: 12 },
2723:           dli: { min: 3.6, max: 6.5, unit: "mol/m²/day" },
2724:           notes: [
2725:             "Keep surface moist during germination",
2726:             "Pre-soak seed 2h in 0.2% kelp solution",
2727:           ],
2728:         },
2729:         seedling: {
2730:           ppfd: { min: 200, max: 300, unit: "µmol/m²/s" },
2731:           photoperiod: { hours: 10, maxHours: 12 },
2732:           dli: { min: 7.2, max: 13.0, unit: "mol/m²/day" },
2733:           notes: [
2734:             "Once 3-4 true leaves appear, begin light fertilization",
2735:             "Strict photoperiod control to prevent bolting",
2736:           ],
2737:         },
2738:         vegetativeRosette: {
2739:           ppfd: { min: 300, max: 350, unit: "µmol/m²/s" },
2740:           photoperiod: { hours: 10, maxHours: 12 },
2741:           dli: { min: 10.8, max: 15.1, unit: "mol/m²/day" },
2742:           notes: [
2743:             "Critical phase for leaf and rosette development",
2744:             "Maintain strict 10-12 hour maximum photoperiod",
2745:           ],
2746:         },
2747:         headFormation: {
2748:           ppfd: { min: 300, max: 350, unit: "µmol/m²/s" },
2749:           photoperiod: { hours: 10, maxHours: 12 },
2750:           dli: { min: 10.8, max: 15.1, unit: "mol/m²/day" },
2751:           notes: [
2752:             "Outer leaves curl inward to form head",
2753:             "Monitor for tip burn (calcium deficiency)",
2754:           ],
2755:         },
2756:       },
2757:       watering: {
2758:         germination: {
2759:           trigger: { moistureLevel: "surface moist" },
2760:           target: { moistureLevel: "7-8" },
2761:           volume: {
2762:             amount: "16-32 oz (0.5-1 L)",
2763:             frequency: "daily/as needed",
2764:           },
2765:           notes: [
2766:             "Keep surface consistently moist",
2767:             "Use mist or light watering",
2768:           ],
2769:         },
2770:         seedling: {
2771:           trigger: { moistureLevel: "3-4" },
2772:           target: { moistureLevel: "8-10" },
2773:           volume: {
2774:             amount: "0.5-1 gal (1.9-3.8 L)",
2775:             frequency: "every 1-3 days",
2776:           },
2777:           notes: ["Water thoroughly until drainage occurs"],
2778:         },
2779:         vegetativeRosette: {
2780:           trigger: { moistureLevel: "3-4" },
2781:           target: { moistureLevel: "8-10" },
2782:           volume: {
2783:             amount: "0.75-1.5 gal (2.8-5.7 L)",
2784:             frequency: "every 2-3 days",
2785:           },
2786:           notes: ["Consistent moisture critical for leaf development"],
2787:         },
2788:         headFormation: {
2789:           trigger: { moistureLevel: "3-4" },
2790:           target: { moistureLevel: "8-10" },
2791:           volume: {
2792:             amount: "0.75-1.5 gal (2.8-5.7 L)",
2793:             frequency: "every 2-3 days",
2794:           },
2795:           notes: ["Stop fertilization 1-2 weeks before final head harvest"],
2796:         },
2797:       },
2798:       fertilization: {
2799:         seedling: {
2800:           products: [
2801:             {
2802:               name: "Diluted fish emulsion",
2803:               dilution: "0.5-1 Tbsp/gal",
2804:               amount: "as needed",
2805:               frequency: "every 2-3 weeks",
2806:             },
2807:             {
2808:               name: "Fish+kelp blend",
2809:               dilution: "0.5-1 Tbsp/gal",
2810:               amount: "as needed",
2811:               frequency: "every 2-3 weeks",
2812:             },
2813:           ],
2814:           timing: "Once 3-4 true leaves appear",
2815:         },
2816:         vegetativeRosette: {
2817:           products: [
2818:             {
2819:               name: "Fish emulsion/fish+kelp",
2820:               dilution: "1-2 Tbsp/gal",
2821:               amount: "as needed",
2822:               frequency: "every 2-3 weeks",
2823:             },
2824:           ],
2825:         },
2826:         headFormation: {
2827:           products: [
2828:             {
2829:               name: "Continue as vegetative",
2830:               dilution: "1-2 Tbsp/gal",
2831:               amount: "as needed",
2832:               frequency: "every 2-3 weeks",
2833:             },
2834:           ],
2835:           notes: ["Stop 1-2 weeks before final head harvest"],
2836:         },
2837:       },
2838:       environment: {
2839:         temperature: { min: 60, max: 75, optimal: 68, unit: "F" },
2840:         humidity: { min: 40, max: 70, optimal: 55 },
2841:         pH: { min: 6.0, max: 7.0, optimal: 6.5 },
2842:         constraints: [
2843:           {
2844:             description:
2845:               "Prone to bolting in warm conditions with extended daylight",
2846:             parameter: "light",
2847:             threshold: 12,
2848:             consequence: "premature bolting reduces head quality",
2849:           },
2850:         ],
2851:       },
2852:       soilMixture: {
2853:         components: {
2854:           "coco coir": 40,
2855:           perlite: 30,
2856:           vermiculite: 20,
2857:           compost: 10,
2858:         },
2859:         amendments: {
2860:           compost: "2 tbsp per gallon",
2861:           "worm castings": "1 tbsp per gallon",
2862:         },
2863:       },
2864:       container: {
2865:         minSize: "bed section 24 inch width",
2866:         depth: "4-6 inches soil depth",
2867:       },
2868:       succession: {
2869:         interval: 14,
2870:         method: "continuous",
2871:         harvestMethod: "cut-and-come-again",
2872:         notes: [
2873:           "Baby leaves ready 30-35 days",
2874:           "Full heads ready 45-60 days",
2875:           "Can harvest outer leaves for extended yield",
2876:         ],
2877:       },
2878:       specialRequirements: [
2879:         "Strict 10-12 hour photoperiod maximum to prevent bolting",
2880:         "Monitor for tip burn (calcium deficiency) - add gypsum if needed",
2881:         "Butterhead lettuce variety - forms loose heads",
2882:         "Cut-and-come-again harvesting extends yield",
2883:         "Succession plant every 1-2 weeks for continuous harvest",
2884:       ],
2885:     },
2886:   },
2887: 
2888: 
2889: 
2890: 
2891: 
2892: 
2893: 
2894: 
2895: 
2896: 
2897: 
2898: 
2899: 
2900: 
2901: 
2902: 
2903: 
2904: 
2905: 
2906: 
2907: 
2908: 
2909: 
2910: 
2911: 
2912: 
2913: 
2914: 
2915: 
2916: 
2917: 
2918: 
2919: 
2920: 
2921: 
2922: 
2923: 
2924: 
2925: 
2926: 
2927: 
2928: 
2929: 
2930: ];

================
File: src/hooks/useDynamicStage.ts
================
 1: import { useEffect, useState } from "react";
 2: import { PlantRecord, varietyService } from "@/types/database";
 3: import { calculateCurrentStageWithVariety } from "@/utils/growthStage";
 4: import { GrowthStage } from "@/types";
 5: 
 6: export function useDynamicStage(plant: PlantRecord): GrowthStage {
 7:   const [calculatedStage, setCalculatedStage] =
 8:     useState<GrowthStage>("germination");
 9: 
10:   useEffect(() => {
11:     const calculateStage = async () => {
12:       try {
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23:         const variety = await varietyService.getVariety(plant.varietyId);
24: 
25:         if (!variety) {
26: 
27:           const allVarieties = await varietyService.getAllVarieties();
28: 
29:           const varietyByName = allVarieties.find(
30:             (v) => v.name === plant.varietyName
31:           );
32: 
33:           if (varietyByName) {
34:             const stage = calculateCurrentStageWithVariety(
35:               plant.plantedDate,
36:               varietyByName
37:             );
38:             setCalculatedStage(stage);
39:             return;
40:           }
41:           setCalculatedStage("germination");
42:           return;
43:         }
44: 
45:         const stage = calculateCurrentStageWithVariety(
46:           plant.plantedDate,
47:           variety
48:         );
49:         setCalculatedStage(stage);
50:       } catch (error) {
51:         console.error("❌ Error calculating stage:", error);
52:         setCalculatedStage("germination");
53:       }
54:     };
55: 
56:     calculateStage();
57:   }, [
58:     plant.varietyId,
59:     plant.plantedDate,
60:     plant.varietyName,
61: 
62:   ]);
63: 
64:   return calculatedStage;
65: }

================
File: src/pages/care/PhotoCapture.tsx
================
  1: import React, { useState, useRef } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: 
  4: interface PhotoCaptureProps {
  5:   photos: string[];
  6:   onPhotosChange: (photos: string[]) => void;
  7:   maxPhotos?: number;
  8: }
  9: 
 10: export function PhotoCapture({
 11:   photos,
 12:   onPhotosChange,
 13:   maxPhotos = 5,
 14: }: PhotoCaptureProps) {
 15:   const [isCapturing, setIsCapturing] = useState(false);
 16:   const [error, setError] = useState<string | null>(null);
 17:   const videoRef = useRef<HTMLVideoElement>(null);
 18:   const canvasRef = useRef<HTMLCanvasElement>(null);
 19:   const streamRef = useRef<MediaStream | null>(null);
 20: 
 21: 
 22:   async function startCamera() {
 23:     setError(null);
 24:     setIsCapturing(true);
 25: 
 26:     try {
 27: 
 28:       const stream = await navigator.mediaDevices.getUserMedia({
 29:         video: {
 30:           facingMode: "environment",
 31:           width: { ideal: 1280 },
 32:           height: { ideal: 720 },
 33:         },
 34:       });
 35: 
 36:       if (videoRef.current) {
 37:         videoRef.current.srcObject = stream;
 38:         streamRef.current = stream;
 39:       }
 40:     } catch (err) {
 41:       console.error("Failed to start camera:", err);
 42:       setError("Unable to access camera. Please check permissions.");
 43:       setIsCapturing(false);
 44:     }
 45:   }
 46: 
 47: 
 48:   function stopCamera() {
 49:     if (streamRef.current) {
 50:       streamRef.current.getTracks().forEach((track) => track.stop());
 51:       streamRef.current = null;
 52:     }
 53:     setIsCapturing(false);
 54:   }
 55: 
 56: 
 57:   function capturePhoto() {
 58:     if (!videoRef.current || !canvasRef.current) return;
 59: 
 60:     const video = videoRef.current;
 61:     const canvas = canvasRef.current;
 62:     const context = canvas.getContext("2d");
 63: 
 64:     if (!context) return;
 65: 
 66: 
 67:     canvas.width = video.videoWidth;
 68:     canvas.height = video.videoHeight;
 69: 
 70: 
 71:     context.drawImage(video, 0, 0, canvas.width, canvas.height);
 72: 
 73: 
 74:     canvas.toBlob(
 75:       (blob) => {
 76:         if (blob) {
 77:           const photoUrl = URL.createObjectURL(blob);
 78:           onPhotosChange([...photos, photoUrl]);
 79:         }
 80:       },
 81:       "image/jpeg",
 82:       0.8
 83:     );
 84: 
 85:     stopCamera();
 86:   }
 87: 
 88: 
 89:   function removePhoto(index: number) {
 90:     const newPhotos = photos.filter((_, i) => i !== index);
 91:     onPhotosChange(newPhotos);
 92:   }
 93: 
 94: 
 95:   function handleFileInput(event: React.ChangeEvent<HTMLInputElement>) {
 96:     const files = event.target.files;
 97:     if (!files) return;
 98: 
 99:     Array.from(files).forEach((file) => {
100:       if (file.type.startsWith("image/")) {
101:         const photoUrl = URL.createObjectURL(file);
102:         onPhotosChange([...photos, photoUrl]);
103:       }
104:     });
105: 
106: 
107:     event.target.value = "";
108:   }
109: 
110:   const canAddMore = photos.length < maxPhotos;
111: 
112:   return (
113:     <div className="space-y-4">
114:       {}
115:       {isCapturing ? (
116:         <div className="space-y-4">
117:           <div className="relative bg-black rounded-lg overflow-hidden">
118:             <video
119:               ref={videoRef}
120:               autoPlay
121:               playsInline
122:               className="w-full h-64 object-cover"
123:             />
124:             <canvas ref={canvasRef} className="hidden" />
125:           </div>
126: 
127:           <div className="flex gap-2">
128:             <Button
129:               type="button"
130:               variant="primary"
131:               onClick={capturePhoto}
132:               className="flex-1"
133:             >
134:               📸 Capture Photo
135:             </Button>
136:             <Button type="button" variant="outline" onClick={stopCamera}>
137:               Cancel
138:             </Button>
139:           </div>
140:         </div>
141:       ) : (
142: 
143:         <div className="space-y-4">
144:           {}
145:           <div className="flex gap-2">
146:             {canAddMore && (
147:               <>
148:                 <Button
149:                   type="button"
150:                   variant="outline"
151:                   onClick={startCamera}
152:                   className="flex-1"
153:                 >
154:                   📷 Take Photo
155:                 </Button>
156: 
157:                 {}
158:                 <label className="flex-1">
159:                   <Button
160:                     type="button"
161:                     variant="outline"
162:                     className="w-full"
163:                     onClick={() => {}}
164:                   >
165:                     📁 Choose File
166:                   </Button>
167:                   <input
168:                     type="file"
169:                     accept="image/*"
170:                     multiple
171:                     onChange={handleFileInput}
172:                     className="hidden"
173:                   />
174:                 </label>
175:               </>
176:             )}
177:           </div>
178: 
179:           {}
180:           {error && (
181:             <div className="p-3 bg-red-50 border border-red-200 rounded-md">
182:               <p className="text-sm text-red-600">{error}</p>
183:             </div>
184:           )}
185: 
186:           {}
187:           {photos.length > 0 && (
188:             <p className="text-sm text-muted-foreground">
189:               {photos.length} of {maxPhotos} photos added
190:             </p>
191:           )}
192:         </div>
193:       )}
194: 
195:       {}
196:       {photos.length > 0 && (
197:         <div className="grid grid-cols-2 gap-2">
198:           {photos.map((photo, index) => (
199:             <div key={index} className="relative">
200:               <img
201:                 src={photo}
202:                 alt={`Captured photo ${index + 1}`}
203:                 className="w-full h-24 object-cover rounded-md border border-border"
204:               />
205:               <button
206:                 type="button"
207:                 onClick={() => removePhoto(index)}
208:                 className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600"
209:               >
210:                 ×
211:               </button>
212:             </div>
213:           ))}
214:         </div>
215:       )}
216:     </div>
217:   );
218: }

================
File: src/pages/plants/AddPlant.tsx
================
 1: import React from "react";
 2: import { PlantRegistrationForm } from "@/components/plant/PlantRegistrationForm";
 3: import { useNavigate } from "react-router-dom";
 4: import { Button } from "@/components/ui/Button";
 5: import { OfflineIndicator } from "@/components/ui/OfflineIndicator";
 6: import Navigation from "@/components/Navigation";
 7: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
 8: import { ArrowLeft } from "lucide-react";
 9: 
10: const AddPlant: React.FC = () => {
11:   const navigate = useNavigate();
12:   const { user, signOut } = useFirebaseAuth();
13: 
14:   const handleSuccess = () => {
15:     navigate("/");
16:   };
17: 
18:   const handleCancel = () => {
19:     navigate("/");
20:   };
21: 
22:   return (
23:     <>
24:       <OfflineIndicator />
25:       <div className="min-h-screen bg-background pb-20">
26:         {}
27:         <div className="bg-card border-b border-border sticky top-0 z-40">
28:           <div className="max-w-6xl mx-auto px-4 py-4">
29:             <div className="flex justify-between items-center">
30:               <div className="flex items-center gap-3">
31:                 <Button
32:                   variant="ghost"
33:                   size="sm"
34:                   onClick={() => navigate("/")}
35:                   className="p-2"
36:                   aria-label="Go back"
37:                 >
38:                   <ArrowLeft className="h-4 w-4" />
39:                 </Button>
40:                 <span className="text-2xl">🌱</span>
41:                 <div>
42:                   <h1 className="text-xl font-bold text-foreground">
43:                     Add New Plant
44:                   </h1>
45:                   <p className="text-sm text-muted-foreground hidden sm:block">
46:                     Register a new plant to start tracking its growth
47:                   </p>
48:                 </div>
49:               </div>
50:               <div className="flex items-center gap-3">
51:                 <div className="hidden sm:block">
52:                   <span className="text-sm text-muted-foreground">
53:                     Welcome, {user?.displayName || user?.email}
54:                   </span>
55:                 </div>
56:                 <Button variant="outline" size="sm" onClick={signOut}>
57:                   Sign Out
58:                 </Button>
59:               </div>
60:             </div>
61:           </div>
62:         </div>
63: 
64:         {}
65:         <div className="max-w-6xl mx-auto p-4">
66:           <div className="flex justify-center">
67:             <div className="w-full max-w-2xl">
68:               <PlantRegistrationForm
69:                 onSuccess={handleSuccess}
70:                 onCancel={handleCancel}
71:               />
72:             </div>
73:           </div>
74:         </div>
75:       </div>
76:       <Navigation />
77:     </>
78:   );
79: };
80: 
81: export default AddPlant;

================
File: src/styles/globals.css
================
 1: @tailwind base;
 2: @tailwind components;
 3: @tailwind utilities;
 4: 
 5: @layer base {
 6:   :root {
 7: 
 8:     --background: 249 250 251;
 9:     --foreground: 17 24 39;
10:     --card: 255 255 255;
11:     --card-foreground: 17 24 39;
12:     --primary: 52 211 153;
13:     --primary-foreground: 17 24 39;
14:     --secondary: 156 163 175;
15:     --secondary-foreground: 17 24 39;
16:     --muted: 243 244 246;
17:     --muted-foreground: 107 114 128;
18:     --accent: 52 211 153;
19:     --accent-foreground: 17 24 39;
20:     --border: 229 231 235;
21:     --ring: 52 211 153;
22:     --input: 255 255 255;
23:     --input-foreground: 17 24 39;
24:   }
25: 
26:   .dark {
27: 
28:     --background: 17 24 39;
29:     --foreground: 243 244 246;
30:     --card: 31 41 55;
31:     --card-foreground: 243 244 246;
32:     --primary: 34 197 94;
33:     --primary-foreground: 243 244 246;
34:     --secondary: 75 85 99;
35:     --secondary-foreground: 243 244 246;
36:     --muted: 55 65 81;
37:     --muted-foreground: 156 163 175;
38:     --accent: 34 197 94;
39:     --accent-foreground: 243 244 246;
40:     --border: 75 85 99;
41:     --ring: 34 197 94;
42:     --input: 31 41 55;
43:     --input-foreground: 243 244 246;
44:   }
45: }
46: 
47: 
48: * {
49:   -webkit-tap-highlight-color: transparent;
50: }
51: 
52: html {
53:   scroll-behavior: smooth;
54: }
55: 
56: body {
57:   background-color: rgb(var(--background));
58:   color: rgb(var(--foreground));
59:   font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
60:     "Helvetica Neue", Arial, sans-serif;
61:   -webkit-font-smoothing: antialiased;
62:   -moz-osx-font-smoothing: grayscale;
63: }
64: 
65: #root {
66:   background-color: rgb(var(--background));
67:   min-height: 100vh;
68: }
69: 
70: 
71: button {
72:   -webkit-appearance: none;
73:   appearance: none;
74: }
75: 
76: 
77: button:focus-visible {
78:   outline: 2px solid #3b82f6;
79:   outline-offset: 2px;
80: }

================
File: src/types/core.ts
================
  1: export type GrowthStage =
  2:   | "germination"
  3:   | "seedling"
  4:   | "vegetative"
  5:   | "flowering"
  6:   | "fruiting"
  7:   | "maturation"
  8:   | "harvest"
  9:   | "ongoing-production";
 10: 
 11: export type PlantCategory =
 12:   | "root-vegetables"
 13:   | "leafy-greens"
 14:   | "herbs"
 15:   | "berries"
 16:   | "fruiting-plants";
 17: 
 18: export type CareActivityType =
 19:   | "water"
 20:   | "fertilize"
 21:   | "observe"
 22:   | "harvest"
 23:   | "transplant";
 24: 
 25: export type QualityRating =
 26:   | "excellent"
 27:   | "good"
 28:   | "fair"
 29:   | "poor"
 30:   | "unsaleable";
 31: 
 32: export type HealthAssessment =
 33:   | "excellent"
 34:   | "good"
 35:   | "fair"
 36:   | "concerning"
 37:   | "critical";
 38: 
 39: export type VolumeUnit = "oz" | "ml" | "gal" | "L";
 40: export type WeightUnit = "oz" | "lbs" | "g" | "kg";
 41: export type LengthUnit = "inches" | "cm" | "ft" | "m";
 42: export type TemperatureUnit = "F" | "C";
 43: 
 44: export interface FertilizerProtocol {
 45:   product?: string;
 46:   dilution?: string;
 47:   amount?: string;
 48:   method?: ApplicationMethod;
 49: }
 50: 
 51: export interface ApplicationDetails {
 52:   dilution?: string;
 53:   amount?: string;
 54:   method?: ApplicationMethod;
 55: }
 56: 
 57: export interface VarietyProtocols {
 58:   watering?: Record<
 59:     GrowthStage,
 60:     {
 61:       trigger?: { moistureLevel?: string | number };
 62:       target?: { moistureLevel?: string | number };
 63:       volume?: { amount?: string | number; frequency?: string };
 64:     }
 65:   >;
 66:   fertilizing?: Record<
 67:     GrowthStage,
 68:     {
 69:       fertilizer?: FertilizerProtocol;
 70:       application?: ApplicationDetails;
 71:     }
 72:   >;
 73:   lighting?: Record<
 74:     GrowthStage,
 75:     {
 76:       ppfd?: { min: number; max: number; unit: string };
 77:       photoperiod?: { hours: number };
 78:       dli?: { min: number; max: number; unit: string };
 79:     }
 80:   >;
 81: }
 82: 
 83: export type ApplicationMethod =
 84:   | "soil-drench"
 85:   | "foliar-spray"
 86:   | "top-dress"
 87:   | "mix-in-soil";
 88: 
 89: export type WateringMethod =
 90:   | "top-watering"
 91:   | "bottom-watering"
 92:   | "drip"
 93:   | "misting";
 94: 
 95: 
 96: export interface BaseRecord {
 97:   id: string;
 98:   createdAt: Date;
 99:   updatedAt: Date;
100: }
101: 
102: export interface TimestampedRecord {
103:   id: string;
104:   createdAt: Date;
105: }
106: 
107: export interface MoistureReading {
108:   before: number;
109:   after: number;
110:   scale: "1-10" | "visual";
111: }
112: 
113: export interface Volume {
114:   amount: number;
115:   unit: VolumeUnit;
116: }
117: 
118: export interface Weight {
119:   amount: number;
120:   unit: WeightUnit;
121: }
122: 
123: export interface GrowthTimeline {
124:   germination: number;
125:   seedling: number;
126:   vegetative: number;
127:   maturation: number;
128: }
129: export interface CategoryMoistureDefaults {
130:   trigger: [number, number];
131:   target: [number, number];
132: }
133: 
134: export interface MoistureProtocolInfo {
135:   trigger: [number, number];
136:   target: [number, number];
137:   varietyName: string;
138:   currentStage: GrowthStage;
139:   isDefault: boolean;
140:   source: "custom" | "category" | "universal";
141: }

================
File: src/types/index.ts
================
 1: export * from "./core";
 2: export type { CategoryMoistureDefaults, MoistureProtocolInfo } from "./core";
 3: 
 4: 
 5: export * from "./database";
 6: 
 7: 
 8: export type {
 9:   PlantRecord as PlantInstance,
10:   VarietyRecord as PlantVariety,
11:   CareRecord as CareActivity,
12: } from "./database";
13: 
14: 
15: export * from "./scheduling";
16: 
17: 
18: export * from "./user";

================
File: index.html
================
 1: <!DOCTYPE html>
 2: <html lang="en">
 3:   <head>
 4:     <meta charset="UTF-8" />
 5:     <meta name="darkreader-lock" />
 6:     <link rel="icon" type="image/svg+xml" href="/vite.svg" />
 7:     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 8:     <title>Vite + React + TS</title>
 9:   </head>
10:   <body>
11:     <div id="root"></div>
12:     <script type="module" src="/src/main.tsx"></script>
13:   </body>
14: </html>

================
File: print_structure.py
================
 1: import os
 2: 
 3: def print_directory_structure(root_dir, prefix=""):
 4:     for item in os.listdir(root_dir):
 5:         path = os.path.join(root_dir, item)
 6:         if os.path.isdir(path):
 7: 
 8:             if item == "node_modules":
 9:                 continue
10:             if item == "__pycache__":
11:                 continue
12:             if item == ".git":
13:                 continue
14:             if item == ".vscode":
15:                 continue
16:             if item == ".idea":
17:                 continue
18:             if item == ".DS_Store":
19:                 continue
20:             print(f"{prefix}├── {item}/")
21:             print_directory_structure(path, prefix + "│   ")
22:         else:
23:             print(f"{prefix}├── {item}")
24: 
25: if __name__ == "__main__":
26:     project_root = "."
27:     print_directory_structure(project_root)

================
File: README.md
================
 1: # 🌱 SmartGarden PWA
 2: 
 3: A Progressive Web Application for managing indoor gardening with scientifically-backed growing protocols, offline-first plant tracking, and intelligent care scheduling.
 4: 
 5: ## ✨ Features
 6: 
 7: - **Plant Registration**: Track varieties with custom container configurations
 8: - **Growth Stage Tracking**: Automated stage progression based on planting dates
 9: - **Care Scheduling**: Protocol-driven watering, fertilizing, and observation reminders
10: - **Offline-First**: Full functionality without internet connection
11: - **Mobile Optimized**: Touch-friendly interface designed for gloved hands
12: - **PWA**: Installable app experience on mobile and desktop
13: 
14: ## 🛠️ Tech Stack
15: 
16: - **Frontend**: React 18 + TypeScript
17: - **Styling**: TailwindCSS + shadcn/ui components
18: - **State**: Zustand for global state management
19: - **Database**: IndexedDB via Dexie.js (offline-first)
20: - **Testing**: Jest + React Testing Library + Cypress
21: - **PWA**: Service Worker + Web App Manifest
22: 
23: ## 🚀 Quick Start
24: 
25: ```bash
26: # Install dependencies
27: npm install
28: 
29: # Start development server
30: npm run dev
31: 
32: # Run tests
33: npm test
34: 
35: # Build for production
36: npm run build
37: ```

================
File: tailwind.config.js
================
 1: module.exports = {
 2:   content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
 3:   theme: {
 4:     extend: {
 5:       colors: {
 6: 
 7:         background: "rgb(var(--background) / <alpha-value>)",
 8:         foreground: "rgb(var(--foreground) / <alpha-value>)",
 9:         card: {
10:           DEFAULT: "rgb(var(--card) / <alpha-value>)",
11:           foreground: "rgb(var(--card-foreground) / <alpha-value>)",
12:         },
13:         primary: {
14:           DEFAULT: "rgb(var(--primary) / <alpha-value>)",
15:           foreground: "rgb(var(--primary-foreground) / <alpha-value>)",
16:         },
17:         secondary: {
18:           DEFAULT: "rgb(var(--secondary) / <alpha-value>)",
19:           foreground: "rgb(var(--secondary-foreground) / <alpha-value>)",
20:         },
21:         muted: {
22:           DEFAULT: "rgb(var(--muted) / <alpha-value>)",
23:           foreground: "rgb(var(--muted-foreground) / <alpha-value>)",
24:         },
25:         accent: {
26:           DEFAULT: "rgb(var(--accent) / <alpha-value>)",
27:           foreground: "rgb(var(--accent-foreground) / <alpha-value>)",
28:         },
29:         border: "rgb(var(--border) / <alpha-value>)",
30:         ring: "rgb(var(--ring) / <alpha-value>)",
31: 
32: 
33:         garden: {
34:           50: "#f0f9f4",
35:           100: "#dcf2e4",
36:           200: "#bce5cd",
37:           300: "#8dd0aa",
38:           400: "#57b380",
39:           500: "#349960",
40:           600: "#2F6F4E",
41:           700: "#1e5a3a",
42:           800: "#1a4a31",
43:           900: "#163d29",
44:         },
45: 
46: 
47:         success: "#38A169",
48:         warning: "#DD6B20",
49:         error: "#E53E3E",
50: 
51:         input: {
52:           DEFAULT: "rgb(var(--input) / <alpha-value>)",
53:           foreground: "rgb(var(--input-foreground) / <alpha-value>)",
54:         },
55:       },
56:       boxShadow: {
57:         sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
58:         md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
59:         lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
60:       },
61:     },
62:   },
63:   darkMode: "class",
64:   plugins: [],
65: };

================
File: src/__tests__/integration/stageCalculationDisplay.test.tsx
================
  1: import { render, screen, waitFor, within } from "@testing-library/react";
  2: import { BrowserRouter } from "react-router-dom";
  3: import Plants from "../../pages/plants/Plants";
  4: import { varietyService, PlantRecord } from "@/types/database";
  5: import { initializeDatabase } from "@/db/seedData";
  6: import { subDays } from "date-fns";
  7: 
  8: 
  9: jest.mock("@/hooks/useFirebasePlants", () => ({
 10:   useFirebasePlants: jest.fn(),
 11: }));
 12: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 13: 
 14: describe("Stage Calculation and Display Integration", () => {
 15: 
 16:   beforeEach(async () => {
 17: 
 18:     (useFirebasePlants as jest.Mock).mockClear();
 19: 
 20: 
 21:     const { db } = await import("@/types/database");
 22:     await db.plants.clear();
 23:     await db.varieties.clear();
 24:     await initializeDatabase();
 25:   });
 26: 
 27:   const renderWithRouter = (component: React.ReactElement) => {
 28:     return render(<BrowserRouter>{component}</BrowserRouter>);
 29:   };
 30: 
 31: 
 32:   const setupMockPlants = (plants: PlantRecord[]) => {
 33:     (useFirebasePlants as jest.Mock).mockReturnValue({
 34:       plants: plants,
 35:       loading: false,
 36:       error: null,
 37:     });
 38:   };
 39: 
 40:   test("correctly displays 'Ongoing Production' for everbearing strawberries after maturation", async () => {
 41:     const varieties = await varietyService.getAllVarieties();
 42:     const albion = varieties.find((v) => v.name === "Albion Strawberries");
 43:     expect(albion).toBeDefined();
 44: 
 45:     const plantedDate = subDays(new Date(), 103);
 46:     const strawberryPlant = {
 47:       id: "strawberry-1",
 48:       varietyId: albion!.id,
 49:       varietyName: albion!.name,
 50:       name: "Test Strawberry",
 51:       plantedDate,
 52:       currentStage: "flowering",
 53:       location: "Indoor",
 54:       container: "5 gallon",
 55:       isActive: true,
 56:       createdAt: new Date(),
 57:       updatedAt: new Date(),
 58:     };
 59: 
 60:     setupMockPlants([strawberryPlant]);
 61:     renderWithRouter(<Plants />);
 62: 
 63:     await waitFor(() => {
 64: 
 65:       const stageElement = screen.getByText(/ongoing/i);
 66:       const productionElement = screen.getByText(/production/i);
 67:       expect(stageElement).toBeInTheDocument();
 68:       expect(productionElement).toBeInTheDocument();
 69:     });
 70:   });
 71: 
 72:   test("correctly displays 'Harvest' for non-everbearing carrots after maturation", async () => {
 73:     const varieties = await varietyService.getAllVarieties();
 74:     const carrots = varieties.find((v) => v.name === "Little Finger Carrots");
 75:     expect(carrots).toBeDefined();
 76: 
 77:     const plantedDate = subDays(new Date(), 80);
 78:     const carrotPlant = {
 79:       id: "carrot-1",
 80:       varietyId: carrots!.id,
 81:       varietyName: carrots!.name,
 82:       name: "Test Carrots",
 83:       plantedDate,
 84:       currentStage: "vegetative",
 85:       location: "Indoor",
 86:       container: "Deep container",
 87:       isActive: true,
 88:       createdAt: new Date(),
 89:       updatedAt: new Date(),
 90:     };
 91: 
 92:     setupMockPlants([carrotPlant]);
 93:     renderWithRouter(<Plants />);
 94: 
 95:     await waitFor(() => {
 96:       expect(screen.getByText(/harvest/i)).toBeInTheDocument();
 97:     });
 98:   });
 99: 
100:   test("correctly displays 'Vegetative' stage for spinach", async () => {
101:     const varieties = await varietyService.getAllVarieties();
102:     const spinach = varieties.find((v) => v.name === "Baby's Leaf Spinach");
103:     expect(spinach).toBeDefined();
104: 
105: 
106:     const plantedDate = subDays(new Date(), 25);
107:     const spinachPlant = {
108:       id: "spinach-1",
109:       varietyId: spinach!.id,
110:       varietyName: spinach!.name,
111:       name: "Test Spinach",
112:       plantedDate,
113:       currentStage: "seedling",
114:       location: "Indoor",
115:       container: "Medium container",
116:       isActive: true,
117:       createdAt: new Date(),
118:       updatedAt: new Date(),
119:     };
120: 
121:     setupMockPlants([spinachPlant]);
122:     renderWithRouter(<Plants />);
123: 
124:     await waitFor(() => {
125:       expect(screen.getByText(/vegetative/i)).toBeInTheDocument();
126:     });
127:   });
128: 
129:   test("correctly displays 'Seedling' stage for beets", async () => {
130:     const varieties = await varietyService.getAllVarieties();
131:     const beets = varieties.find((v) => v.name === "Detroit Dark Red Beets");
132:     expect(beets).toBeDefined();
133: 
134: 
135: 
136:     const plantedDate = subDays(new Date(), 15);
137:     const beetPlant = {
138:       id: "beet-1",
139:       varietyId: beets!.id,
140:       varietyName: beets!.name,
141:       name: "Test Beets Seedling",
142:       plantedDate,
143:       currentStage: "germination",
144:       location: "Indoor",
145:       container: "Small container",
146:       isActive: true,
147:       createdAt: new Date(),
148:       updatedAt: new Date(),
149:     };
150: 
151:     setupMockPlants([beetPlant]);
152:     renderWithRouter(<Plants />);
153: 
154: 
155:     await waitFor(() => {
156:       const card = screen
157:         .getByText("Test Beets Seedling")
158:         .closest(".hover\\:shadow-lg");
159:       expect(card).toBeInTheDocument();
160: 
161:       const stageElement = within(card as HTMLElement).getByText(/seedling/i, {
162:         selector: "div.font-medium",
163:       });
164:       expect(stageElement).toBeInTheDocument();
165:     });
166:   });
167: 
168:   test("correctly displays 'Flowering' stage for sugar snap peas", async () => {
169:     const varieties = await varietyService.getAllVarieties();
170:     const peas = varieties.find((v) => v.name === "Sugar Snap Peas");
171:     expect(peas).toBeDefined();
172: 
173: 
174: 
175:     const plantedDate = subDays(new Date(), 55);
176:     const peaPlant = {
177:       id: "pea-1",
178:       varietyId: peas!.id,
179:       varietyName: peas!.name,
180:       name: "Test Peas",
181:       plantedDate,
182:       currentStage: "vegetative",
183:       location: "Indoor",
184:       container: "15 gallon",
185:       isActive: true,
186:       createdAt: new Date(),
187:       updatedAt: new Date(),
188:     };
189: 
190:     setupMockPlants([peaPlant]);
191:     renderWithRouter(<Plants />);
192: 
193:     await waitFor(() => {
194:       expect(screen.getByText(/flowering/i)).toBeInTheDocument();
195:     });
196:   });
197: });

================
File: src/__tests__/services/careSchedulingService.test.ts
================
  1: import { CareSchedulingService } from "@/services/careSchedulingService";
  2: import { plantService, varietyService, careService } from "@/types/database";
  3: import { initializeDatabase } from "@/db/seedData";
  4: import { subDays } from "date-fns";
  5: 
  6: describe("CareSchedulingService", () => {
  7:   beforeEach(async () => {
  8: 
  9:     const { db } = await import("@/types/database");
 10:     await db.plants.clear();
 11:     await db.varieties.clear();
 12:     await db.careActivities.clear();
 13:     await initializeDatabase();
 14:   });
 15: 
 16:   describe("Reminder Filtering", () => {
 17:     it("filters tasks based on reminder preferences", async () => {
 18: 
 19:       const varieties = await varietyService.getAllVarieties();
 20:       const testVariety = varieties[0];
 21: 
 22: 
 23: 
 24:       const plantWithSelectiveReminders = await plantService.addPlant({
 25:         varietyId: testVariety.id,
 26:         varietyName: testVariety.name,
 27:         plantedDate: subDays(new Date(), 10),
 28:         currentStage: "seedling",
 29:         location: "Indoor",
 30:         container: "4 inch pot",
 31:         isActive: true,
 32:         reminderPreferences: {
 33:           watering: false,
 34:           fertilizing: true,
 35:           observation: true,
 36:           lighting: false,
 37:           pruning: true,
 38:         },
 39:       });
 40: 
 41:       const tasks = await CareSchedulingService.getUpcomingTasks();
 42: 
 43: 
 44:       const plantTasks = tasks.filter(
 45:         (task) => task.plantId === plantWithSelectiveReminders
 46:       );
 47: 
 48: 
 49:       const wateringTasks = plantTasks.filter(
 50:         (task) =>
 51:           task.task.toLowerCase().includes("water") ||
 52:           task.task === "Check water level"
 53:       );
 54: 
 55:       expect(wateringTasks).toHaveLength(0);
 56: 
 57: 
 58:       const observationTasks = plantTasks.filter(
 59:         (task) =>
 60:           task.task === "Health check" ||
 61:           task.task.toLowerCase().includes("observe")
 62:       );
 63: 
 64: 
 65:       expect(observationTasks.length).toBeGreaterThan(0);
 66:     });
 67: 
 68:     it("shows all tasks when no reminder preferences are set", async () => {
 69: 
 70:       const varieties = await varietyService.getAllVarieties();
 71:       const testVariety = varieties[0];
 72: 
 73: 
 74:       const plantWithoutPreferences = await plantService.addPlant({
 75:         varietyId: testVariety.id,
 76:         varietyName: testVariety.name,
 77:         plantedDate: subDays(new Date(), 10),
 78:         currentStage: "seedling",
 79:         location: "Indoor",
 80:         container: "4 inch pot",
 81:         isActive: true,
 82: 
 83:       });
 84: 
 85:       const tasks = await CareSchedulingService.getUpcomingTasks();
 86: 
 87: 
 88:       const plantTasks = tasks.filter(
 89:         (task) => task.plantId === plantWithoutPreferences
 90:       );
 91:       expect(plantTasks.length).toBeGreaterThan(0);
 92: 
 93: 
 94:       const hasWateringTask = plantTasks.some(
 95:         (task) =>
 96:           task.task.toLowerCase().includes("water") ||
 97:           task.task === "Check water level"
 98:       );
 99:       const hasObservationTask = plantTasks.some(
100:         (task) =>
101:           task.task === "Health check" ||
102:           task.task.toLowerCase().includes("observe")
103:       );
104: 
105:       expect(hasWateringTask).toBe(true);
106:       expect(hasObservationTask).toBe(true);
107:     });
108: 
109:     it("handles plants with all reminders disabled", async () => {
110: 
111:       const varieties = await varietyService.getAllVarieties();
112:       const testVariety = varieties[0];
113: 
114: 
115:       const plantWithNoReminders = await plantService.addPlant({
116:         varietyId: testVariety.id,
117:         varietyName: testVariety.name,
118:         plantedDate: subDays(new Date(), 10),
119:         currentStage: "seedling",
120:         location: "Indoor",
121:         container: "4 inch pot",
122:         isActive: true,
123:         reminderPreferences: {
124:           watering: false,
125:           fertilizing: false,
126:           observation: false,
127:           lighting: false,
128:           pruning: false,
129:         },
130:       });
131: 
132:       const tasks = await CareSchedulingService.getUpcomingTasks();
133: 
134: 
135:       const plantTasks = tasks.filter(
136:         (task) => task.plantId === plantWithNoReminders
137:       );
138:       expect(plantTasks).toHaveLength(0);
139:     });
140:   });
141: 
142:   describe("Task Creation", () => {
143:     it("creates observation tasks for plants old enough", async () => {
144:       const varieties = await varietyService.getAllVarieties();
145:       const testVariety = varieties[0];
146: 
147: 
148:       const plantId = await plantService.addPlant({
149:         varietyId: testVariety.id,
150:         varietyName: testVariety.name,
151:         plantedDate: subDays(new Date(), 5),
152:         currentStage: "seedling",
153:         location: "Indoor",
154:         container: "4 inch pot",
155:         isActive: true,
156:         reminderPreferences: {
157:           watering: true,
158:           fertilizing: true,
159:           observation: true,
160:           lighting: true,
161:           pruning: true,
162:         },
163:       });
164: 
165:       const tasks = await CareSchedulingService.getUpcomingTasks();
166:       const plantTasks = tasks.filter((task) => task.plantId === plantId);
167: 
168: 
169:       const observationTasks = plantTasks.filter(
170:         (task) => task.task === "Health check"
171:       );
172: 
173:       expect(observationTasks.length).toBeGreaterThan(0);
174: 
175: 
176:       const observationTask = observationTasks[0];
177:       expect(observationTask.dueIn).toContain("overdue");
178:       expect(observationTask.priority).toBe("high");
179:     });
180: 
181:     it("creates watering tasks for plants that need water", async () => {
182:       const varieties = await varietyService.getAllVarieties();
183:       const testVariety = varieties[0];
184: 
185: 
186:       const plantId = await plantService.addPlant({
187:         varietyId: testVariety.id,
188:         varietyName: testVariety.name,
189:         plantedDate: subDays(new Date(), 5),
190:         currentStage: "seedling",
191:         location: "Indoor",
192:         container: "4 inch pot",
193:         isActive: true,
194:         reminderPreferences: {
195:           watering: true,
196:           fertilizing: true,
197:           observation: true,
198:           lighting: true,
199:           pruning: true,
200:         },
201:       });
202: 
203:       const tasks = await CareSchedulingService.getUpcomingTasks();
204:       const plantTasks = tasks.filter((task) => task.plantId === plantId);
205: 
206: 
207:       const wateringTasks = plantTasks.filter(
208:         (task) => task.task === "Check water level"
209:       );
210: 
211:       expect(wateringTasks.length).toBeGreaterThan(0);
212:     });
213:   });
214: 
215:   describe("getUpcomingTasks Edge Cases", () => {
216:     it("handles plants with no variety data gracefully", async () => {
217: 
218:       const orphanedPlant = await plantService.addPlant({
219:         varietyId: "non-existent-variety",
220:         varietyName: "Unknown Variety",
221:         plantedDate: subDays(new Date(), 5),
222:         currentStage: "seedling",
223:         location: "Indoor",
224:         container: "4 inch pot",
225:         isActive: true,
226:       });
227: 
228:       const tasks = await CareSchedulingService.getUpcomingTasks();
229: 
230: 
231:       const orphanedPlantTasks = tasks.filter(
232:         (task) => task.plantId === orphanedPlant
233:       );
234:       expect(orphanedPlantTasks).toHaveLength(0);
235:     });
236: 
237:     it("correctly prioritizes overdue vs upcoming tasks", async () => {
238:       const varieties = await varietyService.getAllVarieties();
239:       const testVariety = varieties[0];
240: 
241: 
242:       const overduePlant = await plantService.addPlant({
243:         varietyId: testVariety.id,
244:         varietyName: testVariety.name,
245:         plantedDate: subDays(new Date(), 10),
246:         currentStage: "seedling",
247:         location: "Indoor",
248:         container: "4 inch pot",
249:         isActive: true,
250:       });
251: 
252: 
253:       await careService.addCareActivity({
254:         plantId: overduePlant,
255:         type: "water",
256:         date: subDays(new Date(), 5),
257:         details: {
258:           type: "water",
259:           amount: { value: 8, unit: "oz" },
260:         },
261:       });
262: 
263:       const tasks = await CareSchedulingService.getUpcomingTasks();
264: 
265: 
266:       const sortedTasks = tasks.sort(
267:         (a, b) => a.dueDate.getTime() - b.dueDate.getTime()
268:       );
269: 
270: 
271:       const overdueTasks = sortedTasks.filter((task) =>
272:         task.dueIn.includes("overdue")
273:       );
274:       const upcomingTasks = sortedTasks.filter(
275:         (task) => !task.dueIn.includes("overdue")
276:       );
277: 
278:       if (overdueTasks.length > 0 && upcomingTasks.length > 0) {
279:         expect(overdueTasks[0].dueDate.getTime()).toBeLessThanOrEqual(
280:           upcomingTasks[0].dueDate.getTime()
281:         );
282:       }
283:     });
284: 
285:     it("respects reminder preferences filtering", async () => {
286:       const varieties = await varietyService.getAllVarieties();
287:       const testVariety = varieties[0];
288: 
289:       const plantWithSelectivePrefs = await plantService.addPlant({
290:         varietyId: testVariety.id,
291:         varietyName: testVariety.name,
292:         plantedDate: subDays(new Date(), 8),
293:         currentStage: "seedling",
294:         location: "Indoor",
295:         container: "4 inch pot",
296:         isActive: true,
297:         reminderPreferences: {
298:           watering: true,
299:           fertilizing: false,
300:           observation: false,
301:           lighting: false,
302:           pruning: false,
303:         },
304:       });
305: 
306:       const tasks = await CareSchedulingService.getUpcomingTasks();
307:       const plantTasks = tasks.filter(
308:         (task) => task.plantId === plantWithSelectivePrefs
309:       );
310: 
311: 
312:       const wateringTasks = plantTasks.filter(
313:         (task) =>
314:           task.task.toLowerCase().includes("water") ||
315:           task.task === "Check water level"
316:       );
317:       const nonWateringTasks = plantTasks.filter(
318:         (task) =>
319:           !task.task.toLowerCase().includes("water") &&
320:           task.task !== "Check water level"
321:       );
322: 
323:       expect(wateringTasks.length).toBeGreaterThan(0);
324:       expect(nonWateringTasks).toHaveLength(0);
325:     });
326: 
327:     it("handles database errors gracefully", async () => {
328: 
329:       const originalGetActivePlants = plantService.getActivePlants;
330:       jest
331:         .spyOn(plantService, "getActivePlants")
332:         .mockRejectedValue(new Error("Database connection failed"));
333: 
334:       const tasks = await CareSchedulingService.getUpcomingTasks();
335: 
336: 
337:       expect(tasks).toEqual([]);
338: 
339: 
340:       plantService.getActivePlants = originalGetActivePlants;
341:     });
342: 
343:     it("handles plants with corrupt variety references", async () => {
344:       const varieties = await varietyService.getAllVarieties();
345:       const validVariety = varieties[0];
346: 
347: 
348:       const validPlant = await plantService.addPlant({
349:         varietyId: validVariety.id,
350:         varietyName: validVariety.name,
351:         plantedDate: subDays(new Date(), 5),
352:         currentStage: "seedling",
353:         location: "Indoor",
354:         container: "4 inch pot",
355:         isActive: true,
356:       });
357: 
358: 
359:       const originalGetVariety = varietyService.getVariety;
360:       jest
361:         .spyOn(varietyService, "getVariety")
362:         .mockImplementation(async (id) => {
363:           if (id === validVariety.id) {
364:             return undefined;
365:           }
366:           return originalGetVariety(id);
367:         });
368: 
369:       const tasks = await CareSchedulingService.getUpcomingTasks();
370: 
371: 
372:       expect(Array.isArray(tasks)).toBe(true);
373: 
374: 
375:       const corruptedPlantTasks = tasks.filter(
376:         (task) => task.plantId === validPlant
377:       );
378:       expect(corruptedPlantTasks).toHaveLength(0);
379: 
380: 
381:       varietyService.getVariety = originalGetVariety;
382:     });
383: 
384:     it("correctly calculates priority levels", async () => {
385:       const varieties = await varietyService.getAllVarieties();
386:       const testVariety = varieties[0];
387: 
388:       const testPlant = await plantService.addPlant({
389:         varietyId: testVariety.id,
390:         varietyName: testVariety.name,
391:         plantedDate: subDays(new Date(), 10),
392:         currentStage: "seedling",
393:         location: "Indoor",
394:         container: "4 inch pot",
395:         isActive: true,
396:       });
397: 
398: 
399:       await careService.addCareActivity({
400:         plantId: testPlant,
401:         type: "water",
402:         date: subDays(new Date(), 3),
403:         details: {
404:           type: "water",
405:           amount: { value: 8, unit: "oz" },
406:         },
407:       });
408: 
409:       const tasks = await CareSchedulingService.getUpcomingTasks();
410:       const plantTasks = tasks.filter((task) => task.plantId === testPlant);
411: 
412:       if (plantTasks.length > 0) {
413:         const wateringTask = plantTasks.find(
414:           (task) => task.task === "Check water level"
415:         );
416: 
417:         if (wateringTask) {
418: 
419:           if (wateringTask.dueIn.includes("overdue")) {
420:             const overdueDays = parseInt(
421:               wateringTask.dueIn.match(/\d+/)?.[0] || "0"
422:             );
423:             if (overdueDays >= 2) {
424:               expect(wateringTask.priority).toBe("high");
425:             } else if (overdueDays >= 0) {
426:               expect(wateringTask.priority).toBe("medium");
427:             }
428:           }
429:         }
430:       }
431:     });
432: 
433:     it("handles empty plant database", async () => {
434: 
435:       await plantService.getActivePlants().then(async (plants) => {
436:         for (const plant of plants) {
437:           await plantService.deletePlant(plant.id);
438:         }
439:       });
440: 
441:       const tasks = await CareSchedulingService.getUpcomingTasks();
442: 
443:       expect(tasks).toEqual([]);
444:     });
445: 
446:     it("handles inactive plants correctly", async () => {
447:       const varieties = await varietyService.getAllVarieties();
448:       const testVariety = varieties[0];
449: 
450: 
451:       const inactivePlant = await plantService.addPlant({
452:         varietyId: testVariety.id,
453:         varietyName: testVariety.name,
454:         plantedDate: subDays(new Date(), 10),
455:         currentStage: "seedling",
456:         location: "Indoor",
457:         container: "4 inch pot",
458:         isActive: false,
459:       });
460: 
461:       const tasks = await CareSchedulingService.getUpcomingTasks();
462: 
463: 
464:       const inactivePlantTasks = tasks.filter(
465:         (task) => task.plantId === inactivePlant
466:       );
467:       expect(inactivePlantTasks).toHaveLength(0);
468:     });
469:   });
470: 
471:   describe("getNextTaskForPlant Edge Cases", () => {
472:     it("returns null for non-existent plant", async () => {
473:       const task = await CareSchedulingService.getNextTaskForPlant(
474:         "non-existent-id"
475:       );
476:       expect(task).toBeNull();
477:     });
478: 
479:     it("returns null for inactive plant", async () => {
480:       const varieties = await varietyService.getAllVarieties();
481:       const testVariety = varieties[0];
482: 
483:       const inactivePlant = await plantService.addPlant({
484:         varietyId: testVariety.id,
485:         varietyName: testVariety.name,
486:         plantedDate: subDays(new Date(), 5),
487:         currentStage: "seedling",
488:         location: "Indoor",
489:         container: "4 inch pot",
490:         isActive: false,
491:       });
492: 
493:       const task = await CareSchedulingService.getNextTaskForPlant(
494:         inactivePlant
495:       );
496:       expect(task).toBeNull();
497:     });
498: 
499:     it("handles plant with no eligible tasks", async () => {
500:       const varieties = await varietyService.getAllVarieties();
501:       const testVariety = varieties[0];
502: 
503:       const plantWithNoTasks = await plantService.addPlant({
504:         varietyId: testVariety.id,
505:         varietyName: testVariety.name,
506:         plantedDate: new Date(),
507:         currentStage: "germination",
508:         location: "Indoor",
509:         container: "seed tray",
510:         isActive: true,
511:         reminderPreferences: {
512:           watering: false,
513:           fertilizing: false,
514:           observation: false,
515:           lighting: false,
516:           pruning: false,
517:         },
518:       });
519: 
520:       const task = await CareSchedulingService.getNextTaskForPlant(
521:         plantWithNoTasks
522:       );
523:       expect(task).toBeNull();
524:     });
525: 
526:     it("returns highest priority task when multiple exist", async () => {
527:       const varieties = await varietyService.getAllVarieties();
528:       const testVariety = varieties[0];
529: 
530:       const testPlant = await plantService.addPlant({
531:         varietyId: testVariety.id,
532:         varietyName: testVariety.name,
533:         plantedDate: subDays(new Date(), 15),
534:         currentStage: "seedling",
535:         location: "Indoor",
536:         container: "4 inch pot",
537:         isActive: true,
538:       });
539: 
540: 
541:       await careService.addCareActivity({
542:         plantId: testPlant,
543:         type: "water",
544:         date: subDays(new Date(), 5),
545:         details: {
546:           type: "water",
547:           amount: { value: 8, unit: "oz" },
548:         },
549:       });
550: 
551:       const nextTask = await CareSchedulingService.getNextTaskForPlant(
552:         testPlant
553:       );
554: 
555:       if (nextTask) {
556: 
557:         expect(nextTask.plantId).toBe(testPlant);
558:         expect(nextTask.dueDate).toBeInstanceOf(Date);
559:       }
560:     });
561:   });
562: 
563:   describe("Task Formatting and Calculation", () => {
564:     it("correctly formats due dates", async () => {
565:       const varieties = await varietyService.getAllVarieties();
566:       const testVariety = varieties[0];
567: 
568:       const testPlant = await plantService.addPlant({
569:         varietyId: testVariety.id,
570:         varietyName: testVariety.name,
571:         plantedDate: subDays(new Date(), 5),
572:         currentStage: "seedling",
573:         location: "Indoor",
574:         container: "4 inch pot",
575:         isActive: true,
576:       });
577: 
578:       const tasks = await CareSchedulingService.getUpcomingTasks();
579:       const plantTasks = tasks.filter((task) => task.plantId === testPlant);
580: 
581:       plantTasks.forEach((task) => {
582: 
583:         expect(task.dueIn).toMatch(
584:           /^(Due today|Due tomorrow|Due in \d+ days?|\d+ days? overdue)$/
585:         );
586: 
587: 
588:         expect(["low", "medium", "high"]).toContain(task.priority);
589: 
590: 
591:         expect(task.plantStage).toBeDefined();
592:         expect(typeof task.plantStage).toBe("string");
593:       });
594:     });
595: 
596:     it("handles stage calculation errors gracefully", async () => {
597:       const varieties = await varietyService.getAllVarieties();
598:       const testVariety = varieties[0];
599: 
600: 
601:       const testPlant = await plantService.addPlant({
602:         varietyId: testVariety.id,
603:         varietyName: testVariety.name,
604:         plantedDate: subDays(new Date(), 5),
605:         currentStage: "seedling",
606:         location: "Indoor",
607:         container: "4 inch pot",
608:         isActive: true,
609:       });
610: 
611: 
612:       const growthStageModule = await import("@/utils/growthStage");
613:       const mockCalculateCurrentStage = jest
614:         .spyOn(growthStageModule, "calculateCurrentStage")
615:         .mockImplementation(() => {
616:           throw new Error("Stage calculation failed");
617:         });
618: 
619:       const tasks = await CareSchedulingService.getUpcomingTasks();
620: 
621: 
622:       expect(Array.isArray(tasks)).toBe(true);
623: 
624: 
625:       const plantTasks = tasks.filter((task) => task.plantId === testPlant);
626:       expect(plantTasks).toHaveLength(0);
627: 
628: 
629:       expect(mockCalculateCurrentStage).toHaveBeenCalled();
630: 
631: 
632:       mockCalculateCurrentStage.mockRestore();
633:     });
634:   });
635: });

================
File: src/__tests__/services/smartDefaultsService.test.ts
================
  1: import { SmartDefaultsService } from "@/services/smartDefaultsService";
  2: import { varietyService } from "@/types/database";
  3: import { GrowthStage } from "@/types/core";
  4: 
  5: 
  6: jest.mock("@/types/database", () => ({
  7:   varietyService: {
  8:     getAllVarieties: jest.fn(),
  9:     getVariety: jest.fn(),
 10:     getVarietyByName: jest.fn(),
 11:     addVariety: jest.fn(),
 12:   },
 13:   careService: {
 14:     getLastCareActivityByType: jest.fn(),
 15:   },
 16:   db: {
 17:     careActivities: {
 18:       where: jest.fn(() => ({
 19:         equals: jest.fn(() => ({
 20:           toArray: jest.fn(),
 21:         })),
 22:       })),
 23:     },
 24:   },
 25: }));
 26: 
 27: describe("SmartDefaultsService", () => {
 28:   beforeEach(async () => {
 29:     jest.clearAllMocks();
 30:   });
 31: 
 32:   describe("error handling and edge cases", () => {
 33:     it("handles corrupted care log data without crashing", async () => {
 34:       const varieties = [
 35:         {
 36:           id: "test-variety",
 37:           name: "Test Variety",
 38:           category: "leafy-greens" as const,
 39:           growthTimeline: {
 40:             germination: { min: 3, max: 7 },
 41:             seedling: { min: 14, max: 21 },
 42:             vegetative: { min: 21, max: 35 },
 43:             mature: { min: 35, max: 50 },
 44:             flowering: { min: 50, max: 70 },
 45:             fruiting: { min: 70, max: 90 },
 46:           },
 47:           createdAt: new Date(),
 48:         },
 49:       ];
 50: 
 51: 
 52:       const mockPlant = {
 53:         id: "test-plant",
 54:         varietyId: "test-variety",
 55:         varietyName: "Test Variety",
 56:         name: "Test Plant",
 57:         plantedDate: new Date(),
 58:         currentStage: "vegetative" as GrowthStage,
 59:         location: "Indoor",
 60:         container: "4-inch pot",
 61:         isActive: true,
 62:         createdAt: new Date(),
 63:         updatedAt: new Date(),
 64:       };
 65: 
 66:       (varietyService.getAllVarieties as jest.Mock).mockResolvedValue(
 67:         varieties
 68:       );
 69:       (varietyService.getVariety as jest.Mock).mockResolvedValue(varieties[0]);
 70: 
 71:       const result = await SmartDefaultsService.getDefaultsForPlant(mockPlant);
 72: 
 73: 
 74:       expect(result).toBeDefined();
 75: 
 76: 
 77:       if (result) {
 78:         expect(result).toHaveProperty("watering");
 79:         expect(result).toHaveProperty("fertilizer");
 80:       }
 81:     });
 82: 
 83:     it("returns null for invalid plant data", async () => {
 84:       const invalidPlant = {
 85:         id: "invalid-plant",
 86:         varietyId: "non-existent-variety",
 87:         varietyName: "Non-existent",
 88:         name: "Invalid Plant",
 89:         plantedDate: new Date(),
 90:         currentStage: "vegetative" as GrowthStage,
 91:         location: "Indoor",
 92:         container: "4-inch pot",
 93:         isActive: true,
 94:         createdAt: new Date(),
 95:         updatedAt: new Date(),
 96:       };
 97: 
 98:       (varietyService.getVariety as jest.Mock).mockResolvedValue(null);
 99: 
100:       const result = await SmartDefaultsService.getDefaultsForPlant(
101:         invalidPlant
102:       );
103: 
104:       expect(result).toBeNull();
105:     });
106: 
107:     it("handles missing growth timeline gracefully", async () => {
108:       const varietyWithoutTimeline = {
109:         id: "test-variety",
110:         name: "Test Variety",
111:         category: "leafy-greens" as const,
112:         createdAt: new Date(),
113: 
114:       };
115: 
116:       const mockPlant = {
117:         id: "test-plant",
118:         varietyId: "test-variety",
119:         varietyName: "Test Variety",
120:         name: "Test Plant",
121:         plantedDate: new Date(),
122:         currentStage: "vegetative" as GrowthStage,
123:         location: "Indoor",
124:         container: "4-inch pot",
125:         isActive: true,
126:         createdAt: new Date(),
127:         updatedAt: new Date(),
128:       };
129: 
130:       (varietyService.getVariety as jest.Mock).mockResolvedValue(
131:         varietyWithoutTimeline
132:       );
133: 
134:       const result = await SmartDefaultsService.getDefaultsForPlant(mockPlant);
135: 
136: 
137:       expect(result).toBeDefined();
138:     });
139:   });
140: 
141:   describe("quick completion options", () => {
142:     it("generates appropriate options for watering", async () => {
143:       const mockPlant = {
144:         id: "test-plant",
145:         varietyId: "test-variety",
146:         varietyName: "Test Variety",
147:         name: "Test Plant",
148:         plantedDate: new Date(),
149:         currentStage: "vegetative" as GrowthStage,
150:         location: "Indoor",
151:         container: "4-inch pot",
152:         isActive: true,
153:         createdAt: new Date(),
154:         updatedAt: new Date(),
155:       };
156: 
157: 
158:       const mockVariety = {
159:         id: "test-variety",
160:         name: "Test Variety",
161:         category: "leafy-greens" as const,
162:         growthTimeline: {
163:           germination: { min: 3, max: 7 },
164:           seedling: { min: 14, max: 21 },
165:           vegetative: { min: 21, max: 35 },
166:           mature: { min: 35, max: 50 },
167:           flowering: { min: 50, max: 70 },
168:           fruiting: { min: 70, max: 90 },
169:         },
170:         createdAt: new Date(),
171:       };
172: 
173:       (varietyService.getVariety as jest.Mock).mockResolvedValue(mockVariety);
174: 
175:       const options = await SmartDefaultsService.getQuickCompletionOptions(
176:         mockPlant,
177:         "water"
178:       );
179: 
180: 
181:       expect(options).not.toBeNull();
182:       if (options) {
183:         expect(Array.isArray(options)).toBe(true);
184:         expect(options.length).toBeGreaterThanOrEqual(0);
185:       }
186:     });
187:   });
188: });

================
File: src/__tests__/utils/growthStage.test.ts
================
  1: import {
  2:   calculateCurrentStage,
  3:   calculateCurrentStageWithVariety,
  4:   getStageProgress,
  5:   estimateStageTransition,
  6:   getNextStage,
  7: } from "../../utils/growthStage";
  8: import { restoreDate } from "../../setupTests";
  9: import { VarietyRecord } from "../../types/database";
 10: import { GrowthStage } from "@/types";
 11: 
 12: describe("Growth Stage Utilities", () => {
 13:   const mockTimeline = {
 14:     germination: 7,
 15:     seedling: 14,
 16:     vegetative: 21,
 17:     maturation: 60,
 18:   };
 19: 
 20: 
 21:   const mockEverbearingVariety: VarietyRecord = {
 22:     id: "albion-strawberry",
 23:     name: "Albion Strawberries",
 24:     category: "berries",
 25:     growthTimeline: {
 26:       germination: 14,
 27:       seedling: 28,
 28:       vegetative: 42,
 29:       maturation: 90,
 30:     },
 31:     isEverbearing: true,
 32:     productiveLifespan: 730,
 33:     createdAt: new Date(),
 34:   };
 35: 
 36:   const mockNonEverbearingVariety: VarietyRecord = {
 37:     id: "little-finger-carrots",
 38:     name: "Little Finger Carrots",
 39:     category: "root-vegetables",
 40:     growthTimeline: {
 41:       germination: 10,
 42:       seedling: 14,
 43:       vegetative: 21,
 44:       maturation: 65,
 45:     },
 46:     isEverbearing: false,
 47:     createdAt: new Date(),
 48:   };
 49: 
 50:   beforeEach(() => {
 51:     restoreDate();
 52:   });
 53: 
 54:   describe("calculateCurrentStage (basic function)", () => {
 55:     it("returns germination for early days", () => {
 56:       const plantedDate = new Date("2024-01-01");
 57:       const currentDate = new Date("2024-01-05");
 58: 
 59:       const stage = calculateCurrentStage(
 60:         plantedDate,
 61:         mockTimeline,
 62:         currentDate
 63:       );
 64:       expect(stage).toBe("germination");
 65:     });
 66: 
 67:     it("transitions to seedling correctly", () => {
 68:       const plantedDate = new Date("2024-01-01");
 69:       const currentDate = new Date("2024-01-08");
 70: 
 71:       const stage = calculateCurrentStage(
 72:         plantedDate,
 73:         mockTimeline,
 74:         currentDate
 75:       );
 76:       expect(stage).toBe("seedling");
 77:     });
 78: 
 79:     it("transitions to vegetative correctly", () => {
 80:       const plantedDate = new Date("2024-01-01");
 81:       const currentDate = new Date("2024-01-22");
 82: 
 83:       const stage = calculateCurrentStage(
 84:         plantedDate,
 85:         mockTimeline,
 86:         currentDate
 87:       );
 88:       expect(stage).toBe("vegetative");
 89:     });
 90: 
 91:     it("transitions to flowering correctly", () => {
 92:       const plantedDate = new Date("2024-01-01");
 93:       const currentDate = new Date("2024-02-12");
 94: 
 95:       const stage = calculateCurrentStage(
 96:         plantedDate,
 97:         mockTimeline,
 98:         currentDate
 99:       );
100:       expect(stage).toBe("flowering");
101:     });
102: 
103:     it("returns harvest for plants past maturation date", () => {
104: 
105:       const plantedDate = new Date("2024-01-01");
106:       const currentDate = new Date("2024-03-05");
107: 
108:       const stage = calculateCurrentStage(
109:         plantedDate,
110:         mockTimeline,
111:         currentDate
112:       );
113:       expect(stage).toBe("harvest");
114:     });
115: 
116:     it("handles future planting dates gracefully", () => {
117:       const plantedDate = new Date("2024-12-31");
118:       const currentDate = new Date("2024-01-01");
119: 
120:       const stage = calculateCurrentStage(
121:         plantedDate,
122:         mockTimeline,
123:         currentDate
124:       );
125:       expect(stage).toBe("germination");
126:     });
127: 
128:     it("handles leap year edge cases", () => {
129:       const plantedDate = new Date("2024-02-28");
130:       const currentDate = new Date("2024-03-01");
131: 
132:       const stage = calculateCurrentStage(
133:         plantedDate,
134:         mockTimeline,
135:         currentDate
136:       );
137:       expect(stage).toBe("germination");
138:     });
139: 
140:     it("handles timezone DST transitions", () => {
141: 
142:       const plantedDate = new Date("2024-03-09T12:00:00");
143:       const currentDate = new Date("2024-03-11T12:00:00");
144: 
145:       const stage = calculateCurrentStage(
146:         plantedDate,
147:         mockTimeline,
148:         currentDate
149:       );
150:       expect(stage).toBe("germination");
151:     });
152:   });
153: 
154:   describe("calculateCurrentStageWithVariety (enhanced function)", () => {
155:     describe("everbearing plants", () => {
156:       it("returns ongoing-production for everbearing plants after maturation", () => {
157:         const plantedDate = new Date("2024-01-01");
158:         const currentDate = new Date("2024-04-05");
159: 
160:         const stage = calculateCurrentStageWithVariety(
161:           plantedDate,
162:           mockEverbearingVariety,
163:           currentDate
164:         );
165:         expect(stage).toBe("ongoing-production");
166:       });
167: 
168:       it("handles the exact strawberry scenario (103 days)", () => {
169:         const plantedDate = new Date("2024-01-01");
170:         const currentDate = new Date("2024-04-14");
171: 
172:         const stage = calculateCurrentStageWithVariety(
173:           plantedDate,
174:           mockEverbearingVariety,
175:           currentDate
176:         );
177:         expect(stage).toBe("ongoing-production");
178:       });
179: 
180:       it("returns harvest when past productive lifespan", () => {
181:         const plantedDate = new Date("2022-01-01");
182:         const currentDate = new Date("2024-02-01");
183: 
184:         const stage = calculateCurrentStageWithVariety(
185:           plantedDate,
186:           mockEverbearingVariety,
187:           currentDate
188:         );
189:         expect(stage).toBe("harvest");
190:       });
191: 
192:       it("follows normal growth stages before maturation", () => {
193:         const testCases = [
194:           { days: 5, expected: "germination" },
195:           { days: 20, expected: "seedling" },
196:           { days: 50, expected: "vegetative" },
197:           { days: 87, expected: "flowering" },
198:         ];
199: 
200:         testCases.forEach(({ days, expected }) => {
201:           const plantedDate = new Date("2024-01-01");
202:           const currentDate = new Date(plantedDate);
203:           currentDate.setDate(currentDate.getDate() + days);
204: 
205:           const stage = calculateCurrentStageWithVariety(
206:             plantedDate,
207:             mockEverbearingVariety,
208:             currentDate
209:           );
210:           expect(stage).toBe(expected);
211:         });
212:       });
213:     });
214: 
215:     describe("non-everbearing plants", () => {
216:       it("returns harvest for non-everbearing plants after maturation", () => {
217:         const plantedDate = new Date("2024-01-01");
218:         const currentDate = new Date("2024-03-10");
219: 
220:         const stage = calculateCurrentStageWithVariety(
221:           plantedDate,
222:           mockNonEverbearingVariety,
223:           currentDate
224:         );
225:         expect(stage).toBe("harvest");
226:       });
227: 
228:       it("follows normal growth stages before maturation", () => {
229:         const testCases = [
230:           { days: 5, expected: "germination" },
231:           { days: 15, expected: "seedling" },
232:           { days: 30, expected: "vegetative" },
233:           { days: 60, expected: "flowering" },
234:         ];
235: 
236:         testCases.forEach(({ days, expected }) => {
237:           const plantedDate = new Date("2024-01-01");
238:           const currentDate = new Date(plantedDate);
239:           currentDate.setDate(currentDate.getDate() + days);
240: 
241:           const stage = calculateCurrentStageWithVariety(
242:             plantedDate,
243:             mockNonEverbearingVariety,
244:             currentDate
245:           );
246:           expect(stage).toBe(expected);
247:         });
248:       });
249:     });
250: 
251:     describe("edge cases", () => {
252:       it("handles everbearing plants without productiveLifespan", () => {
253:         const varietyWithoutLifespan: VarietyRecord = {
254:           ...mockEverbearingVariety,
255:           productiveLifespan: undefined,
256:         };
257: 
258:         const plantedDate = new Date("2022-01-01");
259:         const currentDate = new Date("2024-01-01");
260: 
261:         const stage = calculateCurrentStageWithVariety(
262:           plantedDate,
263:           varietyWithoutLifespan,
264:           currentDate
265:         );
266:         expect(stage).toBe("harvest");
267:       });
268: 
269:       it("handles future planting dates gracefully", () => {
270:         const plantedDate = new Date("2024-12-31");
271:         const currentDate = new Date("2024-01-01");
272: 
273:         const stage = calculateCurrentStageWithVariety(
274:           plantedDate,
275:           mockEverbearingVariety,
276:           currentDate
277:         );
278:         expect(stage).toBe("germination");
279:       });
280:     });
281:   });
282: 
283:   describe("getStageProgress", () => {
284:     it("calculates progress correctly mid-stage", () => {
285:       const plantedDate = new Date("2024-01-01");
286:       const currentDate = new Date("2024-01-11");
287: 
288:       const progress = getStageProgress(plantedDate, mockTimeline, currentDate);
289: 
290:       expect(progress).toBeCloseTo(21, 0);
291:     });
292: 
293:     it("returns 100% for completed stages", () => {
294:       const plantedDate = new Date("2024-01-01");
295:       const currentDate = new Date("2024-03-01");
296: 
297:       const progress = getStageProgress(plantedDate, mockTimeline, currentDate);
298:       expect(progress).toBe(100);
299:     });
300: 
301:     it("handles all new stage types", () => {
302:       const plantedDate = new Date("2024-01-01");
303:       const currentDate = new Date("2024-03-01");
304: 
305: 
306:       const timeline = { ...mockTimeline };
307:       const progress = getStageProgress(plantedDate, timeline, currentDate);
308:       expect(progress).toBe(100);
309:     });
310:   });
311: 
312:   describe("getNextStage", () => {
313:     it("returns correct next stages for basic progression", () => {
314:       expect(getNextStage("germination")).toBe("seedling");
315:       expect(getNextStage("seedling")).toBe("vegetative");
316:       expect(getNextStage("vegetative")).toBe("flowering");
317:       expect(getNextStage("flowering")).toBe("maturation");
318:       expect(getNextStage("maturation")).toBe("ongoing-production");
319:       expect(getNextStage("ongoing-production")).toBe("harvest");
320:     });
321: 
322:     it("returns null for the final stage", () => {
323:       expect(getNextStage("harvest")).toBe(null);
324:     });
325: 
326:     it("handles invalid stages gracefully", () => {
327: 
328:       expect(getNextStage(undefined as unknown as GrowthStage)).toBe(null);
329: 
330: 
331:       const invalidStage = "not-a-real-stage" as unknown as GrowthStage;
332:       expect(getNextStage(invalidStage)).toBe(null);
333:     });
334:   });
335: 
336:   describe("estimateStageTransition", () => {
337:     it("estimates correct transition dates", () => {
338:       const plantedDate = new Date("2024-01-01");
339: 
340:       const floweringDate = estimateStageTransition(
341:         plantedDate,
342:         mockTimeline,
343:         "flowering"
344:       );
345:       expect(floweringDate).toEqual(new Date("2024-02-12"));
346:     });
347: 
348:     it("handles new stage types", () => {
349:       const plantedDate = new Date("2024-01-01");
350: 
351:       const ongoingProductionDate = estimateStageTransition(
352:         plantedDate,
353:         mockTimeline,
354:         "ongoing-production"
355:       );
356:       expect(ongoingProductionDate).toEqual(new Date("2024-03-01"));
357: 
358:       const harvestDate = estimateStageTransition(
359:         plantedDate,
360:         mockTimeline,
361:         "harvest"
362:       );
363:       expect(harvestDate).toEqual(new Date("2024-03-01"));
364:     });
365:   });
366: 
367:   describe("integration tests with real variety data", () => {
368:     it("correctly handles Albion strawberry timeline", () => {
369:       const plantedDate = new Date("2024-01-01");
370: 
371: 
372:       const testCases = [
373:         { days: 10, expected: "germination" },
374:         { days: 20, expected: "seedling" },
375:         { days: 50, expected: "vegetative" },
376:         { days: 87, expected: "flowering" },
377:         { days: 103, expected: "ongoing-production" },
378:         { days: 365, expected: "ongoing-production" },
379:         { days: 731, expected: "harvest" },
380:       ];
381: 
382:       testCases.forEach(({ days, expected }) => {
383:         const currentDate = new Date(plantedDate);
384:         currentDate.setDate(currentDate.getDate() + days);
385: 
386:         const stage = calculateCurrentStageWithVariety(
387:           plantedDate,
388:           mockEverbearingVariety,
389:           currentDate
390:         );
391: 
392:         expect(stage).toBe(expected);
393:       });
394:     });
395: 
396:     it("correctly handles Caroline raspberry timeline", () => {
397:       const raspberryVariety: VarietyRecord = {
398:         id: "caroline-raspberry",
399:         name: "Caroline Raspberries",
400:         category: "berries",
401:         growthTimeline: {
402:           germination: 0,
403:           seedling: 21,
404:           vegetative: 42,
405:           maturation: 120,
406:         },
407:         isEverbearing: true,
408:         productiveLifespan: 1095,
409:         createdAt: new Date(),
410:       };
411: 
412:       const plantedDate = new Date("2024-01-01");
413:       const testCases = [
414:         { days: 10, expected: "seedling" },
415:         { days: 30, expected: "vegetative" },
416:         { days: 60, expected: "vegetative" },
417:         { days: 110, expected: "flowering" },
418:         { days: 130, expected: "ongoing-production" },
419:         { days: 1000, expected: "ongoing-production" },
420:         { days: 1100, expected: "harvest" },
421:       ];
422: 
423:       testCases.forEach(({ days, expected }) => {
424:         const currentDate = new Date(plantedDate);
425:         currentDate.setDate(currentDate.getDate() + days);
426: 
427:         const stage = calculateCurrentStageWithVariety(
428:           plantedDate,
429:           raspberryVariety,
430:           currentDate
431:         );
432: 
433:         expect(stage).toBe(expected);
434:       });
435:     });
436:   });
437: });

================
File: src/components/layouts/Welcome.tsx
================
  1: import React, { useState } from "react";
  2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { Link } from "react-router-dom";
  5: 
  6: const Welcome: React.FC = () => {
  7:   const [currentStep, setCurrentStep] = useState(0);
  8: 
  9:   const onboardingSteps = [
 10:     {
 11:       title: "Welcome to SmartGarden",
 12:       content: (
 13:         <div className="text-center space-y-6">
 14:           <div className="text-7xl mb-6 animate-bounce">🌿</div>
 15:           <div className="space-y-4">
 16:             <h2 className="text-3xl font-black text-foreground leading-tight">
 17:               Your digital gardening companion
 18:             </h2>
 19:             <p className="text-muted-foreground leading-relaxed text-lg">
 20:               Track your plants, schedule care tasks, and grow healthier gardens
 21:               with science-backed protocols.
 22:             </p>
 23:           </div>
 24:         </div>
 25:       ),
 26:     },
 27:     {
 28:       title: "Smart Care Scheduling",
 29:       content: (
 30:         <div className="text-center space-y-6">
 31:           <div className="text-7xl mb-6 animate-pulse">📅</div>
 32:           <div className="space-y-4">
 33:             <h2 className="text-3xl font-black text-foreground leading-tight">
 34:               Never miss a watering
 35:             </h2>
 36:             <p className="text-muted-foreground leading-relaxed text-lg">
 37:               Get personalized care reminders based on your plants' growth
 38:               stages and your logging history.
 39:             </p>
 40:           </div>
 41:         </div>
 42:       ),
 43:     },
 44:     {
 45:       title: "Photo & Progress Tracking",
 46:       content: (
 47:         <div className="text-center space-y-6">
 48:           <div className="text-7xl mb-6">📸</div>
 49:           <div className="space-y-4">
 50:             <h2 className="text-3xl font-black text-foreground leading-tight">
 51:               Document your garden's journey
 52:             </h2>
 53:             <p className="text-muted-foreground leading-relaxed text-lg">
 54:               Capture photos, log activities, and watch your plants thrive with
 55:               detailed growth tracking.
 56:             </p>
 57:           </div>
 58:         </div>
 59:       ),
 60:     },
 61:     {
 62:       title: "Ready to Start?",
 63:       content: (
 64:         <div className="text-center space-y-6">
 65:           <div className="text-7xl mb-6">🚀</div>
 66:           <div className="space-y-4">
 67:             <h2 className="text-3xl font-black text-foreground leading-tight">
 68:               Let's add your first plant
 69:             </h2>
 70:             <p className="text-muted-foreground leading-relaxed text-lg">
 71:               Start your digital garden by registering your first plant. We'll
 72:               guide you through the process.
 73:             </p>
 74:           </div>
 75:         </div>
 76:       ),
 77:     },
 78:   ];
 79: 
 80:   const nextStep = () => {
 81:     if (currentStep < onboardingSteps.length - 1) {
 82:       setCurrentStep(currentStep + 1);
 83:     }
 84:   };
 85: 
 86:   const previousStep = () => {
 87:     if (currentStep > 0) {
 88:       setCurrentStep(currentStep - 1);
 89:     }
 90:   };
 91: 
 92:   const currentStepData = onboardingSteps[currentStep];
 93:   const isLastStep = currentStep === onboardingSteps.length - 1;
 94:   const isFirstStep = currentStep === 0;
 95: 
 96:   return (
 97:     <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-blue-50 flex items-center justify-center p-4">
 98:       <div className="w-full max-w-sm">
 99:         <Card className="shadow-2xl border-0 bg-card/95 backdrop-blur-lg rounded-3xl overflow-hidden">
100:           <CardHeader className="text-center pb-6 bg-gradient-to-r from-emerald-500/5 to-green-500/5">
101:             <CardTitle className="text-xs font-bold text-muted-foreground uppercase tracking-widest">
102:               {currentStepData.title}
103:             </CardTitle>
104: 
105:             {}
106:             <div className="flex justify-center mt-8 space-x-2">
107:               {onboardingSteps.map((_, index) => (
108:                 <div
109:                   key={index}
110:                   className={`h-3 rounded-full transition-all duration-500 ease-out ${
111:                     index === currentStep
112:                       ? "w-8 bg-gradient-to-r from-emerald-500 to-green-600 shadow-lg shadow-emerald-500/40"
113:                       : index < currentStep
114:                       ? "w-3 bg-emerald-400"
115:                       : "w-3 bg-gray-200"
116:                   }`}
117:                 />
118:               ))}
119:             </div>
120:           </CardHeader>
121: 
122:           <CardContent className="pb-8 px-6">
123:             {}
124:             <div className="min-h-80 flex items-center justify-center mb-8">
125:               {currentStepData.content}
126:             </div>
127: 
128:             {}
129:             <div className="space-y-4">
130:               {}
131:               <div className="w-full">
132:                 {isLastStep ? (
133:                   <Link to="/add-plant" className="block">
134:                     <Button
135:                       size="lg"
136:                       className="w-full group"
137:                       rightIcon={
138:                         <span className="text-2xl group-hover:scale-110 transition-transform duration-200">
139:                           🌱
140:                         </span>
141:                       }
142:                     >
143:                       Add My First Plant
144:                     </Button>
145:                   </Link>
146:                 ) : (
147:                   <Button
148:                     onClick={nextStep}
149:                     size="lg"
150:                     className="w-full group"
151:                     rightIcon={
152:                       <svg
153:                         className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-200"
154:                         fill="none"
155:                         stroke="currentColor"
156:                         viewBox="0 0 24 24"
157:                       >
158:                         <path
159:                           strokeLinecap="round"
160:                           strokeLinejoin="round"
161:                           strokeWidth={3}
162:                           d="M9 5l7 7-7 7"
163:                         />
164:                       </svg>
165:                     }
166:                   >
167:                     Continue
168:                   </Button>
169:                 )}
170:               </div>
171: 
172:               {}
173:               <div className="flex gap-3">
174:                 <div className="flex-1">
175:                   {!isFirstStep && (
176:                     <Button
177:                       variant="ghost"
178:                       onClick={previousStep}
179:                       className="w-full"
180:                       leftIcon={
181:                         <svg
182:                           className="w-4 h-4"
183:                           fill="none"
184:                           stroke="currentColor"
185:                           viewBox="0 0 24 24"
186:                         >
187:                           <path
188:                             strokeLinecap="round"
189:                             strokeLinejoin="round"
190:                             strokeWidth={2}
191:                             d="M15 19l-7-7 7-7"
192:                           />
193:                         </svg>
194:                       }
195:                     >
196:                       Back
197:                     </Button>
198:                   )}
199:                 </div>
200:                 <div className="flex-1">
201:                   {!isLastStep && (
202:                     <Link to="/add-plant" className="block">
203:                       <Button
204:                         variant="ghost"
205:                         className="w-full"
206:                         rightIcon={
207:                           <svg
208:                             className="w-4 h-4"
209:                             fill="none"
210:                             stroke="currentColor"
211:                             viewBox="0 0 24 24"
212:                           >
213:                             <path
214:                               strokeLinecap="round"
215:                               strokeLinejoin="round"
216:                               strokeWidth={2}
217:                               d="M9 5l7 7-7 7"
218:                             />
219:                           </svg>
220:                         }
221:                       >
222:                         Skip
223:                       </Button>
224:                     </Link>
225:                   )}
226:                 </div>
227:               </div>
228:             </div>
229:           </CardContent>
230:         </Card>
231:       </div>
232:     </div>
233:   );
234: };
235: 
236: export default Welcome;

================
File: src/components/plant/CustomVarietyForm.tsx
================
  1: import { useState } from "react";
  2: import { useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { Button } from "@/components/ui/Button";
  6: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  7: import { varietyService } from "@/types/database";
  8: import toast from "react-hot-toast";
  9: 
 10: const customVarietySchema = z.object({
 11:   name: z.string().min(1, "Variety name is required"),
 12:   category: z.enum([
 13:     "root-vegetables",
 14:     "leafy-greens",
 15:     "herbs",
 16:     "berries",
 17:     "fruiting-plants",
 18:   ]),
 19:   growthTimeline: z.object({
 20:     germination: z.number().min(1).max(90),
 21:     seedling: z.number().min(1).max(90),
 22:     vegetative: z.number().min(1).max(180),
 23:     maturation: z.number().min(1).max(365),
 24:   }),
 25:   customMoistureRanges: z.boolean().optional(),
 26:   triggerMin: z.number().min(1).max(10).optional(),
 27:   triggerMax: z.number().min(1).max(10).optional(),
 28:   targetMin: z.number().min(1).max(10).optional(),
 29:   targetMax: z.number().min(1).max(10).optional(),
 30: });
 31: 
 32: type CustomVarietyData = z.infer<typeof customVarietySchema>;
 33: 
 34: interface CustomVarietyFormProps {
 35:   onSuccess?: (varietyId: string) => void;
 36:   onCancel?: () => void;
 37: }
 38: 
 39: export function CustomVarietyForm({
 40:   onSuccess,
 41:   onCancel,
 42: }: CustomVarietyFormProps) {
 43:   const [isLoading, setIsLoading] = useState(false);
 44:   const [showMoistureCustomization, setShowMoistureCustomization] =
 45:     useState(false);
 46: 
 47:   const {
 48:     register,
 49:     handleSubmit,
 50:     formState: { errors },
 51:     reset,
 52:   } = useForm<CustomVarietyData>({
 53:     resolver: zodResolver(customVarietySchema),
 54:     defaultValues: {
 55:       triggerMin: 3,
 56:       triggerMax: 4,
 57:       targetMin: 6,
 58:       targetMax: 7,
 59:     },
 60:   });
 61: 
 62:   async function onSubmit(data: CustomVarietyData) {
 63:     setIsLoading(true);
 64:     try {
 65: 
 66:       let moistureProtocols = undefined;
 67:       if (
 68:         data.customMoistureRanges &&
 69:         data.triggerMin &&
 70:         data.triggerMax &&
 71:         data.targetMin &&
 72:         data.targetMax
 73:       ) {
 74:         const ranges = {
 75:           trigger: { min: data.triggerMin, max: data.triggerMax },
 76:           target: { min: data.targetMin, max: data.targetMax },
 77:         };
 78: 
 79: 
 80:         moistureProtocols = {
 81:           germination: ranges,
 82:           seedling: ranges,
 83:           vegetative: ranges,
 84:           flowering: ranges,
 85:           fruiting: ranges,
 86:           maturation: ranges,
 87:           harvest: ranges,
 88:         };
 89:       }
 90: 
 91:       const varietyId = await varietyService.addVariety({
 92:         name: data.name,
 93:         category: data.category,
 94:         growthTimeline: data.growthTimeline,
 95:         moistureProtocols,
 96:         isCustom: true,
 97:       });
 98: 
 99:       toast.success(`Created custom variety: ${data.name}!`);
100:       reset();
101:       onSuccess?.(varietyId);
102:     } catch (error) {
103:       console.error("Failed to create variety:", error);
104:       toast.error("Failed to create variety. Please try again.");
105:     } finally {
106:       setIsLoading(false);
107:     }
108:   }
109: 
110:   return (
111:     <Card className="max-w-2xl mx-auto">
112:       <CardHeader>
113:         <CardTitle>Create Custom Plant Variety</CardTitle>
114:         <p className="text-sm text-muted-foreground mt-1">
115:           Add your own plant varieties like pumpkins, exotic herbs, or local
116:           cultivars
117:         </p>
118:       </CardHeader>
119:       <CardContent>
120:         <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
121:           <div>
122:             <label className="block text-sm font-medium text-foreground mb-2">
123:               Variety Name *
124:             </label>
125:             <input
126:               {...register("name")}
127:               placeholder="e.g., Jack-o'-lantern Pumpkins, Cherokee Purple Tomatoes"
128:               className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
129:             />
130:             {errors.name && (
131:               <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
132:             )}
133:           </div>
134: 
135:           <div>
136:             <label className="block text-sm font-medium text-foreground mb-2">
137:               Category *
138:             </label>
139:             <select
140:               {...register("category")}
141:               className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
142:             >
143:               <option value="fruiting-plants">
144:                 🎃 Fruiting Plants (pumpkins, squash, melons, etc.)
145:               </option>
146:               <option value="leafy-greens">
147:                 🥬 Leafy Greens (lettuce, spinach, kale, etc.)
148:               </option>
149:               <option value="root-vegetables">
150:                 🥕 Root Vegetables (carrots, beets, radishes, etc.)
151:               </option>
152:               <option value="herbs">
153:                 🌿 Herbs (basil, cilantro, sage, etc.)
154:               </option>
155:               <option value="berries">
156:                 🫐 Berries (strawberries, raspberries, etc.)
157:               </option>
158:             </select>
159:             <p className="mt-1 text-xs text-muted-foreground">
160:               This determines default care guidelines and protocols
161:             </p>
162:           </div>
163: 
164:           {}
165:           <div>
166:             <h3 className="text-lg font-medium text-foreground mb-4">
167:               Growth Timeline (days)
168:             </h3>
169:             <p className="text-sm text-muted-foreground mb-4">
170:               How long does each growth stage typically last? These help predict
171:               care needs.
172:             </p>
173:             <div className="grid grid-cols-2 gap-4">
174:               <div>
175:                 <label className="block text-sm font-medium text-foreground mb-2">
176:                   Germination Days
177:                 </label>
178:                 <input
179:                   type="number"
180:                   {...register("growthTimeline.germination", {
181:                     valueAsNumber: true,
182:                   })}
183:                   placeholder="7"
184:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
185:                 />
186:                 <p className="text-xs text-muted-foreground mt-1">
187:                   Days to sprout
188:                 </p>
189:               </div>
190:               <div>
191:                 <label className="block text-sm font-medium text-foreground mb-2">
192:                   Seedling Stage Days
193:                 </label>
194:                 <input
195:                   type="number"
196:                   {...register("growthTimeline.seedling", {
197:                     valueAsNumber: true,
198:                   })}
199:                   placeholder="14"
200:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
201:                 />
202:                 <p className="text-xs text-muted-foreground mt-1">
203:                   Early growth period
204:                 </p>
205:               </div>
206:               <div>
207:                 <label className="block text-sm font-medium text-foreground mb-2">
208:                   Vegetative Growth Days
209:                 </label>
210:                 <input
211:                   type="number"
212:                   {...register("growthTimeline.vegetative", {
213:                     valueAsNumber: true,
214:                   })}
215:                   placeholder="30"
216:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
217:                 />
218:                 <p className="text-xs text-muted-foreground mt-1">
219:                   Leaf and stem development
220:                 </p>
221:               </div>
222:               <div>
223:                 <label className="block text-sm font-medium text-foreground mb-2">
224:                   Total Days to Maturity
225:                 </label>
226:                 <input
227:                   type="number"
228:                   {...register("growthTimeline.maturation", {
229:                     valueAsNumber: true,
230:                   })}
231:                   placeholder="120"
232:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
233:                 />
234:                 <p className="text-xs text-muted-foreground mt-1">
235:                   From seed to harvest
236:                 </p>
237:               </div>
238:             </div>
239:           </div>
240: 
241:           {}
242:           <div className="border-t pt-6">
243:             <div className="flex items-center justify-between mb-4">
244:               <div>
245:                 <h3 className="text-lg font-medium text-foreground">
246:                   Custom Moisture Protocol
247:                 </h3>
248:                 <p className="text-sm text-muted-foreground">
249:                   Set specific watering ranges, or use category defaults
250:                 </p>
251:               </div>
252:               <button
253:                 type="button"
254:                 onClick={() =>
255:                   setShowMoistureCustomization(!showMoistureCustomization)
256:                 }
257:                 className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
258:                   showMoistureCustomization ? "bg-garden-600" : "bg-gray-300"
259:                 }`}
260:               >
261:                 <span
262:                   className={`inline-block h-4 w-4 transform rounded-full bg-card transition-transform ${
263:                     showMoistureCustomization
264:                       ? "translate-x-6"
265:                       : "translate-x-1"
266:                   }`}
267:                 />
268:               </button>
269:             </div>
270: 
271:             {showMoistureCustomization && (
272:               <div className="space-y-4 bg-blue-50 p-4 rounded-lg">
273:                 <input
274:                   type="hidden"
275:                   {...register("customMoistureRanges")}
276:                   checked={showMoistureCustomization}
277:                 />
278: 
279:                 <div className="text-sm text-blue-800 mb-3">
280:                   💡 <strong>Moisture Meter Guide:</strong> Most plants prefer
281:                   watering when moisture drops to 3-4, then watered until
282:                   reaching 6-8. Adjust based on your specific variety's needs.
283:                 </div>
284: 
285:                 <div className="grid grid-cols-2 gap-4">
286:                   <div>
287:                     <label className="block text-sm font-medium text-foreground mb-2">
288:                       Water When (Min Level)
289:                     </label>
290:                     <input
291:                       type="number"
292:                       min="1"
293:                       max="10"
294:                       step="0.5"
295:                       {...register("triggerMin", { valueAsNumber: true })}
296:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
297:                     />
298:                     <p className="text-xs text-muted-foreground mt-1">
299:                       Lowest moisture before watering
300:                     </p>
301:                   </div>
302:                   <div>
303:                     <label className="block text-sm font-medium text-foreground mb-2">
304:                       Water When (Max Level)
305:                     </label>
306:                     <input
307:                       type="number"
308:                       min="1"
309:                       max="10"
310:                       step="0.5"
311:                       {...register("triggerMax", { valueAsNumber: true })}
312:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
313:                     />
314:                     <p className="text-xs text-muted-foreground mt-1">
315:                       Highest moisture before watering
316:                     </p>
317:                   </div>
318:                   <div>
319:                     <label className="block text-sm font-medium text-foreground mb-2">
320:                       Target After (Min Level)
321:                     </label>
322:                     <input
323:                       type="number"
324:                       min="1"
325:                       max="10"
326:                       step="0.5"
327:                       {...register("targetMin", { valueAsNumber: true })}
328:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
329:                     />
330:                     <p className="text-xs text-muted-foreground mt-1">
331:                       Minimum moisture after watering
332:                     </p>
333:                   </div>
334:                   <div>
335:                     <label className="block text-sm font-medium text-foreground mb-2">
336:                       Target After (Max Level)
337:                     </label>
338:                     <input
339:                       type="number"
340:                       min="1"
341:                       max="10"
342:                       step="0.5"
343:                       {...register("targetMax", { valueAsNumber: true })}
344:                       className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
345:                     />
346:                     <p className="text-xs text-muted-foreground mt-1">
347:                       Maximum moisture after watering
348:                     </p>
349:                   </div>
350:                 </div>
351:                 <p className="text-xs text-blue-700">
352:                   💡 These ranges will apply to all growth stages initially. You
353:                   can refine them later as you learn your plant's specific needs
354:                   through the care logging system.
355:                 </p>
356:               </div>
357:             )}
358:           </div>
359: 
360:           <div className="flex gap-4 pt-4">
361:             <Button
362:               type="submit"
363:               variant="primary"
364:               disabled={isLoading}
365:               className="flex-1"
366:             >
367:               {isLoading ? "Creating..." : "Create Variety"}
368:             </Button>
369:             {onCancel && (
370:               <Button type="button" variant="outline" onClick={onCancel}>
371:                 Cancel
372:               </Button>
373:             )}
374:           </div>
375:         </form>
376:       </CardContent>
377:     </Card>
378:   );
379: }

================
File: src/components/plant/PlantReminderSettings.tsx
================
  1: import { useState } from "react";
  2: import { Button } from "@/components/ui/Button";
  3: import { plantService, PlantRecord } from "@/types/database";
  4: import ReminderPreferencesSection from "./ReminderPreferencesSection";
  5: import toast from "react-hot-toast";
  6: 
  7: interface PlantReminderSettingsProps {
  8:   plant: PlantRecord;
  9:   onUpdate: (updatedPlant: PlantRecord) => void;
 10: }
 11: 
 12: const PlantReminderSettings = ({
 13:   plant,
 14:   onUpdate,
 15: }: PlantReminderSettingsProps) => {
 16:   const [preferences, setPreferences] = useState(
 17:     plant.reminderPreferences || {
 18:       watering: true,
 19:       fertilizing: true,
 20:       observation: true,
 21:       lighting: true,
 22:       pruning: true,
 23:     }
 24:   );
 25:   const [isLoading, setIsLoading] = useState(false);
 26:   const [saveStatus, setSaveStatus] = useState<"idle" | "success" | "error">(
 27:     "idle"
 28:   );
 29: 
 30:   const handleSave = async () => {
 31:     try {
 32:       setIsLoading(true);
 33:       setSaveStatus("idle");
 34: 
 35:       await plantService.updatePlant(plant.id, {
 36:         reminderPreferences: preferences,
 37:         updatedAt: new Date(),
 38:       });
 39: 
 40:       const updatedPlant = {
 41:         ...plant,
 42:         reminderPreferences: preferences,
 43:       };
 44: 
 45:       onUpdate(updatedPlant);
 46:       setSaveStatus("success");
 47:       toast.success("Reminder preferences updated!");
 48: 
 49: 
 50:       setTimeout(() => setSaveStatus("idle"), 3000);
 51:     } catch (error) {
 52:       console.error("Failed to update reminder preferences:", error);
 53:       setSaveStatus("error");
 54:       toast.error("Failed to update preferences");
 55: 
 56: 
 57:       setTimeout(() => setSaveStatus("idle"), 5000);
 58:     } finally {
 59:       setIsLoading(false);
 60:     }
 61:   };
 62: 
 63: 
 64:   const hasChanges =
 65:     JSON.stringify(preferences) !==
 66:     JSON.stringify(
 67:       plant.reminderPreferences || {
 68:         watering: true,
 69:         fertilizing: true,
 70:         observation: true,
 71:         lighting: true,
 72:         pruning: true,
 73:       }
 74:     );
 75: 
 76:   const getButtonContent = () => {
 77:     if (isLoading) {
 78:       return (
 79:         <div className="flex items-center gap-2">
 80:           <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
 81:           Saving...
 82:         </div>
 83:       );
 84:     }
 85: 
 86:     if (saveStatus === "success") {
 87:       return (
 88:         <div className="flex items-center gap-2">
 89:           <span className="text-green-600">✓</span>
 90:           Saved Successfully!
 91:         </div>
 92:       );
 93:     }
 94: 
 95:     if (saveStatus === "error") {
 96:       return (
 97:         <div className="flex items-center gap-2">
 98:           <span className="text-red-600">✗</span>
 99:           Save Failed - Retry
100:         </div>
101:       );
102:     }
103: 
104:     return hasChanges ? "Save Changes" : "No Changes";
105:   };
106: 
107:   const getButtonVariant = () => {
108:     if (saveStatus === "success") return "outline";
109:     if (saveStatus === "error") return "destructive";
110:     return hasChanges ? "primary" : "outline";
111:   };
112: 
113:   return (
114:     <div className="space-y-6">
115:       <ReminderPreferencesSection
116:         preferences={preferences}
117:         onChange={setPreferences}
118:       />
119: 
120:       {}
121:       {saveStatus !== "idle" && (
122:         <div
123:           className={`p-3 rounded-lg text-sm font-medium ${
124:             saveStatus === "success"
125:               ? "bg-green-50 text-green-800 border border-green-200"
126:               : "bg-red-50 text-red-800 border border-red-200"
127:           }`}
128:         >
129:           {saveStatus === "success" && (
130:             <div className="flex items-center gap-2">
131:               <span className="text-green-600">✓</span>
132:               Your reminder preferences have been updated successfully!
133:             </div>
134:           )}
135:           {saveStatus === "error" && (
136:             <div className="flex items-center gap-2">
137:               <span className="text-red-600">⚠️</span>
138:               Failed to save your preferences. Please try again.
139:             </div>
140:           )}
141:         </div>
142:       )}
143: 
144:       <div className="flex justify-end">
145:         <Button
146:           onClick={handleSave}
147:           disabled={isLoading || !hasChanges}
148:           variant={getButtonVariant()}
149: 
150: 
151: 
152: 
153: 
154: 
155: 
156: 
157: 
158:         >
159:           {getButtonContent()}
160:         </Button>
161:       </div>
162: 
163:       {}
164:       {hasChanges && saveStatus === "idle" && (
165:         <div className="text-xs text-amber-600 bg-amber-50 border border-amber-200 rounded p-2 text-center">
166:           <span className="mr-1">⚠️</span>
167:           You have unsaved changes
168:         </div>
169:       )}
170:     </div>
171:   );
172: };
173: 
174: export default PlantReminderSettings;

================
File: src/components/plant/SoilMixtureSelector.tsx
================
  1: import { useState } from "react";
  2: import { PlantCategory } from "@/types";
  3: import { Button } from "@/components/ui/Button";
  4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  5: 
  6: interface SoilComponent {
  7:   name: string;
  8:   percentage: number;
  9: }
 10: 
 11: interface SoilMixture {
 12:   id: string;
 13:   name: string;
 14:   description: string;
 15:   category?: PlantCategory;
 16:   components: SoilComponent[];
 17:   amendments?: { name: string; amount: string }[];
 18:   suitable: string[];
 19:   notes?: string[];
 20: }
 21: 
 22: interface SoilMixtureSelectorProps {
 23:   selectedMixture?: string;
 24:   onMixtureChange: (mixture: string) => void;
 25:   plantCategory?: PlantCategory;
 26: }
 27: 
 28: const PRESET_MIXTURES: SoilMixture[] = [
 29:   {
 30:     id: "leafy-greens-standard",
 31:     name: "Leafy Greens Mix",
 32:     description:
 33:       "Nutrient-rich blend perfect for arugula, spinach, and lettuce",
 34:     category: "leafy-greens",
 35:     components: [
 36:       { name: "Coco Coir", percentage: 40 },
 37:       { name: "Perlite", percentage: 25 },
 38:       { name: "Vermiculite", percentage: 25 },
 39:       { name: "Worm Castings", percentage: 10 },
 40:     ],
 41:     amendments: [{ name: "Compost", amount: "½–1 cup per cubic foot" }],
 42:     suitable: ["Arugula", "Spinach", "Lettuce", "Kale"],
 43:     notes: ["Retains moisture well", "High in organic matter"],
 44:   },
 45:   {
 46:     id: "root-vegetables-standard",
 47:     name: "Root Vegetables Mix",
 48:     description: "Well-draining mix for carrots, beets, and onions",
 49:     category: "root-vegetables",
 50:     components: [
 51:       { name: "Coco Coir", percentage: 40 },
 52:       { name: "Perlite", percentage: 30 },
 53:       { name: "Vermiculite", percentage: 25 },
 54:       { name: "Worm Castings", percentage: 5 },
 55:     ],
 56:     amendments: [
 57:       { name: "Compost", amount: "2 tbsp per gallon" },
 58:       { name: "Bone Meal", amount: "1 tsp per gallon" },
 59:     ],
 60:     suitable: ["Carrots", "Beets", "Onions", "Radishes"],
 61:     notes: ["Excellent drainage", "Prevents root rot"],
 62:   },
 63:   {
 64:     id: "herbs-standard",
 65:     name: "Mediterranean Herbs Mix",
 66:     description: "Well-draining, lean mix for oregano, thyme, and rosemary",
 67:     category: "herbs",
 68:     components: [
 69:       { name: "Coco Coir", percentage: 30 },
 70:       { name: "Perlite", percentage: 35 },
 71:       { name: "Sand", percentage: 20 },
 72:       { name: "Vermiculite", percentage: 15 },
 73:     ],
 74:     amendments: [{ name: "Lime", amount: "1 tsp per gallon" }],
 75:     suitable: ["Oregano", "Thyme", "Rosemary", "Sage"],
 76:     notes: ["Slightly alkaline", "Fast draining"],
 77:   },
 78:   {
 79:     id: "berries-standard",
 80:     name: "Berry & Fruit Mix",
 81:     description: "Acidic mix designed for strawberries and berry plants",
 82:     category: "berries",
 83:     components: [
 84:       { name: "Peat Moss", percentage: 35 },
 85:       { name: "Coco Coir", percentage: 30 },
 86:       { name: "Perlite", percentage: 20 },
 87:       { name: "Worm Castings", percentage: 15 },
 88:     ],
 89:     amendments: [
 90:       { name: "Sulfur", amount: "½ tsp per gallon (for acidity)" },
 91:       { name: "Fish Emulsion", amount: "1 tbsp per gallon monthly" },
 92:     ],
 93:     suitable: ["Strawberries", "Blueberries", "Raspberries"],
 94:     notes: ["pH 5.5-6.5", "High organic matter"],
 95:   },
 96:   {
 97:     id: "fruiting-plants-standard",
 98:     name: "Fruiting Plants Mix",
 99:     description: "Heavy-feeder mix for tomatoes, peppers, and eggplants",
100:     category: "fruiting-plants",
101:     components: [
102:       { name: "Coco Coir", percentage: 35 },
103:       { name: "Perlite", percentage: 20 },
104:       { name: "Vermiculite", percentage: 20 },
105:       { name: "Compost", percentage: 15 },
106:       { name: "Worm Castings", percentage: 5 },
107:       { name: "Biochar", percentage: 5 },
108:     ],
109:     amendments: [
110:       { name: "Gypsum", amount: "½ cup per 15-gal bag" },
111:       { name: "Bone Meal", amount: "2-3 tbsp per container" },
112:       { name: "Kelp Meal", amount: "2 tbsp per container" },
113:     ],
114:     suitable: ["Tomatoes", "Peppers", "Peas", "Beans"],
115:     notes: ["Heavy feeder support", "Calcium-rich for fruit development"],
116:   },
117:   {
118:     id: "universal-standard",
119:     name: "Universal Garden Mix",
120:     description: "Balanced all-purpose mix suitable for most plants",
121:     components: [
122:       { name: "Coco Coir", percentage: 40 },
123:       { name: "Perlite", percentage: 25 },
124:       { name: "Vermiculite", percentage: 20 },
125:       { name: "Compost", percentage: 10 },
126:       { name: "Worm Castings", percentage: 5 },
127:     ],
128:     amendments: [{ name: "Bone Meal", amount: "1 tbsp per gallon" }],
129:     suitable: ["Most vegetables", "Herbs", "Annual flowers"],
130:     notes: ["Good drainage", "Balanced nutrition", "Easy to work with"],
131:   },
132: ];
133: 
134: export const SoilMixtureSelector = ({
135:   selectedMixture,
136:   onMixtureChange,
137:   plantCategory,
138: }: SoilMixtureSelectorProps) => {
139:   const [showCustom, setShowCustom] = useState(false);
140:   const [customMixture, setCustomMixture] = useState("");
141: 
142:   const getRelevantMixtures = () => {
143:     if (!plantCategory) {
144:       return PRESET_MIXTURES;
145:     }
146: 
147:     const categoryMixtures = PRESET_MIXTURES.filter(
148:       (mix) => mix.category === plantCategory
149:     );
150:     const otherMixtures = PRESET_MIXTURES.filter(
151:       (mix) => mix.category !== plantCategory
152:     );
153: 
154:     return [...categoryMixtures, ...otherMixtures];
155:   };
156: 
157:   const formatComponents = (components: SoilComponent[]) => {
158:     return components
159:       .map((comp) => `${comp.percentage}% ${comp.name}`)
160:       .join(", ");
161:   };
162: 
163:   const handlePresetSelect = (mixtureId: string) => {
164:     const mixture = PRESET_MIXTURES.find((m) => m.id === mixtureId);
165:     if (mixture) {
166:       const mixtureText = `${mixture.name}: ${formatComponents(
167:         mixture.components
168:       )}`;
169:       onMixtureChange(mixtureText);
170:       setShowCustom(false);
171:     }
172:   };
173: 
174:   const handleCustomSubmit = () => {
175:     if (customMixture.trim()) {
176:       onMixtureChange(customMixture);
177:       setShowCustom(false);
178:     }
179:   };
180: 
181:   return (
182:     <div className="space-y-4">
183:       <div>
184:         <label className="block text-sm font-medium text-foreground mb-2">
185:           Soil Mixture *
186:         </label>
187:         <p className="text-xs text-muted-foreground mb-3">
188:           Choose a preset mixture or create your own custom blend
189:         </p>
190:       </div>
191: 
192:       {!showCustom ? (
193:         <>
194:           {}
195:           <div className="grid gap-3">
196:             {getRelevantMixtures().map((mixture) => (
197:               <div
198:                 key={mixture.id}
199:                 data-testid={`mixture-card-${mixture.id}`}
200:                 className={`cursor-pointer transition-all border rounded-lg shadow-sm ${
201:                   selectedMixture?.includes(mixture.name)
202:                     ? "ring-4 ring-ring bg-muted border-ring shadow-lg" // ✅ FIXED: Using semantic colors
203:                     : "bg-card border-border hover:bg-muted/50 hover:shadow-md"
204:                 }`}
205:                 onClick={() => handlePresetSelect(mixture.id)}
206:               >
207:                 <div className="p-4">
208:                   <div className="flex items-start justify-between">
209:                     <div className="flex-1">
210:                       <div className="font-medium text-foreground mb-1 flex items-center">
211:                         {selectedMixture?.includes(mixture.name) && (
212:                           <span className="mr-2 text-primary text-lg">✓</span>
213:                         )}
214:                         {mixture.name}
215:                         {mixture.category === plantCategory && (
216:                           <span className="ml-2 text-xs bg-primary/10 text-primary px-2 py-1 rounded-full">
217:                             Recommended
218:                           </span>
219:                         )}
220:                       </div>
221:                       <p className="text-sm text-muted-foreground mb-2">
222:                         {mixture.description}
223:                       </p>
224:                       <div className="text-xs text-muted-foreground space-y-1">
225:                         <div>
226:                           <strong>Components:</strong>{" "}
227:                           {formatComponents(mixture.components)}
228:                         </div>
229:                         {mixture.amendments && (
230:                           <div>
231:                             <strong>Amendments:</strong>{" "}
232:                             {mixture.amendments
233:                               .map((a) => `${a.name} (${a.amount})`)
234:                               .join(", ")}
235:                           </div>
236:                         )}
237:                         <div>
238:                           <strong>Best for:</strong>{" "}
239:                           {mixture.suitable.join(", ")}
240:                         </div>
241:                       </div>
242:                     </div>
243:                   </div>
244:                 </div>
245:               </div>
246:             ))}
247:           </div>
248: 
249:           {}
250:           <Button
251:             type="button"
252:             variant="primary"
253:             onClick={() => setShowCustom(true)}
254:             className="w-full"
255:           >
256:             🧪 Create Custom Mixture
257:           </Button>
258:         </>
259:       ) : (
260: 
261:         <Card>
262:           <CardHeader>
263:             <CardTitle className="text-lg">Custom Soil Mixture</CardTitle>
264:             <p className="text-sm text-muted-foreground">
265:               Describe your custom soil mixture with components and percentages
266:             </p>
267:           </CardHeader>
268:           <CardContent className="space-y-4">
269:             <div>
270:               <label
271:                 htmlFor="custom-mixture"
272:                 className="block text-sm font-medium text-foreground mb-2"
273:               >
274:                 Mixture Description
275:               </label>
276:               <textarea
277:                 id="custom-mixture"
278:                 value={customMixture}
279:                 onChange={(e) => setCustomMixture(e.target.value)}
280:                 placeholder="e.g., 40% coco coir, 30% perlite, 25% vermiculite, 5% compost"
281:                 rows={4}
282:                 className="w-full p-3 bg-input text-input-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring placeholder:text-muted-foreground"
283:               />
284:             </div>
285: 
286:             <div className="flex gap-3">
287:               <Button
288:                 type="button"
289:                 variant="primary"
290:                 onClick={handleCustomSubmit}
291:                 disabled={!customMixture.trim()}
292:                 className="flex-1"
293:               >
294:                 Save Custom Mixture
295:               </Button>
296:               <Button
297:                 type="button"
298:                 variant="outline"
299:                 onClick={() => {
300:                   setShowCustom(false);
301:                   setCustomMixture("");
302:                 }}
303:                 className="flex-1"
304:               >
305:                 Cancel
306:               </Button>
307:             </div>
308:           </CardContent>
309:         </Card>
310:       )}
311: 
312:       {}
313:       {selectedMixture && !showCustom && (
314:         <div className="p-3 bg-muted border border-border rounded-md">
315:           {" "}
316:           {}
317:           <div className="text-sm font-medium text-foreground mb-1">
318:             {" "}
319:             {}
320:             Selected Mixture:
321:           </div>
322:           <div className="text-sm text-muted-foreground">
323:             {selectedMixture}
324:           </div>{" "}
325:           {}
326:         </div>
327:       )}
328:     </div>
329:   );
330: };
331: 
332: export default SoilMixtureSelector;

================
File: src/components/Navigation.tsx
================
 1: import React from "react";
 2: import { Link, useLocation } from "react-router-dom";
 3: import { cn } from "@/utils/cn";
 4: import { DarkModeToggle } from "@/components/ui/DarkModeToggle";
 5: 
 6: const Navigation: React.FC = () => {
 7:   const location = useLocation();
 8: 
 9:   const navItems = [
10:     { path: "/", label: "Dashboard", icon: "🏠" },
11:     { path: "/plants", label: "Plants", icon: "🌱" },
12:     { path: "/add-plant", label: "Add Plant", icon: "➕" },
13:   ];
14: 
15:   return (
16:     <nav className="fixed bottom-0 left-0 right-0 bg-card dark:bg-background border-t border-border z-50">
17:       <div className="flex justify-around items-center h-16 px-4">
18:         {navItems.map((item) => (
19:           <Link
20:             key={item.path}
21:             to={item.path}
22:             className={cn(
23:               "flex flex-col items-center justify-center min-w-touch h-full px-2",
24:               "text-xs font-medium transition-colors",
25:               location.pathname === item.path
26:                 ? "text-garden-600 dark:text-emerald-500 bg-garden-50 dark:bg-card"
27:                 : "text-muted-foreground dark:text-muted-foreground hover:text-garden-500 dark:hover:text-emerald-500"
28:             )}
29:           >
30:             <span className="text-xl mb-1">{item.icon}</span>
31:             <span className="text-xs">{item.label}</span>
32:           </Link>
33:         ))}
34: 
35:         {}
36:         <div className="flex flex-col items-center justify-center h-full px-2">
37:           <DarkModeToggle size="sm" />
38:           <span className="text-xs text-muted-foreground dark:text-muted-foreground mt-1">
39:             Theme
40:           </span>
41:         </div>
42:       </div>
43:     </nav>
44:   );
45: };
46: 
47: export default Navigation;

================
File: src/pages/care/LogCare.tsx
================
 1: import React from "react";
 2: import { CareLogForm } from "@/pages/care/CareLogForm";
 3: import { useNavigate, useSearchParams } from "react-router-dom";
 4: 
 5: const LogCare: React.FC = () => {
 6:   const navigate = useNavigate();
 7:   const [searchParams] = useSearchParams();
 8:   const preSelectedPlantId = searchParams.get("plantId");
 9: 
10:   const handleSuccess = () => {
11:     navigate("/");
12:   };
13: 
14:   const handleCancel = () => {
15:     navigate(-1);
16:   };
17: 
18:   return (
19:     <div className="p-4">
20:       <h1 className="text-2xl font-bold text-foreground mb-6 text-center">
21:         Log Care Activity
22:       </h1>
23:       <CareLogForm
24:         onSuccess={handleSuccess}
25:         onCancel={handleCancel}
26:         preselectedPlantId={preSelectedPlantId || undefined}
27:       />
28:     </div>
29:   );
30: };
31: 
32: export default LogCare;

================
File: src/pages/care/QuickCompletionButtons.tsx
================
 1: import { useState, useEffect } from "react";
 2: import { Button } from "@/components/ui/Button";
 3: import {
 4:   SmartDefaultsService,
 5:   QuickCompletionValues,
 6: } from "@/services/smartDefaultsService";
 7: import { PlantRecord } from "@/types/database";
 8: 
 9: interface QuickCompletionButtonsProps {
10:   plant: PlantRecord;
11:   activityType: "water" | "fertilize";
12:   onQuickComplete: (values: QuickCompletionValues) => void;
13:   className?: string;
14: }
15: 
16: const QuickCompletionButtons = ({
17:   plant,
18:   activityType,
19:   onQuickComplete,
20:   className = "",
21: }: QuickCompletionButtonsProps) => {
22:   const [options, setOptions] = useState<Array<{
23:     label: string;
24:     values: QuickCompletionValues;
25:   }> | null>(null);
26:   const [isLoading, setIsLoading] = useState(false);
27: 
28:   useEffect(() => {
29:     const loadOptions = async () => {
30:       try {
31:         setIsLoading(true);
32:         const completionOptions =
33:           await SmartDefaultsService.getQuickCompletionOptions(
34:             plant,
35:             activityType
36:           );
37:         setOptions(completionOptions);
38:       } catch (error) {
39:         console.error("Error loading quick completion options:", error);
40:         setOptions(null);
41:       } finally {
42:         setIsLoading(false);
43:       }
44:     };
45: 
46:     if (plant) {
47:       loadOptions();
48:     }
49:   }, [plant, activityType]);
50: 
51:   if (isLoading) {
52:     return (
53:       <div className={`flex gap-2 ${className}`}>
54:         <div className="animate-pulse bg-gray-200 rounded-full h-8 w-20"></div>
55:         <div className="animate-pulse bg-gray-200 rounded-full h-8 w-20"></div>
56:       </div>
57:     );
58:   }
59: 
60:   if (!options || options.length === 0) {
61:     return null;
62:   }
63: 
64:   return (
65:     <div className={`flex gap-2 flex-wrap ${className}`}>
66:       <span className="text-xs text-muted-foreground self-center">
67:         Quick actions:
68:       </span>
69:       {options.map((option, index) => (
70:         <Button
71:           key={index}
72:           type="button"
73:           variant="outline"
74:           size="sm"
75:           onClick={() => onQuickComplete(option.values)}
76:         >
77:           {option.label}
78:         </Button>
79:       ))}
80:     </div>
81:   );
82: };
83: 
84: export default QuickCompletionButtons;

================
File: src/services/smartDefaultsService.ts
================
  1: import {
  2:   varietyService,
  3:   careService,
  4:   PlantRecord,
  5:   VarietyRecord,
  6: } from "@/types/database";
  7: import { GrowthStage, PlantCategory, CareActivityType } from "@/types/core";
  8: import { calculateCurrentStage } from "@/utils/growthStage";
  9: 
 10: export interface QuickCompleteOption {
 11:   label: string;
 12:   values: QuickCompletionValues;
 13: }
 14: 
 15: export interface QuickCompletionValues {
 16:   waterValue?: number;
 17:   waterUnit?: "oz" | "ml" | "cups" | "liters" | "gallons";
 18:   product?: string;
 19:   dilution?: string;
 20:   amount?: string;
 21:   notes?: string;
 22: }
 23: 
 24: export interface SmartDefaults {
 25:   watering?: WateringDefaults;
 26:   fertilizer?: FertilizerDefaults;
 27: }
 28: 
 29: interface WateringDefaults {
 30:   suggestedAmount: number;
 31:   unit: "oz" | "ml" | "cups" | "liters" | "gallons";
 32:   confidence: "high" | "medium" | "low";
 33:   source: "protocol" | "category" | "universal";
 34:   reasoning: string;
 35: }
 36: 
 37: interface FertilizerDefaults {
 38:   products: Array<{
 39:     name: string;
 40:     dilution: string;
 41:     amount: string;
 42:     method?: ApplicationMethod;
 43:     confidence: "high" | "medium" | "low";
 44:   }>;
 45:   source: "protocol" | "category" | "universal";
 46:   reasoning: string;
 47: }
 48: 
 49: type ApplicationMethod = "soil-drench" | "foliar-spray" | "side-dress";
 50: 
 51: interface VolumeAmount {
 52:   amount: number;
 53:   unit: "oz" | "ml" | "cups" | "liters" | "gallons";
 54: }
 55: 
 56: export class SmartDefaultsService {
 57:   static async getDefaultsForPlant(
 58:     plant: PlantRecord
 59:   ): Promise<SmartDefaults | null> {
 60:     try {
 61:       const variety = await varietyService.getVariety(plant.varietyId);
 62:       if (!variety) return null;
 63: 
 64:       const currentStage = calculateCurrentStage(
 65:         plant.plantedDate,
 66:         variety.growthTimeline
 67:       );
 68: 
 69:       const watering = this.getWateringDefaults(variety, currentStage);
 70:       const fertilizer = this.getFertilizerDefaults(variety, currentStage);
 71: 
 72:       return {
 73:         watering,
 74:         fertilizer,
 75:       };
 76:     } catch (error) {
 77:       console.error("Failed to get defaults for plant:", error);
 78:       return null;
 79:     }
 80:   }
 81: 
 82:   private static getWateringDefaults(
 83:     variety: VarietyRecord,
 84:     currentStage: GrowthStage
 85:   ): WateringDefaults {
 86:     const stageProtocol = variety.protocols?.watering?.[currentStage] as {
 87:       volume?: { amount?: number | string; unit?: string };
 88:     };
 89: 
 90:     if (stageProtocol?.volume?.amount) {
 91:       const parsed = this.parseWaterAmount(stageProtocol.volume.amount);
 92:       if (parsed && stageProtocol.volume.unit) {
 93:         return {
 94:           suggestedAmount: parsed.amount,
 95:           unit: stageProtocol.volume.unit as
 96:             | "oz"
 97:             | "ml"
 98:             | "cups"
 99:             | "liters"
100:             | "gallons",
101:           confidence: "high",
102:           source: "protocol",
103:           reasoning: `Based on ${variety.name} protocol for ${currentStage} stage`,
104:         };
105:       }
106:     }
107: 
108:     const categoryDefaults = this.getCategoryWateringDefaults(
109:       variety.category,
110:       currentStage
111:     );
112:     if (categoryDefaults) {
113:       return {
114:         suggestedAmount: categoryDefaults.amount,
115:         unit: categoryDefaults.unit,
116:         confidence: "medium",
117:         source: "category",
118:         reasoning: `Based on ${variety.category} category guidelines for ${currentStage} stage`,
119:       };
120:     }
121: 
122:     return {
123:       suggestedAmount: 16,
124:       unit: "oz",
125:       confidence: "low",
126:       source: "universal",
127:       reasoning: "Using universal default amount",
128:     };
129:   }
130: 
131:   private static getFertilizerDefaults(
132:     variety: VarietyRecord,
133:     currentStage: GrowthStage
134:   ): FertilizerDefaults | undefined {
135:     const stageProtocol = variety.protocols?.fertilization?.[currentStage] as {
136:       fertilizer?: { product?: string };
137:       application?: { dilution?: string; amount?: string; method?: string };
138:     };
139: 
140:     if (stageProtocol?.fertilizer?.product && stageProtocol?.application) {
141:       return {
142:         products: [
143:           {
144:             name: stageProtocol.fertilizer.product,
145:             dilution: stageProtocol.application.dilution || "As directed",
146:             amount: stageProtocol.application.amount || "Apply to runoff",
147:             method:
148:               (stageProtocol.application.method as ApplicationMethod) ||
149:               "soil-drench",
150:             confidence: "high",
151:           },
152:         ],
153:         source: "protocol",
154:         reasoning: `Based on ${variety.name} fertilization protocol for ${currentStage} stage`,
155:       };
156:     }
157: 
158:     const categoryDefaults = this.getCategoryFertilizerDefaults(
159:       variety.category,
160:       currentStage
161:     );
162:     if (categoryDefaults) {
163:       return categoryDefaults;
164:     }
165: 
166:     return undefined;
167:   }
168: 
169:   private static getCategoryWateringDefaults(
170:     category: PlantCategory,
171:     stage: GrowthStage
172:   ): VolumeAmount | undefined {
173:     const categoryWateringGuides: Record<
174:       PlantCategory,
175:       Record<GrowthStage, VolumeAmount>
176:     > = {
177:       "leafy-greens": {
178:         germination: { amount: 8, unit: "oz" },
179:         seedling: { amount: 12, unit: "oz" },
180:         vegetative: { amount: 16, unit: "oz" },
181:         flowering: { amount: 16, unit: "oz" },
182:         fruiting: { amount: 16, unit: "oz" },
183:         maturation: { amount: 16, unit: "oz" },
184:         harvest: { amount: 16, unit: "oz" },
185:         "ongoing-production": { amount: 16, unit: "oz" },
186:       },
187:       "fruiting-plants": {
188:         germination: { amount: 12, unit: "oz" },
189:         seedling: { amount: 16, unit: "oz" },
190:         vegetative: { amount: 24, unit: "oz" },
191:         flowering: { amount: 28, unit: "oz" },
192:         fruiting: { amount: 32, unit: "oz" },
193:         maturation: { amount: 32, unit: "oz" },
194:         harvest: { amount: 32, unit: "oz" },
195:         "ongoing-production": { amount: 32, unit: "oz" },
196:       },
197:       "root-vegetables": {
198:         germination: { amount: 8, unit: "oz" },
199:         seedling: { amount: 12, unit: "oz" },
200:         vegetative: { amount: 20, unit: "oz" },
201:         flowering: { amount: 20, unit: "oz" },
202:         fruiting: { amount: 20, unit: "oz" },
203:         maturation: { amount: 20, unit: "oz" },
204:         harvest: { amount: 20, unit: "oz" },
205:         "ongoing-production": { amount: 20, unit: "oz" },
206:       },
207:       herbs: {
208:         germination: { amount: 6, unit: "oz" },
209:         seedling: { amount: 8, unit: "oz" },
210:         vegetative: { amount: 12, unit: "oz" },
211:         flowering: { amount: 12, unit: "oz" },
212:         fruiting: { amount: 12, unit: "oz" },
213:         maturation: { amount: 12, unit: "oz" },
214:         harvest: { amount: 12, unit: "oz" },
215:         "ongoing-production": { amount: 12, unit: "oz" },
216:       },
217:       berries: {
218:         germination: { amount: 10, unit: "oz" },
219:         seedling: { amount: 14, unit: "oz" },
220:         vegetative: { amount: 20, unit: "oz" },
221:         flowering: { amount: 24, unit: "oz" },
222:         fruiting: { amount: 28, unit: "oz" },
223:         maturation: { amount: 28, unit: "oz" },
224:         harvest: { amount: 28, unit: "oz" },
225:         "ongoing-production": { amount: 28, unit: "oz" },
226:       },
227:     };
228: 
229:     return categoryWateringGuides[category]?.[stage];
230:   }
231: 
232:   private static getCategoryFertilizerDefaults(
233:     category: PlantCategory,
234:     stage: GrowthStage
235:   ): FertilizerDefaults | undefined {
236:     const categoryFertilizerGuides: Record<
237:       PlantCategory,
238:       Record<string, { product: string; dilution: string; amount: string }>
239:     > = {
240:       "leafy-greens": {
241:         general: {
242:           product: "Balanced liquid fertilizer",
243:           dilution: "Half strength",
244:           amount: "Apply every 2 weeks",
245:         },
246:       },
247:       "fruiting-plants": {
248:         vegetative: {
249:           product: "High nitrogen fertilizer",
250:           dilution: "Full strength",
251:           amount: "Apply weekly",
252:         },
253:         flowering: {
254:           product: "Bloom booster",
255:           dilution: "Full strength",
256:           amount: "Apply bi-weekly",
257:         },
258:         fruiting: {
259:           product: "Potassium-rich fertilizer",
260:           dilution: "Full strength",
261:           amount: "Apply weekly",
262:         },
263:       },
264:       "root-vegetables": {
265:         general: {
266:           product: "Root vegetable fertilizer",
267:           dilution: "Half strength",
268:           amount: "Apply monthly",
269:         },
270:       },
271:       herbs: {
272:         general: {
273:           product: "Light liquid fertilizer",
274:           dilution: "Quarter strength",
275:           amount: "Apply monthly",
276:         },
277:       },
278:       berries: {
279:         general: {
280:           product: "Berry fertilizer",
281:           dilution: "Full strength",
282:           amount: "Apply bi-weekly",
283:         },
284:       },
285:     };
286: 
287:     const stageKey = ["flowering", "fruiting"].includes(stage)
288:       ? stage
289:       : "general";
290:     const defaults = categoryFertilizerGuides[category]?.[stageKey];
291: 
292:     if (defaults) {
293:       return {
294:         products: [
295:           {
296:             name: defaults.product,
297:             dilution: defaults.dilution,
298:             amount: defaults.amount,
299:             confidence: "medium",
300:           },
301:         ],
302:         source: "category",
303:         reasoning: `General ${category} fertilization guidelines`,
304:       };
305:     }
306: 
307:     return undefined;
308:   }
309: 
310:   private static parseWaterAmount(
311:     amount: string | number
312:   ): { amount: number } | null {
313:     if (typeof amount === "number") {
314:       return { amount };
315:     }
316: 
317:     if (typeof amount === "string") {
318:       const rangeMatch = amount.match(/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)/);
319:       if (rangeMatch) {
320:         const min = parseFloat(rangeMatch[1]);
321:         const max = parseFloat(rangeMatch[2]);
322:         return { amount: Math.round((min + max) / 2) };
323:       }
324: 
325:       const singleMatch = amount.match(/(\d+(?:\.\d+)?)/);
326:       if (singleMatch) {
327:         return { amount: parseFloat(singleMatch[1]) };
328:       }
329:     }
330: 
331:     return null;
332:   }
333: 
334:   static async getQuickCompletionOptions(
335:     plant: PlantRecord,
336:     taskType: CareActivityType,
337:     isForDashboard = false
338:   ): Promise<QuickCompleteOption[] | null> {
339:     try {
340:       const variety = await varietyService.getVariety(plant.varietyId);
341:       if (!variety) return null;
342: 
343:       const currentStage = calculateCurrentStage(
344:         plant.plantedDate,
345:         variety.growthTimeline
346:       );
347: 
348:       switch (taskType) {
349:         case "water":
350:           return this.getWateringQuickOptions(
351:             plant,
352:             variety,
353:             currentStage,
354:             isForDashboard
355:           );
356:         case "fertilize":
357:           return this.getFertilizingQuickOptions(variety, currentStage);
358:         case "observe":
359:           return [
360:             {
361:               label: "Quick: Health Check",
362:               values: { notes: "Quick health observation" },
363:             },
364:           ];
365:         default:
366:           return null;
367:       }
368:     } catch (error) {
369:       console.error("Failed to get quick completion options:", error);
370:       return null;
371:     }
372:   }
373: 
374:   private static async getWateringQuickOptions(
375:     plant: PlantRecord,
376:     variety: VarietyRecord,
377:     currentStage: GrowthStage,
378:     isForDashboard = false
379:   ): Promise<QuickCompleteOption[]> {
380:     const options: QuickCompleteOption[] = [];
381: 
382:     const wateringDefaults = this.getWateringDefaults(variety, currentStage);
383: 
384:     if (wateringDefaults) {
385: 
386:       options.push({
387:         label: `Quick: ${wateringDefaults.suggestedAmount}${wateringDefaults.unit}`,
388:         values: {
389:           waterValue: wateringDefaults.suggestedAmount,
390:           waterUnit: wateringDefaults.unit,
391:           notes: `${
392:             wateringDefaults.source === "protocol" ? "Protocol" : "Category"
393:           } suggestion for ${currentStage} stage`,
394:         },
395:       });
396: 
397: 
398:       if (!isForDashboard) {
399:         const lightAmount = Math.round(wateringDefaults.suggestedAmount * 0.75);
400:         const heavyAmount = Math.round(wateringDefaults.suggestedAmount * 1.25);
401: 
402:         if (
403:           lightAmount !== wateringDefaults.suggestedAmount &&
404:           lightAmount > 0
405:         ) {
406:           options.push({
407:             label: `Light: ${lightAmount}${wateringDefaults.unit}`,
408:             values: {
409:               waterValue: lightAmount,
410:               waterUnit: wateringDefaults.unit,
411:               notes: `Light watering for ${currentStage} stage`,
412:             },
413:           });
414:         }
415: 
416:         if (heavyAmount !== wateringDefaults.suggestedAmount) {
417:           options.push({
418:             label: `Heavy: ${heavyAmount}${wateringDefaults.unit}`,
419:             values: {
420:               waterValue: heavyAmount,
421:               waterUnit: wateringDefaults.unit,
422:               notes: `Deep watering for ${currentStage} stage`,
423:             },
424:           });
425:         }
426:       }
427:     }
428: 
429: 
430:     if (!isForDashboard) {
431:       try {
432:         const recentWatering = await careService.getLastActivityByType(
433:           plant.id,
434:           "water"
435:         );
436:         if (recentWatering && recentWatering.details.type === "water") {
437:           const lastAmount = recentWatering.details.amount;
438:           if (lastAmount && lastAmount.value > 0) {
439:             const isDifferent = !options.some(
440:               (opt) =>
441:                 opt.values.waterValue === lastAmount.value &&
442:                 opt.values.waterUnit === lastAmount.unit
443:             );
444: 
445:             if (isDifferent) {
446:               options.push({
447:                 label: `Repeat: ${lastAmount.value}${lastAmount.unit}`,
448:                 values: {
449:                   waterValue: lastAmount.value,
450:                   waterUnit: lastAmount.unit,
451:                   notes: `Based on your last watering`,
452:                 },
453:               });
454:             }
455:           }
456:         }
457:       } catch (error) {
458:         console.error("Error getting watering history:", error);
459:       }
460:     }
461: 
462:     return options.slice(0, isForDashboard ? 1 : 3);
463:   }
464: 
465:   private static async getFertilizingQuickOptions(
466:     variety: VarietyRecord,
467:     currentStage: GrowthStage
468:   ): Promise<QuickCompleteOption[]> {
469:     const options: QuickCompleteOption[] = [];
470: 
471:     const fertilizerDefaults = this.getFertilizerDefaults(
472:       variety,
473:       currentStage
474:     );
475: 
476:     if (fertilizerDefaults && fertilizerDefaults.products.length > 0) {
477:       fertilizerDefaults.products.slice(0, 2).forEach((product, index) => {
478:         const label = index === 0 ? `Quick: ${product.name}` : product.name;
479:         options.push({
480:           label,
481:           values: {
482:             product: product.name,
483:             dilution: product.dilution,
484:             amount: product.amount,
485:             notes: `${
486:               fertilizerDefaults.source === "protocol" ? "Protocol" : "Category"
487:             } suggestion for ${currentStage} stage`,
488:           },
489:         });
490:       });
491:     }
492: 
493:     return options;
494:   }
495: }

================
File: src/App.css
================
 1: #root {
 2:   max-width: 1280px;
 3:   margin: 0 auto;
 4:   padding: 2rem;
 5:   text-align: center;
 6:   @apply bg-background;
 7: }
 8: 
 9: .logo {
10:   height: 6em;
11:   padding: 1.5em;
12:   will-change: filter;
13:   transition: filter 300ms;
14: }
15: .logo:hover {
16:   filter: drop-shadow(0 0 2em #646cffaa);
17: }
18: .logo.react:hover {
19:   filter: drop-shadow(0 0 2em #61dafbaa);
20: }
21: 
22: @keyframes logo-spin {
23:   from {
24:     transform: rotate(0deg);
25:   }
26:   to {
27:     transform: rotate(360deg);
28:   }
29: }
30: 
31: @media (prefers-reduced-motion: no-preference) {
32:   a:nth-of-type(2) .logo {
33:     animation: logo-spin infinite 20s linear;
34:   }
35: }
36: 
37: .card {
38:   padding: 2em;
39: }
40: 
41: .read-the-docs {
42:   color: #888;
43: }

================
File: .gitignore
================
 1: # Logs
 2: logs
 3: *.log
 4: npm-debug.log*
 5: yarn-debug.log*
 6: yarn-error.log*
 7: pnpm-debug.log*
 8: lerna-debug.log*
 9: 
10: test-results/
11: 
12: # Cache directories
13: .cache/
14: .parcel-cache/
15: 
16: node_modules
17: dist
18: dist-ssr
19: *.local
20: 
21: # Editor directories and files
22: .vscode/*
23: !.vscode/extensions.json
24: .idea
25: .DS_Store
26: *.suo
27: *.ntvs*
28: *.njsproj
29: *.sln
30: *.sw?
31: # Testing
32: coverage/.DS_Store
33: .DS_Store?
34: **/.DS_Store
35: # macOS
36: .DS_Store
37: .DS_Store?
38: ._*
39: .Spotlight-V100
40: .Trashes
41: ehthumbs.db
42: Thumbs.db
43: 
44: # IDE
45: .vscode/
46: .idea/
47: 
48: # Environment
49: .env.local
50: .env.development.local
51: .env.test.local
52: .env.production.local
53: 
54: # Temporary files
55: *.tmp
56: *.temp

================
File: tsconfig.json
================
 1: {
 2:   "compilerOptions": {
 3:     "target": "ES2020",
 4:     "useDefineForClassFields": true,
 5:     "lib": ["ES2020", "DOM", "DOM.Iterable"],
 6:     "module": "ESNext",
 7:     "skipLibCheck": true,
 8:     "moduleResolution": "bundler",
 9:     "allowImportingTsExtensions": true,
10:     "resolveJsonModule": true,
11:     "isolatedModules": true,
12:     "noEmit": true,
13:     "jsx": "react-jsx",
14:     "strict": true,
15:     "noUnusedLocals": true,
16:     "noUnusedParameters": true,
17:     "noFallthroughCasesInSwitch": true,
18:     "baseUrl": ".",
19:     "paths": {
20:       "@/*": ["./src/*"],
21:       "@/components/*": ["./src/components/*"],
22:       "@/pages/*": ["./src/pages/*"],
23:       "@/hooks/*": ["./src/hooks/*"],
24:       "@/services/*": ["./src/services/*"],
25:       "@/types/*": ["./src/types/*"],
26:       "@/utils/*": ["./src/utils/*"]
27:     },
28:     "types": ["node", "jest", "@testing-library/jest-dom"]
29:   },
30:   "include": ["src", "vite.config.ts"],
31:   "setupFilesAfterEnv": ["<rootDir>/support/setupTests.js"]
32: }

================
File: src/components/plant/CareHistory.tsx
================
  1: import React, { useState } from "react";
  2: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  3: import { Button } from "@/components/ui/Button";
  4: import { CareRecord } from "@/types/database";
  5: import CareActivityItem from "./CareActivityItem";
  6: 
  7: interface CareHistoryProps {
  8:   careHistory: CareRecord[];
  9: }
 10: 
 11: const CareHistory: React.FC<CareHistoryProps> = ({ careHistory }) => {
 12:   const [showAll, setShowAll] = useState(false);
 13:   const [filter, setFilter] = useState<string>("all");
 14: 
 15: 
 16:   const filteredHistory = careHistory.filter((activity) => {
 17:     if (filter === "all") return true;
 18:     return activity.type === filter;
 19:   });
 20: 
 21: 
 22:   const displayedHistory = showAll
 23:     ? filteredHistory
 24:     : filteredHistory.slice(0, 5);
 25: 
 26:   const activityTypeFilters = [
 27:     { value: "all", label: "All Activities", icon: "📋" },
 28:     { value: "water", label: "Watering", icon: "💧" },
 29:     { value: "fertilize", label: "Fertilizing", icon: "🌱" },
 30:     { value: "observe", label: "Observations", icon: "👁️" },
 31:     { value: "harvest", label: "Harvest", icon: "🌾" },
 32:     { value: "transplant", label: "Transplant", icon: "🏺" },
 33:   ];
 34: 
 35:   return (
 36:     <Card>
 37:       <CardHeader>
 38:         <CardTitle className="flex items-center gap-2">
 39:           <span className="text-2xl">📊</span>
 40:           Care History
 41:           <span className="text-sm font-normal text-muted-foreground">
 42:             ({careHistory.length} activities)
 43:           </span>
 44:         </CardTitle>
 45:       </CardHeader>
 46:       <CardContent>
 47:         {careHistory.length === 0 ? (
 48:           <div className="text-center py-8">
 49:             <div className="text-4xl mb-2">📝</div>
 50:             <h3 className="text-lg font-medium text-foreground mb-2">
 51:               No care activities yet
 52:             </h3>
 53:             <p className="text-muted-foreground mb-4">
 54:               Start logging care activities to track your plant's progress
 55:             </p>
 56:             <Button variant="primary">Log First Activity</Button>
 57:           </div>
 58:         ) : (
 59:           <div className="space-y-4">
 60:             {}
 61:             <div className="flex gap-1 overflow-x-auto pb-2">
 62:               {activityTypeFilters.map((filterOption) => (
 63:                 <Button
 64:                   key={filterOption.value}
 65:                   variant={
 66:                     filter === filterOption.value ? "primary" : "outline"
 67:                   }
 68:                   size="sm"
 69:                   onClick={() => setFilter(filterOption.value)}
 70:                   className="whitespace-nowrap"
 71:                 >
 72:                   <span className="mr-1">{filterOption.icon}</span>
 73:                   {filterOption.label}
 74:                 </Button>
 75:               ))}
 76:             </div>
 77: 
 78:             {}
 79:             <div className="space-y-3">
 80:               {displayedHistory.map((activity) => (
 81:                 <CareActivityItem key={activity.id} activity={activity} />
 82:               ))}
 83:             </div>
 84: 
 85:             {}
 86:             {filteredHistory.length > 5 && (
 87:               <div className="text-center pt-4">
 88:                 <Button variant="outline" onClick={() => setShowAll(!showAll)}>
 89:                   {showAll
 90:                     ? "Show Less"
 91:                     : `Show All ${filteredHistory.length} Activities`}
 92:                 </Button>
 93:               </div>
 94:             )}
 95:           </div>
 96:         )}
 97:       </CardContent>
 98:     </Card>
 99:   );
100: };
101: 
102: export default CareHistory;

================
File: src/components/plant/PlantRegistrationForm.tsx
================
  1: import { useState, useEffect } from "react";
  2: import { useForm } from "react-hook-form";
  3: import { zodResolver } from "@hookform/resolvers/zod";
  4: import { z } from "zod";
  5: import { Button } from "../ui/Button";
  6: import { Card, CardContent } from "../ui/Card";
  7: import { Input } from "../ui/Input";
  8: import { varietyService, VarietyRecord } from "@/types/database";
  9: import { CustomVarietyForm } from "./CustomVarietyForm";
 10: import toast from "react-hot-toast";
 11: import SoilMixtureSelector from "./SoilMixtureSelector";
 12: import { Switch } from "@/components/ui/Switch";
 13: import ReminderPreferencesSection from "@/components/plant/ReminderPreferencesSection";
 14: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 15: import { LoadingSpinner } from "../ui/LoadingSpinner";
 16: 
 17: type ContainerOption = {
 18:   label: string;
 19:   icon: string;
 20:   defaultSetup: string;
 21:   sizes: ReadonlyArray<{
 22:     value: string;
 23:     label: string;
 24:   }>;
 25: };
 26: 
 27: const plantSchema = z.object({
 28:   varietyId: z.string().min(1, "Please select a variety"),
 29:   plantedDate: z.string().refine((date) => {
 30:     const selectedDate = new Date(date);
 31:     const today = new Date();
 32:     const oneYearAgo = new Date();
 33:     oneYearAgo.setFullYear(today.getFullYear() - 1);
 34: 
 35:     return selectedDate <= today && selectedDate >= oneYearAgo;
 36:   }, "Planting date must be within the past year and not in the future"),
 37:   location: z.boolean(),
 38:   containerType: z.string().min(1, "Please select a container type"),
 39:   containerSize: z.string().min(1, "Please specify container size"),
 40:   quantity: z
 41:     .number()
 42:     .min(1, "Quantity must be at least 1")
 43:     .max(999, "Quantity cannot exceed 999"),
 44:   setupType: z.enum(["multiple-containers", "same-container"]),
 45:   customBagShape: z.string().optional(),
 46:   customDiameter: z.string().optional(),
 47:   customBagHeight: z.string().optional(),
 48:   customBagWidth: z.string().optional(),
 49:   customBagLength: z.string().optional(),
 50:   customWidth: z.string().optional(),
 51:   customLength: z.string().optional(),
 52:   customDepth: z.string().optional(),
 53:   soilMix: z.string().min(1, "Please select a soil mixture"),
 54:   notes: z.string().optional(),
 55: });
 56: 
 57: type PlantFormData = z.infer<typeof plantSchema>;
 58: 
 59: interface PlantRegistrationFormProps {
 60:   onSuccess?: () => void;
 61:   onCancel?: () => void;
 62: }
 63: 
 64: interface FormErrors {
 65:   [key: string]: { message?: string } | undefined;
 66: }
 67: 
 68: const containerOptions = {
 69:   "grow-bag": {
 70:     label: "Grow Bag",
 71:     icon: "🎒",
 72:     defaultSetup: "multiple-containers",
 73:     sizes: [
 74:       { value: "1-gallon", label: "1 Gallon" },
 75:       { value: "2-gallon", label: "2 Gallon" },
 76:       { value: "3-gallon", label: "3 Gallon" },
 77:       { value: "5-gallon", label: "5 Gallon" },
 78:       { value: "7-gallon", label: "7 Gallon" },
 79:       { value: "10-gallon", label: "10 Gallon" },
 80:       { value: "15-gallon", label: "15 Gallon" },
 81:       { value: "30-gallon", label: "30 Gallon" },
 82:       { value: "custom", label: "Custom Size" },
 83:     ],
 84:   },
 85:   pot: {
 86:     label: "Pot",
 87:     icon: "🪴",
 88:     defaultSetup: "multiple-containers",
 89:     sizes: [
 90:       { value: "4-inch", label: "4 inch" },
 91:       { value: "5-inch", label: "5 inch" },
 92:       { value: "6-inch", label: "6 inch" },
 93:       { value: "8-inch", label: "8 inch" },
 94:       { value: "10-inch", label: "10 inch" },
 95:       { value: "12-inch", label: "12 inch" },
 96:       { value: "custom", label: "Custom Size" },
 97:     ],
 98:   },
 99:   "cell-tray": {
100:     label: "Seed Starting Cell Tray",
101:     icon: "📱",
102:     defaultSetup: "same-container",
103:     sizes: [
104:       { value: "72-cell", label: "72 Cell Tray" },
105:       { value: "50-cell", label: "50 Cell Tray" },
106:       { value: "32-cell", label: "32 Cell Tray" },
107:       { value: "custom", label: "Custom Cell Count" },
108:     ],
109:   },
110:   "raised-bed": {
111:     label: "Raised Bed",
112:     icon: "🏗️",
113:     defaultSetup: "same-container",
114:     sizes: [{ value: "custom-dimensions", label: "Custom Dimensions" }],
115:   },
116: } as const;
117: 
118: export function PlantRegistrationForm({
119:   onSuccess,
120:   onCancel,
121: }: PlantRegistrationFormProps) {
122:   const { createPlant } = useFirebasePlants();
123: 
124:   const [varieties, setVarieties] = useState<VarietyRecord[]>([]);
125:   const [isLoading, setIsLoading] = useState(false);
126:   const [isLoadingVarieties, setIsLoadingVarieties] = useState(true);
127:   const [submitError, setSubmitError] = useState<string | null>(null);
128:   const [showCustomVarietyForm, setShowCustomVarietyForm] = useState(false);
129:   const [reminderPreferences, setReminderPreferences] = useState({
130:     watering: true,
131:     fertilizing: true,
132:     observation: true,
133:     lighting: false,
134:     pruning: false,
135:   });
136: 
137:   const {
138:     register,
139:     handleSubmit,
140:     watch,
141:     setValue,
142:     reset,
143:     formState: { errors, isValid, isSubmitting },
144:   } = useForm<PlantFormData>({
145:     resolver: zodResolver(plantSchema),
146:     mode: "onChange",
147:     defaultValues: {
148:       location: false,
149:       quantity: 1,
150:       setupType: "multiple-containers",
151:       plantedDate: new Date().toISOString().split("T")[0],
152:       notes: "",
153:     },
154:   });
155: 
156:   const selectedVarietyId = watch("varietyId");
157:   const containerType = watch("containerType");
158: 
159:   const setupType = watch("setupType");
160:   const quantity = watch("quantity");
161: 
162:   useEffect(() => {
163:     loadVarieties();
164:   }, []);
165: 
166:   useEffect(() => {
167:     if (containerType) {
168:       const option =
169:         containerOptions[containerType as keyof typeof containerOptions];
170:       if (option) {
171:         setValue("setupType", option.defaultSetup, { shouldValidate: true });
172: 
173:         setValue("containerSize", option.sizes[0].value, {
174:           shouldValidate: true,
175:         });
176:       }
177:     }
178:   }, [containerType, setValue]);
179: 
180:   const loadVarieties = async () => {
181:     try {
182:       setIsLoadingVarieties(true);
183:       const varietyList = await varietyService.getAllVarieties();
184:       setVarieties(varietyList);
185:     } catch (error) {
186:       console.error("Failed to load varieties:", error);
187:       toast.error("Failed to load plant varieties");
188:     } finally {
189:       setIsLoadingVarieties(false);
190:     }
191:   };
192: 
193:   const selectedVariety = varieties.find((v) => v.id === selectedVarietyId);
194:   const plantCategory = selectedVariety?.category;
195: 
196:   const getVarietyDisplayName = (variety: VarietyRecord) => {
197:     return variety.isCustom ? `${variety.name} (Custom)` : variety.name;
198:   };
199: 
200:   const onSubmit = async (data: PlantFormData) => {
201:     try {
202:       setIsLoading(true);
203:       setSubmitError(null);
204: 
205:       const variety = varieties.find((v) => v.id === data.varietyId);
206:       if (!variety) {
207:         throw new Error("Selected variety not found");
208:       }
209: 
210:       const varietyName = variety.name;
211:       const locationString = data.location ? "Outdoor" : "Indoor";
212: 
213: 
214:       let containerDescription = "";
215:       const containerOption =
216:         containerOptions[data.containerType as keyof typeof containerOptions];
217: 
218:       if (
219:         data.containerSize === "custom" ||
220:         data.containerSize === "custom-dimensions"
221:       ) {
222:         containerDescription = buildCustomContainerDescription(
223:           data,
224:           containerOption
225:         );
226:       } else {
227:         const sizeOption = containerOption?.sizes.find(
228:           (s) => s.value === data.containerSize
229:         );
230:         const singleDescription = `${sizeOption?.label || data.containerSize} ${
231:           containerOption?.label || data.containerType
232:         }`;
233: 
234:         const isMultipleContainers = data.setupType === "multiple-containers";
235:         if (data.quantity > 1 && !isMultipleContainers) {
236:           containerDescription = `${singleDescription} (${data.quantity} plants)`;
237:         } else {
238:           containerDescription = singleDescription;
239:         }
240:       }
241: 
242:       const baseName = varietyName;
243: 
244: 
245:       for (let i = 0; i < data.quantity; i++) {
246:         let plantName = baseName;
247: 
248:         if (data.quantity > 1) {
249:           const isMultipleContainers = data.setupType === "multiple-containers";
250:           if (isMultipleContainers) {
251:             plantName = `${baseName} #${i + 1}`;
252:           } else {
253:             plantName = `${baseName} (Plant ${i + 1})`;
254:           }
255:         }
256: 
257:         await createPlant({
258:           varietyId: data.varietyId,
259:           varietyName: varietyName,
260:           name: plantName,
261:           plantedDate: new Date(data.plantedDate),
262:           currentStage: "germination",
263:           location: locationString,
264:           container: containerDescription,
265:           soilMix: data.soilMix,
266:           isActive: true,
267:           notes: data.notes ? [data.notes] : [""],
268:           reminderPreferences,
269:           quantity: data.quantity,
270:           setupType: data.setupType,
271:         });
272:       }
273: 
274:       toast.success(`Successfully registered ${data.quantity} plant(s)! 🌱`);
275:       reset();
276:       onSuccess?.();
277:     } catch (error) {
278:       console.error("Failed to register plant:", error);
279:       const errorMessage =
280:         error instanceof Error ? error.message : "Failed to register plant";
281:       setSubmitError(errorMessage);
282:       toast.error(errorMessage);
283:     } finally {
284:       setIsLoading(false);
285:     }
286:   };
287: 
288:   const buildCustomContainerDescription = (
289:     data: PlantFormData,
290:     containerOption: ContainerOption | undefined
291:   ) => {
292:     if (data.containerType === "grow-bag" && data.customBagShape) {
293:       if (data.customBagShape === "round") {
294:         return `${data.customDiameter}"D x ${data.customBagHeight}"H ${
295:           containerOption?.label || "Grow Bag"
296:         }`;
297:       } else {
298:         return `${data.customBagWidth}"W x ${data.customBagLength}"L x ${
299:           data.customBagHeight
300:         }"H ${containerOption?.label || "Grow Bag"}`;
301:       }
302:     } else if (data.containerType === "raised-bed") {
303:       return `${data.customWidth}"W x ${data.customLength}"L x ${data.customDepth}"D Raised Bed`;
304:     } else if (data.containerType === "pot") {
305:       return `${data.customDiameter}" ${containerOption?.label || "Pot"}`;
306:     }
307:     return "Custom Container";
308:   };
309: 
310:   const renderFormField = (
311:     id: keyof PlantFormData,
312:     label: string,
313:     type: "text" | "date" | "select" | "textarea" | "number" = "text",
314:     placeholder?: string,
315:     required: boolean = false
316:   ) => {
317:     const error = (errors as FormErrors)[id];
318: 
319:     return (
320:       <div>
321:         <label
322:           htmlFor={id}
323:           className="block text-sm font-medium text-foreground mb-2"
324:         >
325:           {label} {label && required && "*"}
326:         </label>
327: 
328:         {type === "select" && id === "varietyId" ? (
329:           <div className="space-y-2">
330:             <select
331:               {...register(id)}
332:               id={id}
333:               className={`w-full p-3 border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-accent focus:border-accent ${
334:                 error ? "border-red-500" : "border-border"
335:               }`}
336:               disabled={isLoadingVarieties}
337:             >
338:               <option value="">
339:                 {isLoadingVarieties
340:                   ? "Loading varieties..."
341:                   : "Select a variety"}
342:               </option>
343:               {varieties.map((variety) => (
344:                 <option key={variety.id} value={variety.id}>
345:                   {getVarietyDisplayName(variety)}
346:                 </option>
347:               ))}
348:             </select>
349:             <Button
350:               type="button"
351:               variant="outline"
352:               size="sm"
353:               onClick={() => setShowCustomVarietyForm(true)}
354:               className="text-sm"
355:             >
356:               + Add Custom Variety
357:             </Button>
358:           </div>
359:         ) : type === "select" && id === "containerType" ? (
360:           <div className="grid grid-cols-2 gap-3">
361:             {Object.entries(containerOptions).map(([key, option]) => (
362:               <button
363:                 key={key}
364:                 type="button"
365:                 onClick={() =>
366:                   setValue("containerType", key, { shouldValidate: true })
367:                 }
368:                 className={`p-4 border-2 rounded-lg text-left transition-all ${
369:                   watch("containerType") === key
370:                     ? "border-accent bg-accent/10"
371:                     : "border-border hover:border-accent/50"
372:                 }`}
373:                 data-testid={`container-type-${key}`}
374:               >
375:                 <div className="flex items-center space-x-2">
376:                   <span className="text-xl">{option.icon}</span>
377:                   <span className="font-medium">{option.label}</span>
378:                 </div>
379:               </button>
380:             ))}
381:           </div>
382:         ) : type === "select" && id === "containerSize" ? (
383:           renderContainerSizeSelect(error)
384:         ) : type === "textarea" ? (
385:           <textarea
386:             {...register(id)}
387:             id={id}
388:             placeholder={placeholder}
389:             rows={3}
390:             className={`w-full p-3 border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-accent focus:border-accent resize-none ${
391:               error ? "border-red-500" : "border-border"
392:             }`}
393:           />
394:         ) : type === "number" ? (
395:           <Input
396:             {...register(id, { valueAsNumber: true })}
397:             id={id}
398:             type="number"
399:             placeholder={placeholder}
400:             min={1}
401:             max={999}
402:             className={error ? "border-red-500" : ""}
403:           />
404:         ) : (
405:           <Input
406:             {...register(id)}
407:             id={id}
408:             type={type}
409:             placeholder={placeholder}
410:             className={error ? "border-red-500" : ""}
411:           />
412:         )}
413: 
414:         {error && (
415:           <p className="mt-1 text-sm text-red-600" role="alert">
416:             {error.message}
417:           </p>
418:         )}
419:       </div>
420:     );
421:   };
422: 
423:   const renderContainerSizeSelect = (
424:     error: FormErrors[keyof PlantFormData]
425:   ) => {
426:     const selectedContainerType =
427:       containerType as keyof typeof containerOptions;
428:     if (!selectedContainerType || !containerOptions[selectedContainerType]) {
429:       return (
430:         <p className="text-sm text-muted-foreground">
431:           Please select a container type first
432:         </p>
433:       );
434:     }
435: 
436:     const options = containerOptions[selectedContainerType];
437: 
438:     return (
439:       <div className="space-y-3">
440:         <select
441:           {...register("containerSize")}
442:           className={`w-full p-3 border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-accent focus:border-accent ${
443:             error ? "border-red-500" : "border-border"
444:           }`}
445:         >
446:           <option value="">Select size</option>
447:           {options.sizes.map((size) => (
448:             <option key={size.value} value={size.value}>
449:               {size.label}
450:             </option>
451:           ))}
452:         </select>
453: 
454:         {renderCustomSizeFields()}
455:       </div>
456:     );
457:   };
458: 
459:   const renderCustomSizeFields = () => {
460:     const size = watch("containerSize");
461:     if (size !== "custom" && size !== "custom-dimensions") return null;
462: 
463:     if (containerType === "grow-bag") {
464:       return (
465:         <div className="space-y-3 p-3 bg-muted/50 rounded-lg">
466:           <div>
467:             <label className="block text-sm font-medium mb-1">Bag Shape</label>
468:             <select
469:               {...register("customBagShape")}
470:               className="w-full p-2 border rounded bg-background"
471:             >
472:               <option value="">Select shape</option>
473:               <option value="round">Round</option>
474:               <option value="rectangular">Rectangular</option>
475:             </select>
476:           </div>
477: 
478:           {watch("customBagShape") === "round" ? (
479:             <>
480:               <div>
481:                 <label className="block text-sm font-medium mb-1">
482:                   Diameter (inches)
483:                 </label>
484:                 <Input
485:                   {...register("customDiameter")}
486:                   type="number"
487:                   placeholder="e.g., 12"
488:                 />
489:               </div>
490:               <div>
491:                 <label className="block text-sm font-medium mb-1">
492:                   Height (inches)
493:                 </label>
494:                 <Input
495:                   {...register("customBagHeight")}
496:                   type="number"
497:                   placeholder="e.g., 8"
498:                 />
499:               </div>
500:             </>
501:           ) : watch("customBagShape") === "rectangular" ? (
502:             <>
503:               <div>
504:                 <label className="block text-sm font-medium mb-1">
505:                   Width (inches)
506:                 </label>
507:                 <Input
508:                   {...register("customBagWidth")}
509:                   type="number"
510:                   placeholder="e.g., 24"
511:                 />
512:               </div>
513:               <div>
514:                 <label className="block text-sm font-medium mb-1">
515:                   Length (inches)
516:                 </label>
517:                 <Input
518:                   {...register("customBagLength")}
519:                   type="number"
520:                   placeholder="e.g., 36"
521:                 />
522:               </div>
523:               <div>
524:                 <label className="block text-sm font-medium mb-1">
525:                   Height (inches)
526:                 </label>
527:                 <Input
528:                   {...register("customBagHeight")}
529:                   type="number"
530:                   placeholder="e.g., 12"
531:                 />
532:               </div>
533:             </>
534:           ) : null}
535:         </div>
536:       );
537:     }
538: 
539:     if (containerType === "raised-bed") {
540:       return (
541:         <div className="space-y-3 p-3 bg-muted/50 rounded-lg">
542:           <div>
543:             <label className="block text-sm font-medium mb-1">
544:               Width (inches)
545:             </label>
546:             <Input
547:               {...register("customWidth")}
548:               type="number"
549:               placeholder="e.g., 48"
550:             />
551:           </div>
552:           <div>
553:             <label className="block text-sm font-medium mb-1">
554:               Length (inches)
555:             </label>
556:             <Input
557:               {...register("customLength")}
558:               type="number"
559:               placeholder="e.g., 96"
560:             />
561:           </div>
562:           <div>
563:             <label className="block text-sm font-medium mb-1">
564:               Depth (inches)
565:             </label>
566:             <Input
567:               {...register("customDepth")}
568:               type="number"
569:               placeholder="e.g., 12"
570:             />
571:           </div>
572:         </div>
573:       );
574:     }
575: 
576:     if (containerType === "pot") {
577:       return (
578:         <div className="p-3 bg-muted/50 rounded-lg">
579:           <label className="block text-sm font-medium mb-1">
580:             Diameter (inches)
581:           </label>
582:           <Input
583:             {...register("customDiameter")}
584:             type="number"
585:             placeholder="e.g., 14"
586:           />
587:         </div>
588:       );
589:     }
590: 
591:     return null;
592:   };
593: 
594:   const getQuantityHelperText = () => {
595:     const isMultipleContainers = setupType === "multiple-containers";
596:     const isSameContainer = setupType === "same-container";
597: 
598:     if (isMultipleContainers) {
599:       return "Number of separate containers (1 plant each)";
600:     } else if (isSameContainer) {
601:       return "Number of plants in the same container";
602:     }
603:     return "Number of containers/plants";
604:   };
605: 
606:   if (showCustomVarietyForm) {
607:     return (
608:       <CustomVarietyForm
609:         onSuccess={(varietyId) => {
610:           setValue("varietyId", varietyId, { shouldValidate: true });
611:           setShowCustomVarietyForm(false);
612:           loadVarieties();
613:         }}
614:         onCancel={() => setShowCustomVarietyForm(false)}
615:       />
616:     );
617:   }
618: 
619:   if (isLoadingVarieties) {
620:     return (
621:       <Card className="w-full max-w-2xl mx-auto">
622:         <CardContent className="flex items-center justify-center p-8">
623:           <div className="flex items-center space-x-3">
624:             <LoadingSpinner size="sm" />
625:             <span>Loading plant varieties...</span>
626:           </div>
627:         </CardContent>
628:       </Card>
629:     );
630:   }
631: 
632:   return (
633:     <div className="space-y-6">
634:       {}
635:       <div className="text-center">
636:         <div className="text-4xl mb-4">🌿</div>
637:         <h2 className="text-2xl font-bold text-foreground mb-2">
638:           Register Your Plant
639:         </h2>
640:         <p className="text-muted-foreground">
641:           Fill in the details below to start tracking your plant's growth
642:           journey
643:         </p>
644:       </div>
645: 
646:       {}
647:       <Card className="shadow-lg border-0 bg-card/50 backdrop-blur">
648:         <CardContent className="p-6">
649:           <form
650:             onSubmit={handleSubmit(onSubmit)}
651:             className="space-y-6"
652:             data-testid="plant-registration-form"
653:           >
654:             {submitError && (
655:               <div
656:                 className="p-4 bg-red-50 border border-red-200 rounded-lg"
657:                 role="alert"
658:               >
659:                 <div className="flex items-center gap-2">
660:                   <span className="text-red-500">⚠️</span>
661:                   <p className="text-sm text-red-600 font-medium">
662:                     {submitError}
663:                   </p>
664:                 </div>
665:               </div>
666:             )}
667: 
668:             {}
669:             <div className="space-y-4 p-4 bg-gradient-to-br from-primary/5 to-primary/10 rounded-lg border border-primary/20">
670:               <h3 className="font-semibold text-foreground flex items-center gap-2">
671:                 <span className="text-lg">🌱</span>
672:                 Plant Information
673:               </h3>
674:               {renderFormField(
675:                 "varietyId",
676:                 "Plant Variety",
677:                 "select",
678:                 "",
679:                 true
680:               )}
681:               {renderFormField(
682:                 "plantedDate",
683:                 "Planting Date",
684:                 "date",
685:                 "",
686:                 true
687:               )}
688:             </div>
689: 
690:             {/* Location Section */}
691:             <div className="space-y-4 p-4 bg-gradient-to-br from-accent/5 to-accent/10 rounded-lg border border-accent/20">
692:               <h3 className="font-semibold text-foreground flex items-center gap-2">
693:                 <span className="text-lg">📍</span>
694:                 Growing Location
695:               </h3>
696:               <div>
697:                 <label className="block text-sm font-medium text-foreground mb-3">
698:                   Location
699:                 </label>
700:                 <div className="flex items-center justify-center space-x-4 p-4 bg-background/50 rounded-lg">
701:                   <label className="flex items-center space-x-3 cursor-pointer">
702:                     <span className="text-sm font-medium text-foreground">
703:                       Indoor
704:                     </span>
705:                     <Switch
706:                       checked={watch("location")}
707:                       onCheckedChange={(checked) =>
708:                         setValue("location", checked, { shouldValidate: true })
709:                       }
710:                       aria-label="Location toggle between indoor and outdoor"
711:                     />
712:                     <span className="text-sm font-medium text-foreground">
713:                       Outdoor
714:                     </span>
715:                   </label>
716:                 </div>
717:               </div>
718:             </div>
719: 
720:             {}
721:             <div className="space-y-4 p-4 bg-gradient-to-br from-emerald-500/5 to-emerald-500/10 rounded-lg border border-emerald-500/20">
722:               <h3 className="font-semibold text-foreground flex items-center gap-2">
723:                 <span className="text-lg">🪴</span>
724:                 Container Setup
725:               </h3>
726: 
727:               <div>
728:                 <label className="block text-sm font-medium text-foreground mb-3">
729:                   Container Type *
730:                 </label>
731:                 {renderFormField("containerType", "", "select")}
732:               </div>
733: 
734:               {containerType && (
735:                 <div>
736:                   <label className="block text-sm font-medium text-foreground mb-3">
737:                     Container Size *
738:                   </label>
739:                   {renderFormField("containerSize", "", "select")}
740:                 </div>
741:               )}
742: 
743:               <div className="space-y-3">
744:                 <div>
745:                   <label className="block text-sm font-medium text-foreground mb-3">
746:                     Setup Type
747:                   </label>
748:                   <div className="grid grid-cols-1 gap-3">
749:                     <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-background/50 transition-colors">
750:                       <input
751:                         type="radio"
752:                         value="multiple-containers"
753:                         {...register("setupType")}
754:                         className="w-4 h-4 text-accent border-gray-300 focus:ring-accent"
755:                       />
756:                       <div>
757:                         <div className="font-medium">Multiple Containers</div>
758:                         <div className="text-sm text-muted-foreground">
759:                           Each plant gets its own container
760:                         </div>
761:                       </div>
762:                     </label>
763:                     <label className="flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:bg-background/50 transition-colors">
764:                       <input
765:                         type="radio"
766:                         value="same-container"
767:                         {...register("setupType")}
768:                         className="w-4 h-4 text-accent border-gray-300 focus:ring-accent"
769:                       />
770:                       <div>
771:                         <div className="font-medium">Same Container</div>
772:                         <div className="text-sm text-muted-foreground">
773:                           Multiple plants share one container
774:                         </div>
775:                       </div>
776:                     </label>
777:                   </div>
778:                 </div>
779: 
780:                 <div>
781:                   <label
782:                     htmlFor="quantity"
783:                     className="block text-sm font-medium text-foreground mb-3"
784:                   >
785:                     Quantity *
786:                   </label>
787:                   <div className="flex items-center space-x-3">
788:                     <Button
789:                       type="button"
790:                       variant="outline"
791:                       size="sm"
792:                       onClick={() =>
793:                         setValue("quantity", Math.max(1, quantity - 1), {
794:                           shouldValidate: true,
795:                         })
796:                       }
797:                       disabled={quantity <= 1}
798:                       className="w-10 h-10 p-0"
799:                       aria-label="Decrease quantity"
800:                     >
801:                       -
802:                     </Button>
803:                     <div className="flex-1">
804:                       <Input
805:                         {...register("quantity", { valueAsNumber: true })}
806:                         id="quantity"
807:                         type="number"
808:                         placeholder="1"
809:                         min={1}
810:                         max={999}
811:                         className={errors.quantity ? "border-red-500" : ""}
812:                         aria-label="Plant quantity"
813:                         data-testid="quantity-input"
814:                       />
815:                     </div>
816:                     <Button
817:                       type="button"
818:                       variant="outline"
819:                       size="sm"
820:                       onClick={() =>
821:                         setValue("quantity", Math.min(999, quantity + 1), {
822:                           shouldValidate: true,
823:                         })
824:                       }
825:                       disabled={quantity >= 999}
826:                       className="w-10 h-10 p-0"
827:                       aria-label="Increase quantity"
828:                     >
829:                       +
830:                     </Button>
831:                   </div>
832:                   {errors.quantity && (
833:                     <p className="mt-1 text-sm text-red-600" role="alert">
834:                       {errors.quantity.message}
835:                     </p>
836:                   )}
837:                   <p className="text-xs text-muted-foreground mt-1 bg-background/50 p-2 rounded">
838:                     {getQuantityHelperText()}
839:                   </p>
840:                 </div>
841:               </div>
842:             </div>
843: 
844:             {}
845:             <div className="space-y-4 p-4 bg-gradient-to-br from-amber-500/5 to-amber-500/10 rounded-lg border border-amber-500/20">
846:               <h3 className="font-semibold text-foreground flex items-center gap-2">
847:                 <span className="text-lg">🌱</span>
848:                 Soil & Care Preferences
849:               </h3>
850: 
851:               <div>
852:                 <SoilMixtureSelector
853:                   selectedMixture={watch("soilMix")}
854:                   onMixtureChange={(mixture) =>
855:                     setValue("soilMix", mixture, { shouldValidate: true })
856:                   }
857:                   plantCategory={plantCategory}
858:                 />
859:                 {errors.soilMix && (
860:                   <p className="mt-1 text-sm text-red-600" role="alert">
861:                     {errors.soilMix.message}
862:                   </p>
863:                 )}
864:               </div>
865: 
866:               <ReminderPreferencesSection
867:                 preferences={reminderPreferences}
868:                 onChange={setReminderPreferences}
869:               />
870:             </div>
871: 
872:             {}
873:             <div className="space-y-4 p-4 bg-gradient-to-br from-slate-500/5 to-slate-500/10 rounded-lg border border-slate-500/20">
874:               <h3 className="font-semibold text-foreground flex items-center gap-2">
875:                 <span className="text-lg">📝</span>
876:                 Additional Notes
877:               </h3>
878:               {renderFormField(
879:                 "notes",
880:                 "Notes",
881:                 "textarea",
882:                 "Add any additional notes about this plant, growing conditions, or special care instructions...",
883:                 false
884:               )}
885:             </div>
886: 
887:             {}
888:             <div className="flex gap-3 pt-6 border-t border-border">
889:               {onCancel && (
890:                 <Button
891:                   type="button"
892:                   variant="outline"
893:                   onClick={onCancel}
894:                   className="flex-1"
895:                   disabled={isLoading}
896:                 >
897:                   Cancel
898:                 </Button>
899:               )}
900:               <Button
901:                 type="submit"
902:                 disabled={!isValid || isSubmitting || isLoading}
903:                 className="flex-1 bg-primary hover:bg-primary/90"
904:                 size="lg"
905:               >
906:                 {isLoading ? (
907:                   <div className="flex items-center space-x-2">
908:                     <LoadingSpinner size="sm" />
909:                     <span>Registering...</span>
910:                   </div>
911:                 ) : (
912:                   <div className="flex items-center space-x-2">
913:                     <span>🌱</span>
914:                     <span>Register Plant{quantity > 1 ? "s" : ""}</span>
915:                   </div>
916:                 )}
917:               </Button>
918:             </div>
919:           </form>
920:         </CardContent>
921:       </Card>
922:     </div>
923:   );
924: }

================
File: src/pages/dashboard/TaskItem.tsx
================
  1: import React, { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { Button } from "@/components/ui/Button";
  4: import { StatusBadge } from "@/components/ui/StatusBadge";
  5: import {
  6:   UpcomingTask,
  7:   QuickCompleteOption,
  8:   QuickCompletionValues,
  9: } from "@/types/scheduling";
 10: import { CheckCircle2, Clock } from "lucide-react";
 11: 
 12: interface TaskItemProps {
 13:   task: UpcomingTask;
 14:   onQuickComplete?: (
 15:     taskId: string,
 16:     values: QuickCompletionValues
 17:   ) => Promise<void>;
 18:   onBypass?: (taskId: string, reason: string) => Promise<void>;
 19:   className?: string;
 20: }
 21: 
 22: const TaskItem: React.FC<TaskItemProps> = ({
 23:   task,
 24:   onQuickComplete,
 25:   onBypass,
 26:   className = "",
 27: }) => {
 28:   const navigate = useNavigate();
 29:   const [isLoading, setIsLoading] = useState(false);
 30:   const [showBypassDialog, setShowBypassDialog] = useState(false);
 31:   const [bypassReason, setBypassReason] = useState("");
 32:   const [bypassSubmitted, setBypassSubmitted] = useState(false);
 33: 
 34:   const handleTaskClick = () => {
 35:     navigate(`/plants/${task.plantId}`);
 36:   };
 37: 
 38:   const handleQuickComplete = async (option: QuickCompleteOption) => {
 39:     if (!onQuickComplete) return;
 40: 
 41:     setIsLoading(true);
 42:     try {
 43:       await onQuickComplete(task.id, option.values);
 44:     } catch (error) {
 45:       console.error("Failed to quick complete task:", error);
 46:     } finally {
 47:       setIsLoading(false);
 48:     }
 49:   };
 50: 
 51:   const handleBypass = async () => {
 52:     if (!onBypass || !bypassReason.trim()) return;
 53: 
 54:     setIsLoading(true);
 55:     try {
 56:       await onBypass(task.id, bypassReason);
 57: 
 58:       setBypassSubmitted(true);
 59: 
 60:       setTimeout(() => {
 61:         setShowBypassDialog(false);
 62:         setBypassReason("");
 63:         setBypassSubmitted(false);
 64:       }, 1500);
 65:     } catch (error) {
 66:       console.error("Failed to bypass task:", error);
 67:     } finally {
 68:       setIsLoading(false);
 69:     }
 70:   };
 71: 
 72:   const getTaskIcon = (taskName: string) => {
 73:     const name = taskName.toLowerCase();
 74:     if (name.includes("water")) return "💧";
 75:     if (name.includes("fertiliz")) return "🌱";
 76:     if (name.includes("observe") || name.includes("health")) return "👁";
 77:     return "🌿";
 78:   };
 79: 
 80:   const getPriorityColor = (priority: string) => {
 81:     switch (priority) {
 82:       case "high":
 83:         return "text-red-600";
 84:       case "medium":
 85:         return "text-yellow-600";
 86:       case "low":
 87:         return "text-green-600";
 88:       default:
 89:         return "text-muted-foreground";
 90:     }
 91:   };
 92: 
 93:   const getStatusFromPriority = (priority: string) => {
 94:     switch (priority) {
 95:       case "high":
 96:         return "critical" as const;
 97:       case "medium":
 98:         return "attention" as const;
 99:       case "low":
100:         return "healthy" as const;
101:       default:
102:         return "new" as const;
103:     }
104:   };
105: 
106:   return (
107:     <div className={`bg-card rounded-lg border p-4 ${className}`}>
108:       <div className="flex items-start justify-between">
109:         <div className="flex items-start space-x-3 flex-1">
110:           <div className="text-2xl">{getTaskIcon(task.task)}</div>
111:           <div className="flex-1 min-w-0" onClick={handleTaskClick}>
112:             <div className="flex items-center gap-2 mb-1">
113:               <h4 className="font-medium text-foreground">{task.name}</h4>
114:               <StatusBadge
115:                 status={getStatusFromPriority(task.priority)}
116:                 size="sm"
117:               />
118:             </div>
119:             <p className="text-sm text-muted-foreground mb-1">{task.task}</p>
120:             <p className="text-xs text-muted-foreground mb-1">
121:               Stage: {task.plantStage}
122:             </p>
123:             <p className={`text-xs ${getPriorityColor(task.priority)}`}>
124:               {task.dueIn}
125:             </p>
126:           </div>
127: 
128:           <div className="flex flex-col gap-2 ml-4">
129:             {task.quickCompleteOptions &&
130:               task.quickCompleteOptions.length > 0 && (
131:                 <div className="flex flex-wrap gap-1">
132:                   {task.quickCompleteOptions.map((option, index) => (
133:                     <Button
134:                       key={index}
135:                       size="sm"
136:                       variant="outline"
137:                       onClick={() => handleQuickComplete(option)}
138:                       disabled={isLoading}
139:                       className="text-xs"
140:                     >
141:                       {option.label}
142:                     </Button>
143:                   ))}
144:                 </div>
145:               )}
146: 
147:             <div className="flex gap-2">
148:               <Button
149:                 size="sm"
150:                 variant="ghost"
151:                 onClick={() => setShowBypassDialog(true)}
152:                 disabled={isLoading}
153:                 className="text-xs"
154:               >
155:                 Bypass
156:               </Button>
157:               <Button
158:                 size="sm"
159:                 variant="outline"
160:                 onClick={() =>
161:                   navigate(
162:                     `/log-care?plant=${task.plantId}&type=${
163:                       task.task.toLowerCase().includes("water")
164:                         ? "water"
165:                         : "fertilize"
166:                     }`
167:                   )
168:                 }
169:                 disabled={isLoading}
170:               >
171:                 Log Manually
172:               </Button>
173:             </div>
174:           </div>
175:         </div>
176:       </div>
177: 
178:       {showBypassDialog && (
179:         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
180:           <div className="bg-background rounded-lg p-6 w-full max-w-md">
181:             {bypassSubmitted ? (
182:               <div className="text-center">
183:                 <CheckCircle2 className="w-16 h-16 text-green-500 mx-auto mb-4" />
184:                 <h3 className="text-lg font-semibold mb-2 text-green-700">
185:                   Task Bypassed
186:                 </h3>
187:                 <p className="text-sm text-muted-foreground">
188:                   Your preferences are being learned for better recommendations.
189:                 </p>
190:               </div>
191:             ) : (
192:               <>
193:                 <h3 className="text-lg font-semibold mb-4">
194:                   Bypass "{task.task}" for {task.name}
195:                 </h3>
196:                 <p className="text-sm text-muted-foreground mb-4">
197:                   Why are you skipping this task? This helps us improve future
198:                   recommendations.
199:                 </p>
200:                 <textarea
201:                   value={bypassReason}
202:                   onChange={(e) => setBypassReason(e.target.value)}
203:                   placeholder="e.g., plant looks healthy, watered recently, weather too cold..."
204:                   className="w-full h-24 p-3 border rounded-md resize-none text-sm"
205:                   disabled={isLoading}
206:                 />
207:                 <div className="flex gap-2 mt-4">
208:                   <Button
209:                     onClick={() => {
210:                       setShowBypassDialog(false);
211:                       setBypassReason("");
212:                     }}
213:                     variant="outline"
214:                     disabled={isLoading}
215:                     className="flex-1"
216:                   >
217:                     Cancel
218:                   </Button>
219:                   <Button
220:                     onClick={handleBypass}
221:                     disabled={!bypassReason.trim() || isLoading}
222:                     className="flex-1"
223:                   >
224:                     {isLoading ? (
225:                       <div className="flex items-center gap-2">
226:                         <Clock className="w-4 h-4 animate-spin" />
227:                         <span>Submitting...</span>
228:                       </div>
229:                     ) : (
230:                       "Submit Bypass"
231:                     )}
232:                   </Button>
233:                 </div>
234:               </>
235:             )}
236:           </div>
237:         </div>
238:       )}
239:     </div>
240:   );
241: };
242: 
243: export default TaskItem;

================
File: src/types/scheduling.ts
================
 1: import { CareActivityType } from "./core";
 2: 
 3: export interface UpcomingTask {
 4:   id: string;
 5:   plantId: string;
 6:   name: string;
 7:   task: string;
 8:   dueIn: string;
 9:   plantStage: string;
10:   dueDate: Date;
11:   priority: "low" | "medium" | "high";
12:   quickCompleteOptions?: QuickCompleteOption[];
13:   canBypass: boolean;
14: }
15: 
16: export interface TaskGroup {
17:   type: "watering" | "fertilizing" | "observation" | "maintenance";
18:   title: string;
19:   emoji: string;
20:   tasks: UpcomingTask[];
21:   isExpanded: boolean;
22: }
23: 
24: export interface BypassPattern {
25:   plantId: string;
26:   taskType: CareActivityType;
27:   commonReasons: string[];
28:   frequency: number;
29:   seasonalPattern?: {
30:     season: string;
31:     frequency: number;
32:   }[];
33:   confidenceScore: number;
34: }
35: 
36: export interface BypassInsight {
37:   pattern: BypassPattern;
38:   recommendation: string;
39:   shouldAdjustSchedule: boolean;
40:   adjustmentDays?: number;
41: }
42: 
43: export interface SchedulingAdjustment {
44:   plantId: string;
45:   taskType: CareActivityType;
46:   originalInterval: number;
47:   adjustedInterval: number;
48:   reason: string;
49:   confidence: number;
50: }
51: 
52: export interface QuickCompleteOption {
53:   label: string;
54:   values: QuickCompletionValues;
55: }
56: 
57: export interface QuickCompletionValues {
58:   waterValue?: number;
59:   waterUnit?: string;
60:   product?: string;
61:   dilution?: string;
62:   amount?: string;
63:   notes?: string;
64: }
65: 
66: export interface TaskRecommendation {
67:   task: UpcomingTask;
68:   protocol: {
69:     expectedMoisture?: [number, number];
70:     lastReading?: number;
71:     daysSinceLastCare?: number;
72:   };
73: }

================
File: src/setupTests.ts
================
  1: import "@testing-library/jest-dom";
  2: import "fake-indexeddb/auto";
  3: import { TextEncoder, TextDecoder } from "util";
  4: 
  5: 
  6: 
  7: 
  8: 
  9: 
 10: 
 11: 
 12: 
 13: 
 14: 
 15: const RealDate = Date;
 16: 
 17: 
 18: 
 19: 
 20: 
 21: 
 22: export function mockDate(isoDate: string) {
 23: 
 24: 
 25:   global.Date = class extends RealDate {
 26: 
 27:     constructor(date?: string | number | Date) {
 28: 
 29: 
 30:       if (date) {
 31:         super(date);
 32:       } else {
 33:         super(isoDate);
 34:       }
 35:     }
 36: 
 37: 
 38:     static now() {
 39:       return new RealDate(isoDate).getTime();
 40:     }
 41:   };
 42: }
 43: 
 44: 
 45: 
 46: 
 47: 
 48: 
 49: export const restoreDate = () => {
 50:   global.Date = RealDate;
 51: };
 52: 
 53: 
 54: 
 55: jest.mock("@/services/firebase/config", () => ({
 56:   db: {},
 57:   auth: {},
 58:   storage: {},
 59: }));
 60: 
 61: 
 62: Object.defineProperty(globalThis, "import", {
 63:   value: {
 64:     meta: {
 65:       env: {
 66:         VITE_FIREBASE_API_KEY: "test-api-key",
 67:         VITE_FIREBASE_AUTH_DOMAIN: "test-project.firebaseapp.com",
 68:         VITE_FIREBASE_PROJECT_ID: "test-project",
 69:         VITE_FIREBASE_STORAGE_BUCKET: "test-project.appspot.com",
 70:         VITE_FIREBASE_MESSAGING_SENDER_ID: "123456789",
 71:         VITE_FIREBASE_APP_ID: "test-app-id",
 72:       },
 73:     },
 74:   },
 75: });
 76: 
 77: 
 78: Object.defineProperty(global, "import.meta", {
 79:   value: {
 80:     env: {
 81:       VITE_FIREBASE_API_KEY: "mock-api-key",
 82:       VITE_FIREBASE_AUTH_DOMAIN: "mock-auth-domain.firebaseapp.com",
 83:       VITE_FIREBASE_PROJECT_ID: "mock-project-id",
 84:       VITE_FIREBASE_STORAGE_BUCKET: "mock-project-id.appspot.com",
 85:       VITE_FIREBASE_MESSAGING_SENDER_ID: "mock-sender-id",
 86:       VITE_FIREBASE_APP_ID: "mock-app-id",
 87:     },
 88:   },
 89: });
 90: 
 91: 
 92: 
 93: 
 94: 
 95: 
 96: 
 97: 
 98: 
 99: 
100: 
101: 
102: 
103: if (typeof global.structuredClone === "undefined") {
104:   global.structuredClone = <T>(val: T): T => {
105:     const deepClone = (obj: any): any => {
106:       if (obj === null) return null;
107:       if (obj instanceof Date) return new Date(obj.getTime());
108:       if (typeof obj !== "object") return obj;
109:       if (Array.isArray(obj)) {
110:         return obj.map((item: any) => deepClone(item));
111:       }
112:       const cloned: { [key: string]: any } = {};
113:       for (const key in obj) {
114:         if (Object.prototype.hasOwnProperty.call(obj, key)) {
115:           cloned[key] = deepClone(obj[key]);
116:         }
117:       }
118:       return cloned;
119:     };
120:     return deepClone(val);
121:   };
122: }
123: 
124: 
125: global.TextEncoder = TextEncoder as typeof global.TextEncoder;
126: global.TextDecoder = TextDecoder as typeof global.TextDecoder;
127: 
128: if (!global.crypto) {
129:   global.crypto = {
130:     randomUUID: () =>
131:       "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx" as `${string}-${string}-${string}-${string}-${string}`,
132:     getRandomValues: <T extends ArrayBufferView | null>(array: T): T => array,
133:     subtle: {} as SubtleCrypto,
134:   } as unknown as Crypto;
135: }
136: 
137: if (!global.crypto.randomUUID) {
138:   global.crypto.randomUUID =
139:     (): `${string}-${string}-${string}-${string}-${string}` => {
140:       return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
141:         /[xy]/g,
142:         function (c) {
143:           const r = (Math.random() * 16) | 0;
144:           const v = c === "x" ? r : (r & 0x3) | 0x8;
145:           return v.toString(16);
146:         }
147:       ) as `${string}-${string}-${string}-${string}-${string}`;
148:     };
149: }
150: 
151: jest.mock("firebase/app", () => ({
152:   initializeApp: jest.fn(() => ({})),
153: }));
154: 
155: jest.mock("firebase/auth", () => ({
156:   getAuth: jest.fn(() => ({})),
157:   onAuthStateChanged: jest.fn((_, callback) => {
158:     callback(null);
159:     return jest.fn();
160:   }),
161:   signInWithEmailAndPassword: jest.fn(),
162:   createUserWithEmailAndPassword: jest.fn(),
163:   signOut: jest.fn(),
164:   updateProfile: jest.fn(),
165:   sendPasswordResetEmail: jest.fn(),
166: }));
167: 
168: jest.mock("firebase/firestore", () => ({
169:   getFirestore: jest.fn(() => ({})),
170:   collection: jest.fn(),
171:   doc: jest.fn(),
172:   addDoc: jest.fn(),
173:   updateDoc: jest.fn(),
174:   onSnapshot: jest.fn(),
175:   query: jest.fn(),
176:   where: jest.fn(),
177:   orderBy: jest.fn(),
178:   limit: jest.fn(),
179:   Timestamp: {
180:     now: jest.fn(() => new Date()),
181:     fromDate: jest.fn((date) => date),
182:   },
183:   writeBatch: jest.fn(),
184: }));
185: 
186: jest.mock("firebase/storage", () => ({
187:   getStorage: jest.fn(() => ({})),
188: }));
189: 
190: Object.defineProperty(window, "matchMedia", {
191:   writable: true,
192:   value: jest.fn().mockImplementation((query) => ({
193:     matches: false,
194:     media: query,
195:     onchange: null,
196:     addListener: jest.fn(),
197:     removeListener: jest.fn(),
198:     addEventListener: jest.fn(),
199:     removeEventListener: jest.fn(),
200:     dispatchEvent: jest.fn(),
201:   })),
202: });

================
File: package.json
================
 1: {
 2:   "name": "smartgarden-app",
 3:   "private": true,
 4:   "version": "0.0.0",
 5:   "type": "module",
 6:   "scripts": {
 7:     "dev": "vite --config vite.config.ts",
 8:     "dev:api": "node dev-server.js",
 9:     "dev:client": "vite",
10:     "dev:watch": "concurrently \"npm run dev\" \"npm run test:watch\"",
11:     "build": "tsc -b && vite build",
12:     "lint": "eslint . --ext ts,tsx",
13:     "preview": "vite preview",
14:     "test": "jest --passWithNoTests",
15:     "test:watch": "jest --watchAll --passWithNoTests",
16:     "test:coverage": "jest --coverage --passWithNoTests",
17:     "test:ci": "jest --ci --coverage --watchAll=false --passWithNoTests",
18:     "test:e2e": "playwright test",
19:     "test:e2e:ui": "playwright test --ui",
20:     "test:all": "npm run test:ci && npm run test:e2e"
21:   },
22:   "dependencies": {
23:     "@hookform/resolvers": "^5.1.1",
24:     "@radix-ui/react-dialog": "^1.1.14",
25:     "@radix-ui/react-slot": "^1.2.3",
26:     "@radix-ui/react-tabs": "^1.1.12",
27:     "@tanstack/react-query": "^5.80.7",
28:     "clsx": "^2.1.1",
29:     "date-fns": "^4.1.0",
30:     "dexie": "^4.0.11",
31:     "dexie-react-hooks": "^1.1.7",
32:     "firebase": "^11.9.1",
33:     "lucide-react": "^0.468.0",
34:     "react": "^19.1.0",
35:     "react-dom": "^19.1.0",
36:     "react-hook-form": "^7.57.0",
37:     "react-hot-toast": "^2.5.2",
38:     "react-router-dom": "^7.6.2",
39:     "tailwind-merge": "^3.3.1",
40:     "ts-node": "^10.9.2",
41:     "util": "^0.12.5",
42:     "uuid": "^11.1.0",
43:     "vite-plugin-pwa": "^1.0.0",
44:     "workbox-window": "^7.3.0",
45:     "zod": "^3.25.64"
46:   },
47:   "devDependencies": {
48:     "@eslint/js": "^9.25.0",
49:     "@playwright/test": "^1.53.0",
50:     "@testing-library/jest-dom": "^6.6.3",
51:     "@testing-library/react": "^16.3.0",
52:     "@testing-library/user-event": "^14.6.1",
53:     "@types/jest": "^29.5.14",
54:     "@types/react": "^19.1.2",
55:     "@types/react-dom": "^19.1.2",
56:     "@types/testing-library__jest-dom": "^5.14.9",
57:     "@types/uuid": "^10.0.0",
58:     "@vitejs/plugin-react": "^4.4.1",
59:     "autoprefixer": "^10.4.21",
60:     "concurrently": "^9.2.0",
61:     "cors": "^2.8.5",
62:     "eslint": "^9.25.0",
63:     "eslint-plugin-react-hooks": "^5.2.0",
64:     "eslint-plugin-react-refresh": "^0.4.19",
65:     "express": "^4.21.2",
66:     "fake-indexeddb": "^6.0.1",
67:     "globals": "^16.0.0",
68:     "identity-obj-proxy": "^3.0.0",
69:     "jest": "^29.7.0",
70:     "jest-axe": "^10.0.0",
71:     "jest-environment-jsdom": "^29.7.0",
72:     "postcss": "^8.5.5",
73:     "tailwindcss": "^3.4.17",
74:     "ts-jest": "^29.4.0",
75:     "typescript": "~5.8.3",
76:     "typescript-eslint": "^8.30.1",
77:     "vite": "^6.3.5"
78:   }
79: }

================
File: src/__tests__/components/Dashboard.test.tsx
================
  1: import { screen, waitFor, render } from "@testing-library/react";
  2: import userEvent from "@testing-library/user-event";
  3: import { MemoryRouter } from "react-router-dom";
  4: import { User } from "firebase/auth";
  5: import { Dashboard } from "@/pages/dashboard";
  6: import { PlantRecord } from "@/types/database";
  7: 
  8: 
  9: jest.mock("@/hooks/useFirebaseAuth", () => ({
 10:   useFirebaseAuth: jest.fn(),
 11: }));
 12: 
 13: jest.mock("@/hooks/useFirebasePlants", () => ({
 14:   useFirebasePlants: jest.fn(),
 15: }));
 16: 
 17: const mockLogActivity = jest.fn();
 18: jest.mock("@/hooks/useFirebaseCareActivities", () => ({
 19:   useFirebaseCareActivities: () => ({
 20:     logActivity: mockLogActivity,
 21:   }),
 22: }));
 23: 
 24: jest.mock("@/components/Navigation", () => ({
 25:   __esModule: true,
 26:   default: () => <div data-testid="navigation">Navigation</div>,
 27: }));
 28: 
 29: jest.mock("@/components/ui/OfflineIndicator", () => ({
 30:   OfflineIndicator: () => (
 31:     <div data-testid="offline-indicator">Offline Indicator</div>
 32:   ),
 33: }));
 34: 
 35: jest.mock("react-hot-toast", () => ({
 36:   __esModule: true,
 37:   default: {
 38:     success: jest.fn(),
 39:     error: jest.fn(),
 40:   },
 41: 
 42:   toast: {
 43:     success: jest.fn(),
 44:     error: jest.fn(),
 45:   },
 46: }));
 47: 
 48: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
 49: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
 50: 
 51: const mockUseFirebaseAuth = useFirebaseAuth as jest.Mock;
 52: const mockUseFirebasePlants = useFirebasePlants as jest.Mock;
 53: 
 54: const mockNavigate = jest.fn();
 55: jest.mock("react-router-dom", () => ({
 56:   ...jest.requireActual("react-router-dom"),
 57:   useNavigate: () => mockNavigate,
 58: }));
 59: 
 60: 
 61: const renderWithRouter = (
 62:   ui: React.ReactElement,
 63:   { initialEntries = ["/"] } = {}
 64: ) => {
 65:   return render(
 66:     <MemoryRouter initialEntries={initialEntries}>{ui}</MemoryRouter>
 67:   );
 68: };
 69: 
 70: const createMockFirebaseUser = (overrides?: Partial<User>): User =>
 71:   ({
 72:     uid: "test-user-id",
 73:     email: "test@example.com",
 74:     emailVerified: true,
 75:     displayName: "Test User",
 76:     isAnonymous: false,
 77:     metadata: {
 78:       creationTime: "2024-01-01T00:00:00.000Z",
 79:       lastSignInTime: "2024-01-01T00:00:00.000Z",
 80:     },
 81:     providerData: [],
 82:     refreshToken: "mock-refresh-token",
 83:     tenantId: null,
 84:     delete: jest.fn(),
 85:     getIdToken: jest.fn(),
 86:     getIdTokenResult: jest.fn(),
 87:     reload: jest.fn(),
 88:     toJSON: jest.fn(),
 89:     phoneNumber: null,
 90:     photoURL: null,
 91:     providerId: "firebase",
 92:     ...overrides,
 93:   } as User);
 94: 
 95: const createMockPlant = (overrides: Partial<PlantRecord>): PlantRecord => ({
 96:   id: `plant-${Math.random()}`,
 97:   varietyId: "tomato-1",
 98:   varietyName: "Cherry Tomato",
 99:   name: "My Tomato",
100:   plantedDate: new Date("2024-05-10T00:00:00.000Z"),
101:   currentStage: "vegetative",
102:   location: "Indoor",
103:   container: "5 Gallon Grow Bag",
104:   soilMix: "standard-mix",
105:   isActive: true,
106:   createdAt: new Date(),
107:   updatedAt: new Date(),
108:   ...overrides,
109: });
110: 
111: describe("Dashboard", () => {
112:   beforeEach(() => {
113:     jest.clearAllMocks();
114:     mockUseFirebaseAuth.mockReturnValue({
115:       user: createMockFirebaseUser(),
116:       loading: false,
117:       error: null,
118:       signIn: jest.fn(),
119:       signUp: jest.fn(),
120:       signOut: jest.fn(),
121:       resetPassword: jest.fn(),
122:     });
123:     mockUseFirebasePlants.mockReturnValue({
124:       plants: [],
125:       loading: false,
126:       error: null,
127:       createPlant: jest.fn(),
128:       updatePlant: jest.fn(),
129:       deletePlant: jest.fn(),
130:     });
131:     mockLogActivity.mockResolvedValue(undefined);
132:   });
133: 
134:   describe("Loading State", () => {
135:     it("displays loading state when Firebase plants hook is loading", () => {
136:       mockUseFirebasePlants.mockReturnValue({
137:         plants: [],
138:         loading: true,
139:         error: null,
140:         createPlant: jest.fn(),
141:         updatePlant: jest.fn(),
142:         deletePlant: jest.fn(),
143:       });
144: 
145:       renderWithRouter(<Dashboard />);
146: 
147:       expect(screen.getByText("Loading...")).toBeInTheDocument();
148:     });
149:   });
150: 
151:   describe("Authentication", () => {
152:     it("displays user information when authenticated", () => {
153:       mockUseFirebasePlants.mockReturnValue({
154:         plants: [createMockPlant({ id: "p1" })],
155:         loading: false,
156:         error: null,
157:         createPlant: jest.fn(),
158:         updatePlant: jest.fn(),
159:         deletePlant: jest.fn(),
160:       });
161: 
162:       renderWithRouter(<Dashboard />);
163: 
164:       expect(screen.getByText("SmartGarden")).toBeInTheDocument();
165:       expect(screen.getByText("Welcome, Test User")).toBeInTheDocument();
166:       expect(
167:         screen.getByRole("button", { name: "Sign Out" })
168:       ).toBeInTheDocument();
169:     });
170: 
171:     it("calls signOut when sign out button is clicked", async () => {
172:       const mockSignOut = jest.fn();
173:       mockUseFirebaseAuth.mockReturnValue({
174:         user: createMockFirebaseUser(),
175:         loading: false,
176:         error: null,
177:         signIn: jest.fn(),
178:         signUp: jest.fn(),
179:         signOut: mockSignOut,
180:         resetPassword: jest.fn(),
181:       });
182: 
183:       renderWithRouter(<Dashboard />);
184: 
185:       const signOutButton = screen.getByRole("button", { name: "Sign Out" });
186:       await userEvent.click(signOutButton);
187: 
188:       expect(mockSignOut).toHaveBeenCalledTimes(1);
189:     });
190:   });
191: 
192:   describe("Empty State / Welcome", () => {
193:     it("displays welcome message when no plants exist", () => {
194:       renderWithRouter(<Dashboard />);
195: 
196:       expect(screen.getByText("Welcome to SmartGarden!")).toBeInTheDocument();
197:       expect(
198:         screen.getByText(
199:           "Start your gardening journey by adding your first plant. Track growth, log care activities, and get personalized recommendations."
200:         )
201:       ).toBeInTheDocument();
202:       expect(
203:         screen.getByRole("button", { name: "🌿 Add Your First Plant" })
204:       ).toBeInTheDocument();
205:     });
206: 
207:     it("navigates to add plant page when 'Add Your First Plant' is clicked", async () => {
208:       renderWithRouter(<Dashboard />);
209:       const addPlantButton = screen.getByRole("button", {
210:         name: "🌿 Add Your First Plant",
211:       });
212:       await userEvent.click(addPlantButton);
213: 
214:       expect(mockNavigate).toHaveBeenCalledWith("/add-plant");
215:     });
216:   });
217: 
218:   describe("Plant Grouping and Bulk Actions", () => {
219:     const groupedPlants = [
220:       createMockPlant({ id: "p1", name: "Tomato 1" }),
221:       createMockPlant({ id: "p2", name: "Tomato 2" }),
222:     ];
223: 
224:     it("should render a plant group card and allow bulk logging", async () => {
225:       mockUseFirebasePlants.mockReturnValue({
226:         plants: groupedPlants,
227:         loading: false,
228:         error: null,
229:       });
230: 
231:       const user = userEvent.setup();
232:       renderWithRouter(<Dashboard />);
233: 
234: 
235:       await waitFor(() => {
236:         expect(screen.getByText("Cherry Tomato")).toBeInTheDocument();
237:       });
238: 
239:       const groupCardText = await screen.findByText("2 plants");
240:       expect(groupCardText).toBeInTheDocument();
241: 
242: 
243:       const logAllButton = await screen.findByRole("button", {
244:         name: /Log All/i,
245:       });
246:       await user.click(logAllButton);
247: 
248: 
249:       const waterAllButton = await screen.findByRole("button", {
250:         name: /Water All/i,
251:       });
252:       await user.click(waterAllButton);
253: 
254: 
255:       await waitFor(() => {
256:         expect(screen.getByText("💧 Water All Plants")).toBeInTheDocument();
257:       });
258: 
259: 
260:       const amountInput = screen.getByLabelText(/Amount \(oz\)/i);
261:       await user.clear(amountInput);
262:       await user.type(amountInput, "100");
263: 
264:       const submitButton = screen.getByRole("button", {
265:         name: /Log Activity for All 2 Plants/i,
266:       });
267:       await user.click(submitButton);
268: 
269: 
270:       await waitFor(() => {
271:         expect(mockLogActivity).toHaveBeenCalledTimes(2);
272:         expect(mockLogActivity).toHaveBeenCalledWith(
273:           expect.objectContaining({
274:             plantId: "p1",
275:             type: "water",
276:             details: expect.objectContaining({
277:               amount: { value: 100, unit: "oz" },
278:             }),
279:           })
280:         );
281:         expect(mockLogActivity).toHaveBeenCalledWith(
282:           expect.objectContaining({
283:             plantId: "p2",
284:             type: "water",
285:             details: expect.objectContaining({
286:               amount: { value: 100, unit: "oz" },
287:             }),
288:           })
289:         );
290:       });
291: 
292: 
293:       expect(screen.queryByText("💧 Water All Plants")).not.toBeInTheDocument();
294:     });
295:   });
296: });

================
File: src/db/seedData.ts
================
 1: import { PlantProtocols, varietyService } from "@/types/database";
 2: import { seedVarieties } from "../data/seedVarieties";
 3: 
 4: 
 5: let isInitializing = false;
 6: 
 7: export async function initializeDatabase() {
 8: 
 9:   if (isInitializing) {
10:     console.log("Database initialization already in progress, skipping...");
11:     return;
12:   }
13: 
14:   try {
15:     isInitializing = true;
16: 
17:     const existingVarieties = await varietyService.getAllVarieties();
18: 
19: 
20:     const existingNames = new Set(existingVarieties.map((v) => v.name.trim()));
21: 
22:     const varietiesToAdd = seedVarieties.filter(
23:       (variety) => !existingNames.has(variety.name.trim())
24:     );
25: 
26:     if (varietiesToAdd.length > 0) {
27:       for (const variety of varietiesToAdd) {
28: 
29:         const existing = await varietyService.getVarietyByName(
30:           variety.name.trim()
31:         );
32:         if (existing) {
33:           continue;
34:         }
35: 
36:         await varietyService.addVariety({
37:           name: variety.name.trim(),
38:           category: variety.category,
39:           growthTimeline: variety.growthTimeline,
40:           protocols: (variety.protocols as PlantProtocols) || {},
41:           isEverbearing: variety.isEverbearing,
42:           productiveLifespan: variety.productiveLifespan,
43:         });
44:       }
45:     } else {
46:       console.log("✅ All seed varieties already exist in database");
47:     }
48: 
49: 
50:     const finalVarieties = await varietyService.getAllVarieties();
51:     const finalNames = finalVarieties.map((v) => v.name);
52:     const uniqueFinalNames = new Set(finalNames);
53: 
54:     if (finalNames.length !== uniqueFinalNames.size) {
55:       const duplicates = finalNames.filter(
56:         (name, index) => finalNames.indexOf(name) !== index
57:       );
58:       console.error("Duplicate names:", [...new Set(duplicates)]);
59:     }
60:   } catch (error) {
61:     console.error("Failed to initialize database:", error);
62:   } finally {
63:     isInitializing = false;
64:   }
65: }

================
File: src/pages/plants/Plants.tsx
================
  1: import React, { useState } from "react";
  2: import { useNavigate } from "react-router-dom";
  3: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  4: import { Card, CardContent } from "@/components/ui/Card";
  5: import { Button } from "@/components/ui/Button";
  6: import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
  7: import { Input } from "@/components/ui/Input";
  8: import Navigation from "@/components/Navigation";
  9: import PlantGroupCard from "@/components/plant/PlantGroupCard";
 10: import PlantInfoCard from "@/components/plant/PlantInfoCard";
 11: import BulkActivityModal from "@/components/plant/BulkActivityModal";
 12: import { groupPlantsByConditions, PlantGroup } from "@/utils/plantGrouping";
 13: 
 14: const Plants: React.FC = () => {
 15:   const navigate = useNavigate();
 16:   const { plants, loading, error } = useFirebasePlants();
 17: 
 18:   const [searchTerm, setSearchTerm] = useState("");
 19:   const [viewMode, setViewMode] = useState<"groups" | "individual">("groups");
 20:   const [bulkModalOpen, setBulkModalOpen] = useState(false);
 21:   const [selectedPlantIds, setSelectedPlantIds] = useState<string[]>([]);
 22:   const [selectedActivityType, setSelectedActivityType] = useState<string>("");
 23:   const [selectedGroup, setSelectedGroup] = useState<PlantGroup | null>(null);
 24: 
 25:   if (loading) {
 26:     return (
 27:       <div className="min-h-screen flex items-center justify-center">
 28:         <LoadingSpinner />
 29:       </div>
 30:     );
 31:   }
 32: 
 33:   if (error) {
 34:     return (
 35:       <div className="min-h-screen flex items-center justify-center">
 36:         <div className="text-center">
 37:           <p className="text-destructive mb-4">Error loading plants: {error}</p>
 38:           <Button onClick={() => window.location.reload()}>Try Again</Button>
 39:         </div>
 40:       </div>
 41:     );
 42:   }
 43: 
 44:   const plantGroups = groupPlantsByConditions(plants);
 45: 
 46: 
 47:   const filteredPlants = plants.filter(
 48:     (plant) =>
 49:       (plant.name?.toLowerCase() || "").includes(searchTerm.toLowerCase()) ||
 50:       (plant.varietyName?.toLowerCase() || "").includes(
 51:         searchTerm.toLowerCase()
 52:       )
 53:   );
 54: 
 55:   // Fixed: Match PlantGroupCard interface - only 2 parameters
 56:   const handleBulkLogActivity = (plantIds: string[], activityType: string) => {
 57:     // Find the group to get additional data if needed
 58:     const group = plantGroups.find((g) =>
 59:       g.plants.some((plant) => plantIds.includes(plant.id))
 60:     );
 61: 
 62:     setSelectedPlantIds(plantIds);
 63:     setSelectedActivityType(activityType);
 64:     setSelectedGroup(group || null);
 65:     setBulkModalOpen(true);
 66:   };
 67: 
 68:   const handleIndividualLogActivity = (
 69:     plantId: string,
 70:     activityType: string
 71:   ) => {
 72:     navigate(`/log-care?plantId=${plantId}&activityType=${activityType}`);
 73:   };
 74: 
 75:   const closeBulkModal = () => {
 76:     setBulkModalOpen(false);
 77:     setSelectedPlantIds([]);
 78:     setSelectedActivityType("");
 79:     setSelectedGroup(null);
 80:   };
 81: 
 82:   return (
 83:     <div className="min-h-screen bg-background">
 84:       <Navigation />
 85:       <div className="container mx-auto px-4 py-8">
 86:         <div className="flex justify-between items-center mb-6">
 87:           <h1 className="text-2xl font-bold">My Plants</h1>
 88:           <Button onClick={() => navigate("/add-plant")}>Add Plant</Button>
 89:         </div>
 90: 
 91:         <div className="flex gap-4 mb-6">
 92:           <Input
 93:             placeholder="Search plants..."
 94:             value={searchTerm}
 95:             onChange={(e) => setSearchTerm(e.target.value)}
 96:             className="max-w-sm"
 97:           />
 98:           <div className="flex gap-2">
 99:             <Button
100:               variant={viewMode === "groups" ? "primary" : "outline"}
101:               onClick={() => setViewMode("groups")}
102:             >
103:               Groups
104:             </Button>
105:             <Button
106:               variant={viewMode === "individual" ? "primary" : "outline"}
107:               onClick={() => setViewMode("individual")}
108:             >
109:               Individual
110:             </Button>
111:           </div>
112:         </div>
113: 
114:         {plants.length === 0 ? (
115:           <Card>
116:             <CardContent className="text-center py-8">
117:               <h3 className="text-lg font-semibold mb-2">No plants yet</h3>
118:               <p className="text-muted-foreground mb-4">
119:                 Add your first plant to get started!
120:               </p>
121:               <Button onClick={() => navigate("/add-plant")}>Add Plant</Button>
122:             </CardContent>
123:           </Card>
124:         ) : (
125:           <div className="space-y-4">
126:             {viewMode === "groups" ? (
127:               <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
128:                 {plantGroups.map((group) => (
129:                   <PlantGroupCard
130:                     key={group.id}
131:                     group={group}
132:                     onBulkLogActivity={handleBulkLogActivity}
133:                   />
134:                 ))}
135:               </div>
136:             ) : (
137:               <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
138:                 {filteredPlants.map((plant) => (
139:                   <PlantInfoCard
140:                     key={plant.id}
141:                     plant={plant}
142:                     onLogCare={handleIndividualLogActivity}
143:                     showQuickActions={true}
144:                   />
145:                 ))}
146:               </div>
147:             )}
148:           </div>
149:         )}
150:       </div>
151: 
152:       <BulkActivityModal
153:         isOpen={bulkModalOpen}
154:         onClose={closeBulkModal}
155:         plantIds={selectedPlantIds}
156:         activityType={selectedActivityType}
157:         plantCount={selectedPlantIds.length}
158:         varietyName={selectedGroup?.varietyName || ""}
159:       />
160:     </div>
161:   );
162: };
163: 
164: export default Plants;

================
File: src/types/database.ts
================
  1: import Dexie, { Table } from "dexie";
  2: import { v4 as uuidv4 } from "uuid";
  3: import {
  4:   GrowthStage,
  5:   PlantCategory,
  6:   CareActivityType,
  7:   QualityRating,
  8:   HealthAssessment,
  9:   ApplicationMethod,
 10:   WateringMethod,
 11:   BaseRecord,
 12:   TimestampedRecord,
 13:   MoistureReading,
 14:   GrowthTimeline,
 15: } from "./core";
 16: 
 17: export interface StageSpecificWateringProtocol {
 18:   [stageName: string]: {
 19:     trigger: {
 20:       moistureLevel: string | number;
 21:       description?: string;
 22:     };
 23:     target: {
 24:       moistureLevel: string | number;
 25:       description?: string;
 26:     };
 27:     volume: {
 28:       amount: string;
 29:       frequency: string;
 30:       perPlant?: boolean;
 31:     };
 32:     notes?: string[];
 33:   };
 34: }
 35: 
 36: export interface StageSpecificLightingProtocol {
 37:   [stageName: string]: {
 38:     ppfd: {
 39:       min: number;
 40:       max: number;
 41:       optimal?: number;
 42:       unit: "µmol/m²/s";
 43:     };
 44:     photoperiod: {
 45:       hours: number;
 46:       maxHours?: number;
 47:       minHours?: number;
 48:       constraint?: string;
 49:     };
 50:     dli: {
 51:       min: number;
 52:       max: number;
 53:       unit: "mol/m²/day";
 54:     };
 55:     notes?: string[];
 56:   };
 57: }
 58: 
 59: export interface StageSpecificFertilizationProtocol {
 60:   [stageName: string]: {
 61:     products?: {
 62:       name: string;
 63:       dilution: string;
 64:       amount: string;
 65:       frequency: string;
 66:       method?: "soil-drench" | "foliar-spray" | "top-dress" | "mix-in-soil";
 67:     }[];
 68:     timing?: string;
 69:     specialInstructions?: string[];
 70:     notes?: string[];
 71:   };
 72: }
 73: 
 74: export interface EnvironmentalProtocol {
 75:   temperature?: {
 76:     min: number;
 77:     max: number;
 78:     optimal?: number;
 79:     unit: "F" | "C";
 80:     criticalMax?: number;
 81:     criticalMin?: number;
 82:     stage?: string;
 83:   };
 84:   humidity?: {
 85:     min: number;
 86:     max: number;
 87:     optimal?: number;
 88:     unit: "%";
 89:     criticalForStage?: string;
 90:   };
 91:   pH?: {
 92:     min: number;
 93:     max: number;
 94:     optimal: number;
 95:   };
 96:   specialConditions?: string[];
 97:   constraints?: {
 98:     description: string;
 99:     parameter: "temperature" | "humidity" | "light" | "other";
100:     threshold: number;
101:     consequence: string;
102:   }[];
103: }
104: 
105: export interface SoilMixture {
106:   components: {
107:     [component: string]: number;
108:   };
109:   amendments?: {
110:     [amendment: string]: string;
111:   };
112: }
113: 
114: export interface ContainerRequirements {
115:   minSize?: string;
116:   depth: string;
117:   drainage?: string;
118:   staging?: {
119:     seedling?: string;
120:     intermediate?: string;
121:     final: string;
122:   };
123: }
124: 
125: export interface PlantProtocols {
126:   watering?: StageSpecificWateringProtocol;
127:   lighting?: StageSpecificLightingProtocol;
128:   fertilization?: StageSpecificFertilizationProtocol;
129:   environment?: EnvironmentalProtocol;
130:   soilMixture?: SoilMixture;
131:   container?: ContainerRequirements;
132:   specialRequirements?: string[];
133: }
134: export interface WaterAmount {
135:   value: number;
136:   unit: "oz" | "ml" | "cups" | "gallons" | "liters";
137: }
138: 
139: export interface WateringDetails {
140:   type: "water";
141:   amount: WaterAmount;
142:   moistureReading?: MoistureReading;
143:   method?: WateringMethod;
144:   runoffObserved?: boolean;
145:   notes?: string;
146: }
147: 
148: export interface FertilizingDetails {
149:   type: "fertilize";
150:   product: string;
151:   dilution: string;
152:   amount: string;
153:   method?: ApplicationMethod;
154:   notes?: string;
155: }
156: 
157: export interface ObservationDetails {
158:   type: "observe";
159:   healthAssessment: HealthAssessment;
160:   observations: string;
161:   photos?: string[];
162:   notes?: string;
163: }
164: 
165: export interface HarvestDetails {
166:   type: "harvest";
167:   amount: string;
168:   quality: QualityRating;
169:   method?: string;
170:   notes?: string;
171: }
172: 
173: export interface TransplantDetails {
174:   type: "transplant";
175:   fromContainer: string;
176:   toContainer: string;
177:   reason: string;
178:   notes?: string;
179: }
180: 
181: export type CareActivityDetails =
182:   | WateringDetails
183:   | FertilizingDetails
184:   | ObservationDetails
185:   | HarvestDetails
186:   | TransplantDetails;
187: 
188: export interface PlantRecord extends BaseRecord {
189:   varietyId: string;
190:   varietyName: string;
191:   name?: string;
192:   plantedDate: Date;
193:   location: string;
194:   container: string;
195:   soilMix?: string;
196:   isActive: boolean;
197:   notes?: string[];
198:   quantity?: number;
199:   setupType?: "multiple-containers" | "same-container";
200:   reminderPreferences?: {
201:     watering: boolean;
202:     fertilizing: boolean;
203:     observation: boolean;
204:     lighting: boolean;
205:     pruning: boolean;
206:   };
207: }
208: 
209: export interface VarietyRecord extends TimestampedRecord {
210:   name: string;
211:   category: PlantCategory;
212:   growthTimeline: GrowthTimeline;
213:   protocols?: PlantProtocols;
214:   moistureProtocols?: {
215:     [key in GrowthStage]?: {
216:       trigger: {
217:         min: number;
218:         max: number;
219:       };
220:       target: {
221:         min: number;
222:         max: number;
223:       };
224:     };
225:   };
226:   isCustom?: boolean;
227:   isEverbearing?: boolean;
228:   productiveLifespan?: number;
229: }
230: 
231: export interface CareRecord extends BaseRecord {
232:   plantId: string;
233:   type: CareActivityType;
234:   date: Date;
235:   details: CareActivityDetails;
236:   updatedAt: Date;
237: }
238: 
239: export interface BypassLogRecord {
240:   id?: string;
241:   taskId: string;
242:   plantId: string;
243:   taskType: CareActivityType;
244:   reason: string;
245:   bypassedAt: Date;
246:   plantStage: GrowthStage;
247:   dueDate: Date;
248:   moistureLevel?: number;
249:   weatherConditions?: string;
250: }
251: 
252: export interface TaskBypassRecord extends BaseRecord {
253:   taskId: string;
254:   plantId: string;
255:   taskType: CareActivityType;
256:   reason: string;
257:   scheduledDate: Date;
258:   bypassDate: Date;
259:   plantStage: GrowthStage;
260:   userId?: string;
261: }
262: 
263: export interface TaskCompletionRecord extends BaseRecord {
264:   plantId: string;
265:   taskType: CareActivityType;
266:   scheduledDate: Date;
267:   actualCompletionDate: Date;
268:   varianceDays: number;
269:   careActivityId: string;
270:   plantStage: GrowthStage;
271: }
272: 
273: export interface BypassEntry {
274:   id: string;
275:   taskId: string;
276:   plantId: string;
277:   taskType: CareActivityType;
278:   reason: string;
279:   bypassedAt: Date;
280:   plantStage: GrowthStage;
281:   dueDate: Date;
282:   moistureLevel?: number;
283:   weatherConditions?: string;
284: }
285: 
286: export interface CareActivityRecord extends BaseRecord {
287:   plantId: string;
288:   type: CareActivityType;
289:   date: Date;
290:   details: CareActivityDetails;
291: }
292: 
293: 
294: class SmartGardenDatabase extends Dexie {
295:   plants!: Table<PlantRecord>;
296:   varieties!: Table<VarietyRecord>;
297:   careActivities!: Table<CareActivityRecord>;
298:   bypassLog!: Table<BypassLogRecord>;
299:   taskBypasses!: Table<TaskBypassRecord>;
300:   taskCompletions!: Table<TaskCompletionRecord>;
301: 
302:   constructor() {
303:     super("SmartGardenDatabase");
304: 
305:     this.version(3).stores({
306:       plants: "++id, varietyId, isActive, plantedDate",
307:       varieties: "++id, name, category",
308:       careActivities: "++id, plantId, type, date",
309:       bypassLog: "++id, plantId, taskType, bypassedAt",
310:       taskBypasses: "++id, taskId, plantId, taskType, bypassDate",
311:       taskCompletions:
312:         "++id, plantId, taskType, scheduledDate, actualCompletionDate",
313:     });
314: 
315: 
316:     this.version(4).stores({
317:       plants: "++id, varietyId, isActive, plantedDate",
318:       varieties: "++id, name, category",
319:       careActivities: "++id, plantId, type, date",
320:       bypassLog: "++id, plantId, taskType, bypassedAt",
321:       taskBypasses: "++id, taskId, plantId, taskType, bypassDate",
322:       taskCompletions:
323:         "++id, plantId, taskType, scheduledDate, actualCompletionDate",
324:     });
325:   }
326: }
327: 
328: export const db = new SmartGardenDatabase();
329: 
330: 
331: export const plantService = {
332:   async addPlant(
333:     plant: Omit<PlantRecord, "id" | "createdAt" | "updatedAt">
334:   ): Promise<string> {
335:     const id = uuidv4();
336:     const now = new Date();
337:     const fullPlant: PlantRecord = {
338:       ...plant,
339:       id,
340:       createdAt: now,
341:       updatedAt: now,
342:     };
343: 
344:     try {
345:       await db.plants.add(fullPlant);
346:       return id;
347:     } catch (error) {
348:       console.error("Failed to add plant:", error);
349:       throw error;
350:     }
351:   },
352: 
353:   async getActivePlants(): Promise<PlantRecord[]> {
354:     const allPlants = await db.plants.toArray();
355:     return allPlants.filter((plant) => plant.isActive === true);
356:   },
357: 
358:   async getPlant(id: string): Promise<PlantRecord | undefined> {
359:     return db.plants.get(id);
360:   },
361: 
362:   async updatePlant(
363:     id: string,
364:     updates: Partial<Omit<PlantRecord, "id" | "createdAt">>
365:   ): Promise<void> {
366:     const updateData = {
367:       ...updates,
368:       updatedAt: new Date(),
369:     };
370: 
371:     await db.plants.update(id, updateData);
372:   },
373: 
374:   async deletePlant(id: string): Promise<void> {
375:     const updateData = { isActive: false, updatedAt: new Date() };
376:     await db.plants.update(id, updateData);
377:   },
378: };
379: 
380: 
381: export const varietyService = {
382:   async addVariety(
383:     variety: Omit<VarietyRecord, "id" | "createdAt">
384:   ): Promise<string> {
385:     const existingVariety = await db.varieties
386:       .where("name")
387:       .equals(variety.name)
388:       .first();
389: 
390:     if (existingVariety) {
391:       console.warn(
392:         `Variety "${variety.name}" already exists. Returning existing ID.`
393:       );
394:       return existingVariety.id;
395:     }
396: 
397:     const id = uuidv4();
398:     const now = new Date();
399:     const fullVariety: VarietyRecord = {
400:       ...variety,
401:       id,
402:       createdAt: now,
403:     };
404: 
405:     try {
406:       await db.varieties.add(fullVariety);
407:       return id;
408:     } catch (error) {
409:       console.error("Failed to add variety:", error);
410:       throw error;
411:     }
412:   },
413:   async getVarietyByName(name: string): Promise<VarietyRecord | undefined> {
414:     return db.varieties.where("name").equals(name).first();
415:   },
416:   async getUniqueVarieties(): Promise<VarietyRecord[]> {
417:     const allVarieties = await db.varieties.toArray();
418: 
419: 
420:     const uniqueVarieties = allVarieties.filter(
421:       (variety, index, self) =>
422:         index === self.findIndex((v) => v.name === variety.name)
423:     );
424: 
425:     return uniqueVarieties;
426:   },
427: 
428:   async getVariety(id: string): Promise<VarietyRecord | undefined> {
429:     return db.varieties.get(id);
430:   },
431: 
432:   async getAllVarieties(): Promise<VarietyRecord[]> {
433:     return db.varieties.toArray();
434:   },
435: 
436:   async getVarietiesByCategory(
437:     category: PlantCategory
438:   ): Promise<VarietyRecord[]> {
439:     return db.varieties.where("category").equals(category).toArray();
440:   },
441: };
442: 
443: 
444: export const careService = {
445:   async addCareActivity(
446:     activity: Omit<CareRecord, "id" | "createdAt" | "updatedAt">
447:   ): Promise<string> {
448:     const id = uuidv4();
449:     const now = new Date();
450:     const fullActivity: CareRecord = {
451:       ...activity,
452:       id,
453:       createdAt: now,
454:       updatedAt: now,
455:     };
456: 
457:     try {
458:       await db.careActivities.add(fullActivity);
459:       return id;
460:     } catch (error) {
461:       console.error("Failed to add care activity:", error);
462:       throw error;
463:     }
464:   },
465: 
466:   async getLastActivityByType(
467:     plantId: string,
468:     type: CareActivityType
469:   ): Promise<CareRecord | null> {
470:     const activities = await db.careActivities
471:       .where("plantId")
472:       .equals(plantId)
473:       .and((activity) => activity.type === type)
474:       .reverse()
475:       .sortBy("date");
476: 
477:     return activities.length > 0 ? activities[0] : null;
478:   },
479: 
480:   async getPlantCareHistory(plantId: string): Promise<CareRecord[]> {
481:     return db.careActivities
482:       .where("plantId")
483:       .equals(plantId)
484:       .reverse()
485:       .sortBy("date");
486:   },
487: 
488:   async getRecentActivities(limit: number = 10): Promise<CareRecord[]> {
489:     return db.careActivities.orderBy("date").reverse().limit(limit).toArray();
490:   },
491: };

================
File: src/utils/growthStage.ts
================
  1: import { GrowthStage } from "../types";
  2: import { addDays, differenceInDays } from "date-fns";
  3: import { VarietyRecord } from "@/types/database";
  4: 
  5: export interface GrowthStageInfo {
  6:   stage: GrowthStage;
  7:   startDay: number;
  8:   endDay: number;
  9:   description: string;
 10: }
 11: 
 12: export interface VarietyTimeline {
 13:   germination: number;
 14:   seedling: number;
 15:   vegetative: number;
 16:   maturation: number;
 17: }
 18: 
 19: 
 20: 
 21: 
 22: 
 23: 
 24: 
 25: 
 26: 
 27: export function calculateCurrentStageWithVariety(
 28:   plantedDate: Date,
 29:   variety: VarietyRecord | undefined | null,
 30:   currentDate: Date = new Date()
 31: ): GrowthStage {
 32:   if (!variety || !variety.growthTimeline) {
 33:     console.warn(
 34:       "❌ calculateCurrentStageWithVariety: Invalid variety data, defaulting to vegetative."
 35:     );
 36: 
 37:     return "vegetative";
 38:   }
 39: 
 40:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 41:   const timeline = variety.growthTimeline;
 42: 
 43:   if (daysSincePlanting < 0 || daysSincePlanting < timeline.germination) {
 44:     return "germination";
 45:   }
 46:   if (daysSincePlanting < timeline.germination + timeline.seedling) {
 47:     return "seedling";
 48:   }
 49:   if (
 50:     daysSincePlanting <
 51:     timeline.germination + timeline.seedling + timeline.vegetative
 52:   ) {
 53:     return "vegetative";
 54:   }
 55:   if (daysSincePlanting < timeline.maturation) {
 56:     return "flowering";
 57:   }
 58: 
 59:   if (variety.isEverbearing) {
 60:     const effectiveLifespan = variety.productiveLifespan ?? 730;
 61: 
 62:     if (daysSincePlanting >= effectiveLifespan) {
 63:       return "harvest";
 64:     }
 65:     return "ongoing-production";
 66:   } else {
 67:     return "harvest";
 68:   }
 69: }
 70: 
 71: 
 72: 
 73: 
 74: 
 75: 
 76: 
 77: 
 78: 
 79: export function calculateCurrentStage(
 80:   plantedDate: Date,
 81:   timeline: VarietyTimeline,
 82:   currentDate: Date = new Date()
 83: ): GrowthStage {
 84:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
 85: 
 86:   if (daysSincePlanting < 0) return "germination";
 87:   if (daysSincePlanting < timeline.germination) return "germination";
 88:   if (daysSincePlanting < timeline.germination + timeline.seedling)
 89:     return "seedling";
 90:   if (
 91:     daysSincePlanting <
 92:     timeline.germination + timeline.seedling + timeline.vegetative
 93:   )
 94:     return "vegetative";
 95:   if (daysSincePlanting < timeline.maturation) return "flowering";
 96: 
 97:   return "harvest";
 98: }
 99: 
100: export function getStageProgress(
101:   plantedDate: Date,
102:   timeline: VarietyTimeline,
103:   currentDate: Date = new Date()
104: ): number {
105:   const daysSincePlanting = differenceInDays(currentDate, plantedDate);
106:   const currentStage = calculateCurrentStage(
107:     plantedDate,
108:     timeline,
109:     currentDate
110:   );
111: 
112:   let stageStart = 0;
113:   let stageEnd = timeline.germination;
114: 
115:   switch (currentStage) {
116:     case "seedling":
117:       stageStart = timeline.germination;
118:       stageEnd = timeline.germination + timeline.seedling;
119:       break;
120:     case "vegetative":
121:       stageStart = timeline.germination + timeline.seedling;
122:       stageEnd = timeline.germination + timeline.seedling + timeline.vegetative;
123:       break;
124:     case "flowering":
125:       stageStart =
126:         timeline.germination + timeline.seedling + timeline.vegetative;
127:       stageEnd = timeline.maturation;
128:       break;
129:     case "maturation":
130:     case "ongoing-production":
131:     case "harvest":
132:       return 100;
133:   }
134: 
135:   const stageProgress =
136:     ((daysSincePlanting - stageStart) / (stageEnd - stageStart)) * 100;
137:   return Math.min(Math.max(stageProgress, 0), 100);
138: }
139: 
140: export function getNextStage(currentStage: GrowthStage): GrowthStage | null {
141:   const stages: GrowthStage[] = [
142:     "germination",
143:     "seedling",
144:     "vegetative",
145:     "flowering",
146:     "maturation",
147:     "ongoing-production",
148:     "harvest",
149:   ];
150:   const currentIndex = stages.indexOf(currentStage);
151: 
152:   if (currentIndex === -1 || currentIndex === stages.length - 1) {
153:     return null;
154:   }
155: 
156:   return stages[currentIndex + 1];
157: }
158: 
159: export function estimateStageTransition(
160:   plantedDate: Date,
161:   timeline: VarietyTimeline,
162:   targetStage: GrowthStage
163: ): Date {
164:   let daysToTarget = 0;
165: 
166:   switch (targetStage) {
167:     case "seedling":
168:       daysToTarget = timeline.germination;
169:       break;
170:     case "vegetative":
171:       daysToTarget = timeline.germination + timeline.seedling;
172:       break;
173:     case "flowering":
174:       daysToTarget =
175:         timeline.germination + timeline.seedling + timeline.vegetative;
176:       break;
177:     case "maturation":
178:     case "ongoing-production":
179:     case "harvest":
180:       daysToTarget = timeline.maturation;
181:       break;
182:   }
183: 
184:   return addDays(plantedDate, daysToTarget);
185: }
186: 
187: export function formatStageProgress(progress: number): string {
188:   return `${Math.round(progress)}%`;
189: }

================
File: src/App.tsx
================
 1: import { Routes, Route } from "react-router-dom";
 2: import { useFirebaseAuth } from "./hooks/useFirebaseAuth";
 3: import { useAppInitialization } from "./hooks/useAppInitialization";
 4: import { AuthForm } from "./components/AuthForm";
 5: import AddPlant from "./pages/plants/AddPlant";
 6: import Plants from "./pages/plants/Plants";
 7: import PlantDetail from "./pages/plants/PlantDetail";
 8: import LogCare from "./pages/care/LogCare";
 9: import { Dashboard } from "./pages/dashboard";
10: 
11: const App = () => {
12:   const { user, loading } = useFirebaseAuth();
13:   useAppInitialization();
14: 
15:   if (loading) {
16:     return (
17:       <div className="min-h-screen flex items-center justify-center">
18:         <div>Loading...</div>
19:       </div>
20:     );
21:   }
22: 
23:   if (!user) {
24:     return <AuthForm />;
25:   }
26: 
27:   return (
28:     <div className="min-h-screen bg-gray-50">
29:       <Routes>
30:         <Route path="/" element={<Dashboard />} />
31:         <Route path="/plants" element={<Plants />} />
32:         <Route path="/plants/:plantId" element={<PlantDetail />} />
33:         <Route path="/add-plant" element={<AddPlant />} />
34:         <Route path="/log-care" element={<LogCare />} />
35:         <Route path="/log-care/:plantId" element={<LogCare />} />
36:       </Routes>
37:     </div>
38:   );
39: };
40: 
41: export default App;

================
File: src/pages/plants/PlantDetail.tsx
================
  1: import React, { useState, useEffect } from "react";
  2: import { useParams, useNavigate } from "react-router-dom";
  3: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  4: import { Button } from "@/components/ui/Button";
  5: import { LoadingSpinner } from "@/components/ui/LoadingSpinner";
  6: import { FirebasePlantService } from "@/services/firebase/plantService";
  7: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  8: import { useFirebaseCareActivities } from "@/hooks/useFirebaseCareActivities";
  9: import { varietyService, PlantRecord, VarietyRecord } from "@/types/database";
 10: import CareHistory from "@/components/plant/CareHistory";
 11: import PlantReminderSettings from "@/components/plant/PlantReminderSettings";
 12: import { getDaysSincePlanting } from "@/utils/dateUtils";
 13: import { getPlantDisplayName } from "@/utils/plantDisplay";
 14: import PlantInfoCard from "@/components/plant/PlantInfoCard";
 15: import NextActivityCard from "@/components/plant/NextActivityCard";
 16: 
 17: const PlantDetail: React.FC = () => {
 18:   const { plantId } = useParams<{ plantId: string }>();
 19:   const navigate = useNavigate();
 20:   const { user } = useFirebaseAuth();
 21: 
 22:   const [plant, setPlant] = useState<PlantRecord | null>(null);
 23:   const [variety, setVariety] = useState<VarietyRecord | null>(null);
 24:   const [isLoading, setIsLoading] = useState(true);
 25:   const [error, setError] = useState<string | null>(null);
 26:   const [showReminderSettings, setShowReminderSettings] = useState(false);
 27: 
 28: 
 29:   const { activities: careHistory } = useFirebaseCareActivities(plantId);
 30: 
 31:   useEffect(() => {
 32:     if (!plantId) {
 33:       setError("No plant ID provided");
 34:       setIsLoading(false);
 35:       return;
 36:     }
 37: 
 38:     if (!user) {
 39:       setError("User not authenticated");
 40:       setIsLoading(false);
 41:       return;
 42:     }
 43: 
 44:     async function loadPlantDetails() {
 45:       try {
 46:         setIsLoading(true);
 47:         setError(null);
 48: 
 49:         console.log("Loading plant with ID:", plantId);
 50: 
 51: 
 52:         const unsubscribe = FirebasePlantService.subscribeToPlantsChanges(
 53:           user.uid,
 54:           (plants) => {
 55:             const foundPlant = plants.find((p) => p.id === plantId);
 56:             if (foundPlant) {
 57:               setPlant(foundPlant);
 58: 
 59: 
 60:               if (foundPlant.varietyId) {
 61:                 varietyService
 62:                   .getVariety(foundPlant.varietyId)
 63:                   .then((varietyData) => setVariety(varietyData || null))
 64:                   .catch(console.error);
 65:               }
 66:             } else {
 67:               setError("Plant not found");
 68:             }
 69:             setIsLoading(false);
 70:           },
 71:           { includeInactive: true }
 72:         );
 73: 
 74: 
 75:         return unsubscribe;
 76:       } catch (error) {
 77:         console.error("Failed to load plant details:", error);
 78:         setError("Failed to load plant details");
 79:         setIsLoading(false);
 80:       }
 81:     }
 82: 
 83:     const unsubscribe = loadPlantDetails();
 84:     return () => {
 85:       if (unsubscribe && typeof unsubscribe === "function") {
 86:         unsubscribe();
 87:       }
 88:     };
 89:   }, [plantId, user]);
 90: 
 91:   const handlePlantUpdate = async (updates: Partial<PlantRecord>) => {
 92:     if (!plantId) return;
 93: 
 94:     try {
 95:       await FirebasePlantService.updatePlant(plantId, updates);
 96: 
 97:     } catch (error) {
 98:       console.error("Failed to update plant:", error);
 99:     }
100:   };
101: 
102:   const handleLogCare = (activityType?: string) => {
103:     const params = new URLSearchParams();
104:     if (plantId) params.set("plantId", plantId);
105:     if (activityType) params.set("type", activityType);
106: 
107:     navigate(`/log-care?${params.toString()}`);
108:   };
109: 
110:   if (isLoading) {
111:     return (
112:       <div className="min-h-screen flex items-center justify-center">
113:         <LoadingSpinner />
114:       </div>
115:     );
116:   }
117: 
118:   if (error || !plant) {
119:     return (
120:       <div className="min-h-screen flex flex-col items-center justify-center p-4">
121:         <div className="text-center max-w-md">
122:           <span className="text-6xl mb-4 block">🌱</span>
123:           <h2 className="text-xl font-semibold text-foreground mb-2">
124:             {error || "Plant not found"}
125:           </h2>
126:           <p className="text-muted-foreground mb-4">
127:             We couldn't load the details for this plant.
128:           </p>
129:           <Button
130:             onClick={() => navigate("/")}
131:             className="bg-primary hover:bg-primary/90"
132:           >
133:             <span className="mr-2">🏠</span>
134:             Go to Dashboard
135:           </Button>
136:         </div>
137:       </div>
138:     );
139:   }
140: 
141:   const daysSincePlanting = getDaysSincePlanting(plant.plantedDate);
142:   const plantDisplayName = getPlantDisplayName(plant);
143: 
144:   return (
145:     <div className="min-h-screen bg-background pb-20">
146:       <div className="sticky top-0 z-40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border">
147:         <div className="flex items-center justify-between p-4">
148:           <Button
149:             variant="ghost"
150:             size="sm"
151:             onClick={() => navigate("/")}
152:             className="text-muted-foreground hover:text-foreground"
153:           >
154:             <span className="mr-2">←</span>
155:             Back
156:           </Button>
157:           <Button
158:             variant="ghost"
159:             size="sm"
160:             onClick={() => setShowReminderSettings(!showReminderSettings)}
161:             className="text-muted-foreground hover:text-foreground"
162:           >
163:             <span className="mr-2">⚙️</span>
164:             Settings
165:           </Button>
166:         </div>
167:       </div>
168: 
169:       <div className="space-y-4">
170:         {}
171:         <Card>
172:           <CardContent className="p-6">
173:             <div className="flex items-start justify-between mb-4">
174:               <div>
175:                 <h1 className="text-2xl font-bold text-foreground mb-2">
176:                   {plantDisplayName}
177:                 </h1>
178:                 <div className="text-sm text-muted-foreground">
179:                   {variety?.name}
180:                 </div>
181:               </div>
182:             </div>
183:           </CardContent>
184:         </Card>
185: 
186:         <PlantInfoCard plant={plant} onLogCare={handleLogCare} />
187: 
188:         <NextActivityCard plantId={plant.id} onTaskClick={handleLogCare} />
189: 
190:         <Card>
191:           <CardHeader>
192:             <CardTitle className="flex items-center gap-2">
193:               <span className="text-xl">🚀</span>
194:               Quick Actions
195:             </CardTitle>
196:           </CardHeader>
197:           <CardContent>
198:             <div className="grid grid-cols-2 gap-3">
199:               <Button
200:                 onClick={() => handleLogCare("water")}
201:                 className="bg-blue-500 hover:bg-blue-600 text-white"
202:               >
203:                 <span className="mr-2">💧</span>
204:                 Water
205:               </Button>
206:               <Button
207:                 onClick={() => handleLogCare("fertilize")}
208:                 className="bg-green-500 hover:bg-green-600 text-white"
209:               >
210:                 <span className="mr-2">🌱</span>
211:                 Fertilize
212:               </Button>
213:               <Button
214:                 onClick={() => handleLogCare("photo")}
215:                 className="bg-purple-500 hover:bg-purple-600 text-white"
216:               >
217:                 <span className="mr-2">📸</span>
218:                 Photo
219:               </Button>
220:               <Button
221:                 onClick={() => handleLogCare("note")}
222:                 className="bg-orange-500 hover:bg-orange-600 text-white"
223:               >
224:                 <span className="mr-2">📝</span>
225:                 Note
226:               </Button>
227:             </div>
228:           </CardContent>
229:         </Card>
230: 
231:         {}
232:         {showReminderSettings && (
233:           <PlantReminderSettings plant={plant} onUpdate={handlePlantUpdate} />
234:         )}
235: 
236:         {}
237:         <CareHistory careHistory={careHistory} />
238:       </div>
239:     </div>
240:   );
241: };
242: 
243: export default PlantDetail;

================
File: src/services/careSchedulingService.ts
================
  1: import {
  2:   plantService,
  3:   careService,
  4:   varietyService,
  5:   PlantRecord,
  6: } from "@/types/database";
  7: import { CareActivityType, GrowthStage } from "@/types/core";
  8: import { calculateCurrentStage } from "@/utils/growthStage";
  9: import { getPlantDisplayName } from "@/utils/plantDisplay";
 10: import { UpcomingTask } from "@/types/scheduling";
 11: import { addDays, differenceInDays } from "date-fns";
 12: import { DynamicSchedulingService } from "./dynamicSchedulingService";
 13: 
 14: export class CareSchedulingService {
 15:   static async getUpcomingTasks(): Promise<UpcomingTask[]> {
 16:     try {
 17:       const plants = await plantService.getActivePlants();
 18:       const allTasks: UpcomingTask[] = [];
 19: 
 20:       for (const plant of plants) {
 21:         const plantTasks = await this.getTasksForPlant(plant);
 22: 
 23: 
 24:         const filteredTasks = plantTasks.filter((task) => {
 25:           if (!plant.reminderPreferences) return true;
 26: 
 27: 
 28:           const taskTypeMap: Record<
 29:             string,
 30:             keyof typeof plant.reminderPreferences
 31:           > = {
 32:             "Check water level": "watering",
 33:             Water: "watering",
 34:             Fertilize: "fertilizing",
 35:             Observe: "observation",
 36:             "Check lighting": "lighting",
 37:             Prune: "pruning",
 38:             "Health check": "observation",
 39:           };
 40: 
 41:           const preferenceKey = taskTypeMap[task.task];
 42:           return preferenceKey
 43:             ? plant.reminderPreferences[preferenceKey]
 44:             : true;
 45:         });
 46: 
 47:         allTasks.push(...filteredTasks);
 48:       }
 49: 
 50:       return allTasks.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());
 51:     } catch (error) {
 52:       console.error("Error getting upcoming tasks:", error);
 53:       return [];
 54:     }
 55:   }
 56: 
 57:   private static async getTasksForPlant(
 58:     plant: PlantRecord
 59:   ): Promise<UpcomingTask[]> {
 60:     try {
 61:       const variety = await varietyService.getVariety(plant.varietyId);
 62:       if (!variety) return [];
 63: 
 64: 
 65:       const currentStage = calculateCurrentStage(
 66:         plant.plantedDate,
 67:         variety.growthTimeline
 68:       );
 69: 
 70:       if (currentStage !== plant.currentStage) {
 71:         await plantService.updatePlant(plant.id, {
 72:           currentStage,
 73:           updatedAt: new Date(),
 74:         });
 75:       }
 76: 
 77:       const tasks: UpcomingTask[] = [];
 78: 
 79: 
 80:       const wateringTask = await this.createWateringTask(plant, currentStage);
 81:       if (wateringTask) tasks.push(wateringTask);
 82: 
 83: 
 84:       const observationTask = await this.createObservationTask(
 85:         plant,
 86:         currentStage
 87:       );
 88:       if (observationTask) tasks.push(observationTask);
 89: 
 90:       return tasks;
 91:     } catch (error) {
 92:       console.error(`Error processing tasks for plant ${plant.id}:`, error);
 93:       return [];
 94:     }
 95:   }
 96: 
 97:   private static async createWateringTask(
 98:     plant: PlantRecord,
 99:     currentStage: GrowthStage
100:   ): Promise<UpcomingTask | null> {
101:     const lastWatering = await careService.getLastActivityByType(
102:       plant.id,
103:       "water"
104:     );
105: 
106: 
107:     const wateringIntervals: Record<GrowthStage, number> = {
108:       germination: 1,
109:       seedling: 2,
110:       vegetative: 3,
111:       flowering: 2,
112:       fruiting: 2,
113:       maturation: 3,
114:       harvest: 4,
115:       "ongoing-production": 2,
116:     };
117: 
118:     const intervalDays = wateringIntervals[currentStage] || 3;
119: 
120:     let nextDueDate: Date;
121: 
122:     if (lastWatering) {
123:       nextDueDate = addDays(lastWatering.date, intervalDays);
124:     } else {
125: 
126:       const daysSincePlanting = differenceInDays(new Date(), plant.plantedDate);
127:       nextDueDate =
128:         daysSincePlanting > 1 ? new Date() : addDays(plant.plantedDate, 1);
129:     }
130: 
131: 
132:     if (nextDueDate <= addDays(new Date(), 2)) {
133: 
134:       const daysOverdue = differenceInDays(new Date(), nextDueDate);
135: 
136:       return {
137:         id: `water-${plant.id}`,
138:         plantId: plant.id,
139:         name: getPlantDisplayName(plant),
140:         task: "Check water level",
141:         dueIn: this.formatDueIn(nextDueDate),
142:         priority: this.calculatePriority(daysOverdue),
143:         plantStage: currentStage,
144:         dueDate: nextDueDate,
145:         canBypass: true,
146:       };
147:     }
148: 
149:     return null;
150:   }
151: 
152:   private static async createObservationTask(
153:     plant: PlantRecord,
154:     currentStage: GrowthStage
155:   ): Promise<UpcomingTask | null> {
156:     const lastObservation = await careService.getLastActivityByType(
157:       plant.id,
158:       "observe"
159:     );
160: 
161: 
162:     const observationInterval = 7;
163: 
164:     let nextDueDate: Date;
165: 
166:     if (lastObservation) {
167:       nextDueDate = addDays(lastObservation.date, observationInterval);
168:     } else {
169: 
170:       nextDueDate = addDays(plant.plantedDate, 3);
171:     }
172: 
173: 
174:     if (nextDueDate <= addDays(new Date(), 1)) {
175: 
176:       const daysOverdue = differenceInDays(new Date(), nextDueDate);
177: 
178:       return {
179:         id: `observe-${plant.id}`,
180:         plantId: plant.id,
181:         name: getPlantDisplayName(plant),
182:         task: "Health check",
183:         dueIn: this.formatDueIn(nextDueDate),
184:         priority: this.calculatePriority(daysOverdue),
185:         plantStage: currentStage,
186:         dueDate: nextDueDate,
187:         canBypass: true,
188:       };
189:     }
190: 
191:     return null;
192:   }
193: 
194:   static async getTasksForPlantWithDynamicScheduling(
195:     plant: PlantRecord
196:   ): Promise<UpcomingTask[]> {
197:     try {
198:       const variety = await varietyService.getVariety(plant.varietyId);
199:       if (!variety) return [];
200: 
201:       const tasks: UpcomingTask[] = [];
202:       const currentStage = calculateCurrentStage(
203:         plant.plantedDate,
204:         variety.growthTimeline
205:       );
206: 
207:       const protocolIntervals = {
208:         water: 3,
209:         fertilize: 14,
210:         observe: 7,
211:       };
212: 
213:       for (const [taskType, protocolInterval] of Object.entries(
214:         protocolIntervals
215:       )) {
216:         const nextDueDate =
217:           await DynamicSchedulingService.getNextDueDateForTask(
218:             plant.id,
219:             taskType as CareActivityType,
220:             new Date(protocolInterval)
221:           );
222: 
223:         const daysUntilDue = differenceInDays(nextDueDate, new Date());
224:         const priority =
225:           daysUntilDue < 0 ? "high" : daysUntilDue === 0 ? "medium" : "low";
226: 
227:         tasks.push({
228:           id: `${plant.id}-${taskType}`,
229:           plantId: plant.id,
230:           name: getPlantDisplayName(plant),
231:           task: this.getTaskName(taskType as CareActivityType),
232:           dueIn: this.formatDueIn(nextDueDate),
233:           plantStage: currentStage,
234:           dueDate: nextDueDate,
235:           priority,
236:           canBypass: true,
237:         });
238:       }
239: 
240:       return tasks;
241:     } catch (error) {
242:       console.error("Failed to get tasks for plant:", error);
243:       return [];
244:     }
245:   }
246: 
247:   private static getTaskName(taskType: CareActivityType): string {
248:     switch (taskType) {
249:       case "water":
250:         return "Check water level";
251:       case "fertilize":
252:         return "Fertilize";
253:       case "observe":
254:         return "Health check";
255:       default:
256:         return "Care task";
257:     }
258:   }
259: 
260:   static async getNextTaskForPlant(
261:     plantId: string
262:   ): Promise<UpcomingTask | null> {
263:     const plants = await plantService.getActivePlants();
264:     const plant = plants.find((p) => p.id === plantId);
265: 
266:     if (!plant) return null;
267: 
268:     const tasks = await this.getTasksForPlant(plant);
269: 
270: 
271:     const filteredTasks = tasks.filter((task) => {
272:       if (!plant.reminderPreferences) return true;
273: 
274:       const taskTypeMap: Record<
275:         string,
276:         keyof typeof plant.reminderPreferences
277:       > = {
278:         "Check water level": "watering",
279:         Water: "watering",
280:         Fertilize: "fertilizing",
281:         Observe: "observation",
282:         "Check lighting": "lighting",
283:         Prune: "pruning",
284:         "Health check": "observation",
285:       };
286: 
287:       const preferenceKey = taskTypeMap[task.task];
288:       return preferenceKey ? plant.reminderPreferences[preferenceKey] : true;
289:     });
290: 
291: 
292:     if (filteredTasks.length === 0) return null;
293: 
294:     return filteredTasks.sort(
295:       (a, b) => a.dueDate.getTime() - b.dueDate.getTime()
296:     )[0];
297:   }
298: 
299:   private static formatDueIn(dueDate: Date): string {
300:     const now = new Date();
301:     const diffDays = differenceInDays(dueDate, now);
302: 
303:     if (diffDays < 0) {
304:       return `${Math.abs(diffDays)} days overdue`;
305:     } else if (diffDays === 0) {
306:       return "Due today";
307:     } else if (diffDays === 1) {
308:       return "Due tomorrow";
309:     } else {
310:       return `Due in ${diffDays} days`;
311:     }
312:   }
313: 
314:   private static calculatePriority(
315:     daysOverdue: number
316:   ): "low" | "medium" | "high" {
317:     if (daysOverdue >= 2) return "high";
318:     if (daysOverdue >= 0) return "medium";
319:     return "low";
320:   }
321: }

================
File: jest.config.ts
================
 1: import type { Config } from "jest";
 2: 
 3: const config: Config = {
 4:   preset: "ts-jest",
 5:   testEnvironment: "jsdom",
 6:   setupFilesAfterEnv: ["<rootDir>/src/setupTests.ts"],
 7:   setupFiles: ["<rootDir>/src/jest.polyfills.ts"],
 8:   moduleNameMapper: {
 9:     "^@/(.*)$": "<rootDir>/src/$1",
10:     "^@/components/(.*)$": "<rootDir>/src/components/$1",
11:     "^@/pages/(.*)$": "<rootDir>/src/pages/$1",
12:     "^@/hooks/(.*)$": "<rootDir>/src/hooks/$1",
13:     "^@/services/(.*)$": "<rootDir>/src/services/$1",
14:     "^@/types/(.*)$": "<rootDir>/src/types/$1",
15:     "^@/utils/(.*)$": "<rootDir>/src/utils/$1",
16:     "^@/data/(.*)$": "<rootDir>/src/data/$1",
17:     "^@/db/(.*)$": "<rootDir>/src/db/$1",
18: 
19:     "^@/services/firebase/config$":
20:       "<rootDir>/src/services/firebase/__mocks__/config.ts",
21:   },
22:   collectCoverageFrom: [
23:     "src/**/*.{ts,tsx}",
24:     "!src/**/*.d.ts",
25:     "!src/main.tsx",
26:     "!src/vite-env.d.ts",
27:     "!src/setupTests.ts",
28:   ],
29:   testMatch: [
30:     "<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}",
31:     "<rootDir>/src/**/*.(test|spec).{js,jsx,ts,tsx}",
32:   ],
33:   testPathIgnorePatterns: [
34:     "/__tests__/utils/testHelpers.tsx",
35:     "/__tests__/utils/plantFactory.ts",
36:     "/__tests__/e2e/",
37:     "/node_modules/",
38:     "/.*\\.spec\\.ts$",
39:     "/__tests__/e2e/plant-registration.spec.ts",
40:   ],
41:   transform: {
42:     "^.+\\.tsx?$": ["ts-jest", { tsconfig: "tsconfig.json" }],
43:   },
44:   moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json"],
45:   transformIgnorePatterns: ["node_modules/(?!(uuid)/)"],
46: };
47: 
48: export default config;

================
File: src/pages/care/CareLogForm.tsx
================
   1: import { useState, useEffect, useCallback } from "react";
   2: import { useForm } from "react-hook-form";
   3: import { useSearchParams } from "react-router-dom";
   4: import { zodResolver } from "@hookform/resolvers/zod";
   5: import { z } from "zod";
   6: import {
   7:   plantService,
   8:   careService,
   9:   varietyService,
  10:   PlantRecord,
  11:   VarietyRecord,
  12:   CareActivityDetails,
  13:   WateringDetails,
  14:   FertilizingDetails,
  15:   ObservationDetails,
  16: } from "@/types/database";
  17: import { Button } from "@/components/ui/Button";
  18: import { PhotoCapture } from "./PhotoCapture";
  19: import { calculateCurrentStage } from "@/utils/growthStage";
  20: import { GrowthStage } from "@/types/core";
  21: import toast from "react-hot-toast";
  22: import {
  23:   SmartDefaultsService,
  24:   SmartDefaults,
  25:   QuickCompletionValues,
  26: } from "@/services/smartDefaultsService";
  27: import QuickCompletionButtons from "@/pages/care/QuickCompletionButtons";
  28: 
  29: 
  30: interface MoistureValidationMessage {
  31:   field: "before" | "after" | "source";
  32:   message: string;
  33:   color: string;
  34: }
  35: 
  36: interface MoistureValidationResult {
  37:   validations: MoistureValidationMessage[];
  38:   isValid: boolean;
  39: }
  40: 
  41: interface CategoryMoistureDefaults {
  42:   trigger: [number, number];
  43:   target: [number, number];
  44: }
  45: 
  46: interface PlantMoistureProtocol {
  47:   trigger: [number, number];
  48:   target: [number, number];
  49:   varietyName: string;
  50:   currentStage: GrowthStage;
  51:   isDefault: boolean;
  52:   source: "protocol" | "category" | "universal";
  53: }
  54: 
  55: 
  56: function extractMoistureRangesForStage(
  57:   variety: VarietyRecord,
  58:   stage: GrowthStage
  59: ): PlantMoistureProtocol | null {
  60: 
  61:   const stageProtocol = variety.protocols?.watering?.[stage] as {
  62:     trigger?: { moistureLevel?: string | number };
  63:     target?: { moistureLevel?: string | number };
  64:   };
  65: 
  66:   if (
  67:     stageProtocol?.trigger?.moistureLevel &&
  68:     stageProtocol?.target?.moistureLevel
  69:   ) {
  70:     const triggerRange = parseMoistureRange(
  71:       stageProtocol.trigger.moistureLevel
  72:     );
  73:     const targetRange = parseMoistureRange(stageProtocol.target.moistureLevel);
  74: 
  75:     if (triggerRange && targetRange) {
  76:       return {
  77:         trigger: triggerRange,
  78:         target: targetRange,
  79:         varietyName: variety.name || "Unknown",
  80:         currentStage: stage,
  81:         isDefault: false,
  82:         source: "protocol",
  83:       };
  84:     }
  85:   }
  86: 
  87: 
  88:   const categoryDefaults = getCategoryBasedDefaults(variety.category, stage);
  89:   if (categoryDefaults) {
  90:     return {
  91:       ...categoryDefaults,
  92:       varietyName: variety.name || "Unknown",
  93:       currentStage: stage,
  94:       isDefault: false,
  95:       source: "category",
  96:     };
  97:   }
  98: 
  99: 
 100:   return {
 101:     trigger: [3, 4] as [number, number],
 102:     target: [6, 7] as [number, number],
 103:     varietyName: variety.name || "Unknown",
 104:     currentStage: stage,
 105:     isDefault: true,
 106:     source: "universal",
 107:   };
 108: }
 109: 
 110: function parseMoistureRange(value: string | number): [number, number] | null {
 111:   if (typeof value === "number") {
 112:     return [value, value];
 113:   }
 114: 
 115:   if (typeof value === "string") {
 116: 
 117:     const rangeMatch = value.match(/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)/);
 118:     if (rangeMatch) {
 119:       return [parseFloat(rangeMatch[1]), parseFloat(rangeMatch[2])];
 120:     }
 121: 
 122: 
 123:     const singleMatch = value.match(/(\d+(?:\.\d+)?)/);
 124:     if (singleMatch) {
 125:       const num = parseFloat(singleMatch[1]);
 126:       return [num, num];
 127:     }
 128:   }
 129: 
 130:   return null;
 131: }
 132: 
 133: function getCategoryBasedDefaults(
 134:   category: string,
 135:   stage: GrowthStage
 136: ): CategoryMoistureDefaults | null {
 137: 
 138:   const categoryProtocols: Record<
 139:     string,
 140:     Record<GrowthStage, CategoryMoistureDefaults>
 141:   > = {
 142:     "root-vegetables": {
 143:       germination: { trigger: [4, 5], target: [6, 7] },
 144:       seedling: { trigger: [4, 5], target: [6, 7] },
 145:       vegetative: { trigger: [3, 4], target: [6, 7] },
 146:       flowering: { trigger: [3, 4], target: [6, 7] },
 147:       fruiting: { trigger: [3, 4], target: [6, 7] },
 148:       maturation: { trigger: [3, 4], target: [6, 7] },
 149:       harvest: { trigger: [3, 4], target: [6, 7] },
 150:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 151:     },
 152:     "leafy-greens": {
 153:       germination: { trigger: [3, 4], target: [6, 7] },
 154:       seedling: { trigger: [3, 4], target: [6, 7] },
 155:       vegetative: { trigger: [3, 4], target: [6, 7] },
 156:       flowering: { trigger: [3, 4], target: [6, 7] },
 157:       fruiting: { trigger: [3, 4], target: [6, 7] },
 158:       maturation: { trigger: [3, 4], target: [6, 7] },
 159:       harvest: { trigger: [3, 4], target: [6, 7] },
 160:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 161:     },
 162:     "fruiting-plants": {
 163:       germination: { trigger: [4, 5], target: [7, 8] },
 164:       seedling: { trigger: [4, 5], target: [7, 8] },
 165:       vegetative: { trigger: [3, 4], target: [6, 7] },
 166:       flowering: { trigger: [3, 4], target: [6, 7] },
 167:       fruiting: { trigger: [3, 4], target: [6, 8] },
 168:       maturation: { trigger: [3, 4], target: [6, 8] },
 169:       harvest: { trigger: [3, 4], target: [6, 8] },
 170:       "ongoing-production": { trigger: [3, 4], target: [6, 8] },
 171:     },
 172:     herbs: {
 173:       germination: { trigger: [3, 4], target: [6, 7] },
 174:       seedling: { trigger: [3, 4], target: [6, 7] },
 175:       vegetative: { trigger: [3, 4], target: [6, 7] },
 176:       flowering: { trigger: [3, 4], target: [6, 7] },
 177:       fruiting: { trigger: [3, 4], target: [6, 7] },
 178:       maturation: { trigger: [3, 4], target: [6, 7] },
 179:       harvest: { trigger: [3, 4], target: [6, 7] },
 180:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 181:     },
 182:     berries: {
 183:       germination: { trigger: [3, 4], target: [6, 7] },
 184:       seedling: { trigger: [3, 4], target: [6, 7] },
 185:       vegetative: { trigger: [3, 4], target: [6, 7] },
 186:       flowering: { trigger: [3, 4], target: [6, 7] },
 187:       fruiting: { trigger: [3, 4], target: [6, 7] },
 188:       maturation: { trigger: [3, 4], target: [6, 7] },
 189:       harvest: { trigger: [3, 4], target: [6, 7] },
 190:       "ongoing-production": { trigger: [3, 4], target: [6, 7] },
 191:     },
 192:   };
 193: 
 194:   return categoryProtocols[category]?.[stage] || null;
 195: }
 196: 
 197: 
 198: const baseCareSchema = z.object({
 199:   plantId: z.string().min(1, "Please select a plant"),
 200:   type: z.enum(["water", "fertilize", "observe", "harvest", "transplant"]),
 201:   date: z.string(),
 202:   notes: z.string().optional(),
 203: });
 204: 
 205: const wateringSchema = baseCareSchema.extend({
 206:   type: z.literal("water"),
 207:   waterValue: z.number().min(0.1, "Water amount must be greater than 0"),
 208:   waterUnit: z.enum(["oz", "ml", "cups", "liters", "gallons"]),
 209:   moistureBefore: z.number().min(1).max(10).optional(),
 210:   moistureAfter: z.number().min(1).max(10).optional(),
 211:   applicationMethod: z
 212:     .enum(["top-watering", "bottom-watering", "drip", "misting"])
 213:     .optional(),
 214:   runoffObserved: z.boolean().optional(),
 215: });
 216: 
 217: const fertilizingSchema = baseCareSchema.extend({
 218:   type: z.literal("fertilize"),
 219:   product: z.string().min(1, "Fertilizer product is required"),
 220:   dilution: z.string().min(1, "Dilution ratio is required"),
 221:   amount: z.string().min(1, "Application amount is required"),
 222: });
 223: 
 224: const observationSchema = baseCareSchema.extend({
 225:   type: z.literal("observe"),
 226:   healthAssessment: z.enum([
 227:     "excellent",
 228:     "good",
 229:     "fair",
 230:     "concerning",
 231:     "critical",
 232:   ]),
 233:   observations: z.string().min(1, "Observations are required"),
 234:   photos: z.array(z.string()).optional(),
 235: });
 236: 
 237: const careFormSchema = z.discriminatedUnion("type", [
 238:   wateringSchema,
 239:   fertilizingSchema,
 240:   observationSchema,
 241: ]);
 242: 
 243: type CareFormData = z.infer<typeof careFormSchema>;
 244: 
 245: interface CareLogFormProps {
 246:   onSuccess?: () => void;
 247:   onCancel?: () => void;
 248:   preselectedPlantId?: string;
 249:   preselectedActivityType?: "water" | "fertilize" | "observe";
 250: }
 251: 
 252: export function CareLogForm({
 253:   onSuccess,
 254:   onCancel,
 255:   preselectedPlantId,
 256:   preselectedActivityType,
 257: }: CareLogFormProps) {
 258:   const [plants, setPlants] = useState<PlantRecord[]>([]);
 259:   const [isLoading, setIsLoading] = useState(false);
 260:   const [submitError, setSubmitError] = useState<string | null>(null);
 261:   const [capturedPhotos, setCapturedPhotos] = useState<string[]>([]);
 262:   const [showDetailedTracking, setShowDetailedTracking] = useState(false);
 263:   const [searchParams] = useSearchParams();
 264: 
 265: 
 266:   const [moistureValidation, setMoistureValidation] =
 267:     useState<MoistureValidationResult | null>(null);
 268: 
 269: 
 270:   const [smartDefaults, setSmartDefaults] = useState<SmartDefaults | null>(
 271:     null
 272:   );
 273:   const [isLoadingDefaults, setIsLoadingDefaults] = useState(false);
 274: 
 275:   const {
 276:     register,
 277:     handleSubmit,
 278:     watch,
 279:     formState: { errors },
 280:     reset,
 281:     setValue,
 282:   } = useForm<CareFormData>({
 283:     resolver: zodResolver(careFormSchema),
 284:     defaultValues: {
 285:       plantId: preselectedPlantId || searchParams.get("plantId") || "",
 286:       type:
 287:         preselectedActivityType ||
 288:         (searchParams.get("type") as "water" | "fertilize" | "observe") ||
 289:         "water",
 290:       date: new Date().toISOString().split("T")[0],
 291:       waterValue: undefined,
 292:       waterUnit: "oz",
 293:     },
 294:   });
 295: 
 296:   const activityType = watch("type");
 297:   const selectedPlantId = watch("plantId");
 298:   const moistureBefore = watch("moistureBefore");
 299:   const moistureAfter = watch("moistureAfter");
 300: 
 301: 
 302:   useEffect(() => {
 303:     const loadPlants = async () => {
 304:       try {
 305:         const plantList = await plantService.getActivePlants();
 306:         setPlants(plantList);
 307:       } catch (error) {
 308:         console.error("Failed to load plants:", error);
 309:         toast.error("Failed to load plants");
 310:       }
 311:     };
 312: 
 313:     loadPlants();
 314:   }, []);
 315: 
 316:   useEffect(() => {
 317:     const plantIdToSet = preselectedPlantId || searchParams.get("plantId");
 318:     if (plantIdToSet && plants.length > 0) {
 319:       const plant = plants.find((p) => p.id === plantIdToSet);
 320:       if (plant) {
 321:         setValue("plantId", plantIdToSet);
 322:       }
 323:     }
 324:   }, [plants, preselectedPlantId, searchParams, setValue]);
 325: 
 326:   useEffect(() => {
 327:     const activityTypeToSet =
 328:       preselectedActivityType || searchParams.get("type");
 329:     if (
 330:       activityTypeToSet &&
 331:       ["water", "fertilize", "observe"].includes(activityTypeToSet)
 332:     ) {
 333:       setValue("type", activityTypeToSet as "water" | "fertilize" | "observe");
 334:     }
 335:   }, [searchParams, preselectedActivityType, setValue]);
 336: 
 337: 
 338:   useEffect(() => {
 339:     const loadSmartDefaults = async () => {
 340:       if (!selectedPlantId || !plants.length) {
 341:         setSmartDefaults(null);
 342:         return;
 343:       }
 344: 
 345:       const plant = plants.find((p) => p.id === selectedPlantId);
 346:       if (!plant) return;
 347: 
 348:       try {
 349:         setIsLoadingDefaults(true);
 350:         const defaults = await SmartDefaultsService.getDefaultsForPlant(plant);
 351:         setSmartDefaults(defaults);
 352: 
 353: 
 354:         if (activityType === "water" && defaults?.watering) {
 355:           setValue("waterValue", defaults.watering.suggestedAmount);
 356:           setValue("waterUnit", defaults.watering.unit);
 357:         }
 358:       } catch (error) {
 359:         console.error("Error loading smart defaults:", error);
 360:       } finally {
 361:         setIsLoadingDefaults(false);
 362:       }
 363:     };
 364: 
 365:     loadSmartDefaults();
 366:   }, [selectedPlantId, plants, activityType, setValue]);
 367: 
 368: 
 369:   const handleQuickComplete = (values: QuickCompletionValues) => {
 370:     Object.entries(values).forEach(([key, value]) => {
 371:       if (value !== undefined) {
 372:         setValue(key as keyof CareFormData, value);
 373:       }
 374:     });
 375:   };
 376: 
 377: 
 378:   const getPlantMoistureProtocol = useCallback(
 379:     async (plantId: string) => {
 380:       const plant = plants.find((p) => p.id === plantId);
 381:       if (!plant) return null;
 382: 
 383:       try {
 384:         const variety = await varietyService.getVariety(plant.varietyId);
 385:         if (!variety) return null;
 386: 
 387: 
 388:         const currentStage = calculateCurrentStage(
 389:           plant.plantedDate,
 390:           variety.growthTimeline
 391:         );
 392: 
 393: 
 394:         return extractMoistureRangesForStage(variety, currentStage);
 395:       } catch (error) {
 396:         console.error("Error fetching plant moisture protocol:", error);
 397:         return null;
 398:       }
 399:     },
 400:     [plants]
 401:   );
 402: 
 403: 
 404:   const getMoistureValidationForPlant = useCallback(
 405:     async (
 406:       plantId: string,
 407:       moistureBefore?: number,
 408:       moistureAfter?: number
 409:     ): Promise<MoistureValidationResult | null> => {
 410:       const protocol = await getPlantMoistureProtocol(plantId);
 411:       if (!protocol) return null;
 412: 
 413:       const validations: MoistureValidationMessage[] = [];
 414: 
 415: 
 416:       if (moistureBefore !== undefined) {
 417:         const [triggerMin, triggerMax] = protocol.trigger;
 418:         if (moistureBefore >= triggerMin && moistureBefore <= triggerMax) {
 419:           validations.push({
 420:             field: "before",
 421:             message: `✓ Perfect timing! ${triggerMin}-${triggerMax} is ideal for watering.`,
 422:             color: "text-green-600",
 423:           });
 424:         } else if (moistureBefore > triggerMax) {
 425:           validations.push({
 426:             field: "before",
 427:             message: `ℹ️ Plant still moist (${triggerMin}-${triggerMax} recommended for watering).`,
 428:             color: "text-blue-600",
 429:           });
 430:         } else {
 431:           validations.push({
 432:             field: "before",
 433:             message: `⚠️ Very dry! Watering at ${triggerMin}-${triggerMax} prevents stress.`,
 434:             color: "text-orange-600",
 435:           });
 436:         }
 437:       }
 438: 
 439: 
 440:       if (moistureAfter !== undefined) {
 441:         const [targetMin, targetMax] = protocol.target;
 442:         if (moistureAfter >= targetMin && moistureAfter <= targetMax) {
 443:           validations.push({
 444:             field: "after",
 445:             message: `✓ Perfect! Target range ${targetMin}-${targetMax} achieved.`,
 446:             color: "text-green-600",
 447:           });
 448:         } else if (moistureAfter > targetMax) {
 449:           validations.push({
 450:             field: "after",
 451:             message: `⚠️ Over-watered. Target is ${targetMin}-${targetMax}. Allow drying time.`,
 452:             color: "text-orange-600",
 453:           });
 454:         } else {
 455:           validations.push({
 456:             field: "after",
 457:             message: `ℹ️ Could use more water. Target: ${targetMin}-${targetMax}.`,
 458:             color: "text-blue-600",
 459:           });
 460:         }
 461:       }
 462: 
 463: 
 464:       const sourceMessages = {
 465:         protocol: `Using ${protocol.varietyName} ${protocol.currentStage} stage protocol`,
 466:         category: `Using category-based guidance for ${protocol.currentStage} stage`,
 467:         universal: `Using universal defaults (variety protocol incomplete)`,
 468:       };
 469: 
 470:       validations.push({
 471:         field: "source",
 472:         message: sourceMessages[protocol.source],
 473:         color: protocol.isDefault ? "text-muted-foreground" : "text-foreground",
 474:       });
 475: 
 476:       return {
 477:         validations,
 478:         isValid: true,
 479:       };
 480:     },
 481:     [getPlantMoistureProtocol]
 482:   );
 483: 
 484: 
 485:   useEffect(() => {
 486:     if (selectedPlantId && (moistureBefore || moistureAfter)) {
 487:       getMoistureValidationForPlant(
 488:         selectedPlantId,
 489:         moistureBefore,
 490:         moistureAfter
 491:       ).then(setMoistureValidation);
 492:     } else {
 493:       setMoistureValidation(null);
 494:     }
 495:   }, [
 496:     selectedPlantId,
 497:     moistureBefore,
 498:     moistureAfter,
 499:     getMoistureValidationForPlant,
 500:   ]);
 501: 
 502:   const onSubmit = async (data: CareFormData) => {
 503:     try {
 504:       setIsLoading(true);
 505:       setSubmitError(null);
 506: 
 507: 
 508:       let careDetails: CareActivityDetails;
 509: 
 510:       switch (data.type) {
 511:         case "water": {
 512:           const wateringDetails: WateringDetails = {
 513:             type: "water" as const,
 514:             amount: {
 515:               value: data.waterValue,
 516:               unit: data.waterUnit,
 517:             },
 518:             moistureReading:
 519:               showDetailedTracking && data.moistureBefore && data.moistureAfter
 520:                 ? {
 521:                     before: data.moistureBefore,
 522:                     after: data.moistureAfter,
 523:                     scale: "1-10" as const,
 524:                   }
 525:                 : undefined,
 526:             method: data.applicationMethod,
 527:             runoffObserved: data.runoffObserved,
 528:             notes: data.notes,
 529:           };
 530:           careDetails = wateringDetails;
 531:           break;
 532:         }
 533: 
 534:         case "fertilize": {
 535:           const fertilizingDetails: FertilizingDetails = {
 536:             type: "fertilize" as const,
 537:             product: data.product,
 538:             dilution: data.dilution,
 539:             amount: data.amount,
 540:             notes: data.notes,
 541:           };
 542:           careDetails = fertilizingDetails;
 543:           break;
 544:         }
 545: 
 546:         case "observe": {
 547:           const observationDetails: ObservationDetails = {
 548:             type: "observe" as const,
 549:             healthAssessment: data.healthAssessment,
 550:             observations: data.observations,
 551:             photos: capturedPhotos,
 552:             notes: data.notes,
 553:           };
 554:           careDetails = observationDetails;
 555:           break;
 556:         }
 557: 
 558:         default: {
 559:           throw new Error(`Unsupported activity type`);
 560:         }
 561:       }
 562: 
 563:       await careService.addCareActivity({
 564:         plantId: data.plantId,
 565:         type: data.type,
 566:         date: new Date(data.date),
 567:         details: careDetails as WateringDetails | FertilizingDetails,
 568:       });
 569: 
 570:       toast.success("Care activity logged successfully!");
 571:       reset();
 572:       setCapturedPhotos([]);
 573:       onSuccess?.();
 574:     } catch (error) {
 575:       console.error("Failed to log care activity:", error);
 576:       setSubmitError("Failed to log care activity. Please try again.");
 577:       toast.error("Failed to log care activity");
 578:     } finally {
 579:       setIsLoading(false);
 580:     }
 581:   };
 582: 
 583:   function renderWateringFields() {
 584:     const selectedPlant = plants.find((p) => p.id === selectedPlantId);
 585: 
 586:     return (
 587:       <>
 588:         {}
 589:         {smartDefaults?.watering && (
 590:           <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
 591:             <div className="flex items-start justify-between">
 592:               <div>
 593:                 <h4 className="text-sm font-medium text-blue-900 mb-1">
 594:                   💡 Smart Suggestion
 595:                 </h4>
 596:                 <p className="text-sm text-blue-700">
 597:                   {smartDefaults.watering.reasoning}
 598:                 </p>
 599:                 <div className="flex items-center mt-2 text-xs text-blue-600">
 600:                   <span
 601:                     className={`inline-block w-2 h-2 rounded-full mr-1 ${
 602:                       smartDefaults.watering.confidence === "high"
 603:                         ? "bg-green-500"
 604:                         : smartDefaults.watering.confidence === "medium"
 605:                         ? "bg-yellow-500"
 606:                         : "bg-red-500"
 607:                     }`}
 608:                   />
 609:                   {smartDefaults.watering.confidence} confidence
 610:                 </div>
 611:               </div>
 612:               <div className="text-right">
 613:                 <div className="text-lg font-semibold text-blue-900">
 614:                   {smartDefaults.watering.suggestedAmount}{" "}
 615:                   {smartDefaults.watering.unit}
 616:                 </div>
 617:                 <button
 618:                   type="button"
 619:                   onClick={() =>
 620:                     handleQuickComplete({
 621:                       waterValue: smartDefaults.watering!.suggestedAmount,
 622:                       waterUnit: smartDefaults.watering!.unit,
 623:                     })
 624:                   }
 625:                   className="text-xs text-blue-600 hover:text-blue-800 underline"
 626:                 >
 627:                   Use this amount
 628:                 </button>
 629:               </div>
 630:             </div>
 631:           </div>
 632:         )}
 633: 
 634:         {}
 635:         {selectedPlant && (
 636:           <QuickCompletionButtons
 637:             plant={selectedPlant}
 638:             activityType="water"
 639:             onQuickComplete={handleQuickComplete}
 640:             className="mb-4"
 641:           />
 642:         )}
 643: 
 644:         <div className="grid grid-cols-3 gap-4">
 645:           <div className="col-span-2">
 646:             <label
 647:               htmlFor="waterValue"
 648:               className="block text-sm font-medium text-foreground mb-2"
 649:             >
 650:               Water Amount *
 651:             </label>
 652:             <input
 653:               id="waterValue"
 654:               type="number"
 655:               step="0.1"
 656:               min="0.1"
 657:               {...register("waterValue", { valueAsNumber: true })}
 658:               className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
 659:               placeholder="Amount"
 660:             />
 661:             {"waterValue" in errors && errors.waterValue && (
 662:               <p className="mt-1 text-sm text-red-600">
 663:                 {errors.waterValue.message}
 664:               </p>
 665:             )}
 666:           </div>
 667: 
 668:           <div>
 669:             <label
 670:               htmlFor="waterUnit"
 671:               className="block text-sm font-medium text-foreground mb-2"
 672:             >
 673:               Unit *
 674:             </label>
 675:             <select
 676:               id="waterUnit"
 677:               {...register("waterUnit")}
 678:               className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
 679:             >
 680:               <option value="oz">oz</option>
 681:               <option value="ml">ml</option>
 682:               <option value="cups">cups</option>
 683:               <option value="liters">liters</option>
 684:               <option value="gallons">gallons</option>
 685:             </select>
 686:           </div>
 687:         </div>
 688: 
 689:         {}
 690:         <div className="flex items-center">
 691:           <input
 692:             id="showDetailedTracking"
 693:             type="checkbox"
 694:             checked={showDetailedTracking}
 695:             onChange={(e) => setShowDetailedTracking(e.target.checked)}
 696:             className="h-4 w-4 text-garden-600 border-border rounded focus:ring-garden-500"
 697:           />
 698:           <label
 699:             htmlFor="showDetailedTracking"
 700:             className="ml-2 text-sm text-foreground"
 701:           >
 702:             📊 Track moisture readings & method
 703:           </label>
 704:         </div>
 705: 
 706:         {}
 707:         {showDetailedTracking && (
 708:           <div className="space-y-4 p-4 bg-background rounded-lg border border-border">
 709:             <h4 className="text-sm font-medium text-foreground">
 710:               Detailed Tracking
 711:             </h4>
 712: 
 713:             <div className="grid grid-cols-2 gap-4">
 714:               <div>
 715:                 <label
 716:                   htmlFor="moistureBefore"
 717:                   className="block text-sm font-medium text-foreground mb-2"
 718:                 >
 719:                   Moisture Before (1-10 scale)
 720:                 </label>
 721:                 <input
 722:                   id="moistureBefore"
 723:                   type="number"
 724:                   min="1"
 725:                   max="10"
 726:                   step="0.5"
 727:                   {...register("moistureBefore", { valueAsNumber: true })}
 728:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
 729:                   placeholder="e.g., 3"
 730:                 />
 731:                 <p className="mt-1 text-xs text-muted-foreground">
 732:                   1 = bone dry, 10 = waterlogged
 733:                 </p>
 734: 
 735:                 {}
 736:                 {moistureValidation?.validations
 737:                   ?.filter((v) => v.field === "before")
 738:                   .map((validation, idx) => (
 739:                     <p
 740:                       key={idx}
 741:                       className={`mt-1 text-xs ${validation.color} flex items-start`}
 742:                     >
 743:                       <span className="flex-shrink-0 mr-1">
 744:                         {validation.message.split(" ")[0]}
 745:                       </span>
 746:                       <span>
 747:                         {validation.message.substring(
 748:                           validation.message.indexOf(" ") + 1
 749:                         )}
 750:                       </span>
 751:                     </p>
 752:                   ))}
 753: 
 754:                 {"moistureBefore" in errors && errors.moistureBefore && (
 755:                   <p className="mt-1 text-sm text-red-600">
 756:                     {errors.moistureBefore.message}
 757:                   </p>
 758:                 )}
 759:               </div>
 760: 
 761:               <div>
 762:                 <label
 763:                   htmlFor="moistureAfter"
 764:                   className="block text-sm font-medium text-foreground mb-2"
 765:                 >
 766:                   Moisture After (1-10 scale)
 767:                 </label>
 768:                 <input
 769:                   id="moistureAfter"
 770:                   type="number"
 771:                   min="1"
 772:                   max="10"
 773:                   step="0.5"
 774:                   {...register("moistureAfter", { valueAsNumber: true })}
 775:                   className="w-full p-3 border border-border rounded-md focus:ring-2 focus:ring-garden-500"
 776:                   placeholder="e.g., 7"
 777:                 />
 778:                 <p className="mt-1 text-xs text-muted-foreground">
 779:                   Target range varies by plant - see protocol above
 780:                 </p>
 781: 
 782:                 {}
 783:                 {moistureValidation?.validations
 784:                   ?.filter((v) => v.field === "after")
 785:                   .map((validation, idx) => (
 786:                     <p
 787:                       key={idx}
 788:                       className={`mt-1 text-xs ${validation.color} flex items-start`}
 789:                     >
 790:                       <span className="flex-shrink-0 mr-1">
 791:                         {validation.message.split(" ")[0]}
 792:                       </span>
 793:                       <span>
 794:                         {validation.message.substring(
 795:                           validation.message.indexOf(" ") + 1
 796:                         )}
 797:                       </span>
 798:                     </p>
 799:                   ))}
 800: 
 801:                 {"moistureAfter" in errors && errors.moistureAfter && (
 802:                   <p className="mt-1 text-sm text-red-600">
 803:                     {errors.moistureAfter.message}
 804:                   </p>
 805:                 )}
 806:               </div>
 807:             </div>
 808: 
 809:             <div className="flex items-start">
 810:               <input
 811:                 id="runoffObserved"
 812:                 type="checkbox"
 813:                 {...register("runoffObserved")}
 814:                 className="mt-1 h-4 w-4 text-garden-600 border-border rounded focus:ring-garden-500"
 815:               />
 816:               <div className="ml-3">
 817:                 <label
 818:                   htmlFor="runoffObserved"
 819:                   className="text-sm font-medium text-foreground"
 820:                 >
 821:                   Observed water runoff from drainage holes
 822:                 </label>
 823:                 <p className="text-xs text-muted-foreground mt-1">
 824:                   Runoff indicates thorough watering and good drainage
 825:                 </p>
 826:               </div>
 827:             </div>
 828: 
 829:             {}
 830:             {moistureValidation?.validations
 831:               ?.filter((v) => v.field === "source")
 832:               .map((validation, idx) => (
 833:                 <div
 834:                   key={idx}
 835:                   className="mt-3 p-2 bg-background border border-border rounded-md"
 836:                 >
 837:                   <p className={`text-xs ${validation.color}`}>
 838:                     {validation.message}
 839:                   </p>
 840:                 </div>
 841:               ))}
 842:           </div>
 843:         )}
 844:       </>
 845:     );
 846:   }
 847: 
 848:   function renderFertilizingFields() {
 849:     const selectedPlant = plants.find((p) => p.id === selectedPlantId);
 850: 
 851:     return (
 852:       <>
 853:         {}
 854:         {smartDefaults?.fertilizer && (
 855:           <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
 856:             <h4 className="text-sm font-medium text-green-900 mb-2">
 857:               💡 Smart Suggestion
 858:             </h4>
 859:             <p className="text-sm text-green-700 mb-3">
 860:               {smartDefaults.fertilizer.reasoning}
 861:             </p>
 862:             <div className="space-y-2">
 863:               {smartDefaults.fertilizer.products.map((product, index) => (
 864:                 <button
 865:                   key={index}
 866:                   type="button"
 867:                   onClick={() =>
 868:                     handleQuickComplete({
 869:                       product: product.name,
 870:                       dilution: product.dilution,
 871:                       amount: product.amount,
 872:                     })
 873:                   }
 874:                   className="block w-full text-left p-2 bg-card border border-green-200 rounded hover:bg-green-50 transition-colors"
 875:                 >
 876:                   <div className="font-medium text-green-900">
 877:                     {product.name}
 878:                   </div>
 879:                   <div className="text-xs text-green-600">
 880:                     {product.dilution} • {product.amount}
 881:                   </div>
 882:                 </button>
 883:               ))}
 884:             </div>
 885:           </div>
 886:         )}
 887: 
 888:         {}
 889:         {selectedPlant && (
 890:           <QuickCompletionButtons
 891:             plant={selectedPlant}
 892:             activityType="fertilize"
 893:             onQuickComplete={handleQuickComplete}
 894:             className="mb-4"
 895:           />
 896:         )}
 897: 
 898:         <div>
 899:           <label
 900:             htmlFor="product"
 901:             className="block text-sm font-medium text-foreground mb-2"
 902:           >
 903:             Fertilizer Product *
 904:           </label>
 905:           <input
 906:             id="product"
 907:             type="text"
 908:             {...register("product")}
 909:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
 910:             placeholder="e.g., Neptune's Harvest Fish & Seaweed"
 911:           />
 912:           {"product" in errors && errors.product && (
 913:             <p className="mt-1 text-sm text-red-600">
 914:               {errors.product.message}
 915:             </p>
 916:           )}
 917:         </div>
 918: 
 919:         <div className="grid grid-cols-2 gap-4">
 920:           <div>
 921:             <label
 922:               htmlFor="dilution"
 923:               className="block text-sm font-medium text-foreground mb-2"
 924:             >
 925:               Dilution Ratio *
 926:             </label>
 927:             <input
 928:               id="dilution"
 929:               type="text"
 930:               {...register("dilution")}
 931:               className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
 932:               placeholder="e.g., 1 tbsp/gal, half strength"
 933:             />
 934:             {"dilution" in errors && errors.dilution && (
 935:               <p className="mt-1 text-sm text-red-600">
 936:                 {errors.dilution.message}
 937:               </p>
 938:             )}
 939:           </div>
 940: 
 941:           <div>
 942:             <label
 943:               htmlFor="amount"
 944:               className="block text-sm font-medium text-foreground mb-2"
 945:             >
 946:               Application Amount *
 947:             </label>
 948:             <input
 949:               id="amount"
 950:               type="text"
 951:               {...register("amount")}
 952:               className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
 953:               placeholder="e.g., 16 oz, apply until runoff"
 954:             />
 955:             {"amount" in errors && errors.amount && (
 956:               <p className="mt-1 text-sm text-red-600">
 957:                 {errors.amount.message}
 958:               </p>
 959:             )}
 960:           </div>
 961:         </div>
 962:       </>
 963:     );
 964:   }
 965: 
 966:   function renderObservationFields() {
 967:     return (
 968:       <>
 969:         <div>
 970:           <label
 971:             htmlFor="healthAssessment"
 972:             className="block text-sm font-medium text-foreground mb-2"
 973:           >
 974:             Health Assessment *
 975:           </label>
 976:           <select
 977:             id="healthAssessment"
 978:             {...register("healthAssessment")}
 979:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
 980:           >
 981:             <option value="">Select assessment...</option>
 982:             <option value="excellent">🌟 Excellent</option>
 983:             <option value="good">😊 Good</option>
 984:             <option value="fair">😐 Fair</option>
 985:             <option value="concerning">😟 Concerning</option>
 986:             <option value="critical">🚨 Critical</option>
 987:           </select>
 988:           {"healthAssessment" in errors && errors.healthAssessment && (
 989:             <p className="mt-1 text-sm text-red-600">
 990:               {errors.healthAssessment.message}
 991:             </p>
 992:           )}
 993:         </div>
 994: 
 995:         <div>
 996:           <label
 997:             htmlFor="observations"
 998:             className="block text-sm font-medium text-foreground mb-2"
 999:           >
1000:             Observations *
1001:           </label>
1002:           <textarea
1003:             id="observations"
1004:             rows={4}
1005:             {...register("observations")}
1006:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
1007:             placeholder="Describe what you observed (growth, color, pests, diseases, etc.)"
1008:           />
1009:           {"observations" in errors && errors.observations && (
1010:             <p className="mt-1 text-sm text-red-600">
1011:               {errors.observations.message}
1012:             </p>
1013:           )}
1014:         </div>
1015: 
1016:         <PhotoCapture
1017:           photos={capturedPhotos}
1018:           onPhotosChange={setCapturedPhotos}
1019:           maxPhotos={5}
1020:         />
1021:       </>
1022:     );
1023:   }
1024: 
1025:   function renderActivitySpecificFields() {
1026:     switch (activityType) {
1027:       case "water":
1028:         return renderWateringFields();
1029:       case "fertilize":
1030:         return renderFertilizingFields();
1031:       case "observe":
1032:         return renderObservationFields();
1033:       default:
1034:         return null;
1035:     }
1036:   }
1037: 
1038:   return (
1039:     <div className="max-w-2xl mx-auto p-6 bg-card rounded-lg shadow-sm">
1040:       <div className="mb-6">
1041:         <h2 className="text-2xl font-bold text-foreground mb-2">
1042:           Log Care Activity
1043:         </h2>
1044:         <p className="text-muted-foreground">
1045:           Record care activities to track your plants' progress and optimize
1046:           their health.
1047:         </p>
1048:       </div>
1049: 
1050:       <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
1051:         {submitError && (
1052:           <div className="bg-red-50 border border-red-200 rounded-md p-4">
1053:             <p className="text-sm text-red-600">{submitError}</p>
1054:           </div>
1055:         )}
1056: 
1057:         {}
1058:         <div>
1059:           <label
1060:             htmlFor="plantId"
1061:             className="block text-sm font-medium text-foreground mb-2"
1062:           >
1063:             Plant *
1064:           </label>
1065:           <select
1066:             id="plantId"
1067:             {...register("plantId")}
1068:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
1069:           >
1070:             <option value="">Select a plant...</option>
1071:             {plants.map((plant) => (
1072:               <option key={plant.id} value={plant.id}>
1073:                 {plant.name || plant.varietyName} - {plant.location}
1074:               </option>
1075:             ))}
1076:           </select>
1077:           {errors.plantId && (
1078:             <p className="mt-1 text-sm text-red-600">
1079:               {errors.plantId.message}
1080:             </p>
1081:           )}
1082:         </div>
1083: 
1084:         {}
1085:         <div>
1086:           <label
1087:             htmlFor="type"
1088:             className="block text-sm font-medium text-foreground mb-2"
1089:           >
1090:             Activity Type *
1091:           </label>
1092:           <select
1093:             id="type"
1094:             {...register("type")}
1095:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
1096:           >
1097:             <option value="water">💧 Watering</option>
1098:             <option value="fertilize">🌱 Fertilizing</option>
1099:             <option value="observe">👁️ Observation</option>
1100:             {
1101: }
1102:           </select>
1103:         </div>
1104: 
1105:         {}
1106:         <div>
1107:           <label
1108:             htmlFor="date"
1109:             className="block text-sm font-medium text-foreground mb-2"
1110:           >
1111:             Date *
1112:           </label>
1113:           <input
1114:             id="date"
1115:             type="date"
1116:             {...register("date")}
1117:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
1118:           />
1119:           {errors.date && (
1120:             <p className="mt-1 text-sm text-red-600">{errors.date.message}</p>
1121:           )}
1122:         </div>
1123: 
1124:         {}
1125:         {renderActivitySpecificFields()}
1126: 
1127:         {}
1128:         <div>
1129:           <label
1130:             htmlFor="notes"
1131:             className="block text-sm font-medium text-foreground mb-2"
1132:           >
1133:             Notes (optional)
1134:           </label>
1135:           <textarea
1136:             id="notes"
1137:             rows={3}
1138:             {...register("notes")}
1139:             className="w-full p-3 bg-card text-card-foreground border border-border rounded-md focus:ring-2 focus:ring-ring focus:border-ring"
1140:             placeholder="Any additional observations or notes..."
1141:           />
1142:         </div>
1143: 
1144:         {}
1145:         <div className="flex gap-4">
1146:           <Button
1147:             type="submit"
1148:             variant="primary"
1149:             disabled={isLoading || isLoadingDefaults}
1150:             className="flex-1"
1151:           >
1152:             {isLoading ? "Logging..." : "Log Activity"}
1153:           </Button>
1154:           {onCancel && (
1155:             <Button type="button" variant="outline" onClick={onCancel}>
1156:               Cancel
1157:             </Button>
1158:           )}
1159:         </div>
1160:       </form>
1161:     </div>
1162:   );
1163: }

================
File: src/pages/dashboard/index.tsx
================
  1: import { useState, useEffect } from "react";
  2: import Navigation from "@/components/Navigation";
  3: import { Button } from "@/components/ui/Button";
  4: import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
  5: import { OfflineIndicator } from "@/components/ui/OfflineIndicator";
  6: import { useFirebaseAuth } from "@/hooks/useFirebaseAuth";
  7: import { useFirebasePlants } from "@/hooks/useFirebasePlants";
  8: import { useNavigate } from "react-router-dom";
  9: import { groupPlantsByConditions, PlantGroup } from "@/utils/plantGrouping";
 10: import PlantGroupCard from "@/components/plant/PlantGroupCard";
 11: import BulkActivityModal from "@/components/plant/BulkActivityModal";
 12: 
 13: export const Dashboard = () => {
 14:   const { plants, loading } = useFirebasePlants();
 15:   const { user, signOut } = useFirebaseAuth();
 16:   const navigate = useNavigate();
 17:   const [plantGroups, setPlantGroups] = useState<PlantGroup[]>([]);
 18: 
 19: 
 20:   const [bulkModalOpen, setBulkModalOpen] = useState(false);
 21:   const [selectedPlantIds, setSelectedPlantIds] = useState<string[]>([]);
 22:   const [selectedActivityType, setSelectedActivityType] = useState("");
 23:   const [selectedGroup, setSelectedGroup] = useState<PlantGroup | null>(null);
 24: 
 25:   useEffect(() => {
 26:     if (plants && plants.length > 0) {
 27:       const groups = groupPlantsByConditions(plants);
 28:       setPlantGroups(groups);
 29:     } else {
 30:       setPlantGroups([]);
 31:     }
 32:   }, [plants]);
 33: 
 34:   const handleBulkLogActivity = (plantIds: string[], activityType: string) => {
 35:     const group = plantGroups.find((g) =>
 36:       g.plants.some((p) => plantIds.includes(p.id))
 37:     );
 38: 
 39:     setSelectedPlantIds(plantIds);
 40:     setSelectedActivityType(activityType);
 41:     setSelectedGroup(group || null);
 42:     setBulkModalOpen(true);
 43:   };
 44: 
 45:   const closeBulkModal = () => {
 46:     setBulkModalOpen(false);
 47:     setSelectedPlantIds([]);
 48:     setSelectedActivityType("");
 49:     setSelectedGroup(null);
 50:   };
 51: 
 52:   if (loading) {
 53:     return (
 54:       <div className="min-h-screen bg-background flex items-center justify-center">
 55:         <div className="text-foreground">Loading...</div>
 56:       </div>
 57:     );
 58:   }
 59: 
 60:   return (
 61:     <>
 62:       <OfflineIndicator />
 63:       <div className="min-h-screen bg-background pb-20">
 64:         {}
 65:         <div className="bg-card border-b border-border sticky top-0 z-40">
 66:           <div className="max-w-6xl mx-auto px-4 py-4">
 67:             <div className="flex justify-between items-center">
 68:               <div className="flex items-center gap-3">
 69:                 <div className="text-2xl">🌱</div>
 70:                 <div>
 71:                   <h1 className="text-xl font-semibold text-foreground">
 72:                     SmartGarden
 73:                   </h1>
 74:                   <p className="text-sm text-muted-foreground">
 75:                     Welcome, {user?.displayName || user?.email}
 76:                   </p>
 77:                 </div>
 78:               </div>
 79:               <div className="flex items-center gap-2">
 80:                 <Button variant="outline" onClick={signOut}>
 81:                   Sign Out
 82:                 </Button>
 83:               </div>
 84:             </div>
 85:           </div>
 86:         </div>
 87: 
 88:         {}
 89:         <div className="max-w-6xl mx-auto px-4 py-6 space-y-8">
 90:           {}
 91:           <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
 92:             <Card className="bg-gradient-to-br from-primary/10 to-primary/5 border-primary/20">
 93:               <CardHeader className="pb-3">
 94:                 <CardTitle className="text-lg flex items-center gap-2">
 95:                   <span className="text-xl">🌿</span>
 96:                   Total Plants
 97:                 </CardTitle>
 98:               </CardHeader>
 99:               <CardContent>
100:                 <p className="text-3xl font-bold text-primary">
101:                   {plants?.length || 0}
102:                 </p>
103:                 <p className="text-sm text-muted-foreground">
104:                   Plants registered
105:                 </p>
106:               </CardContent>
107:             </Card>
108: 
109:             <Card className="bg-gradient-to-br from-accent/10 to-accent/5 border-accent/20">
110:               <CardHeader className="pb-3">
111:                 <CardTitle className="text-lg flex items-center gap-2">
112:                   <span className="text-xl">📅</span>
113:                   Today's Tasks
114:                 </CardTitle>
115:               </CardHeader>
116:               <CardContent>
117:                 <p className="text-3xl font-bold text-accent">0</p>
118:                 <p className="text-sm text-muted-foreground">Tasks due</p>
119:               </CardContent>
120:             </Card>
121: 
122:             <Card className="bg-gradient-to-br from-emerald-500/10 to-emerald-500/5 border-emerald-500/20 sm:col-span-2 lg:col-span-1">
123:               <CardHeader className="pb-3">
124:                 <CardTitle className="text-lg flex items-center gap-2">
125:                   <span className="text-xl">📊</span>
126:                   Garden Health
127:                 </CardTitle>
128:               </CardHeader>
129:               <CardContent>
130:                 <p className="text-3xl font-bold text-emerald-600">Great</p>
131:                 <p className="text-sm text-muted-foreground">
132:                   All systems green
133:                 </p>
134:               </CardContent>
135:             </Card>
136:           </div>
137: 
138:           {}
139:           {plantGroups.length === 0 && (
140:             <Card className="bg-gradient-to-br from-card to-muted/30">
141:               <CardContent className="text-center py-12">
142:                 <div className="text-6xl mb-4">🌱</div>
143:                 <h3 className="text-xl font-semibold mb-2 text-foreground">
144:                   Welcome to SmartGarden!
145:                 </h3>
146:                 <p className="text-muted-foreground mb-6 max-w-md mx-auto">
147:                   Start your gardening journey by adding your first plant. Track
148:                   growth, log care activities, and get personalized
149:                   recommendations.
150:                 </p>
151:                 <Button
152:                   onClick={() => navigate("/add-plant")}
153:                   size="lg"
154:                   className="bg-primary hover:bg-primary/90"
155:                 >
156:                   <span className="mr-2">🌿</span>
157:                   Add Your First Plant
158:                 </Button>
159:               </CardContent>
160:             </Card>
161:           )}
162: 
163:           {}
164:           {plantGroups.length > 0 && (
165:             <div className="space-y-4">
166:               <div className="flex justify-between items-center">
167:                 <h2 className="text-xl font-semibold text-foreground flex items-center gap-2">
168:                   <span className="text-2xl">🌿</span>
169:                   Your Plants
170:                 </h2>
171:                 <div className="flex gap-2">
172:                   <Button
173:                     variant="outline"
174:                     onClick={() => navigate("/plants")}
175:                     size="sm"
176:                   >
177:                     View All
178:                   </Button>
179:                   <Button
180:                     onClick={() => navigate("/add-plant")}
181:                     className="bg-primary hover:bg-primary/90"
182:                   >
183:                     <span className="mr-2">➕</span>
184:                     Add Plant
185:                   </Button>
186:                 </div>
187:               </div>
188: 
189:               {}
190:               <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
191:                 {plantGroups.slice(0, 6).map((group) => (
192:                   <PlantGroupCard
193:                     key={group.id}
194:                     group={group}
195:                     onBulkLogActivity={handleBulkLogActivity}
196:                   />
197:                 ))}
198:               </div>
199: 
200:               {}
201:               {plantGroups.length > 6 && (
202:                 <div className="text-center pt-4">
203:                   <Button variant="outline" onClick={() => navigate("/plants")}>
204:                     View All {plantGroups.length} Plant Groups
205:                   </Button>
206:                 </div>
207:               )}
208:             </div>
209:           )}
210:         </div>
211: 
212:         {}
213:         <Navigation />
214:       </div>
215: 
216:       {}
217:       <BulkActivityModal
218:         isOpen={bulkModalOpen}
219:         onClose={closeBulkModal}
220:         plantIds={selectedPlantIds}
221:         activityType={selectedActivityType}
222:         plantCount={selectedPlantIds.length}
223:         varietyName={selectedGroup?.varietyName || ""}
224:       />
225:     </>
226:   );
227: };




================================================================
End of Codebase
================================================================
